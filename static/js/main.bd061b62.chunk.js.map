{"version":3,"sources":["helpers/gps.ts","common/AlertModal.tsx","helpers/ramda.ts","graph/buildQuery.tsx","segments/map/PickupMap.graphql.ts","app/ThemeSwitchProvider.tsx","helpers/formats.ts","helpers/logger.ts","i18n.tsx","graph/generated.ts","config.ts","hooks/useAlertModal.ts","app/useRoot.tsx","common/Responsive.tsx","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","common/ErrorContainer.tsx","common/PageTitle.tsx","app/IdentifyGuest.tsx","app/ResetPersistenceButton.tsx","app/App.tsx","app/Router.tsx","helpers/offline.ts","hooks/useAnalytics.ts","helpers/persistModel.ts","models/BaseModel.ts","models/AuthModel.ts","models/BannerModel.ts","models/BusinessModel.graphql.ts","models/BusinessModel.ts","models/CartModel.ts","models/ConfigModel.ts","models/LocationModel.ts","models/MapModel.ts","models/OrderModel.graphql.ts","models/OrderModel.ts","models/UserModel.ts","models/RootModel.ts","index.tsx","graph/createClient.ts","common/Buttons.tsx","common/RouteButton.tsx","common/Pacman.tsx"],"names":["__webpack_require__","d","__webpack_exports__","gpsToLatLngLit","gpsToLatLng","latLngToGps","gps","lat","Number","latitude","lng","longitude","google","maps","LatLng","latLng","AlertModal","_ref","isOpen","headerText","onClose","children","modalProps","Object","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_3__","assign","toggle","className","data-testid","tag","Container","ramda__WEBPACK_IMPORTED_MODULE_0__","buildQuery","query","render","renderFragment","_ref$renderLoading","renderLoading","renderError","props","react__WEBPACK_IMPORTED_MODULE_1___default","react_apollo__WEBPACK_IMPORTED_MODULE_2__","result","loading","data","_common_Pacman__WEBPACK_IMPORTED_MODULE_3__","error","Fragment","PickupBranchFragment","gql","_templateObject","FCompanyBranchStatusFragmentDoc","FGeoPointFragmentDoc","FAddressFragmentDoc","PickupMapBrandQuery","_templateObject2","PickupMapBranchQuery","_templateObject3","QueryPickupMapBrand","QueryPickupMapBranch","ThemeSwitchProvider","React","memo","branchId","business","useRoot","useQThemeStyle","brandId","skip","isValid","theme","styles","defaultTheme","primary","secondary","tertiary","primaryHover","calcHoverColor","secondaryHover","tertiaryHover","tertiaryText","unselected","unselectedHover","unselectedText","storeLogo","storeLogoMobile","backgroundCart","undefined","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","active","main","mainSecondary","getTheme","react__WEBPACK_IMPORTED_MODULE_3___default","styled_components__WEBPACK_IMPORTED_MODULE_1__","useTheme","useContext","ThemeContext","inputColor","Color","lighten","hsl","string","formatTime","formatAddress","date_fns_fp__WEBPACK_IMPORTED_MODULE_0__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_1__","currentLocale","n","csLocale","formatLocale","formatWithOptions","locale","format","parse","address","street","houseNumber","concat","city","state","logMain","logMap","logDebug","logGraph","logPersist","logOrder","logLang","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","debug","i18n","setupI18n","I18nManager","forceLanguage","_useState","useState","_useState2","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","isReady","setReady","_useState3","languages","LocaleResolver","DETECTORS","UrlDetector","NavigatorDetector","TRANSFORMERS","LanguageOnlyTransformer","getLocales","join","find","loc","appConfig","supportedLanguages","includes","fallbackLanguage","detectLanguage","language","useAsyncEffect","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","mark","_callee","wrap","_context","prev","next","changeLanguage","stop","react__WEBPACK_IMPORTED_MODULE_8___default","_common_Pacman__WEBPACK_IMPORTED_MODULE_9__","_lingui_react__WEBPACK_IMPORTED_MODULE_5__","_x","_changeLanguage","apply","this","arguments","_callee2","lang","_context2","abrupt","loadCatalog","activate","_callee3","catalog","_context3","sent","load","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderStateEnum","OrderBillingTypeEnum","PaymentGateEnum","PaymentTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","ZoneTypeEnum","ShiftUserStateEnum","OrderOriginCategoryEnum","WareCategoryTypeEnum","SubscriptionActionType","WareRequirementEnum","SettingTypeEnum","GCompanyBranchFragmentDoc","GCreateOrderFragmentDoc","FJsonAddressFragmentDoc","_templateObject4","_templateObject5","_templateObject6","GPickupBranchFragmentDoc","_templateObject7","FPromoCodeFragmentDoc","_templateObject8","FRecipeFragmentDoc","_templateObject9","FCartItemFragmentDoc","_templateObject10","FPriceFragmentDoc","_templateObject11","FCartGoodsFragmentDoc","_templateObject12","FCartStaticFragmentDoc","_templateObject13","FCartSummaryFragmentDoc","_templateObject14","FRecipeDetailFragmentDoc","_templateObject15","FOrderFinishedFragmentDoc","_templateObject16","FCartPresenceFragmentDoc","_templateObject17","FFoodMenuCategoryFragmentDoc","_templateObject18","FFoodMenuRecipeFragmentDoc","_templateObject19","FShopOpeningHoursFragmentDoc","_templateObject20","_templateObject21","_templateObject22","_templateObject23","_templateObject24","GInitialLocationDocument","_templateObject25","useGInitialLocation","variables","baseOptions","Hooks","_templateObject26","_templateObject27","_templateObject28","_templateObject29","_templateObject30","QThemeStyleDocument","_templateObject31","GResolveLocationDocument","_templateObject32","MAddToCartDocument","_templateObject33","useMAddToCart","MChangeCartItemDocument","_templateObject34","useMChangeCartItem","MRemoveCartItemDocument","_templateObject35","useMRemoveCartItem","QCartDocument","_templateObject36","useQCart","QCartItemDocument","_templateObject37","useQCartItem","QCartRecipeDocument","_templateObject38","useQCartRecipe","QOrderFinishDocument","_templateObject39","useQOrderFinish","QFoodMenuDocument","_templateObject40","useQFoodMenu","QFoodMenuCartPresenceDocument","_templateObject41","useQFoodMenuCartPresence","MOrderDeliveryTimeDocument","_templateObject42","useMOrderDeliveryTime","_templateObject43","MOrderPromoAddDocument","_templateObject44","useMOrderPromoAdd","MOrderPromoRemoveDocument","_templateObject45","useMOrderPromoRemove","MOrderTipUpdateDocument","_templateObject46","useMOrderTipUpdate","MSubmitOrderDocument","_templateObject47","useMSubmitOrder","QOrderFormDocument","_templateObject48","useQOrderForm","QOrderPaymentStatusDocument","_templateObject49","QOrderPromoCodesDocument","_templateObject50","useQOrderPromoCodes","QOrderTimePickerDocument","_templateObject51","useQOrderTimePicker","QSmartBannerDocument","_templateObject52","useQSmartBanner","QShopHeaderDocument","_templateObject53","useQShopHeader","endpoint","persistenceKey","process","REACT_APP_LOCAL_KEY","googleMapsApi","redirectOnFail","sentryDSN","pageTitleSuffix","analytics","useAlertModal","_React$useState","_React$useState2","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","alertModal","setAlertModal","header","body","RootProvider","react__WEBPACK_IMPORTED_MODULE_0__","rootContext","createContext","root","Error","Provider","mobileBreakpoint","Desktop","react_responsive__WEBPACK_IMPORTED_MODULE_2___default","minWidth","Mobile","maxAspectRatio","maxWidth","MobileLandscape","screen","minAspectRatio","mediaDesktop","css","mediaMobile","map","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","webpackAsyncContext","req","ids","e","then","id","t","Promise","resolve","code","keys","module","exports","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","makeError","message","_","ErrorContainer","errorGuard","_ref$prod","prod","slicedToArray","errorKind","setErrorKind","_useAlertModal","_useAlertModal2","makeAlert","onRetry","useCallback","onUnhandledError","indexOf","isChunkError","Sentry","withScope","scope","setLevel","Severity","Debug","captureException","flushSentry","window","location","reload","isApolloError","isNetworkUnreachableError","VError","onNetworkError","isUnreachable","react_default","onOperationError","onUserErrors","messages","msg","key","history","useRouterContext","_React$useState3","_React$useState4","modalOpen","setModalOpen","onFeedback","showReportDialog","labelClose","title","onRestart","replace","routerBasePath","_lingui_react","Buttons","onClick","tools_dist","onError","DeveloperErrorBoundary","require","default","dist","PageTitle","useObserver","react_document_title_default","branch","brand","name","IdentifyGuest","auth","useEffect","autorun","userId","token","configureScope","setUser","username","setExtra","ResetPersistenceButton","LandscapeMessage","styled","div","withConfig","displayName","componentId","DesktopApp","lazy","all","bind","MobileApp","App","ErrorContainer_ErrorContainer","IdentifyGuest_IdentifyGuest","PageTitle_PageTitle","Responsive","ResetPersistenceButton_ResetPersistenceButton","Router","react_router_dom","basename","isOnline","observable","box","navigator","onLine","addEventListener","set","isNetworkOnline","get","ReactGA","initialize","gaOptions","siteSpeedSampleRate","persistModel","_persistModel","model","modelName","stateKey","writeState","regenerator_default","getType","snapshot","localforage","setItem","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","BaseModel","types","views","self","log","getPath","trim","env","getEnv","client","getRoot","AuthModel","named","maybeNull","Boolean","length","actions","authenticate","addBreadcrumb","category","level","Info","fetching","fetch","asyncToGenerator","_ref2","fetchToken","String","authLink","setContext","headers","Authorization","attachAuthLinkToClient","link","url","options","response","Accept","json","BannerModel","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","isMobileApp","differenceInDays","setInstalledNow","setClosedNow","CompanyBranchFragment","BusinessLookupQuery","BusinessModel","banners","volatile","isBrand","country","orderOrigin","Web","companyId","company","brandOrBranch","requestedCode","REACT_APP_BUSINESS_CODE","URL","href","searchParams","codeParam","updateFromLookup","lookup","knownBasePath","mockBranchData","queryBusiness","_queryBusiness","redirectAway","setTag","ensureBannerForCurrentBranch","has","CartModel","withGoods","withPresence","updateDisplay","isMobile","showGoods","ConfigModel","orderItemsMax","LocationModel","number","searchValue","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","geolocationPoint","isResolving","isGeolocationAvailable","geolocation","hasLocation","hasAddress","isDeliveryAddress","hasFinishedSearch","geoPoint","resolutionTarget","setLocation","setResolutionResult","finalAddress","companyBranch","isValidAddress","gpsCoordinates","setVolatileProps","disableGeolocation","clearAddress","setIsResolving","resolver","vars","_ref3","objectSpread","resolveLocation","validateUserLocation","withUserAddress","withUserLocation","userLocation","useGeolocationResult","point","attemptGeolocation","_this","getCurrentPosition","_ref4","coords","accuracy","err","alert","enableHighAccuracy","maximumAge","GPSCzechia","MapModel","zoom","optional","mapRef","clickPoint","center","setMapRef","ref","updateZoom","getZoom","updatePosition","getCenter","panToLocation","panTo","ev","clearClickPoint","CreateOrderFragment","OrderModel_graphql_templateObject","CreatePickupOrderMutation","OrderModel_graphql_templateObject2","CreateDeliveryOrderMutation","VamStatusQuery","OrderModel","orderId","orderMethod","Messenger","payment","Gopay","deliverAt","firstname","lastname","email","phone","phonePrefix","note","tips","isSubmitting","isGoPayChecking","submitErrors","paymentErrors","agreements","lastActiveRecipeId","isVamInitialized","timePickerOpen","delayedOrderEnabled","addToCartRecipeId","changeCartItemId","hasOrder","usingDeliveryOrderMethod","usingPickupOrderMethod","Pickup","usingPaymentMethodWithTips","hasErrors","defaultPhonePrefix","getSubmitVariables","formValues","customer","firstName","lastName","emails","phones","parseInt","paymentGate","isoDate","filter","RM","propEq","prop","useOrderMethod","method","setPaymentMethod","setBranch","orderCreated","orderPaid","orderCancel","order","submitFinished","submitFailed","errors","vamFailed","clearErrors","goPayStatusCheck","checking","useAgreements","Array","isArray","setUsedRecipeId","recipeId","openTimePicker","closeTimePicker","setTips","setDeliverAt","enableDelayedOrder","addToCart","changeCartItem","itemId","rememberFormValues","values","user","shouldRememberForm","createDeliveryOrder","_createDeliveryOrder","_self$root","mutate","fetchPolicy","mutation","initVam","createPickupOrder","_createPickupOrder","prefetchPickup","prefetchFoodMenu","prefetchFood","_initVam","input","vamStatus","forEach","updateVam","_updateVam","_callee4","_context4","_x2","init","UserModel","rememberForm","boolean","showAppleBanner","closingTimeAlertHidden","orderLimitAlertHidden","showClosingTime","hideClosingTime","showOrderLimit","hideOrderLimit","setFormRememberYes","setFormRememberNo","hideAppleBanner","RootModel","cart","config","persistedModels","initialSnapshot","afterCreate","_getSnapshot","objectWithoutProperties","reset","_init","useBatching","hash","createDefaultApolloClient","createLogLink","enabled","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","offlineLink","QueueLink","open","close","createOfflineLink","createNetworkLink","createApolloClient","create","createRootModel","ReactDOM","reportPage","pageview","useAnalytics","useSentryInit","Suspense","fallback","Pacman","value","Router_Router","src_app_App","document","getElementById","updateWorker","register","autoUpdate","onUpdate","sw","setTimeout","confirm","postMessage","serviceWorker","event","PrimaryButton","Button","themeProp","SecondaryButton","PrimaryRoutedButton","to","buttonProps","reactstrap_es","MobileHeaderButton","isConfirm","SelectButtonThemed","selected","_ref5","_ref6","react__WEBPACK_IMPORTED_MODULE_0___default","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","_ref$noMargin","noMargin","style","display","alignSelf","justifyContent","marginTop"],"mappings":"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","file":"static/js/main.bd061b62.chunk.js","sourcesContent":["import { FGeoPointFragment } from '../graph/generated'\n\nexport type GeoPoint = Omit<FGeoPointFragment, '__typename'>\n\nexport const gpsToLatLngLit = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import './Modal.css'\n\nimport React from 'react'\nimport {\n  Container,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalProps,\n} from 'reactstrap'\n\ninterface IProps extends ModalProps {\n  isOpen: boolean\n  headerText: string\n  onClose?(): void\n}\n\nexport const AlertModal: React.FC<IProps> = ({\n  isOpen,\n  headerText,\n  onClose,\n  children,\n  ...modalProps\n}) => (\n  <Modal\n    isOpen={isOpen}\n    toggle={onClose}\n    className=\"modal__container\"\n    {...modalProps}\n    data-testid=\"alertModal\"\n  >\n    <ModalHeader tag={Container} toggle={onClose} className=\"modal__header\">\n      <span>{headerText}</span>\n    </ModalHeader>\n    <ModalBody className=\"modal__body\">\n      <div className=\"modal__body__content\">{children}</div>\n    </ModalBody>\n  </Modal>\n)\n","import * as RM from 'ramda'\n\nexport { RM }\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\n\nimport Pacman from '../common/Pacman'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n  }\n  const GQuery: React.FC<IProps> = ({\n    render,\n    renderFragment,\n    renderLoading = true,\n    renderError = true,\n    children,\n    ...props\n  }) => (\n    // @ts-ignore Some weird changes in @types/react\n    <Query query={query} {...props}>\n      {result => {\n        if (result.loading || !result.data) {\n          if (typeof renderLoading === 'function') {\n            return renderLoading(result)\n          } else if (renderLoading === true) {\n            return <Pacman />\n          }\n        }\n        if (result.error) {\n          throw result.error\n        }\n        if (result.data) {\n          if (renderFragment) {\n            return <>{renderFragment(result.data, result)}</>\n          }\n          if (render) {\n            return render(result.data, result)\n          }\n        }\n        return children || null\n      }}\n    </Query>\n  )\n\n  return GQuery\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport {\n  FAddressFragmentDoc,\n  FCompanyBranchStatusFragmentDoc,\n  FGeoPointFragmentDoc,\n} from '../../graph/generated'\nimport { GPickupMapBranch, GPickupMapBrand } from '../../graph/types'\n\nconst PickupBranchFragment = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n  ${FCompanyBranchStatusFragmentDoc}\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n`\n\nexport const PickupMapBrandQuery = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const PickupMapBranchQuery = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const QueryPickupMapBrand = buildQuery<\n  GPickupMapBrand.Query,\n  GPickupMapBrand.Variables\n>(PickupMapBrandQuery)\n\nexport const QueryPickupMapBranch = buildQuery<\n  GPickupMapBranch.Query,\n  GPickupMapBranch.Variables\n>(PickupMapBranchQuery)\n","import Color from 'color'\nimport React from 'react'\nimport { ThemeContext, ThemeProvider } from 'styled-components/macro'\n\nimport { QThemeStyleStyles, useQThemeStyle } from '../graph/generated'\nimport { useRoot } from './useRoot'\n\ninterface IProps {\n  branchId?: MaybeID\n  children: React.ReactChild\n}\n\nconst ThemeSwitchProvider = React.memo<IProps>(({ children, branchId }) => {\n  const { business } = useRoot()\n  const { data } = useQThemeStyle(\n    {\n      brandId: branchId ? null : business.brandId,\n      branchId: branchId || business.branchId,\n    },\n    {\n      skip: !business.isValid,\n    },\n  )\n  const theme = getTheme(data && data.theme && data.theme.styles)\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>\n})\n\nexport function useTheme() {\n  return React.useContext(ThemeContext) as TTheme\n}\n\nexport function getTheme(styles?: QThemeStyleStyles) {\n  // Fallback colors\n  const defaultPrimary = '#54984a'\n  const defaultSecondary = '#99230e'\n  const defaultTertiary = '#d9a700'\n\n  const defaultTheme = {\n    primary: defaultPrimary,\n    secondary: defaultSecondary,\n    tertiary: defaultTertiary,\n    primaryHover: calcHoverColor(defaultPrimary),\n    secondaryHover: calcHoverColor(defaultPrimary),\n    tertiaryHover: calcHoverColor(defaultTertiary),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    storeLogo: null,\n    storeLogoMobile: null,\n    backgroundCart: undefined,\n  }\n\n  if (styles) {\n    return {\n      ...defaultTheme,\n      primary: styles.active || defaultPrimary,\n      secondary: styles.main || defaultSecondary,\n      tertiary: styles.mainSecondary || defaultTertiary,\n      primaryHover: styles.active && calcHoverColor(styles.active),\n      secondaryHover: styles.main && calcHoverColor(styles.main),\n      tertiaryHover:\n        styles.mainSecondary && calcHoverColor(styles.mainSecondary),\n      storeLogo: styles.storeLogo,\n      storeLogoMobile: styles.storeLogoMobile,\n      backgroundCart: styles.backgroundCart,\n    }\n  }\n\n  return defaultTheme\n}\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport type TTheme = ReturnType<typeof getTheme>\n\nexport default ThemeSwitchProvider\n","import { format, formatWithOptions, parse } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\n\nimport { FJsonAddressFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const formatTime = format('H:mm')\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const parseTime = parse('HH:mm')\n\nexport const formatAddress = (address: FJsonAddressFragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import debug from 'debug'\n\nexport const logMain = debug('app')\nexport const logMap = debug('map')\nexport const logDebug = debug('debug')\nexport const logGraph = debug('graph')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersist = debug('persist')\nexport const logOrder = debug('order')\nexport const logLang = debug('lang')\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport { DETECTORS, LocaleResolver, TRANSFORMERS } from 'locales-detector'\nimport React, { useState } from 'react'\n\nimport Pacman from './common/Pacman'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC<{ forceLanguage?: string }> = ({\n  children,\n  forceLanguage,\n}) => {\n  const [isReady, setReady] = useState(false)\n  const [language] = useState(() => forceLanguage || detectLanguage())\n\n  useAsyncEffect(async () => {\n    await changeLanguage(language)\n    setReady(true)\n  })\n\n  if (isReady === false) {\n    return <Pacman />\n  }\n\n  return (\n    <I18nProvider language={language} i18n={i18n}>\n      {children}\n    </I18nProvider>\n  )\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nexport function detectLanguage() {\n  const resolver = new LocaleResolver(\n    [new DETECTORS.UrlDetector('lang'), new DETECTORS.NavigatorDetector()],\n    [new TRANSFORMERS.LanguageOnlyTransformer()],\n  )\n  const languages: ReadonlyArray<string> = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n  Driver = 'DRIVER',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n  De = 'DE',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible order origin categories */\nexport enum OrderOriginCategoryEnum {\n  Website = 'WEBSITE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Doveze = 'DOVEZE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type GBusinessLookupVariables = {\n  readonly code?: Maybe<string>\n  readonly url?: Maybe<string>\n}\n\nexport type GBusinessLookupQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lookup: GBusinessLookupLookup\n}\n\nexport type GBusinessLookupLookup = {\n  readonly __typename?: 'CompanyBrandLookUp'\n\n  readonly branch: Maybe<GBusinessLookupBranch>\n\n  readonly isBrand: boolean\n\n  readonly isMobileApp: boolean\n\n  readonly knownBasePath: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GBusinessLookupBranch = GCompanyBranchFragment\n\nexport type GCreatePickupOrderVariables = {\n  readonly branchId: string\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GCreatePickupOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: GCreatePickupOrderOrder\n}\n\nexport type GCreatePickupOrderOrder = GCreateOrderFragment\n\nexport type GCreateDeliveryOrderVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GCreateDeliveryOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: GCreateDeliveryOrderOrder\n}\n\nexport type GCreateDeliveryOrderOrder = GCreateOrderFragment\n\nexport type GVamStatusVariables = {\n  readonly input: InputVamStatus\n}\n\nexport type GVamStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamStatus: ReadonlyArray<GVamStatusVamStatus>\n}\n\nexport type GVamStatusVamStatus = {\n  readonly __typename?: 'VAMAgreement'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly description: string\n\n  readonly isConfirmed: boolean\n\n  readonly isMandatory: boolean\n}\n\nexport type GInitialLocationVariables = {}\n\nexport type GInitialLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly initialLocation: GInitialLocationInitialLocation\n}\n\nexport type GInitialLocationInitialLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly gpsCoordinates: Maybe<GInitialLocationGpsCoordinates>\n}\n\nexport type GInitialLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GPickupMapBrandVariables = {\n  readonly brandId: string\n}\n\nexport type GPickupMapBrandQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branches: ReadonlyArray<GPickupMapBrandBranches>\n}\n\nexport type GPickupMapBrandBranches = GPickupBranchFragment\n\nexport type GPickupMapBranchVariables = {\n  readonly branchId: string\n}\n\nexport type GPickupMapBranchQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GPickupMapBranchBranch\n}\n\nexport type GPickupMapBranchBranch = GPickupBranchFragment\n\nexport type GMobileShopStatusVariables = {\n  readonly branchId: string\n}\n\nexport type GMobileShopStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GMobileShopStatusBranch\n}\n\nexport type GMobileShopStatusBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n} & FCompanyBranchStatusFragment\n\nexport type GMobileShopIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type GMobileShopIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: GMobileShopIntroIntro\n}\n\nexport type GMobileShopIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type GSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<GSmartBannerApp>\n}\n\nexport type GSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type QThemeStyleVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QThemeStyleQuery = {\n  readonly __typename?: 'Query'\n\n  readonly theme: QThemeStyleTheme\n}\n\nexport type QThemeStyleTheme = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly styles: QThemeStyleStyles\n}\n\nexport type QThemeStyleStyles = {\n  readonly __typename?: 'GraphicStyle'\n\n  readonly active: string\n\n  readonly main: string\n\n  readonly mainSecondary: string\n\n  readonly storeLogo: string\n\n  readonly storeLogoMobile: string\n\n  readonly backgroundCart: string\n}\n\nexport type GResolveLocationVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly address?: Maybe<string>\n  readonly latitude?: Maybe<number>\n  readonly longitude?: Maybe<number>\n}\n\nexport type GResolveLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: GResolveLocationResolveLocation\n}\n\nexport type GResolveLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly finalAddress: Maybe<GResolveLocationFinalAddress>\n\n  readonly isResolved: boolean\n\n  readonly isValidAddress: boolean\n\n  readonly inDeliveryLocation: boolean\n\n  readonly gpsCoordinates: Maybe<GResolveLocationGpsCoordinates>\n\n  readonly companyBranch: Maybe<GResolveLocationCompanyBranch>\n}\n\nexport type GResolveLocationFinalAddress = FJsonAddressFragment\n\nexport type GResolveLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GResolveLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type MAddToCartVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type MAddToCartMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly add: MAddToCartAdd\n}\n\nexport type MAddToCartAdd = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment\n\nexport type MChangeCartItemVariables = {\n  readonly orderId: string\n  readonly itemId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n  readonly withGoods: boolean\n}\n\nexport type MChangeCartItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly change: MChangeCartItemChange\n}\n\nexport type MChangeCartItemChange = FCartSummaryFragment & FCartGoodsFragment\n\nexport type MRemoveCartItemVariables = {\n  readonly itemId: string\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type MRemoveCartItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly remove: MRemoveCartItemRemove\n}\n\nexport type MRemoveCartItemRemove = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment\n\nexport type QCartVariables = {\n  readonly orderId: string\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type QCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QCartOrder\n}\n\nexport type QCartOrder = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment &\n  FCartStaticFragment\n\nexport type QCartItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCartItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCartItemItem\n}\n\nexport type QCartItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCartItemRecipe\n\n  readonly sideDishes: ReadonlyArray<QCartItemSideDishes>\n}\n\nexport type QCartItemRecipe = FRecipeDetailFragment\n\nexport type QCartItemSideDishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCartItem_Recipe\n}\n\nexport type QCartItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCartRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCartRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCartRecipeRecipe\n}\n\nexport type QCartRecipeRecipe = FRecipeDetailFragment\n\nexport type QOrderFinishVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderFinishQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFinishOrder\n\n  readonly companyBranch: QOrderFinishCompanyBranch\n\n  readonly androidApp: Maybe<QOrderFinishAndroidApp>\n\n  readonly iosApp: Maybe<QOrderFinishIosApp>\n}\n\nexport type QOrderFinishOrder = FOrderFinishedFragment\n\nexport type QOrderFinishCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly phone: string\n\n  readonly company: QOrderFinishCompany\n}\n\nexport type QOrderFinishCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type QOrderFinishAndroidApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QOrderFinishIosApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QFoodMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QFoodMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareCategories: ReadonlyArray<QFoodMenuWareCategories>\n}\n\nexport type QFoodMenuWareCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly recipes: ReadonlyArray<QFoodMenuRecipes>\n} & FFoodMenuCategoryFragment\n\nexport type QFoodMenuRecipes = FFoodMenuRecipeFragment\n\nexport type QFoodMenuCartPresenceVariables = {\n  readonly orderId: string\n}\n\nexport type QFoodMenuCartPresenceQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QFoodMenuCartPresenceOrder\n}\n\nexport type QFoodMenuCartPresenceOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FCartPresenceFragment\n\nexport type MOrderDeliveryTimeVariables = {\n  readonly orderId: string\n  readonly deliverAt?: Maybe<string>\n  readonly withGoods: boolean\n}\n\nexport type MOrderDeliveryTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderDeliveryTimeUpdateOrder\n}\n\nexport type MOrderDeliveryTimeUpdateOrder = FCartSummaryFragment &\n  FCartGoodsFragment\n\nexport type MOrderFinishVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MOrderFinishMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MOrderFinishFinishOrder\n}\n\nexport type MOrderFinishFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type MOrderPromoAddVariables = {\n  readonly orderId: string\n  readonly code: string\n  readonly withGoods: boolean\n}\n\nexport type MOrderPromoAddMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MOrderPromoAddAddOrderPromoCode\n}\n\nexport type MOrderPromoAddAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MOrderPromoAddOrder\n}\n\nexport type MOrderPromoAddOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoAddPromoCodes>\n} & FCartGoodsFragment\n\nexport type MOrderPromoAddPromoCodes = FPromoCodeFragment\n\nexport type MOrderPromoRemoveVariables = {\n  readonly orderId: string\n  readonly codeId: string\n  readonly withGoods: boolean\n}\n\nexport type MOrderPromoRemoveMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MOrderPromoRemoveRemoveOrderPromoCode\n}\n\nexport type MOrderPromoRemoveRemoveOrderPromoCode = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoRemovePromoCodes>\n} & FCartGoodsFragment\n\nexport type MOrderPromoRemovePromoCodes = FPromoCodeFragment\n\nexport type MOrderTipUpdateVariables = {\n  readonly orderId: string\n  readonly tips: number\n  readonly withGoods: boolean\n}\n\nexport type MOrderTipUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderTipUpdateUpdateOrder\n}\n\nexport type MOrderTipUpdateUpdateOrder = FCartSummaryFragment &\n  FCartGoodsFragment\n\nexport type MSubmitOrderVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MSubmitOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly submitOrder: MSubmitOrderSubmitOrder\n}\n\nexport type MSubmitOrderSubmitOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type QOrderFormVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFormOrder\n}\n\nexport type QOrderFormOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n}\n\nexport type QOrderPaymentStatusVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPaymentStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly status: QOrderPaymentStatusStatus\n}\n\nexport type QOrderPaymentStatusStatus = {\n  readonly __typename?: 'OrderOnlinePaymentStatus'\n\n  readonly isSuccess: boolean\n\n  readonly userErrors: ReadonlyArray<string>\n}\n\nexport type QOrderPromoCodesVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPromoCodesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderPromoCodesOrder\n}\n\nexport type QOrderPromoCodesOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<QOrderPromoCodesPromoCodes>\n}\n\nexport type QOrderPromoCodesPromoCodes = FPromoCodeFragment\n\nexport type QOrderTimePickerVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderTimePickerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QOrderTimePickerCompanyBranch\n}\n\nexport type QOrderTimePickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly businessHours: ReadonlyArray<QOrderTimePickerBusinessHours>\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly delayedDeliveryEnabled: boolean\n}\n\nexport type QOrderTimePickerBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n}\n\nexport type QSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type QSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<QSmartBannerApp>\n}\n\nexport type QSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type QShopHeaderVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId: string\n}\n\nexport type QShopHeaderQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: QShopHeaderBranch\n\n  readonly intro: QShopHeaderIntro\n}\n\nexport type QShopHeaderBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly address: QShopHeaderAddress\n} & (FShopOpeningHoursFragment & FCompanyBranchStatusFragment)\n\nexport type QShopHeaderAddress = FAddressFragment\n\nexport type QShopHeaderIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly brand: GCompanyBranchBrand\n\n  readonly company: GCompanyBranchCompany\n\n  readonly address: GCompanyBranchAddress\n\n  readonly phone: string\n}\n\nexport type GCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly code: string\n}\n\nexport type GCompanyBranchCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type GCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCompanyBranchCountry>\n}\n\nexport type GCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type GCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly companyBranch: GCreateOrderCompanyBranch\n}\n\nexport type GCreateOrderCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GPickupBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly gps: GPickupBranchGps\n\n  readonly address: GPickupBranchAddress\n\n  readonly pickupEnabled: boolean\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nexport type GPickupBranchGps = FGeoPointFragment\n\nexport type GPickupBranchAddress = FAddressFragment\n\nexport type FJsonAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly location: Maybe<FAddressLocation>\n}\n\nexport type FAddressLocation = FJsonAddressFragment\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly formattedValue: string\n}\n\nexport type FRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sideDishCount: number\n}\n\nexport type FCompanyBranchStatusFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly businessHours: ReadonlyArray<FCompanyBranchStatusBusinessHours>\n\n  readonly defaultDeliveryTimeEnabled: boolean\n\n  readonly defaultPickupTimeEnabled: boolean\n}\n\nexport type FCompanyBranchStatusBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n}\n\nexport type FPromoCodeFragment = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type FCartGoodsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly items: ReadonlyArray<FCartGoodsItems>\n\n  readonly coverPrice: FCartGoodsCoverPrice\n\n  readonly transportFee: FCartGoodsTransportFee\n\n  readonly discounts: ReadonlyArray<FCartGoodsDiscounts>\n\n  readonly totalDiscount: FCartGoodsTotalDiscount\n\n  readonly tip: FCartGoodsTip\n}\n\nexport type FCartGoodsItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly automatic: boolean\n\n  readonly price: FCartGoodsPrice\n\n  readonly sideDishes: ReadonlyArray<FCartGoodsSideDishes>\n} & FCartItemFragment\n\nexport type FCartGoodsPrice = FPriceFragment\n\nexport type FCartGoodsSideDishes = FCartItemFragment\n\nexport type FCartGoodsCoverPrice = FPriceFragment\n\nexport type FCartGoodsTransportFee = FPriceFragment\n\nexport type FCartGoodsDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCartGoods_Price\n}\n\nexport type FCartGoods_Price = FPriceFragment\n\nexport type FCartGoodsTotalDiscount = FPriceFragment\n\nexport type FCartGoodsTip = FPriceFragment\n\nexport type FCartItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartItemRecipe\n}\n\nexport type FCartItemRecipe = FRecipeFragment\n\nexport type FCartStaticFragment = {\n  readonly __typename?: 'Order'\n\n  readonly minimalOrderPrice: Maybe<FCartStaticMinimalOrderPrice>\n\n  readonly deliveryType: Maybe<FCartStaticDeliveryType>\n}\n\nexport type FCartStaticMinimalOrderPrice = FPriceFragment\n\nexport type FCartStaticDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FCartSummaryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly totalSum: FCartSummaryTotalSum\n}\n\nexport type FCartSummaryTotalSum = FPriceFragment\n\nexport type FRecipeDetailFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly categories: ReadonlyArray<FRecipeDetailCategories>\n}\n\nexport type FRecipeDetailCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly maxRecipesCount: number\n\n  readonly sideDishes: ReadonlyArray<FRecipeDetailSideDishes>\n}\n\nexport type FRecipeDetailSideDishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FRecipeDetailPrice\n}\n\nexport type FRecipeDetailPrice = FPriceFragment\n\nexport type FOrderFinishedFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly items: ReadonlyArray<FOrderFinishedItems>\n\n  readonly totalSum: FOrderFinishedTotalSum\n\n  readonly orderPayments: ReadonlyArray<FOrderFinishedOrderPayments>\n}\n\nexport type FOrderFinishedItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sideDishes: ReadonlyArray<FOrderFinishedSideDishes>\n} & FCartItemFragment\n\nexport type FOrderFinishedSideDishes = FCartItemFragment\n\nexport type FOrderFinishedTotalSum = FPriceFragment\n\nexport type FOrderFinishedOrderPayments = {\n  readonly __typename?: 'OrderPaymentMethod'\n\n  readonly paymentMethod: FOrderFinishedPaymentMethod\n}\n\nexport type FOrderFinishedPaymentMethod = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly paymentType: FOrderFinishedPaymentType\n}\n\nexport type FOrderFinishedPaymentType = {\n  readonly __typename?: 'PaymentType'\n\n  readonly enum: PaymentTypeEnum\n}\n\nexport type FCartPresenceFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly presence: ReadonlyArray<FCartPresencePresence>\n}\n\nexport type FCartPresencePresence = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartPresenceRecipe\n}\n\nexport type FCartPresenceRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type FFoodMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n}\n\nexport type FFoodMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FFoodMenuRecipePrice\n\n  readonly sideDishCount: number\n}\n\nexport type FFoodMenuRecipePrice = FPriceFragment\n\nexport type FShopOpeningHoursFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GCompanyBranchFragmentDoc = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const GCreateOrderFragmentDoc = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FJsonAddressFragmentDoc = gql`\n  fragment FJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n  }\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on Address {\n    id\n    location {\n      ...FJsonAddress\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport const FCompanyBranchStatusFragmentDoc = gql`\n  fragment FCompanyBranchStatus on CompanyBranch {\n    id\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours: businessHoursIntervals {\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n    defaultDeliveryTimeEnabled\n    defaultPickupTimeEnabled\n  }\n`\n\nexport const GPickupBranchFragmentDoc = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport const FPromoCodeFragmentDoc = gql`\n  fragment FPromoCode on PromoCode {\n    id\n    code\n  }\n`\n\nexport const FRecipeFragmentDoc = gql`\n  fragment FRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FCartItemFragmentDoc = gql`\n  fragment FCartItem on OrderRecipe {\n    id\n    recipe {\n      ...FRecipe\n    }\n  }\n\n  ${FRecipeFragmentDoc}\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const FCartGoodsFragmentDoc = gql`\n  fragment FCartGoods on Order {\n    items {\n      ...FCartItem\n      automatic\n      price: priceWithSideDishes {\n        ...FPrice\n      }\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartStaticFragmentDoc = gql`\n  fragment FCartStatic on Order {\n    minimalOrderPrice {\n      ...FPrice\n    }\n    deliveryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartSummaryFragmentDoc = gql`\n  fragment FCartSummary on Order {\n    id\n    countWares\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FRecipeDetailFragmentDoc = gql`\n  fragment FRecipeDetail on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      maxRecipesCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderFinishedFragmentDoc = gql`\n  fragment FOrderFinished on Order {\n    id\n    items {\n      ...FCartItem\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    totalSum {\n      ...FPrice\n    }\n    orderPayments {\n      paymentMethod {\n        paymentType {\n          enum\n        }\n      }\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartPresenceFragmentDoc = gql`\n  fragment FCartPresence on Order {\n    id\n    presence: items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FFoodMenuCategoryFragmentDoc = gql`\n  fragment FFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n`\n\nexport const FFoodMenuRecipeFragmentDoc = gql`\n  fragment FFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...FPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FShopOpeningHoursFragmentDoc = gql`\n  fragment FShopOpeningHours on CompanyBranch {\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const GBusinessLookupDocument = gql`\n  query GBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n\n  ${GCompanyBranchFragmentDoc}\n`\n\nexport function useGBusinessLookup(\n  variables?: GBusinessLookupVariables,\n  baseOptions?: Hooks.QueryHookOptions<GBusinessLookupVariables>,\n) {\n  return Hooks.useQuery<GBusinessLookupQuery, GBusinessLookupVariables>(\n    GBusinessLookupDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreatePickupOrderDocument = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n\n  ${GCreateOrderFragmentDoc}\n`\n\nexport function useGCreatePickupOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreatePickupOrderMutation,\n    GCreatePickupOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreatePickupOrderMutation,\n    GCreatePickupOrderVariables\n  >(GCreatePickupOrderDocument, baseOptions)\n}\n\nexport const GCreateDeliveryOrderDocument = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n\n  ${GCreateOrderFragmentDoc}\n`\n\nexport function useGCreateDeliveryOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateDeliveryOrderMutation,\n    GCreateDeliveryOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateDeliveryOrderMutation,\n    GCreateDeliveryOrderVariables\n  >(GCreateDeliveryOrderDocument, baseOptions)\n}\n\nexport const GVamStatusDocument = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n\nexport function useGVamStatus(\n  variables?: GVamStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVamStatusVariables>,\n) {\n  return Hooks.useQuery<GVamStatusQuery, GVamStatusVariables>(\n    GVamStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GInitialLocationDocument = gql`\n  query GInitialLocation {\n    initialLocation: resolveLocation {\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\nexport function useGInitialLocation(\n  variables?: GInitialLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GInitialLocationVariables>,\n) {\n  return Hooks.useQuery<GInitialLocationQuery, GInitialLocationVariables>(\n    GInitialLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GPickupMapBrandDocument = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n\n  ${GPickupBranchFragmentDoc}\n`\n\nexport function useGPickupMapBrand(\n  variables?: GPickupMapBrandVariables,\n  baseOptions?: Hooks.QueryHookOptions<GPickupMapBrandVariables>,\n) {\n  return Hooks.useQuery<GPickupMapBrandQuery, GPickupMapBrandVariables>(\n    GPickupMapBrandDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GPickupMapBranchDocument = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n\n  ${GPickupBranchFragmentDoc}\n`\n\nexport function useGPickupMapBranch(\n  variables?: GPickupMapBranchVariables,\n  baseOptions?: Hooks.QueryHookOptions<GPickupMapBranchVariables>,\n) {\n  return Hooks.useQuery<GPickupMapBranchQuery, GPickupMapBranchVariables>(\n    GPickupMapBranchDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileShopStatusDocument = gql`\n  query GMobileShopStatus($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useGMobileShopStatus(\n  variables?: GMobileShopStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileShopStatusVariables>,\n) {\n  return Hooks.useQuery<GMobileShopStatusQuery, GMobileShopStatusVariables>(\n    GMobileShopStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileShopIntroDocument = gql`\n  query GMobileShopIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useGMobileShopIntro(\n  variables?: GMobileShopIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileShopIntroVariables>,\n) {\n  return Hooks.useQuery<GMobileShopIntroQuery, GMobileShopIntroVariables>(\n    GMobileShopIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSmartBannerDocument = gql`\n  query GSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useGSmartBanner(\n  variables?: GSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSmartBannerVariables>,\n) {\n  return Hooks.useQuery<GSmartBannerQuery, GSmartBannerVariables>(\n    GSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QThemeStyleDocument = gql`\n  query QThemeStyle($brandId: ID, $branchId: ID) {\n    theme: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n\nexport function useQThemeStyle(\n  variables?: QThemeStyleVariables,\n  baseOptions?: Hooks.QueryHookOptions<QThemeStyleVariables>,\n) {\n  return Hooks.useQuery<QThemeStyleQuery, QThemeStyleVariables>(\n    QThemeStyleDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GResolveLocationDocument = gql`\n  query GResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      finalAddress {\n        ...FJsonAddress\n      }\n      isResolved\n      isValidAddress\n      inDeliveryLocation\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      companyBranch {\n        id\n        isOpen\n      }\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport function useGResolveLocation(\n  variables?: GResolveLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GResolveLocationVariables>,\n) {\n  return Hooks.useQuery<GResolveLocationQuery, GResolveLocationVariables>(\n    GResolveLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MAddToCartDocument = gql`\n  mutation MAddToCart(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n    $withGoods: Boolean!\n    $withPresence: Boolean!\n  ) {\n    add: createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useMAddToCart(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddToCartMutation,\n    MAddToCartVariables\n  >,\n) {\n  return Hooks.useMutation<MAddToCartMutation, MAddToCartVariables>(\n    MAddToCartDocument,\n    baseOptions,\n  )\n}\n\nexport const MChangeCartItemDocument = gql`\n  mutation MChangeCartItem(\n    $orderId: ID!\n    $itemId: ID!\n    $sideDishes: [ID!]\n    $withGoods: Boolean!\n  ) {\n    change: updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMChangeCartItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangeCartItemMutation,\n    MChangeCartItemVariables\n  >,\n) {\n  return Hooks.useMutation<MChangeCartItemMutation, MChangeCartItemVariables>(\n    MChangeCartItemDocument,\n    baseOptions,\n  )\n}\n\nexport const MRemoveCartItemDocument = gql`\n  mutation MRemoveCartItem(\n    $itemId: ID!\n    $withGoods: Boolean!\n    $withPresence: Boolean!\n  ) {\n    remove: destroyOrderRecipe(id: $itemId) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useMRemoveCartItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveCartItemMutation,\n    MRemoveCartItemVariables\n  >,\n) {\n  return Hooks.useMutation<MRemoveCartItemMutation, MRemoveCartItemVariables>(\n    MRemoveCartItemDocument,\n    baseOptions,\n  )\n}\n\nexport const QCartDocument = gql`\n  query QCart($orderId: ID!, $withGoods: Boolean!, $withPresence: Boolean!) {\n    order(id: $orderId) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n      ...FCartStatic\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n  ${FCartStaticFragmentDoc}\n`\n\nexport function useQCart(\n  variables?: QCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartVariables>,\n) {\n  return Hooks.useQuery<QCartQuery, QCartVariables>(\n    QCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCartItemDocument = gql`\n  query QCartItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FRecipeDetail\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FRecipeDetailFragmentDoc}\n`\n\nexport function useQCartItem(\n  variables?: QCartItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartItemVariables>,\n) {\n  return Hooks.useQuery<QCartItemQuery, QCartItemVariables>(\n    QCartItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCartRecipeDocument = gql`\n  query QCartRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FRecipeDetail\n    }\n  }\n\n  ${FRecipeDetailFragmentDoc}\n`\n\nexport function useQCartRecipe(\n  variables?: QCartRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartRecipeVariables>,\n) {\n  return Hooks.useQuery<QCartRecipeQuery, QCartRecipeVariables>(\n    QCartRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFinishDocument = gql`\n  query QOrderFinish($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      ...FOrderFinished\n    }\n    companyBranch(id: $branchId) {\n      id\n      phone\n      company {\n        id\n      }\n    }\n    androidApp: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: ANDROID\n    ) {\n      url\n    }\n    iosApp: mobileApplicationSettings(companyBranch: $branchId, platform: IOS) {\n      url\n    }\n  }\n\n  ${FOrderFinishedFragmentDoc}\n`\n\nexport function useQOrderFinish(\n  variables?: QOrderFinishVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFinishVariables>,\n) {\n  return Hooks.useQuery<QOrderFinishQuery, QOrderFinishVariables>(\n    QOrderFinishDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QFoodMenuDocument = gql`\n  query QFoodMenu($branchId: ID!) {\n    wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: MAIN\n      orderOriginCategory: DOVEZE\n      enabled: true\n      isAvailable: true\n    ) {\n      ...FFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...FFoodMenuRecipe\n      }\n    }\n  }\n\n  ${FFoodMenuCategoryFragmentDoc}\n  ${FFoodMenuRecipeFragmentDoc}\n`\n\nexport function useQFoodMenu(\n  variables?: QFoodMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuVariables>,\n) {\n  return Hooks.useQuery<QFoodMenuQuery, QFoodMenuVariables>(\n    QFoodMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QFoodMenuCartPresenceDocument = gql`\n  query QFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...FCartPresence\n    }\n  }\n\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useQFoodMenuCartPresence(\n  variables?: QFoodMenuCartPresenceVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuCartPresenceVariables>,\n) {\n  return Hooks.useQuery<\n    QFoodMenuCartPresenceQuery,\n    QFoodMenuCartPresenceVariables\n  >(QFoodMenuCartPresenceDocument, variables, baseOptions)\n}\n\nexport const MOrderDeliveryTimeDocument = gql`\n  mutation MOrderDeliveryTime(\n    $orderId: ID!\n    $deliverAt: DateTime\n    $withGoods: Boolean!\n  ) {\n    updateOrder(id: $orderId, order: { deliverAt: $deliverAt }) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderDeliveryTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >(MOrderDeliveryTimeDocument, baseOptions)\n}\n\nexport const MOrderFinishDocument = gql`\n  mutation MOrderFinish(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMOrderFinish(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderFinishMutation,\n    MOrderFinishVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderFinishMutation, MOrderFinishVariables>(\n    MOrderFinishDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoAddDocument = gql`\n  mutation MOrderPromoAdd($orderId: ID!, $code: String!, $withGoods: Boolean!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        id\n        promoCodes {\n          ...FPromoCode\n        }\n        ...FCartGoods @include(if: $withGoods)\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderPromoAdd(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoAddMutation,\n    MOrderPromoAddVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderPromoAddMutation, MOrderPromoAddVariables>(\n    MOrderPromoAddDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoRemoveDocument = gql`\n  mutation MOrderPromoRemove(\n    $orderId: ID!\n    $codeId: ID!\n    $withGoods: Boolean!\n  ) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderPromoRemove(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >(MOrderPromoRemoveDocument, baseOptions)\n}\n\nexport const MOrderTipUpdateDocument = gql`\n  mutation MOrderTipUpdate($orderId: ID!, $tips: Float!, $withGoods: Boolean!) {\n    updateOrder(id: $orderId, order: { tips: $tips }) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderTipUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTipUpdateMutation,\n    MOrderTipUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderTipUpdateMutation, MOrderTipUpdateVariables>(\n    MOrderTipUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSubmitOrderDocument = gql`\n  mutation MSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    submitOrder: finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMSubmitOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSubmitOrderMutation,\n    MSubmitOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MSubmitOrderMutation, MSubmitOrderVariables>(\n    MSubmitOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDocument = gql`\n  query QOrderForm($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      countWares\n    }\n  }\n`\n\nexport function useQOrderForm(\n  variables?: QOrderFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormVariables>,\n) {\n  return Hooks.useQuery<QOrderFormQuery, QOrderFormVariables>(\n    QOrderFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderPaymentStatusDocument = gql`\n  query QOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport function useQOrderPaymentStatus(\n  variables?: QOrderPaymentStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPaymentStatusVariables>,\n) {\n  return Hooks.useQuery<QOrderPaymentStatusQuery, QOrderPaymentStatusVariables>(\n    QOrderPaymentStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderPromoCodesDocument = gql`\n  query QOrderPromoCodes($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useQOrderPromoCodes(\n  variables?: QOrderPromoCodesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPromoCodesVariables>,\n) {\n  return Hooks.useQuery<QOrderPromoCodesQuery, QOrderPromoCodesVariables>(\n    QOrderPromoCodesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderTimePickerDocument = gql`\n  query QOrderTimePicker($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      isOpen\n      businessHours: businessHoursIntervals {\n        openAt\n        closeAt\n        closed\n      }\n      defaultDeliveryTime\n      defaultPickupTime\n      willOpenAt\n      willCloseAt\n      delayedDeliveryEnabled\n    }\n  }\n`\n\nexport function useQOrderTimePicker(\n  variables?: QOrderTimePickerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderTimePickerVariables>,\n) {\n  return Hooks.useQuery<QOrderTimePickerQuery, QOrderTimePickerVariables>(\n    QOrderTimePickerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QSmartBannerDocument = gql`\n  query QSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useQSmartBanner(\n  variables?: QSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QSmartBannerVariables>,\n) {\n  return Hooks.useQuery<QSmartBannerQuery, QSmartBannerVariables>(\n    QSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QShopHeaderDocument = gql`\n  query QShopHeader($brandId: ID, $branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      address {\n        ...FAddress\n      }\n      ...FShopOpeningHours\n      ...FCompanyBranchStatus\n    }\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FShopOpeningHoursFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useQShopHeader(\n  variables?: QShopHeaderVariables,\n  baseOptions?: Hooks.QueryHookOptions<QShopHeaderVariables>,\n) {\n  return Hooks.useQuery<QShopHeaderQuery, QShopHeaderVariables>(\n    QShopHeaderDocument,\n    variables,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-04-29T12:09:47+02:00\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  googleMapsApi: 'AIzaSyCgWfaO9CwyauwBQyKiwHF0kL5oNWkArY0',\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: '',\n  pageTitleSuffix: 'LOCAL',\n  analytics: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n    analytics: '',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n    analytics: 'UA-4990100-13',\n    googleMapsApi: 'AIzaSyCDn-SXz6ngOCNVwHR8zDY38JopNFVIrsU',\n  })\n}\n","import React from 'react'\n\nimport { AlertModal } from '../common/AlertModal'\n\nexport function useAlertModal() {\n  const [alertModal, setAlertModal] = React.useState<ReactNode>(null)\n\n  const makeAlert = (header: string, body: ReactNode | string) => {\n    setAlertModal(\n      React.createElement(\n        AlertModal,\n        {\n          isOpen: true,\n          onClose: () => setAlertModal(null),\n          headerText: header,\n        },\n        body,\n      ),\n    )\n  }\n\n  return [alertModal, makeAlert] as [ReactNode, typeof makeAlert]\n}\n","import React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const RootProvider = rootContext.Provider\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components/macro'\n\nexport const mobileBreakpoint = 767\n\nexport const Desktop = props => (\n  <ReactResponsive {...props} minWidth={mobileBreakpoint + 1} />\n)\nexport const Mobile = props => (\n  <ReactResponsive\n    {...props}\n    maxAspectRatio=\"14/9\"\n    maxWidth={mobileBreakpoint}\n  />\n)\nexport const MobileLandscape = props => (\n  <ReactResponsive\n    {...props}\n    screen={true}\n    minAspectRatio=\"14/9\"\n    maxWidth={mobileBreakpoint}\n  />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.FC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${(mobileBreakpoint + 1) / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${mobileBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n","var map = {\n\t\"./cs/messages.po\": [\n\t\t857,\n\t\t2\n\t],\n\t\"./de/messages.po\": [\n\t\t858,\n\t\t3\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t860,\n\t\t5\n\t],\n\t\"./en/messages.po\": [\n\t\t859,\n\t\t4\n\t],\n\t\"./pl/messages.po\": [\n\t\t861,\n\t\t6\n\t],\n\t\"./sk/messages.po\": [\n\t\t862,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 816;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t863,\n\t\t2\n\t],\n\t\"./de/messages.js\": [\n\t\t864,\n\t\t3\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t866,\n\t\t5\n\t],\n\t\"./en/messages.js\": [\n\t\t865,\n\t\t4\n\t],\n\t\"./pl/messages.js\": [\n\t\t867,\n\t\t6\n\t],\n\t\"./sk/messages.js\": [\n\t\t868,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 817;\nmodule.exports = webpackAsyncContext;","import { Trans } from '@lingui/macro'\nimport { ApolloDefender, isNetworkUnreachableError } from '@speedlo/graphql'\nimport { useRouterContext } from '@speedlo/hooks'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\nimport { VError } from 'verror'\n\nimport { useRoot } from '../app/useRoot'\nimport { useAlertModal } from '../hooks/useAlertModal'\nimport { i18n } from '../i18n'\nimport { AlertModal } from './AlertModal'\nimport { PrimaryButton, SecondaryButton } from './Buttons'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const ErrorContainer: React.FC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n  const [alertModal, makeAlert] = useAlertModal()\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(new VError(error, 'Unhandled exception'))\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        makeAlert(\n          i18n.t`Service problem`,\n          <div>\n            {makeError(\n              i18n.t`Unexpected error occured in communication with service.`,\n            )}\n          </div>,\n        )\n      }\n    },\n    [],\n  )\n\n  const onOperationError = React.useCallback(() => {\n    makeAlert(\n      i18n.t`Communication problem`,\n      <div>\n        {makeError(i18n.t`Unexpected error occured while sending a request.`)}\n      </div>,\n    )\n  }, [])\n\n  const onUserErrors = React.useCallback((messages: ReadonlyArray<string>) => {\n    makeAlert(\n      i18n.t`Problems encountered`,\n      <div>\n        {messages.map(msg => (\n          <div key={msg}>{msg}</div>\n        ))}\n      </div>,\n    )\n  }, [])\n\n  const { history } = useRouterContext()\n  const [modalOpen, setModalOpen] = React.useState(true)\n\n  const onFeedback = React.useCallback(() => {\n    setModalOpen(false)\n    showFeedback()\n  }, [])\n\n  const { business } = useRoot()\n\n  const onRestart = React.useCallback(() => {\n    setModalOpen(false)\n    history.replace(business.routerBasePath)\n    window.location.reload()\n  }, [])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Service is temporarily unavailable`}\n          >\n            <Trans>\n              Please try again in moment. We apologize for inconvenience.\n            </Trans>\n            <PrimaryButton onClick={onRetry}>\n              <Trans>Try now</Trans>\n            </PrimaryButton>\n          </AlertModal>\n        )\n      }\n      case 'otherError': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Unexpected error has occurred`}\n          >\n            <Trans>\n              If you like, please fill out feedback form so we can fix the\n              problem faster. Restart the application otherwise.\n            </Trans>\n            <br />\n            <PrimaryButton onClick={onRestart}>\n              <Trans>Restart application</Trans>\n            </PrimaryButton>\n            <SecondaryButton onClick={onFeedback}>\n              <Trans>Send feedback</Trans>\n            </SecondaryButton>\n          </AlertModal>\n        )\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  let errorGuard\n\n  if (prod) {\n    errorGuard = (\n      <SillyErrorBoundary\n        onError={error => {\n          onUnhandledError(error)\n        }}\n      >\n        {render()}\n      </SillyErrorBoundary>\n    )\n  } else {\n    const DeveloperErrorBoundary = require('react-error-guard/lib/DeveloperErrorBoundary')\n      .default\n    errorGuard = <DeveloperErrorBoundary>{render()}</DeveloperErrorBoundary>\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onOperationError={onOperationError}\n      onUserErrors={onUserErrors}\n    >\n      <>\n        {alertModal}\n        {errorGuard}\n      </>\n    </ApolloDefender>\n  )\n}\n\nfunction isChunkError(error: Error) {\n  return error.message && error.message.indexOf('Loading chunk') >= 0\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected problem occurred`,\n  })\n}\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport DocumentTitle from 'react-document-title'\n\nimport { useRoot } from '../app/useRoot'\nimport { appConfig } from '../config'\n\nexport const PageTitle: React.FC = () => {\n  const { business } = useRoot()\n  return useObserver(() => {\n    if (business.isValid) {\n      return (\n        <DocumentTitle\n          title={`${business.branch!.brand.name} - ${\n            appConfig.pageTitleSuffix\n          }`}\n        />\n      )\n    }\n    return <DocumentTitle title={appConfig.pageTitleSuffix} />\n  })\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { autorun } from 'mobx'\nimport React from 'react'\n\nimport { useRoot } from './useRoot'\n\nexport const IdentifyGuest: React.FC = () => {\n  const { auth } = useRoot()\n  React.useEffect(\n    () =>\n      autorun(() => {\n        const id = auth.userId!\n        const token = auth.token\n        Sentry.configureScope(scope => {\n          scope.setUser({ id, username: 'GUEST' })\n          scope.setExtra('token', token)\n        })\n      }),\n    [auth],\n  )\n  return null\n}\n","import React from 'react'\n\nimport { SecondaryButton } from '../common/Buttons'\nimport { useRoot } from './useRoot'\n\ninterface IProps {}\n\nexport const ResetPersistenceButton: React.FC<IProps> = props => {\n  const root = useRoot()\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  return (\n    <SecondaryButton\n      onClick={() => {\n        root.reset()\n        location.reload()\n      }}\n    >\n      Reset uživ. dat [DEV]\n    </SecondaryButton>\n  )\n}\n","import './App.css'\n\nimport { Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile, MobileLandscape } from '../common/Responsive'\nimport { IdentifyGuest } from './IdentifyGuest'\nimport { ResetPersistenceButton } from './ResetPersistenceButton'\n\nconst LandscapeMessage = styled.div`\n  font-size: 1.1rem;\n  padding: 3rem;\n  vertical-align: center;\n`\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <IdentifyGuest />\n    <PageTitle />\n    <Desktop>\n      <DesktopApp />\n    </Desktop>\n    <Mobile>\n      <MobileApp />\n    </Mobile>\n    <MobileLandscape>\n      <LandscapeMessage>\n        <Trans>\n          We know, you like space. Our app is optimised for desktop. Leave your\n          phone in portrait for now.\n        </Trans>\n      </LandscapeMessage>\n    </MobileLandscape>\n    <ResetPersistenceButton />\n  </ErrorContainer>\n)\n\nexport default App\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from './useRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() =>\n    business.isValid ? (\n      <BrowserRouter\n        basename={business.routerBasePath}\n        key={business.routerBasePath}\n      >\n        {children}\n      </BrowserRouter>\n    ) : null,\n  )\n}\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import ReactGA from 'react-ga'\n\nimport { appConfig } from '../config'\n\nconst key = appConfig.analytics\nif (key) {\n  const debug = process.env.REACT_APP_STAGE !== 'prod'\n  ReactGA.initialize(key, {\n    debug,\n    gaOptions: {\n      siteSpeedSampleRate: 50,\n    },\n  })\n  if (debug) {\n    ReactGA.ga('set', 'sendHitTask', null)\n  }\n}\n\ninterface IOptions {\n  reportPage: boolean\n}\n\nexport function useAnalytics(opts: Partial<IOptions> = {}) {\n  if (opts.reportPage) {\n    ReactGA.pageview(window.location.href)\n  }\n  return ReactGA\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersist('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersist('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersist('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { IRootEnvironment, TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    const name = getPath(self).trim() || getType(self).name\n    return debug(`c2e:model/${name}`)\n  },\n  get env() {\n    return getEnv<IRootEnvironment>(self)\n  },\n  get client() {\n    const { client } = getEnv<IRootEnvironment>(self)\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport { Sentry } from '@speedlo/sentry'\nimport { setContext } from 'apollo-link-context'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return Boolean(self.token && self.token.length)\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      Sentry.addBreadcrumb({\n        category: 'Auth',\n        level: Sentry.Severity.Info,\n        data: {\n          userId,\n          token,\n        },\n      })\n    },\n  }))\n  .actions(self => {\n    let fetching\n\n    const fetch = async () => {\n      if (!fetching) {\n        fetching = fetchToken()\n        const { token, userId } = await fetching\n        self.authenticate(token, String(userId))\n        fetching = null\n      }\n      return fetching\n    }\n\n    const authLink = setContext(async () => {\n      if (!self.token) {\n        await fetch()\n      }\n      return {\n        headers: {\n          Authorization: `Bearer ${self.token}`,\n        },\n      }\n    })\n\n    return {\n      attachAuthLinkToClient(client: DefaultApolloClient) {\n        client.link = authLink.concat(client.link)\n      },\n    }\n  })\n\nasync function fetchToken() {\n  const { endpoint } = appConfig\n  if (!endpoint) {\n    throw new Error('Missing endpoint in configuration.')\n  }\n  const url = `${endpoint}/users/token?guest=true`\n  const options = {\n    headers: {\n      Accept: 'application/json',\n    },\n  }\n  const response = await fetch(url, options)\n  return response.json()\n}\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import gql from 'graphql-tag'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const BusinessLookupQuery = gql`\n  query GBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n  ${CompanyBranchFragment}\n`\n","import { Sentry } from '@speedlo/sentry'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { OrderOriginEnum } from '../graph/generated'\nimport { GBusinessLookup, GCompanyBranch } from '../graph/types'\nimport { logMain } from '../helpers/logger'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessLookupQuery } from './BusinessModel.graphql'\n\ntype TBranch = Omit<GCompanyBranch.Fragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<GCompanyBranch.Country>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get brandOrBranch() {\n      return {\n        brandId: this.isBrand ? this.brandId : undefined,\n        branchId: this.isBrand ? undefined : this.branchId,\n      }\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      // app can be built with a specific code for a purpose of mobile apps\n      let code = process.env.REACT_APP_BUSINESS_CODE || null\n      if (!code) {\n        // mostly used in DEV because it's not possible to use subdomains for\n        // business resolution ... use either code from url or stored one as fallback\n        const urlCode = readBusinessCodeFromUrl()\n        code = urlCode || self.code\n      }\n      return code\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: GBusinessLookup.Lookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    mockBranchData(branch: TBranch) {\n      self.branch = branch\n    },\n  }))\n  .actions(self => ({\n    queryBusiness: async () => {\n      const { data } = await self.client.query<GBusinessLookup.Query>({\n        query: BusinessLookupQuery,\n        variables: {\n          code: self.requestedCode,\n          url: window.location.href,\n        },\n      })\n\n      if (!(data && data.lookup && data.lookup.branch)) {\n        logMain('no business found, used code %s', self.requestedCode)\n        redirectAway()\n        return\n      }\n\n      self.updateFromLookup(data.lookup)\n\n      Sentry.configureScope(scope => {\n        scope.setTag('orderOrigin', self.orderOrigin)\n        scope.setExtra('brandId', self.brandId!)\n        scope.setExtra('requestedCode', self.requestedCode)\n        scope.setExtra('branchId', self.branchId)\n        scope.setExtra('companyId', self.companyId)\n        scope.setExtra('isBrand', self.isBrand)\n      })\n\n      logMain(\n        'identified branch %s, brand %s; company %s, isBrand: %s',\n        self.branchId,\n        self.brandId,\n        self.companyId,\n        self.isBrand,\n      )\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const CartModel = BaseModel.named('Cart')\n  .volatile(() => ({\n    withGoods: false,\n    withPresence: false,\n  }))\n  .actions(self => ({\n    updateDisplay(isMobile: boolean, showGoods: boolean) {\n      self.withGoods = !isMobile || showGoods\n      self.withPresence = isMobile ? !showGoods : true\n    },\n  }))\n\nexport interface TCartModel extends Instance<typeof CartModel> {}\nexport interface TCartModelProps extends SnapshotIn<typeof CartModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport interface TConfigModel extends Instance<typeof ConfigModel> {}\nexport interface TConfigModelProps extends SnapshotIn<typeof ConfigModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { GResolveLocationDocument } from '../graph/generated'\nimport { GResolveLocation } from '../graph/types'\nimport { formatAddress } from '../helpers/formats'\nimport { GeoPoint, gpsToLatLng } from '../helpers/gps'\nimport { i18n } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  branchId: MaybeID\n  isOpen: boolean\n  isResolved: boolean\n  isStreetAddress: boolean\n  inDeliveryLocation: boolean\n  geolocationDisabled: boolean\n  geolocationPoint: Maybe<GeoPoint>\n  isResolving: boolean\n}\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.maybe(types.number),\n    longitude: types.maybe(types.number),\n    searchValue: types.maybe(types.string),\n    address: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(self => ({\n    branchId: null,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    geolocationPoint: null,\n    isResolving: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(self.env.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== undefined || self.longitude !== undefined\n    },\n    get hasAddress() {\n      return Boolean(self.address)\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get hasFinishedSearch() {\n      return (\n        ((self.searchValue && self.searchValue.length > 0) || self.address) &&\n        !self.isResolving\n      )\n    },\n    get geoPoint() {\n      if (this.hasLocation) {\n        return {\n          latitude: self.latitude!,\n          longitude: self.longitude!,\n        }\n      }\n      return null\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      if (this.geoPoint) {\n        return gpsToLatLng(this.geoPoint)\n      }\n      return null\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: any) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: GResolveLocation.ResolveLocation) {\n      const { finalAddress: address } = result\n      if (address) {\n        self.address = formatAddress(address)\n      }\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n      if (result.isResolved) {\n        self.setLocation(result.gpsCoordinates)\n        self.log('resolved as %s', self.address)\n      } else {\n        self.log('not resolved')\n      }\n    },\n    setVolatileProps(props: Partial<IVolatileProps>) {\n      Object.assign(self, props)\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = false\n    },\n    clearAddress() {\n      self.address = ''\n    },\n    setIsResolving(state: boolean) {\n      self.isResolving = state\n    },\n  }))\n  .actions(self => {\n    const resolver = async (vars?: Partial<GResolveLocation.Variables>) => {\n      self.setIsResolving(true)\n\n      const variables: GResolveLocation.Variables = {\n        ...self.resolutionTarget,\n        ...vars,\n      }\n      const { data } = await self.client.query<GResolveLocation.Query>({\n        query: GResolveLocationDocument,\n        variables,\n      })\n      if (data !== null) {\n        self.setResolutionResult(data.resolveLocation)\n      }\n      self.setIsResolving(false)\n    }\n    return {\n      validateUserLocation() {\n        if (self.hasLocation) {\n          self.log(\n            'validating stored user location %s, %s',\n            self.latitude,\n            self.longitude,\n          )\n          resolver({ latitude: self.latitude, longitude: self.longitude })\n        }\n      },\n      withUserAddress(address: string) {\n        self.searchValue = address\n        if (address === '') {\n          self.clearAddress()\n        } else {\n          self.log('resolving user address: %s', address)\n          resolver({ address })\n        }\n      },\n      withUserLocation(userLocation: GeoPoint) {\n        self.log('with user location: %j', userLocation)\n        self.latitude = userLocation.latitude\n        self.longitude = userLocation.longitude\n        resolver(userLocation)\n      },\n      useGeolocationResult(point: GeoPoint) {\n        self.geolocationPoint = point\n      },\n      attemptGeolocation() {\n        self.log('geolocating...')\n        self.env.geolocation.getCurrentPosition(\n          ({ coords }) => {\n            const { latitude, longitude } = coords\n            self.log(\n              'geolocated at coords %s, %s (acc: %s)',\n              coords.latitude,\n              coords.longitude,\n              coords.accuracy,\n            )\n            this.useGeolocationResult({ latitude, longitude })\n          },\n          err => {\n            self.log(new VError('failed geolocation', err))\n            self.disableGeolocation()\n            window.alert(i18n.t`Your browser does not support geolocation.`)\n          },\n          {\n            enableHighAccuracy: true,\n            maximumAge: 60 * 1000,\n          },\n        )\n      },\n    }\n  })\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { GeoPoint, gpsToLatLngLit, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<google.maps.Map>\n  clickPoint: Maybe<GeoPoint>\n}\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n    clickPoint: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLngLit(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<google.maps.Map>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panToLocation(gps: GeoPoint, radiusMeters: number = 2000) {\n      if (self.mapRef) {\n        // const bounds = getBounds([\n        //   computeDestinationPoint(gps, radiusMeters, 135), // SE corner\n        //   computeDestinationPoint(gps, radiusMeters, 315), // NW corner\n        // ])\n\n        // // @ts-ignore padding missing in types\n        // self.mapRef.panToBounds(\n        //   {\n        //     west: bounds.minLng,\n        //     east: bounds.maxLng,\n        //     north: bounds.minLat,\n        //     south: bounds.maxLat,\n        //   },\n        //   20,\n        // )\n        self.mapRef.panTo(gpsToLatLngLit(gps))\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import gql from 'graphql-tag'\n\nconst CreateOrderFragment = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const CreatePickupOrderMutation = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const CreateDeliveryOrderMutation = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const VamStatusQuery = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { Sentry } from '@speedlo/sentry'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport {\n  DeliveryTypeEnum,\n  MSubmitOrderVariables,\n  PaymentGateEnum,\n  QCartRecipeDocument,\n  QFoodMenuDocument,\n} from '../graph/generated'\nimport {\n  GCreateDeliveryOrder,\n  GCreateOrder,\n  GCreatePickupOrder,\n  GVamStatus,\n} from '../graph/types'\nimport { logMain } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport {\n  PickupMapBranchQuery,\n  PickupMapBrandQuery,\n} from '../segments/map/PickupMap.graphql'\nimport { IOrderFormState } from '../segments/orderForm/OrderFormSetup'\nimport { BaseModel } from './BaseModel'\nimport {\n  CreateDeliveryOrderMutation,\n  CreatePickupOrderMutation,\n  VamStatusQuery,\n} from './OrderModel.graphql'\n\ninterface IVolatileProps {\n  isSubmitting: boolean\n  isGoPayChecking: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  agreements: TAgreement[]\n  lastActiveRecipeId: MaybeID\n  isVamInitialized: boolean\n  timePickerOpen: boolean\n  delayedOrderEnabled: boolean\n  addToCartRecipeId: MaybeID\n  changeCartItemId: MaybeID\n}\n\nexport type TAgreement = GVamStatus.VamStatus\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    payment: PaymentGateEnum.Gopay,\n    deliverAt: types.maybe(types.Date),\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n    tips: '',\n  })\n  .volatile<IVolatileProps>(self => ({\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null,\n    paymentErrors: null,\n    agreements: [],\n    lastActiveRecipeId: null,\n    isVamInitialized: false,\n    timePickerOpen: false,\n    delayedOrderEnabled: false,\n    addToCartRecipeId: null,\n    changeCartItemId: null,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get usingPaymentMethodWithTips() {\n      return self.payment === PaymentGateEnum.Gopay\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return '+'\n    },\n    getSubmitVariables(formValues: IOrderFormState): MSubmitOrderVariables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstname,\n          lastName: formValues.lastname,\n          emails: [{ email: formValues.email }],\n          phones: [{ phone: `${formValues.phonePrefix}${formValues.phone}` }],\n        },\n        note: formValues.note,\n        tips: formValues.tips.length ? Number.parseInt(formValues.tips, 10) : 0,\n        paymentGate: formValues.payment,\n        deliverAt: self.deliverAt && isoDate(self.deliverAt),\n        agreements: formValues.agreements\n          .filter(RM.propEq('isConfirmed', true))\n          .map(RM.prop('id'))\n          .filter(Boolean),\n      }\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setPaymentMethod(method: PaymentGateEnum) {\n      self.payment = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: GCreateOrder.Fragment) {\n      self.orderId = result.id\n      self.branchId = result.companyBranch.id\n      self.deliverAt = undefined\n      logMain('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        logMain('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        logMain(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n      self.isVamInitialized = false\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    useAgreements(agreements: ReadonlyArray<TAgreement>) {\n      if (Array.isArray(agreements)) {\n        self.agreements = agreements\n      }\n      self.isVamInitialized = true\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    openTimePicker() {\n      self.timePickerOpen = true\n    },\n    closeTimePicker() {\n      self.timePickerOpen = false\n    },\n    setTips(tips: string) {\n      self.tips = tips\n    },\n    setDeliverAt(deliverAt: Date | undefined) {\n      self.deliverAt = deliverAt\n    },\n    enableDelayedOrder() {\n      self.delayedOrderEnabled = true\n    },\n    addToCart(recipeId: MaybeID) {\n      self.addToCartRecipeId = recipeId\n    },\n    changeCartItem(itemId: MaybeID) {\n      self.changeCartItemId = itemId\n    },\n    rememberFormValues(values: IOrderFormState) {\n      if (self.root.user.shouldRememberForm) {\n        self.firstname = values.firstname\n        self.lastname = values.lastname\n        self.email = values.email\n        self.phone = values.phone\n        self.phonePrefix = values.phonePrefix\n        self.note = values.note\n        self.tips = values.tips\n        self.payment = values.payment\n      } else {\n        self.firstname = ''\n        self.lastname = ''\n        self.email = ''\n        self.phone = ''\n        self.phonePrefix = ''\n        self.note = ''\n        self.tips = ''\n        self.payment = PaymentGateEnum.Gopay\n      }\n    },\n  }))\n  .actions(self => ({\n    async createDeliveryOrder() {\n      const { business, location } = self.root\n      if (!location.geoPoint) {\n        return null\n      }\n      const variables: GCreateDeliveryOrder.Variables = {\n        gps: location.geoPoint,\n        orderOrigin: business.orderOrigin,\n        ...business.brandOrBranch,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreateDeliveryOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreateDeliveryOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    async createPickupOrder(branchId: ID) {\n      const { business } = self.root\n      const variables: GCreatePickupOrder.Variables = {\n        branchId,\n        orderOrigin: business.orderOrigin,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreatePickupOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreatePickupOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    prefetchPickup() {\n      const { business } = self.root\n      if (business.isBrand) {\n        self.client.query({\n          query: PickupMapBrandQuery,\n          variables: { brandId: business.brandId },\n        })\n      } else {\n        self.client.query({\n          query: PickupMapBranchQuery,\n          variables: { branchId: business.branchId },\n        })\n      }\n    },\n    prefetchFoodMenu(branchId?: ID) {\n      if (branchId) {\n        self.client.query({ query: QFoodMenuDocument, variables: { branchId } })\n      }\n    },\n    prefetchFood(recipeId: ID) {\n      self.client.query({\n        query: QCartRecipeDocument,\n        variables: { recipeId },\n      })\n    },\n    async initVam() {\n      const variables: GVamStatus.Variables = {\n        input: {\n          orderId: self.orderId!,\n          email: self.email,\n          firstname: self.firstname,\n          lastname: self.lastname,\n          phone: self.phone,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        self.vamFailed()\n        Sentry.withScope(scope => {\n          Object.keys(variables).forEach(key => {\n            scope.setExtra(key, variables[key])\n          })\n          Sentry.captureException(new VError(err, 'VAM init failed'))\n        })\n      }\n    },\n    async updateVam(formValues: IOrderFormState) {\n      const phone = `${formValues.phonePrefix.trim()}${formValues.phone.trim()}`\n      const email = formValues.email.trim()\n      const firstname = formValues.firstname.trim()\n      const lastname = formValues.lastname.trim()\n      const variables: GVamStatus.Variables = {\n        input: {\n          email,\n          phone,\n          firstname,\n          lastname,\n          orderId: self.orderId!,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        self.vamFailed()\n        Sentry.withScope(scope => {\n          Object.keys(variables).forEach(key => {\n            scope.setExtra(key, variables[key])\n          })\n          Sentry.captureException(new VError(err, 'VAM update failed'))\n        })\n      }\n    },\n  }))\n  .actions(self => ({\n    init() {\n      Sentry.configureScope(scope => {\n        scope.setExtra('orderId', self.orderId)\n      })\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    rememberForm: types.maybeNull(types.boolean),\n    showAppleBanner: types.optional(types.boolean, true),\n  })\n  .volatile(self => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n  }))\n  .actions(self => ({\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n    hideAppleBanner() {\n      self.showAppleBanner = false\n    },\n  }))\n  .views(self => ({\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport {\n  applySnapshot,\n  getSnapshot,\n  Instance,\n  SnapshotIn,\n  types,\n} from 'mobx-state-tree'\n\nimport { logDebug } from '../helpers/logger'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { CartModel } from './CartModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    cart: types.optional(CartModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .actions(self => {\n    let initialSnapshot\n    return {\n      afterCreate() {\n        const { business, map, ...snapshot } = getSnapshot(self)\n        initialSnapshot = snapshot\n      },\n      reset() {\n        logDebug(initialSnapshot)\n        applySnapshot(self, initialSnapshot)\n      },\n      init: async () => {\n        self.auth.attachAuthLinkToClient(self.client)\n        await Promise.all(self.persistedModels.map(persistModel))\n        await self.business.queryBusiness()\n        self.order.init()\n        initialSnapshot.business = getSnapshot(self.business)\n      },\n    }\n  })\n\nexport interface IRootEnvironment {\n  client: DefaultApolloClient\n  fetch: TFetch\n  geolocation: Geolocation\n}\n\nexport function createRootModel(client: DefaultApolloClient) {\n  const root = RootModel.create({}, {\n    client,\n    fetch: window.fetch,\n    geolocation: navigator.geolocation,\n  } as IRootEnvironment)\n  root.init()\n  return root\n}\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider } from '@speedlo/graphql'\nimport { useSentryInit } from '@speedlo/sentry'\nimport { updateWorker } from '@speedlo/tools'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport ThemeSwitchProvider from './app/ThemeSwitchProvider'\nimport { RootProvider } from './app/useRoot'\nimport Pacman from './common/Pacman'\nimport { appConfig } from './config'\nimport { createApolloClient } from './graph/createClient'\nimport { useAnalytics } from './hooks/useAnalytics'\nimport { i18n, I18nManager } from './i18n'\nimport { createRootModel } from './models/RootModel'\n\nconst client = createApolloClient()\nconst root = createRootModel(client)\n\nconst Main = () => {\n  useAnalytics({ reportPage: true })\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <React.Suspense fallback={<Pacman />}>\n      <RootProvider value={root}>\n        <ApolloProvider client={client}>\n          <I18nManager>\n            <Router>\n              <ThemeSwitchProvider>\n                <App />\n              </ThemeSwitchProvider>\n            </Router>\n          </I18nManager>\n        </ApolloProvider>\n      </RootProvider>\n    </React.Suspense>\n  )\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))\n\nupdateWorker.register({\n  autoUpdate: true,\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    if (event.data === 'update-applied') {\n      location.reload()\n    }\n  })\n}\n","import { createDefaultApolloClient, createNetworkLink } from '@speedlo/graphql'\nimport createLogLink from 'apollo-link-log'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\n\nexport function createApolloClient() {\n  const useBatching = !(location.hash === '#nobatch')\n  return createDefaultApolloClient(\n    createLoggingLink(),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint, useBatching),\n  )\n}\n\nfunction createLoggingLink() {\n  return createLogLink({\n    enabled: process.env.REACT_APP_STAGE === 'dev',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: error => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import React from 'react'\nimport { Button, ButtonProps } from 'reactstrap'\nimport styled, { css } from 'styled-components/macro'\n\nimport { TTheme } from '../app/ThemeSwitchProvider'\nimport { mediaDesktop, mediaMobile } from '../common/Responsive'\nimport { RouteButton } from './RouteButton'\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n  &:active {\n    background-color: #262626 !important;\n  }\n`\n\nPrimaryButton.displayName = 'PrimaryButton'\n\nexport const SecondaryButton = styled(Button)`\n  background-color: ${themeProp('tertiary')};\n  border-color: ${themeProp('tertiary')};\n  &:hover {\n    background-color: ${themeProp('tertiaryHover')};\n    border-color: ${themeProp('tertiaryHover')};\n  }\n`\n\nSecondaryButton.displayName = 'SecondaryButton'\n\nexport const PrimaryRoutedButton = styled(RouteButton)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n`\n\nPrimaryRoutedButton.displayName = 'PrimaryRoutedButton'\n\ninterface IMobileHeaderButton {\n  isConfirm?: boolean\n  theme: TTheme\n}\n\nexport const MobileHeaderButton = styled(\n  ({ isConfirm, theme, ...props }: ButtonProps & IMobileHeaderButton) => (\n    <Button {...props} />\n  ),\n)`\n  background-color: ${({ isConfirm, theme }) =>\n    isConfirm ? theme.primary : 'white'};\n  color: ${({ isConfirm, theme }) => (isConfirm ? 'white' : theme.primary)};\n`\n\nMobileHeaderButton.displayName = 'MobileHeaderButton'\n\ninterface ISelectButtonThemed {\n  selected?: boolean\n  theme: TTheme\n}\n\nexport const SelectButtonThemed = styled(\n  ({ selected, theme, ...props }: ButtonProps & ISelectButtonThemed) => (\n    <Button {...props} />\n  ),\n)`\n  ${({ theme, selected }: ISelectButtonThemed) => css`\n    ${mediaDesktop`\n      background-color: ${selected ? theme.tertiary : theme.unselected}\n    `};\n    ${mediaMobile`\n    background-color: ${selected ? theme.tertiary : 'white'}`}\n    border-color: ${selected ? theme.tertiary : theme.unselected};\n    color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    &:hover {\n      background-color: ${\n        selected ? theme.tertiaryHover : theme.unselectedHover\n      };\n      border-color: ${selected ? theme.tertiaryHover : theme.unselectedHover};\n      color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    }\n  `};\n`\n\nSelectButtonThemed.displayName = 'SelectButtonThemed'\n\nfunction themeProp(name: keyof TTheme) {\n  return ({ theme }: { theme?: TTheme }) => theme![name] as string\n}\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, ButtonProps } from 'reactstrap'\n\ninterface IProps extends ButtonProps {\n  to: LocationDescriptor\n  replace?: boolean\n}\n\nexport const RouteButton: React.FC<IProps> = ({\n  to,\n  replace,\n  children,\n  ...buttonProps\n}) => (\n  <Link to={to} replace={replace}>\n    <Button {...buttonProps}>{children}</Button>\n  </Link>\n)\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n"],"sourceRoot":""}