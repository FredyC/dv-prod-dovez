{"version":3,"sources":["segments/finish/FinishView.tsx","segments/shop/ShopHeader.tsx","segments/shop/OrderAddress.tsx","segments/shop/ShopCloseAlert.tsx","segments/shop/ShopIntro.tsx","segments/shop/ShopLogo.tsx","segments/shop/ShopOpeningHours.tsx","segments/shop/Sticker.tsx","segments/shop/ShopHeader.graphql.ts","segments/shop/ShopOpeningHours.graphql.ts","segments/map/views/MapView.tsx","segments/map/OrderMap.tsx","segments/map/PickupMap.tsx","segments/map/PickupMapBranch.tsx","segments/shop/ShopOverview.tsx","segments/orderForm/OrderFormView.tsx","segments/orderForm/OrderForm.tsx","segments/orderForm/OrderPaymentMethod.tsx","segments/orderForm/OrderPaymentButton.tsx","app/DesktopApp.tsx","segments/shop/ShopHeaderView.tsx"],"names":["__webpack_require__","_react","_interopRequireDefault","_reactstrap","_ColStyle","_ShopHeaderView","_FinishViewFooter","_FinishViewLoader","_FinishViewOrder","_FinishViewSupport","default","createElement","Fragment","Row","className","ColStyle","FinishViewLoader","render","result","FinishViewOrder","order","FinishViewSupport","branch","companyBranch","FinishViewFooter","finish","_react2","_reactRouter","_styledComponents","_OrderAddress","_ShopCloseAlert","_ShopClosingTimeModal","_ShopHeaderIcons","_ShopIntro","_ShopLogo","_ShopOpeningHours","_Sticker","ShopHeaderStyled","div","withConfig","displayName","ShopHeaderInfoStyled","intro","isLoading","ShopHeaderIcons","data-testid","ShopLogo","url","homepageUrl","Route","exact","path","Sticker","Trans","id","ShopIntro","ShopClosingTimeModal","status","success","OrderAddress","address","ShopOpeningHours","ShopCloseAlert","_mobxReactLite","_ShopAddress","_WithRoot","_types","_i18n","location","useRoot","useObserver","orderMethod","DeliveryTypeEnum","Messenger","i18n","_","Pickup","ShopAddress","_useShopStatus","decision","closingIn","useShopStatus","Alert","values","ShopIntroStyled","headerText","_reactRouterDom","_BackgroundThemed","LogoLink","children","href","Link","to","LogoContainerStyled","props","BackgroundThemed","imageName","size","_formats","_ramda","_ShopStatusDisplay","ShopOpeningHoursContainer","Container","ShopOpeningHoursTimes","ShopOpeningHoursStatus","ShopOpeningHoursIcon","openingHours","businessHours","filter","RM","propEq","fluid","length","map","businessHour","idx","key","formatTime","openAt","closeAt","ShopStatusDisplay","deliveryTime","defaultDeliveryTime","pickupTime","defaultPickupTime","_classnames","StickerThemed","theme","primary","IconStyled","span","order-method-unselected","order-method-selected","_graphqlTag","_graph","_fragments","ShopHeaderQuery","AddressFragment","CompanyBranchStatusFragment","ShopOpeningHoursFragment","QueryShopHeader","buildQuery","_hooks","_OrderMethod","_OrderMap","history","useRouterContext","OrderMethod","OrderMap","onConfirm","push","_interopRequireWildcard","_BaseMap","_DeliveryMap","_PickupMap","mapByOrderMethod","[object Object]","createFactory","DeliveryMap","PickupMap","BaseMap","model","_mobx","_reactGoogleMaps","_gps","_MapPanning","_PickupMap2","_PickupMapBranch","business","activeBranch","setActiveBranch","useState","useDisposable","when","branchId","useEffect","prefetchFoodMenu","onConfirmPickup","useCallback","__awaiter","setBranch","createPickupOrder","renderSite","Marker","position","gpsToLatLng","gps","onClick","InfoWindow","onCloseClick","defaultOptions","maxWidth","PickupMapBranch","isBrand","QueryPickupMapBrand","variables","brandId","renderLoading","branches","find","MapPanning","QueryPickupMapBranch","_Buttons","PickupMapHeaderStyled","tertiaryText","shopStatus","name","PrimaryButton","color","disabled","pickupEnabled","openingIn","toLocaleUpperCase","getButtonText","_ThemeSwitchProvider","_CartView","_FoodMenuView","_OrderFormStorageNotice","_OrderFormView","orderModel","hasOrder","ColStyleLeft","FoodMenuView","ColStyleRight","CartView","orderId","OrderFormView","OrderFormStorageNotice","Redirect","_reactApolloHooks","_OrderErrorModal","_OrderForm","_OrderFormView2","_OrderGoPayModal","_OrderTimePicker","data","useQuery","OrderFormQuery","suspend","skip","countWares","OrderForm","OrderGoPayModal","OrderErrorModal","OrderTimePicker","_OrderAgreements","_OrderFormAutoFill","_OrderFormInputs","_OrderFormSetup","_OrderPaymentMethod","_OrderSubmitLine","OrderFormSetup","form","OrderFormAutoFill","onFill","setAllValues","OrderFormInputs","OrderPaymentMethod","OrderAgreements","OrderSubmitLine","submitForm","canSubmit","isVamInitialized","_OrderPaymentButton","OrderPaymentButton","method","PaymentGateEnum","Gopay","Cash","_reactForm","Checkmark","show","_a","__rest","Field","field","fieldApi","SelectButtonThemed","_extends","selected","value","setValue","_FinishView","_MapView","_ShopOverview","component","MapView","ShopOverview","FinishView","_ShopHeader","_ShopHeader2","ShopHeaderView","Object","assign","brandOrBranch","isValid","loading","ShopHeader"],"mappings":"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","file":"static/js/3.b6a8b4f7.chunk.js","sourcesContent":["import './FinishView.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../common/ColStyle'\nimport ShopHeaderView from '../shop/ShopHeaderView'\nimport { FinishViewFooter } from './FinishViewFooter'\nimport { FinishViewLoader } from './FinishViewLoader'\nimport { FinishViewOrder } from './FinishViewOrder'\nimport { FinishViewSupport } from './FinishViewSupport'\n\ninterface IProps {}\n\nexport const FinishView: React.SFC<IProps> = ({}) => (\n  <>\n    <ShopHeaderView />\n    <Row className=\"justify-content-md-center\">\n      <ColStyle>\n        <div className=\"finish__view\">\n          <FinishViewLoader\n            render={result => (\n              <>\n                <FinishViewOrder order={result.order} />\n                <FinishViewSupport branch={result.companyBranch} />\n                <FinishViewFooter finish={result} />\n              </>\n            )}\n          />\n        </div>\n      </ColStyle>\n    </Row>\n  </>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Route } from 'react-router'\nimport { Row } from 'reactstrap'\nimport styled from 'styled-components'\n\nimport { ColStyle } from '../../common/ColStyle'\nimport { GShopHeader } from '../../graph/types'\nimport { OrderAddress } from './OrderAddress'\nimport { ShopCloseAlert } from './ShopCloseAlert'\nimport { ShopClosingTimeModal } from './ShopClosingTimeModal'\nimport { ShopHeaderIcons } from './ShopHeaderIcons'\nimport { ShopIntro } from './ShopIntro'\nimport { ShopLogo } from './ShopLogo'\nimport { ShopOpeningHours } from './ShopOpeningHours'\nimport { Sticker } from './Sticker'\n\ninterface IProps {\n  branch?: GShopHeader.Branch\n  intro?: GShopHeader.Intro\n  isLoading: boolean\n}\n\nconst ShopHeaderStyled = styled.div`\n  display: flex;\n  min-height: 200px;\n`\n\nconst ShopHeaderInfoStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nexport const ShopHeader: React.SFC<IProps> = ({ branch, intro, isLoading }) => (\n  <div>\n    <Row className=\"justify-content-md-center\">\n      <ShopHeaderIcons />\n    </Row>\n\n    <Row className=\"row-white justify-content-md-center\">\n      <ColStyle>\n        <ShopHeaderStyled data-testid=\"shopHeader\">\n          {isLoading || !branch ? null : (\n            <>\n              <ShopLogo url={intro ? intro.homepageUrl : null} />\n\n              <ShopHeaderInfoStyled>\n                <Route\n                  exact={true}\n                  path=\"/\"\n                  render={() => (\n                    <>\n                      <Sticker>\n                        <Trans>Choose your delivery option below</Trans>\n                      </Sticker>\n                      <ShopIntro intro={intro} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/order\"\n                  render={() => (\n                    <>\n                      <ShopClosingTimeModal status={branch} />\n                      <Sticker success={true}>\n                        <OrderAddress address={branch.address} />\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro intro={intro} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/finish\"\n                  render={() => (\n                    <>\n                      <Sticker success={true}>\n                        <Trans>Order was send</Trans>\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro intro={intro} />\n                    </>\n                  )}\n                />\n              </ShopHeaderInfoStyled>\n              <ShopCloseAlert status={branch} />\n            </>\n          )}\n        </ShopHeaderStyled>\n      </ColStyle>\n    </Row>\n  </div>\n)\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { useRoot } from '../../common/WithRoot'\nimport { DeliveryTypeEnum, GShopHeader } from '../../graph/types'\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  address: GShopHeader.Address\n}\n\nexport const OrderAddress: React.FC<IProps> = ({ address }) => {\n  const { order, location } = useRoot()\n  return useObserver(() => {\n    switch (order.orderMethod) {\n      case DeliveryTypeEnum.Messenger:\n        return (\n          <span>\n            {i18n.t`Order to address`}: <b>{location.address}</b>\n          </span>\n        )\n      case DeliveryTypeEnum.Pickup:\n        return (\n          <span>\n            {i18n.t`Pickup at address`}:{' '}\n            <b>\n              <ShopAddress address={address} />\n            </b>\n          </span>\n        )\n      default:\n        return null\n    }\n  })\n}\n","import './ShopCloseAlert.css'\n\nimport { Plural, Trans } from '@lingui/react'\nimport React from 'react'\nimport { Alert } from 'reactstrap'\n\nimport { GCompanyBranchStatus } from '../../graph/types'\nimport { useShopStatus } from '../../hooks/useShopStatus'\n\ninterface IProps {\n  status: GCompanyBranchStatus.Fragment\n}\n\nexport const ShopCloseAlert: React.FC<IProps> = ({ status }) => {\n  const { decision, closingIn } = useShopStatus({\n    status,\n  })\n  if (decision === 'ClosingSoon') {\n    return (\n      <Alert className=\"shop__header__alert\">\n        <Trans>\n          Beware! We are\n          <Plural\n            value={closingIn}\n            one=\"closing in 1 minute\"\n            other=\"closing in # minutes\"\n          />\n          . Finish your order quickly.\n        </Trans>\n      </Alert>\n    )\n  }\n  return null\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GShopHeader } from '../../graph/types'\n\ninterface IProps {\n  intro?: Maybe<GShopHeader.Intro>\n}\n\nconst ShopIntroStyled = styled.div`\n  margin: 0.8rem 1rem 1rem 1.3rem;\n`\n\nexport const ShopIntro: React.SFC<IProps> = ({ intro }) => (\n  <ShopIntroStyled data-testid=\"headerText\">\n    {intro ? intro.headerText : ''}\n  </ShopIntroStyled>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { BackgroundThemed } from '../../common/BackgroundThemed'\n\ninterface IProps {\n  url: Maybe<string>\n}\n\nconst LogoLink: React.SFC<IProps> = ({ url, children }) =>\n  url ? <a href={url}>{children}</a> : <Link to=\"/\">{children}</Link>\n\nconst LogoContainerStyled = styled.div`\n  height: 200px;\n  width: 400px;\n  flex: 0 0 400px;\n  & .shop__header__logo {\n    height: 100%;\n  }\n`\n\nexport const ShopLogo: React.SFC<IProps> = props => (\n  <LogoContainerStyled>\n    <LogoLink {...props}>\n      <BackgroundThemed\n        className=\"shop__header__logo\"\n        imageName=\"storeLogo\"\n        size=\"cover\"\n      />\n    </LogoLink>\n  </LogoContainerStyled>\n)\n","import React from 'react'\nimport { Container } from 'reactstrap'\nimport styled from 'styled-components'\n\nimport { GShopOpeningHours } from '../../graph/types'\nimport { formatTime } from '../../helpers/formats'\nimport { RM } from '../../helpers/ramda'\nimport { ShopStatusDisplay } from './ShopStatusDisplay'\n\ninterface IProps {\n  branch: GShopOpeningHours.Fragment\n}\n\nconst ShopOpeningHoursContainer = styled(Container)`\n  margin: 0.4rem 0 0 0.1rem;\n  display: flex;\n`\n\nconst ShopOpeningHoursTimes = styled.div`\n  padding-left: 2rem;\n`\n\nconst ShopOpeningHoursStatus = styled.div`\n  padding-left: 2rem;\n`\n\nconst ShopOpeningHoursIcon = styled.div`\n  margin: -0.2rem 0 0 -1rem;\n  position: absolute;\n`\n\nexport const ShopOpeningHours: React.FC<IProps> = ({ branch }) => {\n  const openingHours = branch.businessHours.filter(RM.propEq('closed', false))\n  return (\n    <ShopOpeningHoursContainer fluid={true}>\n      <ShopOpeningHoursIcon className=\"flaticon-clock\" />\n      {openingHours.length > 0 && (\n        <ShopOpeningHoursTimes>\n          {openingHours.map((businessHour, idx) => (\n            <div data-testid=\"openingHours\" key={idx}>\n              {`${formatTime(businessHour.openAt)} - ${formatTime(\n                businessHour.closeAt,\n              )}`}\n            </div>\n          ))}\n        </ShopOpeningHoursTimes>\n      )}\n      <ShopOpeningHoursStatus>\n        <ShopStatusDisplay\n          status={branch}\n          deliveryTime={branch.defaultDeliveryTime}\n          pickupTime={branch.defaultPickupTime}\n        />\n      </ShopOpeningHoursStatus>\n    </ShopOpeningHoursContainer>\n  )\n}\n","import classNames from 'classnames'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst StickerThemed = styled.div`\n  background: ${({ theme }) => theme.primary};\n  color: white;\n  margin-top: 1rem;\n  padding: 0;\n  border-radius: 0 0.7rem 0.7rem 0;\n  white-space: nowrap;\n  flex: none;\n\n  & p {\n    display: inline-block;\n    margin: 0.6rem 1rem 0 0;\n    vertical-align: top;\n    white-space: nowrap;\n  }\n`\n\nconst IconStyled = styled.span`\n  margin: 0.5rem 1rem 0 0.1rem;\n  &:before,:after {\n  font-size: 1.8rem;\n  margin: 0 0 0 1rem;\n  }\n}\n`\n\ninterface IProps {\n  success?: boolean\n}\n\nexport const Sticker: React.SFC<IProps> = ({ success = false, children }) => (\n  <StickerThemed\n    className={classNames('right__sticker', {\n      'order-method-unselected': !success,\n      'order-method-selected': success,\n    })}\n  >\n    <IconStyled className=\"flaticon-transport\" />\n    <p>{children}</p>\n  </StickerThemed>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport {\n  AddressFragment,\n  CompanyBranchStatusFragment,\n} from '../../graph/fragments.graphql'\nimport { GShopHeader } from '../../graph/types'\nimport { ShopOpeningHoursFragment } from './ShopOpeningHours.graphql'\n\nexport const ShopHeaderQuery = gql`\n  query GShopHeader($brandId: ID, $branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      address {\n        ...GAddress\n      }\n      ...GShopOpeningHours\n      ...GCompanyBranchStatus\n    }\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n  ${AddressFragment}\n  ${CompanyBranchStatusFragment}\n  ${ShopOpeningHoursFragment}\n`\n\nexport const QueryShopHeader = buildQuery<\n  GShopHeader.Query,\n  GShopHeader.Variables\n>(ShopHeaderQuery)\n","import gql from 'graphql-tag'\n\nimport { CompanyBranchStatusFragment } from '../../graph/fragments.graphql'\n\nexport const ShopOpeningHoursFragment = gql`\n  fragment GShopOpeningHours on CompanyBranch {\n    defaultDeliveryTime\n    defaultPickupTime\n    ...GCompanyBranchStatus\n  }\n  ${CompanyBranchStatusFragment}\n`\n","import './MapView.css'\n\nimport { useRouterContext } from '@speedlo/hooks'\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../../common/ColStyle'\nimport { OrderMethod } from '../../destination/OrderMethod'\nimport ShopHeaderView from '../../shop/ShopHeaderView'\nimport { OrderMap } from '../OrderMap'\n\nexport const MapView = () => {\n  const { history } = useRouterContext()\n  return (\n    <>\n      <ShopHeaderView />\n      <Row className=\"justify-content-md-center\">\n        <ColStyle>\n          <div className=\"map__view\">\n            <div className=\"map__view__header\">\n              <OrderMethod />\n            </div>\n            <OrderMap onConfirm={() => history.push(`/order`)} />\n          </div>\n        </ColStyle>\n      </Row>\n    </>\n  )\n}\n","import { useObserver } from 'mobx-react-lite'\nimport React, { createFactory } from 'react'\n\nimport { BaseMap } from '../../common/BaseMap'\nimport { useRoot } from '../../common/WithRoot'\nimport { DeliveryTypeEnum } from '../../graph/types'\nimport { DeliveryMap } from './DeliveryMap'\nimport { PickupMap } from './PickupMap'\n\ninterface IProps {\n  onConfirm(): void\n}\n\nconst mapByOrderMethod = {\n  [DeliveryTypeEnum.Messenger]: createFactory<IProps>(DeliveryMap),\n  [DeliveryTypeEnum.Pickup]: createFactory<IProps>(PickupMap),\n}\n\nexport const OrderMap: React.FC<IProps> = ({ onConfirm }) => {\n  const { order, map } = useRoot()\n  return useObserver(() => (\n    <BaseMap model={map}>\n      {mapByOrderMethod[order.orderMethod]({ onConfirm })}\n    </BaseMap>\n  ))\n}\n","import './PickupMap.css'\n\nimport { when } from 'mobx'\nimport { useDisposable, useObserver } from 'mobx-react-lite'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { InfoWindow, Marker } from 'react-google-maps'\n\nimport { useRoot } from '../../common/WithRoot'\nimport { GPickupBranch } from '../../graph/types'\nimport { gpsToLatLng } from '../../helpers/gps'\nimport { RM } from '../../helpers/ramda'\nimport { MapPanning } from './atoms/MapPanning'\nimport { QueryPickupMapBranch, QueryPickupMapBrand } from './PickupMap.graphql'\nimport { PickupMapBranch } from './PickupMapBranch'\n\ninterface IProps {\n  onConfirm(): void\n}\n\nexport const PickupMap: React.FC<IProps> = ({ onConfirm }) => {\n  const { order, business, map } = useRoot()\n  const [activeBranch, setActiveBranch] = useState<MaybeID>(null)\n\n  useDisposable(() =>\n    when(\n      () => business.branchId !== null && activeBranch === null,\n      () => {\n        setActiveBranch(business.branchId)\n      },\n    ),\n  )\n\n  useEffect(\n    () => {\n      if (activeBranch) {\n        order.prefetchFoodMenu(activeBranch)\n      }\n    },\n    [activeBranch],\n  )\n\n  const onConfirmPickup = useCallback(\n    async (branchId: ID) => {\n      // it's necessary to set asap so correct data are displayed further\n      order.setBranch(branchId)\n      await order.createPickupOrder(branchId)\n      onConfirm()\n    },\n    [onConfirm],\n  )\n\n  const renderSite = (branch: GPickupBranch.Fragment) => (\n    <Marker\n      key={branch.id}\n      position={gpsToLatLng(branch.gps)}\n      onClick={() => setActiveBranch(branch.id)}\n    >\n      {activeBranch === branch.id ? (\n        <InfoWindow\n          onCloseClick={() => setActiveBranch(null)}\n          defaultOptions={{ maxWidth: 200 }}\n        >\n          <PickupMapBranch\n            branch={branch}\n            onConfirm={() => {\n              onConfirmPickup(branch.id)\n            }}\n          />\n        </InfoWindow>\n      ) : null}\n    </Marker>\n  )\n\n  return useObserver(() => {\n    if (business.isBrand) {\n      return (\n        <QueryPickupMapBrand\n          variables={{ brandId: business.brandId! }}\n          renderLoading={false}\n          render={({ branches }) => {\n            const branch =\n              branches && branches.find(RM.propEq('id', business.branchId))\n            return (\n              <>\n                <MapPanning map={map} gps={branch && branch.gps} />\n                {branches && branches.map(renderSite)}\n              </>\n            )\n          }}\n        />\n      )\n    }\n    return (\n      <QueryPickupMapBranch\n        variables={{ branchId: business.branchId! }}\n        renderLoading={false}\n        render={({ branch }) => (\n          <>\n            <MapPanning map={map} gps={branch && branch.gps} />\n            {branch && renderSite(branch)}\n          </>\n        )}\n      />\n    )\n  })\n}\n","import { Plural, Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { PrimaryButton } from '../../common/Buttons'\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { GPickupBranch } from '../../graph/types'\nimport { IShopStatus, useShopStatus } from '../../hooks/useShopStatus'\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  branch: GPickupBranch.Fragment\n  onConfirm(): void\n}\n\nconst PickupMapHeaderStyled = styled.div`\n  background-color: ${({ theme }) => theme.primary};\n  color: ${({ theme }) => theme.tertiaryText};\n  text-align: center;\n  padding: 0.4rem 0.2rem 0.2rem 0.2rem;\n  height: 2rem;\n  vertical-align: middle;\n`\n\nexport const PickupMapBranch: React.FC<IProps> = ({ branch, onConfirm }) => {\n  const shopStatus = useShopStatus({\n    status: branch,\n  })\n  return (\n    <div className=\"pickup__map\">\n      <PickupMapHeaderStyled className=\"pickup__map__header\">\n        {branch.name}\n      </PickupMapHeaderStyled>\n      <div className=\"pickup__map__info\">\n        <ShopAddress address={branch.address} />\n      </div>\n      <PrimaryButton\n        color=\"primary\"\n        data-testid=\"submitPickupBranch\"\n        disabled={!branch.pickupEnabled}\n        onClick={onConfirm}\n      >\n        {branch.pickupEnabled ? (\n          getButtonText(shopStatus)\n        ) : (\n          <Trans>Delivery only</Trans>\n        )}\n      </PrimaryButton>\n    </div>\n  )\n}\n\nfunction getButtonText({ decision, openingIn, closingIn }: IShopStatus) {\n  switch (decision) {\n    case 'Closed':\n      return <Trans>Closed</Trans>\n    case 'ClosingSoon':\n      return (\n        <Plural\n          value={closingIn}\n          one=\"Closing in 1 minute\"\n          other=\"Closing in # minutes\"\n        />\n      )\n    case 'OpeningSoon':\n      return (\n        <Plural\n          value={openingIn}\n          one=\"Opening in 1 minute\"\n          other=\"Opening in # minutes\"\n        />\n      )\n    default:\n      return i18n.t`Pickup here`.toLocaleUpperCase()\n  }\n}\n","import './ShopOverview.css'\n\nimport React from 'react'\nimport { Redirect } from 'react-router'\nimport { Row } from 'reactstrap'\n\nimport BackgroundThemed from '../../common/BackgroundThemed'\nimport { ColStyleLeft, ColStyleRight } from '../../common/ColStyle'\nimport ThemeSwitchProvider from '../../common/ThemeSwitchProvider'\nimport { useRoot } from '../../common/WithRoot'\nimport { i18n } from '../../i18n'\nimport { CartView } from '../cart/CartView'\nimport { FoodMenuView } from '../foodMenu/FoodMenuView'\nimport { OrderFormStorageNotice } from '../orderForm/OrderFormStorageNotice'\nimport { OrderFormView } from '../orderForm/OrderFormView'\nimport ShopHeaderView from './ShopHeaderView'\n\nexport const ShopOverview: React.FC = () => {\n  const { order: orderModel } = useRoot()\n  if (!orderModel.hasOrder) {\n    return <Redirect to=\"/\" />\n  }\n  return (\n    <ThemeSwitchProvider branchId={orderModel.branchId}>\n      <>\n        <ShopHeaderView />\n        <Row className=\"justify-content-md-center\">\n          <ColStyleLeft>\n            <div className=\"shop__overview__column\">\n              <FoodMenuView />\n            </div>\n          </ColStyleLeft>\n\n          <ColStyleRight>\n            <div className=\"shop__overview__column cart__column\">\n              <div className=\"cart__column__header\">\n                <span className=\"flaticon-cart cart__column__header__icon\" />\n                <h4>{i18n.t`Your order`}</h4>\n              </div>\n\n              <BackgroundThemed\n                className=\"cart__column__cart\"\n                imageName=\"backgroundCart\"\n              >\n                <CartView orderId={orderModel.orderId} />\n              </BackgroundThemed>\n\n              <OrderFormView orderId={orderModel.orderId} />\n            </div>\n          </ColStyleRight>\n          <OrderFormStorageNotice />\n        </Row>\n      </>\n    </ThemeSwitchProvider>\n  )\n}\n","import './OrderFormView.css'\n\nimport React from 'react'\nimport { useQuery } from 'react-apollo-hooks'\n\nimport { GOrderForm } from '../../graph/types'\nimport { OrderErrorModal } from './OrderErrorModal'\nimport { OrderForm } from './OrderForm'\nimport { OrderFormQuery } from './OrderFormView.graphql'\nimport { OrderGoPayModal } from './OrderGoPayModal'\nimport { OrderTimePicker } from './OrderTimePicker'\n\ninterface IProps {\n  orderId: MaybeID\n}\n\nexport const OrderFormView: React.FC<IProps> = ({ orderId }) => {\n  const { data } = useQuery<GOrderForm.Query, GOrderForm.Variables>(\n    OrderFormQuery,\n    { suspend: false, skip: !orderId, variables: { orderId: orderId! } },\n  )\n\n  if (!data || !data.order || data.order.countWares === 0) {\n    return null\n  }\n\n  return (\n    <>\n      <OrderForm />\n      <OrderGoPayModal />\n      <OrderErrorModal />\n      <OrderTimePicker />\n    </>\n  )\n}\n","import React from 'react'\n\nimport { useRoot } from '../../common/WithRoot'\nimport { OrderAgreements } from './OrderAgreements'\nimport { OrderFormAutoFill } from './OrderFormAutoFill'\nimport { OrderFormInputs } from './OrderFormInputs'\nimport { OrderFormSetup } from './OrderFormSetup'\nimport { OrderPaymentMethod } from './OrderPaymentMethod'\nimport { OrderSubmitLine } from './OrderSubmitLine'\n\nexport const OrderForm: React.FC = () => {\n  const { order: orderModel } = useRoot()\n  return (\n    <OrderFormSetup\n      render={form => (\n        <div className=\"order__form\">\n          <div className=\"order__form__inner\">\n            <OrderFormAutoFill onFill={values => form.setAllValues(values)} />\n            <OrderFormInputs />\n            <OrderPaymentMethod />\n            <OrderAgreements />\n          </div>\n          <OrderSubmitLine\n            onClick={form.submitForm}\n            canSubmit={orderModel.isVamInitialized}\n          />\n        </div>\n      )}\n    />\n  )\n}\n","import './OrderPaymentMethod.css'\n\nimport React from 'react'\n\nimport { PaymentGateEnum } from '../../graph/types'\nimport { i18n } from '../../i18n'\nimport { OrderPaymentButton } from './OrderPaymentButton'\n\nexport const OrderPaymentMethod: React.SFC = () => (\n  <div className=\"order__payment__method\">\n    <OrderPaymentButton\n      method={PaymentGateEnum.Gopay}\n      data-testid=\"orderPaymentMethod__GoPay\"\n    >\n      {i18n.t`Pay by card`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n    <OrderPaymentButton\n      method={PaymentGateEnum.Cash}\n      data-testid=\"orderPaymentMethod__Cash\"\n    >\n      {i18n.t`Pay by cash`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n  </div>\n)\n","import React from 'react'\nimport { Field } from 'react-form'\n\nimport { SelectButtonThemed } from '../../common/Buttons'\nimport { PaymentGateEnum } from '../../graph/types'\n\nexport interface IPaymentButtonProps {\n  method: PaymentGateEnum\n  disabled?: boolean\n}\n\nexport const OrderPaymentButton: React.SFC<IPaymentButtonProps> = ({\n  children,\n  disabled,\n  method,\n  ...props\n}) => (\n  <Field\n    field=\"payment\"\n    render={fieldApi => (\n      <SelectButtonThemed\n        disabled={disabled}\n        selected={fieldApi.value === method}\n        onClick={() => {\n          fieldApi.setValue(method)\n        }}\n        {...props}\n      >\n        <Checkmark show={fieldApi.value === method} />\n        {children}\n      </SelectButtonThemed>\n    )}\n  />\n)\n\nfunction Checkmark({ show }: { show: boolean }) {\n  return show ? (\n    <span className=\"flaticon-mark order__payment__method__button__checked\" />\n  ) : (\n    <div className=\"order__payment__method__button__unchecked\" />\n  )\n}\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { Container } from 'reactstrap'\n\nimport { FinishView } from '../segments/finish/FinishView'\nimport { MapView } from '../segments/map/views/MapView'\nimport { ShopOverview } from '../segments/shop/ShopOverview'\n\nconst DesktopApp = () => (\n  <Container fluid={true}>\n    <Route exact={true} path=\"/\" component={MapView} />\n    <Route path=\"/order\" component={ShopOverview} />\n    <Route path=\"/finish\" component={FinishView} />\n  </Container>\n)\n\nexport default DesktopApp\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../common/WithRoot'\nimport { ShopHeader } from './ShopHeader'\nimport { QueryShopHeader } from './ShopHeader.graphql'\n\nexport const ShopHeaderView: React.FC = () => {\n  const { order, business } = useRoot()\n  return useObserver(() => (\n    <QueryShopHeader\n      // need to use branchId from order first as it reflects branch for which\n      // order is being made and it might have different eg. business hours\n      // then the one obtained through business code\n      variables={{\n        ...business.brandOrBranch,\n        branchId: order.branchId || business.branchId!,\n      }}\n      skip={!business.isValid}\n      renderLoading={false}\n      render={({ branch, intro }, { loading }) => (\n        <ShopHeader branch={branch} intro={intro} isLoading={loading} />\n      )}\n    />\n  ))\n}\n\nexport default ShopHeaderView\n"],"sourceRoot":""}