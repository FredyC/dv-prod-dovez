{"version":3,"sources":["helpers/gps.ts","common/AlertModal.tsx","helpers/ramda.ts","graph/buildQuery.tsx","segments/map/PickupMap.graphql.ts","helpers/formats.ts","graph/generated.ts","helpers/logger.ts","i18n.tsx","config.ts","common/ThemeSwitchProvider.tsx","app/useRoot.tsx","models/OrderModel.graphql.ts","common/Responsive.tsx","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","common/Buttons.tsx","common/RouteButton.tsx","common/Pacman.tsx","common/ErrorContainer.tsx","common/PageTitle.tsx","app/IdentifyGuest.tsx","app/ResetPersistenceButton.tsx","app/App.tsx","app/Router.tsx","helpers/offline.ts","hooks/useAnalytics.ts","helpers/persistModel.ts","models/BaseModel.ts","models/AuthModel.ts","models/BannerModel.ts","models/BusinessModel.graphql.ts","models/BusinessModel.ts","models/ConfigModel.ts","models/LocationModel.ts","models/MapModel.ts","helpers/gopay.ts","models/OrderModel.ts","models/UserModel.ts","models/RootModel.ts","index.tsx","graph/createClient.ts"],"names":["__webpack_require__","d","__webpack_exports__","gpsToLatLng","latLngToGps","gps","lat","Number","latitude","lng","longitude","latLng","AlertModal","_ref","isOpen","headerText","onClose","children","modalProps","Object","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_3__","assign","toggle","className","data-testid","tag","Container","ramda__WEBPACK_IMPORTED_MODULE_0__","buildQuery","query","render","renderFragment","_ref$renderLoading","renderLoading","renderError","props","react__WEBPACK_IMPORTED_MODULE_1___default","react_apollo__WEBPACK_IMPORTED_MODULE_2__","result","loading","data","_common_Pacman__WEBPACK_IMPORTED_MODULE_3__","error","Fragment","PickupBranchFragment","gql","_templateObject","FCompanyBranchStatusFragmentDoc","FGeoPointFragmentDoc","FAddressFragmentDoc","PickupMapBrandQuery","_templateObject2","PickupMapBranchQuery","_templateObject3","QueryPickupMapBrand","QueryPickupMapBranch","formatTime","formatAddress","date_fns_fp__WEBPACK_IMPORTED_MODULE_0__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_1__","currentLocale","n","csLocale","formatLocale","formatWithOptions","locale","format","parse","address","street","houseNumber","concat","city","state","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderBillingTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","LanguageEnum","OrderOnlineStateEnum","OrderOriginEnum","PaymentGateEnum","PaymentTypeEnum","OrderStateEnum","ZoneTypeEnum","ShiftUserStateEnum","WareCategoryTypeEnum","SubscriptionActionType","WareRequirementEnum","SettingTypeEnum","GCompanyBranchFragmentDoc","FPriceFragmentDoc","GCartRecipeFragmentDoc","GCreateOrderFragmentDoc","_templateObject4","_templateObject5","FJsonAddressFragmentDoc","_templateObject6","_templateObject7","_templateObject8","GPickupBranchFragmentDoc","_templateObject9","FPromoCodeFragmentDoc","_templateObject10","FRecipeFragmentDoc","_templateObject11","FCartItemFragmentDoc","_templateObject12","FOrderFragmentDoc","_templateObject13","FOrderFinishedFragmentDoc","_templateObject14","FFoodMenuCategoryFragmentDoc","_templateObject15","FFoodMenuRecipeFragmentDoc","_templateObject16","FCartPresenceFragmentDoc","_templateObject17","FOrderMobileFragmentDoc","_templateObject18","FShopOpeningHoursFragmentDoc","_templateObject19","_templateObject20","_templateObject21","_templateObject22","_templateObject23","_templateObject24","_templateObject25","_templateObject26","_templateObject27","_templateObject28","_templateObject29","_templateObject30","_templateObject31","GThemeStyleDocument","_templateObject32","useGThemeStyle","variables","baseOptions","Hooks","GInitialLocationDocument","_templateObject33","useGInitialLocation","_templateObject34","_templateObject35","_templateObject36","_templateObject37","_templateObject38","GResolveLocationDocument","_templateObject39","QCartViewDocument","_templateObject40","useQCartView","QOrderFinishDocument","_templateObject41","useQOrderFinish","QFoodMenuDocument","_templateObject42","useQFoodMenu","QFoodMenuCartPresenceDocument","_templateObject43","useQFoodMenuCartPresence","QMobileCartDocument","_templateObject44","useQMobileCart","MOrderDeliveryTimeDocument","_templateObject45","useMOrderDeliveryTime","_templateObject46","MOrderPromoAddDocument","_templateObject47","useMOrderPromoAdd","MOrderPromoRemoveDocument","_templateObject48","useMOrderPromoRemove","MOrderTipUpdateDocument","_templateObject49","useMOrderTipUpdate","QOrderFormDocument","_templateObject50","useQOrderForm","QOrderPromoCodesDocument","_templateObject51","useQOrderPromoCodes","QOrderTimePickerDocument","_templateObject52","useQOrderTimePicker","QSmartBannerDocument","_templateObject53","useQSmartBanner","QShopHeaderDocument","_templateObject54","useQShopHeader","logMain","logMap","logDebug","logGraph","logPersist","logOrder","logLang","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","debug","i18n","setupI18n","I18nManager","forceLanguage","_useState","useState","_useState2","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","isReady","setReady","_useState3","languages","detector","getLocales","join","find","loc","appConfig","supportedLanguages","includes","fallbackLanguage","detectLanguage","language","useAsyncEffect","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","mark","_callee","wrap","_context","prev","next","changeLanguage","stop","this","react__WEBPACK_IMPORTED_MODULE_8___default","_common_Pacman__WEBPACK_IMPORTED_MODULE_9__","_lingui_react__WEBPACK_IMPORTED_MODULE_5__","_x","_changeLanguage","apply","arguments","_callee2","lang","_context2","abrupt","loadCatalog","activate","_callee3","catalog","_context3","sent","load","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","endpoint","process","persistenceKey","REACT_APP_LOCAL_KEY","redirectOnFail","sentryDSN","pageTitleSuffix","analytics","calcHoverColor","inputColor","Color","lighten","hsl","string","ThemeSwitchProvider","branchId","business","useRoot","brandId","skip","isValid","theme","styles","defaultTheme","primary","secondary","tertiary","secondaryHover","tertiaryHover","tertiaryText","unselected","unselectedHover","unselectedText","storeLogo","storeLogoMobile","backgroundCart","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","active","main","mainSecondary","getTheme","useObserver","react__WEBPACK_IMPORTED_MODULE_3___default","styled_components__WEBPACK_IMPORTED_MODULE_4__","RootProvider","react__WEBPACK_IMPORTED_MODULE_0__","rootContext","React","createContext","undefined","root","useContext","Error","Provider","CartRecipeFragment","OrderCartForRecipeQuery","OrderCartForItemQuery","CreateOrderFragment","CreatePickupOrderMutation","CreateDeliveryOrderMutation","AddToOrderMutation","AddToOrderMobileMutation","ChangeOrderItemMutation","RemoveOrderItemMutation","SubmitOrderMutation","OrderPaymentStatusQuery","VamStatusQuery","Desktop","Mobile","MobileLandscape","mediaDesktop","mediaMobile","react__WEBPACK_IMPORTED_MODULE_0___default","react_responsive__WEBPACK_IMPORTED_MODULE_1__","react_responsive__WEBPACK_IMPORTED_MODULE_1___default","styled_components__WEBPACK_IMPORTED_MODULE_2__","minWidth","maxAspectRatio","maxWidth","screen","minAspectRatio","css","map","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","webpackAsyncContext","req","ids","e","then","id","t","Promise","resolve","code","keys","module","exports","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","PrimaryButton","styled","Button","withConfig","displayName","componentId","themeProp","SecondaryButton","PrimaryRoutedButton","to","replace","buttonProps","objectWithoutProperties","react_default","react_router_dom","reactstrap_es","MobileHeaderButton","isConfirm","_ref2","_ref3","SelectButtonThemed","_ref4","selected","_ref5","name","_ref6","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","Pacman","_ref$noMargin","noMargin","style","display","alignSelf","justifyContent","marginTop","makeError","message","_","ErrorContainer","errorGuard","_ref$prod","prod","_React$useState","_React$useState2","slicedToArray","errorKind","setErrorKind","_React$useState3","_React$useState4","alertModal","setAlertModal","makeAlert","header","body","onRetry","useCallback","onUnhandledError","indexOf","isChunkError","Sentry","withScope","scope","setLevel","Severity","Debug","captureException","flushSentry","window","location","reload","isApolloError","isNetworkUnreachableError","VError","onNetworkError","isUnreachable","onOperationError","onUserErrors","messages","msg","history","useRouterContext","_React$useState5","_React$useState6","modalOpen","setModalOpen","onFeedback","showReportDialog","labelClose","title","onRestart","routerBasePath","_lingui_react","Buttons","onClick","tools_dist","onError","DeveloperErrorBoundary","require","dist","PageTitle","react_document_title_default","branch","brand","IdentifyGuest","auth","useEffect","autorun","userId","token","configureScope","setUser","username","setExtra","ResetPersistenceButton","LandscapeMessage","div","DesktopApp","lazy","all","bind","MobileApp","App","ErrorContainer_ErrorContainer","IdentifyGuest_IdentifyGuest","PageTitle_PageTitle","Responsive","ResetPersistenceButton_ResetPersistenceButton","Router","basename","key","isOnline","observable","box","navigator","onLine","addEventListener","set","isNetworkOnline","get","ReactGA","initialize","gaOptions","siteSpeedSampleRate","persistModel","_persistModel","model","modelName","stateKey","writeState","regenerator_default","getType","snapshot","localforage","setItem","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","BaseModel","types","views","self","log","getPath","trim","env","getEnv","client","getRoot","AuthModel","named","maybeNull","Boolean","length","actions","authenticate","addBreadcrumb","category","level","Info","fetching","fetch","asyncToGenerator","fetchToken","String","authLink","setContext","headers","Authorization","attachAuthLinkToClient","link","url","options","response","Accept","json","BannerModel","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","isMobileApp","differenceInDays","setInstalledNow","setClosedNow","CompanyBranchFragment","BusinessLookupQuery","BusinessModel","banners","volatile","isBrand","country","orderOrigin","Web","companyId","company","brandOrBranch","requestedCode","REACT_APP_BUSINESS_CODE","URL","href","searchParams","codeParam","updateFromLookup","lookup","knownBasePath","mockBranchData","queryBusiness","_queryBusiness","redirectAway","setTag","ensureBannerForCurrentBranch","has","ConfigModel","orderItemsMax","LocationModel","number","searchValue","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","geolocationPoint","isResolving","isGeolocationAvailable","geolocation","hasLocation","hasAddress","isDeliveryAddress","hasFinishedSearch","geoPoint","resolutionTarget","setLocation","setResolutionResult","finalAddress","companyBranch","isValidAddress","gpsCoordinates","setVolatileProps","disableGeolocation","clearAddress","setIsResolving","resolver","vars","objectSpread","resolveLocation","validateUserLocation","withUserAddress","withUserLocation","userLocation","useGeolocationResult","point","attemptGeolocation","_this","getCurrentPosition","coords","accuracy","err","alert","enableHighAccuracy","maximumAge","GPSCzechia","MapModel","zoom","optional","mapRef","clickPoint","center","setMapRef","ref","updateZoom","getZoom","updatePosition","getCenter","panToLocation","panTo","ev","clearClickPoint","embedScript","embedScriptSandbox","executeGoPayPayment","_executeGoPayPayment","loadScript","checkout","getOptions","gatewayUrl","inline","scriptUrl","scriptjs","_gopay","OrderModel","orderId","orderMethod","Messenger","payment","Gopay","deliverAt","firstname","lastname","email","phone","phonePrefix","note","tips","isSubmitting","isGoPayChecking","submitErrors","agreements","lastActiveRecipeId","isVamInitialized","timePickerOpen","shouldRefreshCart","delayedOrderEnabled","hasOrder","fragmentOrderId","usingDeliveryOrderMethod","usingPickupOrderMethod","Pickup","usingPaymentMethodWithTips","hasErrors","defaultPhonePrefix","getSubmitVariables","formValues","customer","firstName","lastName","emails","phones","parseInt","paymentGate","isoDate","filter","RM","propEq","prop","useOrderMethod","method","setPaymentMethod","setBranch","orderCreated","orderPaid","orderCancel","order","submitFinished","submitFailed","errors","vamFailed","clearErrors","goPayStatusCheck","checking","useAgreements","Array","isArray","setUsedRecipeId","recipeId","openTimePicker","closeTimePicker","setCartRefresh","shouldRefresh","setTips","setDeliverAt","enableDelayedOrder","queryPaymentStatus","_queryPaymentStatus","_args","fetchPolicy","status","rememberFormValues","values","user","shouldRememberForm","createDeliveryOrder","_createDeliveryOrder","_self$root","mutate","mutation","initVam","createPickupOrder","_createPickupOrder","prefetchPickup","prefetchFoodMenu","prefetchFood","addFromRecipe","_addFromRecipe","_callee4","sideDishes","current","recipe","optimisticResponse","_args4","_context4","readFragment","fragment","fragmentName","__typename","createOrderRecipe","countWares","items","toConsumableArray","price","value","formattedValue","automatic","_x2","addFromRecipeMobile","_addFromRecipeMobile","_callee5","_args5","_context5","_x3","updateItem","_updateItem","_callee6","itemId","_args6","_context6","_x4","removeItemFromCart","destroyOrderRecipe","item","_initVam","_callee7","_context7","input","vamStatus","forEach","updateVam","_updateVam","_callee8","_context8","_x5","submitOrder","_submitOrder","_callee9","submitResult","gopayUrl","paymentStatus","_context9","reportError","finishOrder","userErrors","Cash","isSuccess","_x6","checkPaymentStatus","match","when","_callee10","checkDelay","_context10","setTimeout","clearTimeout","captureMessage","init","UserModel","rememberForm","boolean","showAppleBanner","closingTimeAlertHidden","orderLimitAlertHidden","showClosingTime","hideClosingTime","showOrderLimit","hideOrderLimit","setFormRememberYes","setFormRememberNo","hideAppleBanner","RootModel","config","persistedModels","initialSnapshot","afterCreate","_getSnapshot","reset","_init","createDefaultApolloClient","createLogLink","enabled","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","offlineLink","QueueLink","open","close","createOfflineLink","BatchHttpLink","uri","credentials","create","createRootModel","ReactDOM","reportPage","pageview","useAnalytics","useSentryInit","Suspense","fallback","Router_Router","src_app_App","document","getElementById","updateWorker","register","autoUpdate","onUpdate","sw","confirm","postMessage","serviceWorker","event"],"mappings":"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","file":"static/js/main.b6733019.chunk.js","sourcesContent":["import { FGeoPointFragment } from '../graph/generated'\n\nexport type GeoPoint = Omit<FGeoPointFragment, '__typename'>\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import './Modal.css'\n\nimport React from 'react'\nimport {\n  Container,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalProps,\n} from 'reactstrap'\n\ninterface IProps extends ModalProps {\n  isOpen: boolean\n  headerText: string\n  onClose?(): void\n}\n\nexport const AlertModal: React.FC<IProps> = ({\n  isOpen,\n  headerText,\n  onClose,\n  children,\n  ...modalProps\n}) => (\n  <Modal\n    isOpen={isOpen}\n    toggle={onClose}\n    className=\"modal__container\"\n    {...modalProps}\n    data-testid=\"alertModal\"\n  >\n    <ModalHeader tag={Container} toggle={onClose} className=\"modal__header\">\n      <span>{headerText}</span>\n    </ModalHeader>\n    <ModalBody className=\"modal__body\">\n      <div className=\"modal__body__content\">{children}</div>\n    </ModalBody>\n  </Modal>\n)\n","import * as RM from 'ramda'\n\nexport { RM }\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\n\nimport Pacman from '../common/Pacman'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n  }\n  const GQuery: React.FC<IProps> = ({\n    render,\n    renderFragment,\n    renderLoading = true,\n    renderError = true,\n    children,\n    ...props\n  }) => (\n    // @ts-ignore Some weird changes in @types/react\n    <Query query={query} {...props}>\n      {result => {\n        if (result.loading || !result.data) {\n          if (typeof renderLoading === 'function') {\n            return renderLoading(result)\n          } else if (renderLoading === true) {\n            return <Pacman />\n          }\n        }\n        if (result.error) {\n          throw result.error\n        }\n        if (result.data) {\n          if (renderFragment) {\n            return <>{renderFragment(result.data, result)}</>\n          }\n          if (render) {\n            return render(result.data, result)\n          }\n        }\n        return children || null\n      }}\n    </Query>\n  )\n\n  return GQuery\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport {\n  FAddressFragmentDoc,\n  FCompanyBranchStatusFragmentDoc,\n  FGeoPointFragmentDoc,\n} from '../../graph/generated'\nimport { GPickupMapBranch, GPickupMapBrand } from '../../graph/types'\n\nconst PickupBranchFragment = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n  ${FCompanyBranchStatusFragmentDoc}\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n`\n\nexport const PickupMapBrandQuery = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const PickupMapBranchQuery = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const QueryPickupMapBrand = buildQuery<\n  GPickupMapBrand.Query,\n  GPickupMapBrand.Variables\n>(PickupMapBrandQuery)\n\nexport const QueryPickupMapBranch = buildQuery<\n  GPickupMapBranch.Query,\n  GPickupMapBranch.Variables\n>(PickupMapBranchQuery)\n","import { format, formatWithOptions, parse } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\n\nimport { FJsonAddressFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const formatTime = format('H:mm')\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const parseTime = parse('HH:mm')\n\nexport const formatAddress = (address: FJsonAddressFragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n  Driver = 'DRIVER',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type GBusinessLookupVariables = {\n  readonly code?: Maybe<string>\n  readonly url?: Maybe<string>\n}\n\nexport type GBusinessLookupQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lookup: GBusinessLookupLookup\n}\n\nexport type GBusinessLookupLookup = {\n  readonly __typename?: 'CompanyBrandLookUp'\n\n  readonly branch: Maybe<GBusinessLookupBranch>\n\n  readonly isBrand: boolean\n\n  readonly isMobileApp: boolean\n\n  readonly knownBasePath: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GBusinessLookupBranch = GCompanyBranchFragment\n\nexport type GOrderCartForRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type GOrderCartForRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GOrderCartForRecipeRecipe\n}\n\nexport type GOrderCartForRecipeRecipe = GCartRecipeFragment\n\nexport type GOrderCartForItemVariables = {\n  readonly itemId: string\n}\n\nexport type GOrderCartForItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: GOrderCartForItemItem\n}\n\nexport type GOrderCartForItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GOrderCartForItemRecipe\n\n  readonly sideDishes: ReadonlyArray<GOrderCartForItemSideDishes>\n}\n\nexport type GOrderCartForItemRecipe = GCartRecipeFragment\n\nexport type GOrderCartForItemSideDishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GOrderCartForItem_Recipe\n}\n\nexport type GOrderCartForItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GCreatePickupOrderVariables = {\n  readonly branchId: string\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GCreatePickupOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: GCreatePickupOrderOrder\n}\n\nexport type GCreatePickupOrderOrder = GCreateOrderFragment\n\nexport type GCreateDeliveryOrderVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GCreateDeliveryOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: GCreateDeliveryOrderOrder\n}\n\nexport type GCreateDeliveryOrderOrder = GCreateOrderFragment\n\nexport type GAddToOrderVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type GAddToOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: GAddToOrderCreateOrderRecipe\n}\n\nexport type GAddToOrderCreateOrderRecipe = FOrderFragment\n\nexport type GAddToOrderMobileVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type GAddToOrderMobileMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: GAddToOrderMobileCreateOrderRecipe\n}\n\nexport type GAddToOrderMobileCreateOrderRecipe = FOrderMobileFragment\n\nexport type GChangeOrderItemVariables = {\n  readonly orderId: string\n  readonly itemId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type GChangeOrderItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: GChangeOrderItemUpdateOrderRecipe\n}\n\nexport type GChangeOrderItemUpdateOrderRecipe = FOrderFragment\n\nexport type GRemoveOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type GRemoveOrderItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: GRemoveOrderItemDestroyOrderRecipe\n}\n\nexport type GRemoveOrderItemDestroyOrderRecipe = FOrderFragment\n\nexport type GSubmitOrderVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type GSubmitOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: GSubmitOrderFinishOrder\n}\n\nexport type GSubmitOrderFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type GOrderPaymentStatusVariables = {\n  readonly orderId: string\n}\n\nexport type GOrderPaymentStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly status: GOrderPaymentStatusStatus\n}\n\nexport type GOrderPaymentStatusStatus = {\n  readonly __typename?: 'OrderOnlinePaymentStatus'\n\n  readonly isSuccess: boolean\n\n  readonly userErrors: ReadonlyArray<string>\n}\n\nexport type GVamStatusVariables = {\n  readonly input: InputVamStatus\n}\n\nexport type GVamStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamStatus: ReadonlyArray<GVamStatusVamStatus>\n}\n\nexport type GVamStatusVamStatus = {\n  readonly __typename?: 'VAMAgreement'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly description: string\n\n  readonly isConfirmed: boolean\n\n  readonly isMandatory: boolean\n}\n\nexport type GThemeStyleVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type GThemeStyleQuery = {\n  readonly __typename?: 'Query'\n\n  readonly theme: GThemeStyleTheme\n}\n\nexport type GThemeStyleTheme = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly styles: GThemeStyleStyles\n}\n\nexport type GThemeStyleStyles = {\n  readonly __typename?: 'GraphicStyle'\n\n  readonly active: string\n\n  readonly main: string\n\n  readonly mainSecondary: string\n\n  readonly storeLogo: string\n\n  readonly storeLogoMobile: string\n\n  readonly backgroundCart: string\n}\n\nexport type GInitialLocationVariables = {}\n\nexport type GInitialLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly initialLocation: GInitialLocationInitialLocation\n}\n\nexport type GInitialLocationInitialLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly gpsCoordinates: Maybe<GInitialLocationGpsCoordinates>\n}\n\nexport type GInitialLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GPickupMapBrandVariables = {\n  readonly brandId: string\n}\n\nexport type GPickupMapBrandQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branches: ReadonlyArray<GPickupMapBrandBranches>\n}\n\nexport type GPickupMapBrandBranches = GPickupBranchFragment\n\nexport type GPickupMapBranchVariables = {\n  readonly branchId: string\n}\n\nexport type GPickupMapBranchQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GPickupMapBranchBranch\n}\n\nexport type GPickupMapBranchBranch = GPickupBranchFragment\n\nexport type GMobileShopStatusVariables = {\n  readonly branchId: string\n}\n\nexport type GMobileShopStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GMobileShopStatusBranch\n}\n\nexport type GMobileShopStatusBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n} & FCompanyBranchStatusFragment\n\nexport type GMobileShopIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type GMobileShopIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: GMobileShopIntroIntro\n}\n\nexport type GMobileShopIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type GSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<GSmartBannerApp>\n}\n\nexport type GSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type GResolveLocationVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly address?: Maybe<string>\n  readonly latitude?: Maybe<number>\n  readonly longitude?: Maybe<number>\n}\n\nexport type GResolveLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: GResolveLocationResolveLocation\n}\n\nexport type GResolveLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly finalAddress: Maybe<GResolveLocationFinalAddress>\n\n  readonly isResolved: boolean\n\n  readonly isValidAddress: boolean\n\n  readonly inDeliveryLocation: boolean\n\n  readonly gpsCoordinates: Maybe<GResolveLocationGpsCoordinates>\n\n  readonly companyBranch: Maybe<GResolveLocationCompanyBranch>\n}\n\nexport type GResolveLocationFinalAddress = FJsonAddressFragment\n\nexport type GResolveLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GResolveLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type QCartViewVariables = {\n  readonly orderId: string\n}\n\nexport type QCartViewQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QCartViewOrder\n}\n\nexport type QCartViewOrder = {\n  readonly __typename?: 'Order'\n\n  readonly minimalOrderPrice: Maybe<QCartViewMinimalOrderPrice>\n\n  readonly deliveryType: Maybe<QCartViewDeliveryType>\n} & FOrderFragment\n\nexport type QCartViewMinimalOrderPrice = FPriceFragment\n\nexport type QCartViewDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type QOrderFinishVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderFinishQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFinishOrder\n\n  readonly companyBranch: QOrderFinishCompanyBranch\n\n  readonly androidApp: Maybe<QOrderFinishAndroidApp>\n\n  readonly iosApp: Maybe<QOrderFinishIosApp>\n}\n\nexport type QOrderFinishOrder = FOrderFinishedFragment\n\nexport type QOrderFinishCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly phone: string\n\n  readonly company: QOrderFinishCompany\n}\n\nexport type QOrderFinishCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type QOrderFinishAndroidApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QOrderFinishIosApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QFoodMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QFoodMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareCategories: ReadonlyArray<QFoodMenuWareCategories>\n}\n\nexport type QFoodMenuWareCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly recipes: ReadonlyArray<QFoodMenuRecipes>\n} & FFoodMenuCategoryFragment\n\nexport type QFoodMenuRecipes = FFoodMenuRecipeFragment\n\nexport type QFoodMenuCartPresenceVariables = {\n  readonly orderId: string\n}\n\nexport type QFoodMenuCartPresenceQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QFoodMenuCartPresenceOrder\n}\n\nexport type QFoodMenuCartPresenceOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FCartPresenceFragment\n\nexport type QMobileCartVariables = {\n  readonly orderId: string\n}\n\nexport type QMobileCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QMobileCartOrder\n}\n\nexport type QMobileCartOrder = FOrderMobileFragment\n\nexport type MOrderDeliveryTimeVariables = {\n  readonly orderId: string\n  readonly deliverAt?: Maybe<string>\n}\n\nexport type MOrderDeliveryTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderDeliveryTimeUpdateOrder\n}\n\nexport type MOrderDeliveryTimeUpdateOrder = FOrderFragment\n\nexport type MOrderFinishVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MOrderFinishMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MOrderFinishFinishOrder\n}\n\nexport type MOrderFinishFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type MOrderPromoAddVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MOrderPromoAddMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MOrderPromoAddAddOrderPromoCode\n}\n\nexport type MOrderPromoAddAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MOrderPromoAddOrder\n}\n\nexport type MOrderPromoAddOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoAddPromoCodes>\n}\n\nexport type MOrderPromoAddPromoCodes = FPromoCodeFragment\n\nexport type MOrderPromoRemoveVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MOrderPromoRemoveMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MOrderPromoRemoveRemoveOrderPromoCode\n}\n\nexport type MOrderPromoRemoveRemoveOrderPromoCode = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoRemovePromoCodes>\n}\n\nexport type MOrderPromoRemovePromoCodes = FPromoCodeFragment\n\nexport type MOrderTipUpdateVariables = {\n  readonly orderId: string\n  readonly tips: number\n}\n\nexport type MOrderTipUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderTipUpdateUpdateOrder\n}\n\nexport type MOrderTipUpdateUpdateOrder = FOrderFragment\n\nexport type QOrderFormVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFormOrder\n}\n\nexport type QOrderFormOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n}\n\nexport type QOrderPromoCodesVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPromoCodesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderPromoCodesOrder\n}\n\nexport type QOrderPromoCodesOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<QOrderPromoCodesPromoCodes>\n}\n\nexport type QOrderPromoCodesPromoCodes = FPromoCodeFragment\n\nexport type QOrderTimePickerVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderTimePickerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QOrderTimePickerCompanyBranch\n}\n\nexport type QOrderTimePickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly businessHours: ReadonlyArray<QOrderTimePickerBusinessHours>\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly delayedDeliveryEnabled: boolean\n}\n\nexport type QOrderTimePickerBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n}\n\nexport type QSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type QSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<QSmartBannerApp>\n}\n\nexport type QSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type QShopHeaderVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId: string\n}\n\nexport type QShopHeaderQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: QShopHeaderBranch\n\n  readonly intro: QShopHeaderIntro\n}\n\nexport type QShopHeaderBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly address: QShopHeaderAddress\n} & (FShopOpeningHoursFragment & FCompanyBranchStatusFragment)\n\nexport type QShopHeaderAddress = FAddressFragment\n\nexport type QShopHeaderIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly brand: GCompanyBranchBrand\n\n  readonly company: GCompanyBranchCompany\n\n  readonly address: GCompanyBranchAddress\n\n  readonly phone: string\n}\n\nexport type GCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly code: string\n}\n\nexport type GCompanyBranchCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type GCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCompanyBranchCountry>\n}\n\nexport type GCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type GCartRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly categories: ReadonlyArray<GCartRecipeCategories>\n}\n\nexport type GCartRecipeCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sideDishes: ReadonlyArray<GCartRecipeSideDishes>\n}\n\nexport type GCartRecipeSideDishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: GCartRecipePrice\n}\n\nexport type GCartRecipePrice = FPriceFragment\n\nexport type GCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly companyBranch: GCreateOrderCompanyBranch\n}\n\nexport type GCreateOrderCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GPickupBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly gps: GPickupBranchGps\n\n  readonly address: GPickupBranchAddress\n\n  readonly pickupEnabled: boolean\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nexport type GPickupBranchGps = FGeoPointFragment\n\nexport type GPickupBranchAddress = FAddressFragment\n\nexport type FJsonAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly location: Maybe<FAddressLocation>\n}\n\nexport type FAddressLocation = FJsonAddressFragment\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly formattedValue: string\n}\n\nexport type FRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sideDishCount: number\n}\n\nexport type FCartItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly automatic: boolean\n\n  readonly recipe: FCartItemRecipe\n}\n\nexport type FCartItemRecipe = FRecipeFragment\n\nexport type FCompanyBranchStatusFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly businessHours: ReadonlyArray<FCompanyBranchStatusBusinessHours>\n\n  readonly defaultDeliveryTimeEnabled: boolean\n\n  readonly defaultPickupTimeEnabled: boolean\n}\n\nexport type FCompanyBranchStatusBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n}\n\nexport type FPromoCodeFragment = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type FOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FOrderItems>\n\n  readonly coverPrice: FOrderCoverPrice\n\n  readonly transportFee: FOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FOrderDiscounts>\n\n  readonly totalDiscount: FOrderTotalDiscount\n\n  readonly totalSum: FOrderTotalSum\n\n  readonly tip: FOrderTip\n}\n\nexport type FOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly price: FOrderPrice\n\n  readonly sideDishes: ReadonlyArray<FOrderSideDishes>\n} & FCartItemFragment\n\nexport type FOrderPrice = FPriceFragment\n\nexport type FOrderSideDishes = FCartItemFragment\n\nexport type FOrderCoverPrice = FPriceFragment\n\nexport type FOrderTransportFee = FPriceFragment\n\nexport type FOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FOrder_Price\n}\n\nexport type FOrder_Price = FPriceFragment\n\nexport type FOrderTotalDiscount = FPriceFragment\n\nexport type FOrderTotalSum = FPriceFragment\n\nexport type FOrderTip = FPriceFragment\n\nexport type FOrderFinishedFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly items: ReadonlyArray<FOrderFinishedItems>\n\n  readonly totalSum: FOrderFinishedTotalSum\n\n  readonly orderPayments: ReadonlyArray<FOrderFinishedOrderPayments>\n}\n\nexport type FOrderFinishedItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sideDishes: ReadonlyArray<FOrderFinishedSideDishes>\n} & FCartItemFragment\n\nexport type FOrderFinishedSideDishes = FCartItemFragment\n\nexport type FOrderFinishedTotalSum = FPriceFragment\n\nexport type FOrderFinishedOrderPayments = {\n  readonly __typename?: 'OrderPaymentMethod'\n\n  readonly paymentMethod: FOrderFinishedPaymentMethod\n}\n\nexport type FOrderFinishedPaymentMethod = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly paymentType: FOrderFinishedPaymentType\n}\n\nexport type FOrderFinishedPaymentType = {\n  readonly __typename?: 'PaymentType'\n\n  readonly enum: PaymentTypeEnum\n}\n\nexport type FCartPresenceFragment = {\n  readonly __typename?: 'Order'\n\n  readonly items: ReadonlyArray<FCartPresenceItems>\n}\n\nexport type FCartPresenceItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartPresenceRecipe\n}\n\nexport type FCartPresenceRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type FFoodMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n}\n\nexport type FFoodMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FFoodMenuRecipePrice\n\n  readonly sideDishCount: number\n}\n\nexport type FFoodMenuRecipePrice = FPriceFragment\n\nexport type FOrderMobileFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly totalSum: FOrderMobileTotalSum\n\n  readonly countWares: number\n} & FCartPresenceFragment\n\nexport type FOrderMobileTotalSum = FPriceFragment\n\nexport type FShopOpeningHoursFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GCompanyBranchFragmentDoc = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const GCartRecipeFragmentDoc = gql`\n  fragment GCartRecipe on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GCreateOrderFragmentDoc = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FJsonAddressFragmentDoc = gql`\n  fragment FJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n  }\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on Address {\n    id\n    location {\n      ...FJsonAddress\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport const FCompanyBranchStatusFragmentDoc = gql`\n  fragment FCompanyBranchStatus on CompanyBranch {\n    id\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours: businessHoursIntervals {\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n    defaultDeliveryTimeEnabled\n    defaultPickupTimeEnabled\n  }\n`\n\nexport const GPickupBranchFragmentDoc = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport const FPromoCodeFragmentDoc = gql`\n  fragment FPromoCode on PromoCode {\n    id\n    code\n  }\n`\n\nexport const FRecipeFragmentDoc = gql`\n  fragment FRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FCartItemFragmentDoc = gql`\n  fragment FCartItem on OrderRecipe {\n    id\n    automatic\n    recipe {\n      ...FRecipe\n    }\n  }\n\n  ${FRecipeFragmentDoc}\n`\n\nexport const FOrderFragmentDoc = gql`\n  fragment FOrder on Order {\n    id\n    countWares\n    items {\n      ...FCartItem\n      price: priceWithSideDishes {\n        ...FPrice\n      }\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderFinishedFragmentDoc = gql`\n  fragment FOrderFinished on Order {\n    id\n    items {\n      ...FCartItem\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    totalSum {\n      ...FPrice\n    }\n    orderPayments {\n      paymentMethod {\n        paymentType {\n          enum\n        }\n      }\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FFoodMenuCategoryFragmentDoc = gql`\n  fragment FFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n`\n\nexport const FFoodMenuRecipeFragmentDoc = gql`\n  fragment FFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...FPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartPresenceFragmentDoc = gql`\n  fragment FCartPresence on Order {\n    items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FOrderMobileFragmentDoc = gql`\n  fragment FOrderMobile on Order {\n    id\n    totalSum {\n      ...FPrice\n    }\n    countWares\n    ...FCartPresence\n  }\n\n  ${FPriceFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport const FShopOpeningHoursFragmentDoc = gql`\n  fragment FShopOpeningHours on CompanyBranch {\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const GBusinessLookupDocument = gql`\n  query GBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n\n  ${GCompanyBranchFragmentDoc}\n`\n\nexport function useGBusinessLookup(\n  variables?: GBusinessLookupVariables,\n  baseOptions?: Hooks.QueryHookOptions<GBusinessLookupVariables>,\n) {\n  return Hooks.useQuery<GBusinessLookupQuery, GBusinessLookupVariables>(\n    GBusinessLookupDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderCartForRecipeDocument = gql`\n  query GOrderCartForRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...GCartRecipe\n    }\n  }\n\n  ${GCartRecipeFragmentDoc}\n`\n\nexport function useGOrderCartForRecipe(\n  variables?: GOrderCartForRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderCartForRecipeVariables>,\n) {\n  return Hooks.useQuery<GOrderCartForRecipeQuery, GOrderCartForRecipeVariables>(\n    GOrderCartForRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderCartForItemDocument = gql`\n  query GOrderCartForItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...GCartRecipe\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${GCartRecipeFragmentDoc}\n`\n\nexport function useGOrderCartForItem(\n  variables?: GOrderCartForItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderCartForItemVariables>,\n) {\n  return Hooks.useQuery<GOrderCartForItemQuery, GOrderCartForItemVariables>(\n    GOrderCartForItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreatePickupOrderDocument = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n\n  ${GCreateOrderFragmentDoc}\n`\n\nexport function useGCreatePickupOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreatePickupOrderMutation,\n    GCreatePickupOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreatePickupOrderMutation,\n    GCreatePickupOrderVariables\n  >(GCreatePickupOrderDocument, baseOptions)\n}\n\nexport const GCreateDeliveryOrderDocument = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n\n  ${GCreateOrderFragmentDoc}\n`\n\nexport function useGCreateDeliveryOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateDeliveryOrderMutation,\n    GCreateDeliveryOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateDeliveryOrderMutation,\n    GCreateDeliveryOrderVariables\n  >(GCreateDeliveryOrderDocument, baseOptions)\n}\n\nexport const GAddToOrderDocument = gql`\n  mutation GAddToOrder($orderId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useGAddToOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GAddToOrderMutation,\n    GAddToOrderVariables\n  >,\n) {\n  return Hooks.useMutation<GAddToOrderMutation, GAddToOrderVariables>(\n    GAddToOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const GAddToOrderMobileDocument = gql`\n  mutation GAddToOrderMobile(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FOrderMobile\n    }\n  }\n\n  ${FOrderMobileFragmentDoc}\n`\n\nexport function useGAddToOrderMobile(\n  baseOptions?: Hooks.MutationHookOptions<\n    GAddToOrderMobileMutation,\n    GAddToOrderMobileVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GAddToOrderMobileMutation,\n    GAddToOrderMobileVariables\n  >(GAddToOrderMobileDocument, baseOptions)\n}\n\nexport const GChangeOrderItemDocument = gql`\n  mutation GChangeOrderItem($orderId: ID!, $itemId: ID!, $sideDishes: [ID!]) {\n    updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useGChangeOrderItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    GChangeOrderItemMutation,\n    GChangeOrderItemVariables\n  >,\n) {\n  return Hooks.useMutation<GChangeOrderItemMutation, GChangeOrderItemVariables>(\n    GChangeOrderItemDocument,\n    baseOptions,\n  )\n}\n\nexport const GRemoveOrderItemDocument = gql`\n  mutation GRemoveOrderItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useGRemoveOrderItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    GRemoveOrderItemMutation,\n    GRemoveOrderItemVariables\n  >,\n) {\n  return Hooks.useMutation<GRemoveOrderItemMutation, GRemoveOrderItemVariables>(\n    GRemoveOrderItemDocument,\n    baseOptions,\n  )\n}\n\nexport const GSubmitOrderDocument = gql`\n  mutation GSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useGSubmitOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSubmitOrderMutation,\n    GSubmitOrderVariables\n  >,\n) {\n  return Hooks.useMutation<GSubmitOrderMutation, GSubmitOrderVariables>(\n    GSubmitOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const GOrderPaymentStatusDocument = gql`\n  query GOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport function useGOrderPaymentStatus(\n  variables?: GOrderPaymentStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPaymentStatusVariables>,\n) {\n  return Hooks.useQuery<GOrderPaymentStatusQuery, GOrderPaymentStatusVariables>(\n    GOrderPaymentStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GVamStatusDocument = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n\nexport function useGVamStatus(\n  variables?: GVamStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVamStatusVariables>,\n) {\n  return Hooks.useQuery<GVamStatusQuery, GVamStatusVariables>(\n    GVamStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GThemeStyleDocument = gql`\n  query GThemeStyle($brandId: ID, $branchId: ID) {\n    theme: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n\nexport function useGThemeStyle(\n  variables?: GThemeStyleVariables,\n  baseOptions?: Hooks.QueryHookOptions<GThemeStyleVariables>,\n) {\n  return Hooks.useQuery<GThemeStyleQuery, GThemeStyleVariables>(\n    GThemeStyleDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GInitialLocationDocument = gql`\n  query GInitialLocation {\n    initialLocation: resolveLocation {\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\nexport function useGInitialLocation(\n  variables?: GInitialLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GInitialLocationVariables>,\n) {\n  return Hooks.useQuery<GInitialLocationQuery, GInitialLocationVariables>(\n    GInitialLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GPickupMapBrandDocument = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n\n  ${GPickupBranchFragmentDoc}\n`\n\nexport function useGPickupMapBrand(\n  variables?: GPickupMapBrandVariables,\n  baseOptions?: Hooks.QueryHookOptions<GPickupMapBrandVariables>,\n) {\n  return Hooks.useQuery<GPickupMapBrandQuery, GPickupMapBrandVariables>(\n    GPickupMapBrandDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GPickupMapBranchDocument = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n\n  ${GPickupBranchFragmentDoc}\n`\n\nexport function useGPickupMapBranch(\n  variables?: GPickupMapBranchVariables,\n  baseOptions?: Hooks.QueryHookOptions<GPickupMapBranchVariables>,\n) {\n  return Hooks.useQuery<GPickupMapBranchQuery, GPickupMapBranchVariables>(\n    GPickupMapBranchDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileShopStatusDocument = gql`\n  query GMobileShopStatus($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useGMobileShopStatus(\n  variables?: GMobileShopStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileShopStatusVariables>,\n) {\n  return Hooks.useQuery<GMobileShopStatusQuery, GMobileShopStatusVariables>(\n    GMobileShopStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileShopIntroDocument = gql`\n  query GMobileShopIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useGMobileShopIntro(\n  variables?: GMobileShopIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileShopIntroVariables>,\n) {\n  return Hooks.useQuery<GMobileShopIntroQuery, GMobileShopIntroVariables>(\n    GMobileShopIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSmartBannerDocument = gql`\n  query GSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useGSmartBanner(\n  variables?: GSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSmartBannerVariables>,\n) {\n  return Hooks.useQuery<GSmartBannerQuery, GSmartBannerVariables>(\n    GSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GResolveLocationDocument = gql`\n  query GResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      finalAddress {\n        ...FJsonAddress\n      }\n      isResolved\n      isValidAddress\n      inDeliveryLocation\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      companyBranch {\n        id\n        isOpen\n      }\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport function useGResolveLocation(\n  variables?: GResolveLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GResolveLocationVariables>,\n) {\n  return Hooks.useQuery<GResolveLocationQuery, GResolveLocationVariables>(\n    GResolveLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCartViewDocument = gql`\n  query QCartView($orderId: ID!) {\n    order(id: $orderId) {\n      ...FOrder\n      minimalOrderPrice {\n        ...FPrice\n      }\n      deliveryType {\n        enum\n      }\n    }\n  }\n\n  ${FOrderFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport function useQCartView(\n  variables?: QCartViewVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartViewVariables>,\n) {\n  return Hooks.useQuery<QCartViewQuery, QCartViewVariables>(\n    QCartViewDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFinishDocument = gql`\n  query QOrderFinish($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      ...FOrderFinished\n    }\n    companyBranch(id: $branchId) {\n      id\n      phone\n      company {\n        id\n      }\n    }\n    androidApp: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: ANDROID\n    ) {\n      url\n    }\n    iosApp: mobileApplicationSettings(companyBranch: $branchId, platform: IOS) {\n      url\n    }\n  }\n\n  ${FOrderFinishedFragmentDoc}\n`\n\nexport function useQOrderFinish(\n  variables?: QOrderFinishVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFinishVariables>,\n) {\n  return Hooks.useQuery<QOrderFinishQuery, QOrderFinishVariables>(\n    QOrderFinishDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QFoodMenuDocument = gql`\n  query QFoodMenu($branchId: ID!) {\n    wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      enabled: true\n    ) {\n      ...FFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...FFoodMenuRecipe\n      }\n    }\n  }\n\n  ${FFoodMenuCategoryFragmentDoc}\n  ${FFoodMenuRecipeFragmentDoc}\n`\n\nexport function useQFoodMenu(\n  variables?: QFoodMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuVariables>,\n) {\n  return Hooks.useQuery<QFoodMenuQuery, QFoodMenuVariables>(\n    QFoodMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QFoodMenuCartPresenceDocument = gql`\n  query QFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...FCartPresence\n    }\n  }\n\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useQFoodMenuCartPresence(\n  variables?: QFoodMenuCartPresenceVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuCartPresenceVariables>,\n) {\n  return Hooks.useQuery<\n    QFoodMenuCartPresenceQuery,\n    QFoodMenuCartPresenceVariables\n  >(QFoodMenuCartPresenceDocument, variables, baseOptions)\n}\n\nexport const QMobileCartDocument = gql`\n  query QMobileCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...FOrderMobile\n    }\n  }\n\n  ${FOrderMobileFragmentDoc}\n`\n\nexport function useQMobileCart(\n  variables?: QMobileCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMobileCartVariables>,\n) {\n  return Hooks.useQuery<QMobileCartQuery, QMobileCartVariables>(\n    QMobileCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MOrderDeliveryTimeDocument = gql`\n  mutation MOrderDeliveryTime($orderId: ID!, $deliverAt: DateTime) {\n    updateOrder(id: $orderId, order: { deliverAt: $deliverAt }) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useMOrderDeliveryTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >(MOrderDeliveryTimeDocument, baseOptions)\n}\n\nexport const MOrderFinishDocument = gql`\n  mutation MOrderFinish(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMOrderFinish(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderFinishMutation,\n    MOrderFinishVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderFinishMutation, MOrderFinishVariables>(\n    MOrderFinishDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoAddDocument = gql`\n  mutation MOrderPromoAdd($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        id\n        promoCodes {\n          ...FPromoCode\n        }\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useMOrderPromoAdd(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoAddMutation,\n    MOrderPromoAddVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderPromoAddMutation, MOrderPromoAddVariables>(\n    MOrderPromoAddDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoRemoveDocument = gql`\n  mutation MOrderPromoRemove($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useMOrderPromoRemove(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >(MOrderPromoRemoveDocument, baseOptions)\n}\n\nexport const MOrderTipUpdateDocument = gql`\n  mutation MOrderTipUpdate($orderId: ID!, $tips: Float!) {\n    updateOrder(id: $orderId, order: { tips: $tips }) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useMOrderTipUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTipUpdateMutation,\n    MOrderTipUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderTipUpdateMutation, MOrderTipUpdateVariables>(\n    MOrderTipUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDocument = gql`\n  query QOrderForm($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      countWares\n    }\n  }\n`\n\nexport function useQOrderForm(\n  variables?: QOrderFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormVariables>,\n) {\n  return Hooks.useQuery<QOrderFormQuery, QOrderFormVariables>(\n    QOrderFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderPromoCodesDocument = gql`\n  query QOrderPromoCodes($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useQOrderPromoCodes(\n  variables?: QOrderPromoCodesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPromoCodesVariables>,\n) {\n  return Hooks.useQuery<QOrderPromoCodesQuery, QOrderPromoCodesVariables>(\n    QOrderPromoCodesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderTimePickerDocument = gql`\n  query QOrderTimePicker($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      isOpen\n      businessHours: businessHoursIntervals {\n        openAt\n        closeAt\n        closed\n      }\n      defaultDeliveryTime\n      defaultPickupTime\n      willOpenAt\n      willCloseAt\n      delayedDeliveryEnabled\n    }\n  }\n`\n\nexport function useQOrderTimePicker(\n  variables?: QOrderTimePickerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderTimePickerVariables>,\n) {\n  return Hooks.useQuery<QOrderTimePickerQuery, QOrderTimePickerVariables>(\n    QOrderTimePickerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QSmartBannerDocument = gql`\n  query QSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useQSmartBanner(\n  variables?: QSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QSmartBannerVariables>,\n) {\n  return Hooks.useQuery<QSmartBannerQuery, QSmartBannerVariables>(\n    QSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QShopHeaderDocument = gql`\n  query QShopHeader($brandId: ID, $branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      address {\n        ...FAddress\n      }\n      ...FShopOpeningHours\n      ...FCompanyBranchStatus\n    }\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FShopOpeningHoursFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useQShopHeader(\n  variables?: QShopHeaderVariables,\n  baseOptions?: Hooks.QueryHookOptions<QShopHeaderVariables>,\n) {\n  return Hooks.useQuery<QShopHeaderQuery, QShopHeaderVariables>(\n    QShopHeaderDocument,\n    variables,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-04-14T15:00:53+02:00\n","import debug from 'debug'\n\nexport const logMain = debug('app')\nexport const logMap = debug('map')\nexport const logDebug = debug('debug')\nexport const logGraph = debug('graph')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersist = debug('persist')\nexport const logOrder = debug('order')\nexport const logLang = debug('lang')\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport * as detector from 'locales-detector'\nimport React, { useState } from 'react'\n\nimport Pacman from './common/Pacman'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC<{ forceLanguage?: string }> = ({\n  children,\n  forceLanguage,\n}) => {\n  const [isReady, setReady] = useState(false)\n  const [language] = useState(() => forceLanguage || detectLanguage())\n\n  useAsyncEffect(async () => {\n    await changeLanguage(language)\n    setReady(true)\n  })\n\n  if (isReady === false) {\n    return <Pacman />\n  }\n\n  return (\n    <I18nProvider language={language} i18n={i18n}>\n      {children}\n    </I18nProvider>\n  )\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.UrlDetector('lang'), new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages: ReadonlyArray<string> = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: process.env.REACT_APP_LOCAL_ENDPOINT,\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: '',\n  pageTitleSuffix: 'LOCAL',\n  analytics: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n    analytics: '',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n    analytics: 'UA-4990100-13',\n  })\n}\n","import Color from 'color'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { ThemeProvider } from 'styled-components'\n\nimport { useRoot } from '../app/useRoot'\nimport { useGThemeStyle } from '../graph/generated'\nimport { GThemeStyle } from '../graph/types'\n\ninterface IProps {\n  branchId?: MaybeID\n}\n\nconst ThemeSwitchProvider: React.FC<IProps> = ({ children, branchId }) => {\n  const { business } = useRoot()\n  const { data } = useGThemeStyle(\n    {\n      brandId: branchId ? null : business.brandId,\n      branchId: branchId || business.branchId,\n    },\n    {\n      skip: !business.isValid,\n    },\n  )\n  const theme = getTheme(data && data.theme && data.theme.styles)\n  return useObserver(() => (\n    <ThemeProvider theme={theme}>{children as React.ReactChild}</ThemeProvider>\n  ))\n}\n\nexport function getTheme(styles?: GThemeStyle.Styles) {\n  // Fallback colors\n  const defaultPrimary = '#54984a'\n  const defaultSecondary = '#99230e'\n  const defaultTertiary = '#d9a700'\n\n  const defaultTheme = {\n    primary: defaultPrimary,\n    secondary: defaultSecondary,\n    tertiary: defaultTertiary,\n    secondaryHover: calcHoverColor(defaultPrimary),\n    tertiaryHover: calcHoverColor(defaultTertiary),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    storeLogo: null,\n    storeLogoMobile: null,\n    backgroundCart: null,\n  }\n\n  if (styles) {\n    return {\n      ...defaultTheme,\n      primary: styles.active || defaultPrimary,\n      secondary: styles.main || defaultSecondary,\n      tertiary: styles.mainSecondary || defaultTertiary,\n      secondaryHover: styles.main && calcHoverColor(styles.main),\n      tertiaryHover:\n        styles.mainSecondary && calcHoverColor(styles.mainSecondary),\n      storeLogo: styles.storeLogo,\n      storeLogoMobile: styles.storeLogoMobile,\n      backgroundCart: styles.backgroundCart,\n    }\n  }\n\n  return defaultTheme\n}\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport type TTheme = ReturnType<typeof getTheme>\n\nexport default ThemeSwitchProvider\n","import React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const RootProvider = rootContext.Provider\n","import gql from 'graphql-tag'\n\nimport {\n  FOrderFragmentDoc,\n  FOrderMobileFragmentDoc,\n  FPriceFragmentDoc,\n} from '../graph/generated'\n\nconst CartRecipeFragment = gql`\n  fragment GCartRecipe on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const OrderCartForRecipeQuery = gql`\n  query GOrderCartForRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...GCartRecipe\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nexport const OrderCartForItemQuery = gql`\n  query GOrderCartForItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...GCartRecipe\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nconst CreateOrderFragment = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const CreatePickupOrderMutation = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const CreateDeliveryOrderMutation = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const AddToOrderMutation = gql`\n  mutation GAddToOrder($orderId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FOrder\n    }\n  }\n  ${FOrderFragmentDoc}\n`\n\nexport const AddToOrderMobileMutation = gql`\n  mutation GAddToOrderMobile(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FOrderMobile\n    }\n  }\n  ${FOrderMobileFragmentDoc}\n`\n\nexport const ChangeOrderItemMutation = gql`\n  mutation GChangeOrderItem($orderId: ID!, $itemId: ID!, $sideDishes: [ID!]) {\n    updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...FOrder\n    }\n  }\n  ${FOrderFragmentDoc}\n`\n\nexport const RemoveOrderItemMutation = gql`\n  mutation GRemoveOrderItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FOrder\n    }\n  }\n  ${FOrderFragmentDoc}\n`\n\nexport const SubmitOrderMutation = gql`\n  mutation GSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport const OrderPaymentStatusQuery = gql`\n  query GOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport const VamStatusQuery = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components'\n\nexport const Desktop = props => <ReactResponsive {...props} minWidth={768} />\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxAspectRatio=\"14/9\" maxWidth={767} />\n)\nexport const MobileLandscape = props => (\n  <ReactResponsive\n    {...props}\n    screen={true}\n    minAspectRatio=\"14/9\"\n    maxWidth={767}\n  />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.FC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${768 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${767 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n","var map = {\n\t\"./cs/messages.po\": [\n\t\t920,\n\t\t2\n\t],\n\t\"./de/messages.po\": [\n\t\t921,\n\t\t3\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t923,\n\t\t5\n\t],\n\t\"./en/messages.po\": [\n\t\t922,\n\t\t4\n\t],\n\t\"./pl/messages.po\": [\n\t\t924,\n\t\t6\n\t],\n\t\"./sk/messages.po\": [\n\t\t925,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 865;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t926,\n\t\t2\n\t],\n\t\"./de/messages.js\": [\n\t\t927,\n\t\t3\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t929,\n\t\t5\n\t],\n\t\"./en/messages.js\": [\n\t\t928,\n\t\t4\n\t],\n\t\"./pl/messages.js\": [\n\t\t930,\n\t\t6\n\t],\n\t\"./sk/messages.js\": [\n\t\t931,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 866;\nmodule.exports = webpackAsyncContext;","import React from 'react'\nimport { Button, ButtonProps } from 'reactstrap'\nimport styled, { css } from 'styled-components'\n\nimport { mediaDesktop, mediaMobile } from '../common/Responsive'\nimport { RouteButton } from './RouteButton'\nimport { TTheme } from './ThemeSwitchProvider'\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n  &:active {\n    background-color: #262626 !important;\n  }\n`\n\nPrimaryButton.displayName = 'PrimaryButton'\n\nexport const SecondaryButton = styled(Button)`\n  background-color: ${themeProp('tertiary')};\n  border-color: ${themeProp('tertiary')};\n  &:hover {\n    background-color: ${themeProp('tertiaryHover')};\n    border-color: ${themeProp('tertiaryHover')};\n  }\n`\n\nSecondaryButton.displayName = 'SecondaryButton'\n\nexport const PrimaryRoutedButton = styled(RouteButton)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n`\n\nPrimaryRoutedButton.displayName = 'PrimaryRoutedButton'\n\ninterface IMobileHeaderButton {\n  isConfirm?: boolean\n  theme: TTheme\n}\n\nexport const MobileHeaderButton = styled(\n  ({ isConfirm, theme, ...props }: ButtonProps & IMobileHeaderButton) => (\n    <Button {...props} />\n  ),\n)`\n  background-color: ${({ isConfirm, theme }) =>\n    isConfirm ? theme.primary : 'white'};\n  color: ${({ isConfirm, theme }) => (isConfirm ? 'white' : theme.primary)};\n`\n\nMobileHeaderButton.displayName = 'MobileHeaderButton'\n\ninterface ISelectButtonThemed {\n  selected?: boolean\n  theme: TTheme\n}\n\nexport const SelectButtonThemed = styled(\n  ({ selected, theme, ...props }: ButtonProps & ISelectButtonThemed) => (\n    <Button {...props} />\n  ),\n)`\n  ${({ theme, selected }: ISelectButtonThemed) => css`\n    ${mediaDesktop`\n      background-color: ${selected ? theme.tertiary : theme.unselected}\n    `};\n    ${mediaMobile`\n    background-color: ${selected ? theme.tertiary : 'white'}`}\n    border-color: ${selected ? theme.tertiary : theme.unselected};\n    color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    &:hover {\n      background-color: ${\n        selected ? theme.tertiaryHover : theme.unselectedHover\n      };\n      border-color: ${selected ? theme.tertiaryHover : theme.unselectedHover};\n      color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    }\n  `};\n`\n\nSelectButtonThemed.displayName = 'SelectButtonThemed'\n\nfunction themeProp(name: keyof TTheme) {\n  return ({ theme }: { theme?: TTheme }) => theme![name] as string\n}\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, ButtonProps } from 'reactstrap'\n\ninterface IProps extends ButtonProps {\n  to: LocationDescriptor\n  replace?: boolean\n}\n\nexport const RouteButton: React.FC<IProps> = ({\n  to,\n  replace,\n  children,\n  ...buttonProps\n}) => (\n  <Link to={to} replace={replace}>\n    <Button {...buttonProps}>{children}</Button>\n  </Link>\n)\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import { Trans } from '@lingui/macro'\nimport { ApolloDefender, isNetworkUnreachableError } from '@speedlo/graphql'\nimport { useRouterContext } from '@speedlo/hooks'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\nimport { VError } from 'verror'\n\nimport { useRoot } from '../app/useRoot'\nimport { i18n } from '../i18n'\nimport { AlertModal } from './AlertModal'\nimport { PrimaryButton, SecondaryButton } from './Buttons'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const ErrorContainer: React.FC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n  const [alertModal, setAlertModal] = React.useState<ReactNode>(null)\n\n  const makeAlert = (header: string, body: ReactNode) => {\n    setAlertModal(\n      <AlertModal\n        isOpen={true}\n        onClose={() => setAlertModal(null)}\n        headerText={header}\n      >\n        {body}\n      </AlertModal>,\n    )\n  }\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(new VError(error, 'Unhandled exception'))\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        makeAlert(\n          i18n.t`Service problem`,\n          <div>\n            {makeError(\n              i18n.t`Unexpected error occured in communication with service.`,\n            )}\n          </div>,\n        )\n      }\n    },\n    [],\n  )\n\n  const onOperationError = React.useCallback(() => {\n    makeAlert(\n      i18n.t`Communication problem`,\n      <div>\n        {makeError(i18n.t`Unexpected error occured while sending a request.`)}\n      </div>,\n    )\n  }, [])\n\n  const onUserErrors = React.useCallback((messages: ReadonlyArray<string>) => {\n    makeAlert(\n      i18n.t`Problems encountered`,\n      <div>\n        {messages.map(msg => (\n          <div>{msg}</div>\n        ))}\n      </div>,\n    )\n  }, [])\n\n  const { history } = useRouterContext()\n  const [modalOpen, setModalOpen] = React.useState(true)\n\n  const onFeedback = React.useCallback(() => {\n    setModalOpen(false)\n    showFeedback()\n  }, [])\n\n  const { business } = useRoot()\n\n  const onRestart = React.useCallback(() => {\n    setModalOpen(false)\n    history.replace(business.routerBasePath)\n    window.location.reload()\n  }, [])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Service is temporarily unavailable`}\n          >\n            <Trans>\n              Please try again in moment. We apologize for inconvenience.\n            </Trans>\n            <PrimaryButton onClick={onRetry}>\n              <Trans>Try now</Trans>\n            </PrimaryButton>\n          </AlertModal>\n        )\n      }\n      case 'otherError': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Unexpected error has occurred`}\n          >\n            <Trans>\n              If you like, please fill out feedback form so we can fix the\n              problem faster. Restart the application otherwise.\n            </Trans>\n            <br />\n            <PrimaryButton onClick={onRestart}>\n              <Trans>Restart application</Trans>\n            </PrimaryButton>\n            <SecondaryButton onClick={onFeedback}>\n              <Trans>Send feedback</Trans>\n            </SecondaryButton>\n          </AlertModal>\n        )\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  let errorGuard\n\n  if (prod) {\n    errorGuard = (\n      <SillyErrorBoundary\n        onError={error => {\n          onUnhandledError(error)\n        }}\n      >\n        {render()}\n      </SillyErrorBoundary>\n    )\n  } else {\n    const { DeveloperErrorBoundary } = require('react-error-guard')\n    errorGuard = <DeveloperErrorBoundary>{render()}</DeveloperErrorBoundary>\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onOperationError={onOperationError}\n      onUserErrors={onUserErrors}\n    >\n      <>\n        {alertModal}\n        {errorGuard}\n      </>\n    </ApolloDefender>\n  )\n}\n\nfunction isChunkError(error: Error) {\n  return error.message && error.message.indexOf('Loading chunk') >= 0\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected problem occurred`,\n  })\n}\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport DocumentTitle from 'react-document-title'\n\nimport { useRoot } from '../app/useRoot'\nimport { appConfig } from '../config'\n\nexport const PageTitle: React.FC = () => {\n  const { business } = useRoot()\n  return useObserver(() => {\n    if (business.isValid) {\n      return (\n        <DocumentTitle\n          title={`${business.branch!.brand.name} - ${\n            appConfig.pageTitleSuffix\n          }`}\n        />\n      )\n    }\n    return <DocumentTitle title={appConfig.pageTitleSuffix} />\n  })\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { autorun } from 'mobx'\nimport React from 'react'\n\nimport { useRoot } from './useRoot'\n\nexport const IdentifyGuest: React.FC = () => {\n  const { auth } = useRoot()\n  React.useEffect(\n    () =>\n      autorun(() => {\n        const id = auth.userId!\n        const token = auth.token\n        Sentry.configureScope(scope => {\n          scope.setUser({ id, username: 'GUEST' })\n          scope.setExtra('token', token)\n        })\n      }),\n    [auth],\n  )\n  return null\n}\n","import React from 'react'\n\nimport { SecondaryButton } from '../common/Buttons'\nimport { useRoot } from './useRoot'\n\ninterface IProps {}\n\nexport const ResetPersistenceButton: React.FC<IProps> = props => {\n  const root = useRoot()\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  return (\n    <SecondaryButton\n      onClick={() => {\n        root.reset()\n        location.reload()\n      }}\n    >\n      Reset uživ. dat [DEV]\n    </SecondaryButton>\n  )\n}\n","import './App.css'\n\nimport { Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile, MobileLandscape } from '../common/Responsive'\nimport { IdentifyGuest } from './IdentifyGuest'\nimport { ResetPersistenceButton } from './ResetPersistenceButton'\n\nconst LandscapeMessage = styled.div`\n  font-size: 1.1rem;\n  padding: 3rem;\n  vertical-align: center;\n`\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <IdentifyGuest />\n    <PageTitle />\n    <Desktop>\n      <DesktopApp />\n    </Desktop>\n    <Mobile>\n      <MobileApp />\n    </Mobile>\n    <MobileLandscape>\n      <LandscapeMessage>\n        <Trans>\n          We know, you like space. Our app is optimised for desktop. Leave your\n          phone in portrait for now.\n        </Trans>\n      </LandscapeMessage>\n    </MobileLandscape>\n    <ResetPersistenceButton />\n  </ErrorContainer>\n)\n\nexport default App\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from './useRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() =>\n    business.isValid ? (\n      <BrowserRouter\n        basename={business.routerBasePath}\n        key={business.routerBasePath}\n      >\n        {children}\n      </BrowserRouter>\n    ) : null,\n  )\n}\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import ReactGA from 'react-ga'\n\nimport { appConfig } from '../config'\n\nconst key = appConfig.analytics\nif (key) {\n  const debug = process.env.REACT_APP_STAGE !== 'prod'\n  ReactGA.initialize(key, {\n    debug,\n    gaOptions: {\n      siteSpeedSampleRate: 50,\n    },\n  })\n  if (debug) {\n    ReactGA.ga('set', 'sendHitTask', null)\n  }\n}\n\ninterface IOptions {\n  reportPage: boolean\n}\n\nexport function useAnalytics(opts: Partial<IOptions> = {}) {\n  if (opts.reportPage) {\n    ReactGA.pageview(window.location.href)\n  }\n  return ReactGA\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersist('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersist('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersist('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { IRootEnvironment, TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    const name = getPath(self).trim() || getType(self).name\n    return debug(`c2e:model/${name}`)\n  },\n  get env() {\n    return getEnv<IRootEnvironment>(self)\n  },\n  get client() {\n    const { client } = getEnv<IRootEnvironment>(self)\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport { Sentry } from '@speedlo/sentry'\nimport { setContext } from 'apollo-link-context'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return Boolean(self.token && self.token.length)\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      Sentry.addBreadcrumb({\n        category: 'Auth',\n        level: Sentry.Severity.Info,\n        data: {\n          userId,\n          token,\n        },\n      })\n    },\n  }))\n  .actions(self => {\n    let fetching\n\n    const fetch = async () => {\n      if (!fetching) {\n        fetching = fetchToken()\n        const { token, userId } = await fetching\n        self.authenticate(token, String(userId))\n        fetching = null\n      }\n      return fetching\n    }\n\n    const authLink = setContext(async () => {\n      if (!self.token) {\n        await fetch()\n      }\n      return {\n        headers: {\n          Authorization: `Bearer ${self.token}`,\n        },\n      }\n    })\n\n    return {\n      attachAuthLinkToClient(client: DefaultApolloClient) {\n        client.link = authLink.concat(client.link)\n      },\n    }\n  })\n\nasync function fetchToken() {\n  const { endpoint } = appConfig\n  if (!endpoint) {\n    throw new Error('Missing endpoint in configuration.')\n  }\n  const url = `${endpoint}/users/token?guest=true`\n  const options = {\n    headers: {\n      Accept: 'application/json',\n    },\n  }\n  const response = await fetch(url, options)\n  return response.json()\n}\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import gql from 'graphql-tag'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const BusinessLookupQuery = gql`\n  query GBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n  ${CompanyBranchFragment}\n`\n","import { Sentry } from '@speedlo/sentry'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { OrderOriginEnum } from '../graph/generated'\nimport { GBusinessLookup, GCompanyBranch } from '../graph/types'\nimport { logMain } from '../helpers/logger'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessLookupQuery } from './BusinessModel.graphql'\n\ntype TBranch = Omit<GCompanyBranch.Fragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<GCompanyBranch.Country>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get brandOrBranch() {\n      return {\n        brandId: this.isBrand ? this.brandId : undefined,\n        branchId: this.isBrand ? undefined : this.branchId,\n      }\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      // app can be built with a specific code for a purpose of mobile apps\n      let code = process.env.REACT_APP_BUSINESS_CODE || null\n      if (!code) {\n        // mostly used in DEV because it's not possible to use subdomains for\n        // business resolution ... use either code from url or stored one as fallback\n        const urlCode = readBusinessCodeFromUrl()\n        code = urlCode || self.code\n      }\n      return code\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: GBusinessLookup.Lookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    mockBranchData(branch: TBranch) {\n      self.branch = branch\n    },\n  }))\n  .actions(self => ({\n    queryBusiness: async () => {\n      const { data } = await self.client.query<GBusinessLookup.Query>({\n        query: BusinessLookupQuery,\n        variables: {\n          code: self.requestedCode,\n          url: window.location.href,\n        },\n      })\n\n      if (!(data && data.lookup && data.lookup.branch)) {\n        logMain('no business found, used code %s', self.requestedCode)\n        redirectAway()\n        return\n      }\n\n      self.updateFromLookup(data.lookup)\n\n      Sentry.configureScope(scope => {\n        scope.setTag('orderOrigin', self.orderOrigin)\n        scope.setExtra('brandId', self.brandId!)\n        scope.setExtra('requestedCode', self.requestedCode)\n        scope.setExtra('branchId', self.branchId)\n        scope.setExtra('companyId', self.companyId)\n        scope.setExtra('isBrand', self.isBrand)\n      })\n\n      logMain(\n        'identified branch %s, brand %s; company %s, isBrand: %s',\n        self.branchId,\n        self.brandId,\n        self.companyId,\n        self.isBrand,\n      )\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport interface TConfigModel extends Instance<typeof ConfigModel> {}\nexport interface TConfigModelProps extends SnapshotIn<typeof ConfigModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { GResolveLocationDocument } from '../graph/generated'\nimport { GResolveLocation } from '../graph/types'\nimport { formatAddress } from '../helpers/formats'\nimport { GeoPoint, gpsToLatLng } from '../helpers/gps'\nimport { i18n } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  branchId: MaybeID\n  isOpen: boolean\n  isResolved: boolean\n  isStreetAddress: boolean\n  inDeliveryLocation: boolean\n  geolocationDisabled: boolean\n  geolocationPoint: Maybe<GeoPoint>\n  isResolving: boolean\n}\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.maybe(types.number),\n    longitude: types.maybe(types.number),\n    searchValue: types.maybe(types.string),\n    address: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(self => ({\n    branchId: null,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    geolocationPoint: null,\n    isResolving: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(self.env.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== undefined || self.longitude !== undefined\n    },\n    get hasAddress() {\n      return Boolean(self.address)\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get hasFinishedSearch() {\n      return (\n        ((self.searchValue && self.searchValue.length > 0) || self.address) &&\n        !self.isResolving\n      )\n    },\n    get geoPoint() {\n      if (this.hasLocation) {\n        return {\n          latitude: self.latitude!,\n          longitude: self.longitude!,\n        }\n      }\n      return null\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      if (this.geoPoint) {\n        return gpsToLatLng(this.geoPoint)\n      }\n      return null\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: any) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: GResolveLocation.ResolveLocation) {\n      const { finalAddress: address } = result\n      if (address) {\n        self.address = formatAddress(address)\n      }\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n      if (result.isResolved) {\n        self.setLocation(result.gpsCoordinates)\n        self.log('resolved as %s', self.address)\n      } else {\n        self.log('not resolved')\n      }\n    },\n    setVolatileProps(props: Partial<IVolatileProps>) {\n      Object.assign(self, props)\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = false\n    },\n    clearAddress() {\n      self.address = ''\n    },\n    setIsResolving(state: boolean) {\n      self.isResolving = state\n    },\n  }))\n  .actions(self => {\n    const resolver = async (vars?: Partial<GResolveLocation.Variables>) => {\n      self.setIsResolving(true)\n\n      const variables: GResolveLocation.Variables = {\n        ...self.resolutionTarget,\n        ...vars,\n      }\n      const { data } = await self.client.query<GResolveLocation.Query>({\n        query: GResolveLocationDocument,\n        variables,\n      })\n      if (data !== null) {\n        self.setResolutionResult(data.resolveLocation)\n      }\n      self.setIsResolving(false)\n    }\n    return {\n      validateUserLocation() {\n        if (self.hasLocation) {\n          self.log(\n            'validating stored user location %s, %s',\n            self.latitude,\n            self.longitude,\n          )\n          resolver({ latitude: self.latitude, longitude: self.longitude })\n        }\n      },\n      withUserAddress(address: string) {\n        self.searchValue = address\n        if (address === '') {\n          self.clearAddress()\n        } else {\n          self.log('resolving user address: %s', address)\n          resolver({ address })\n        }\n      },\n      withUserLocation(userLocation: GeoPoint) {\n        self.log('with user location: %j', userLocation)\n        self.latitude = userLocation.latitude\n        self.longitude = userLocation.longitude\n        resolver(userLocation)\n      },\n      useGeolocationResult(point: GeoPoint) {\n        self.geolocationPoint = point\n      },\n      attemptGeolocation() {\n        self.log('geolocating...')\n        self.env.geolocation.getCurrentPosition(\n          ({ coords }) => {\n            const { latitude, longitude } = coords\n            self.log(\n              'geolocated at coords %s, %s (acc: %s)',\n              coords.latitude,\n              coords.longitude,\n              coords.accuracy,\n            )\n            this.useGeolocationResult({ latitude, longitude })\n          },\n          err => {\n            self.log(new VError('failed geolocation', err))\n            self.disableGeolocation()\n            window.alert(i18n.t`Your browser does not support geolocation.`)\n          },\n          {\n            enableHighAccuracy: true,\n            maximumAge: 60 * 1000,\n          },\n        )\n      },\n    }\n  })\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { GeoPoint, gpsToLatLng, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n  clickPoint: Maybe<GeoPoint>\n}\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n    clickPoint: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panToLocation(gps: GeoPoint, radiusMeters: number = 2000) {\n      if (self.mapRef) {\n        // const bounds = getBounds([\n        //   computeDestinationPoint(gps, radiusMeters, 135), // SE corner\n        //   computeDestinationPoint(gps, radiusMeters, 315), // NW corner\n        // ])\n\n        // // @ts-ignore padding missing in types\n        // self.mapRef.panToBounds(\n        //   {\n        //     west: bounds.minLng,\n        //     east: bounds.maxLng,\n        //     north: bounds.minLat,\n        //     south: bounds.maxLat,\n        //   },\n        //   20,\n        // )\n        self.mapRef.panTo(gpsToLatLng(gps))\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import scriptjs from 'scriptjs'\n\nimport { logOrder } from './logger'\n\nconst embedScript = 'https://gate.gopay.cz/gp-gw/js/embed.js'\nconst embedScriptSandbox = 'https://gw.sandbox.gopay.com/gp-gw/js/embed.js'\n\ninterface ICheckoutResult {\n  url: string\n  id: number\n}\n\nexport async function executeGoPayPayment(url: string) {\n  logOrder('GoPay init', url)\n  await loadScript(url)\n  return checkout(getOptions(url))\n}\n\nfunction getOptions(url: string) {\n  // const isSafari = /^((?!chrome|android|mobile).)*safari/i.test(\n  //   navigator.userAgent,\n  // )\n  // logOrder('Browser is desktop Safari', isSafari)\n  return { gatewayUrl: url, inline: true }\n}\n\nfunction loadScript(url: string) {\n  const scriptUrl = url.includes('gw.sandbox.gopay.com')\n    ? embedScriptSandbox\n    : embedScript\n  logOrder('GoPay script url', scriptUrl)\n  return new Promise(resolve => {\n    scriptjs(scriptUrl, resolve)\n  })\n}\n\nfunction checkout(options: object): Promise<number> {\n  return new Promise(resolve => {\n    logOrder('GoPay checkout')\n    // @ts-ignore_gopay global\n    _gopay.checkout(options, (result: ICheckoutResult) => {\n      logOrder('GoPay result', result)\n      resolve(result.id)\n    })\n  })\n}\n","import { isoDate } from '@speedlo/graphql'\nimport { Sentry } from '@speedlo/sentry'\nimport { when } from 'mobx'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport {\n  DeliveryTypeEnum,\n  FOrderFragmentDoc,\n  FOrderMobileFragment,\n  FOrderMobileFragmentDoc,\n  FRecipeFragmentDoc,\n  PaymentGateEnum,\n  QFoodMenuDocument,\n} from '../graph/generated'\nimport {\n  FOrder,\n  FRecipe,\n  GAddToOrder,\n  GChangeOrderItem,\n  GCreateDeliveryOrder,\n  GCreateOrder,\n  GCreatePickupOrder,\n  GOrderPaymentStatus,\n  GRemoveOrderItem,\n  GSubmitOrder,\n  GVamStatus,\n} from '../graph/types'\nimport { executeGoPayPayment } from '../helpers/gopay'\nimport { logMain, logOrder } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { i18n } from '../i18n'\nimport {\n  PickupMapBranchQuery,\n  PickupMapBrandQuery,\n} from '../segments/map/PickupMap.graphql'\nimport { IOrderFormState } from '../segments/orderForm/OrderFormSetup'\nimport { BaseModel } from './BaseModel'\nimport {\n  AddToOrderMobileMutation,\n  AddToOrderMutation,\n  ChangeOrderItemMutation,\n  CreateDeliveryOrderMutation,\n  CreatePickupOrderMutation,\n  OrderCartForRecipeQuery,\n  OrderPaymentStatusQuery,\n  RemoveOrderItemMutation,\n  SubmitOrderMutation,\n  VamStatusQuery,\n} from './OrderModel.graphql'\n\ninterface IVolatileProps {\n  isSubmitting: boolean\n  isGoPayChecking: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  agreements: TAgreement[]\n  lastActiveRecipeId: MaybeID\n  isVamInitialized: boolean\n  timePickerOpen: boolean\n  shouldRefreshCart: boolean\n  delayedOrderEnabled: boolean\n}\n\nexport type TAgreement = GVamStatus.VamStatus\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    payment: PaymentGateEnum.Gopay,\n    deliverAt: types.maybe(types.Date),\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n    tips: '',\n  })\n  .volatile<IVolatileProps>(self => ({\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null,\n    agreements: [],\n    lastActiveRecipeId: null,\n    isVamInitialized: false,\n    timePickerOpen: false,\n    shouldRefreshCart: false,\n    delayedOrderEnabled: false,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get fragmentOrderId() {\n      return `Order-${self.orderId}`\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get usingPaymentMethodWithTips() {\n      return self.payment === PaymentGateEnum.Gopay\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return '+'\n    },\n    getSubmitVariables(formValues: IOrderFormState): GSubmitOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstname,\n          lastName: formValues.lastname,\n          emails: [{ email: formValues.email }],\n          phones: [{ phone: `${formValues.phonePrefix}${formValues.phone}` }],\n        },\n        note: formValues.note,\n        tips: formValues.tips.length ? Number.parseInt(formValues.tips, 10) : 0,\n        paymentGate: formValues.payment,\n        deliverAt: self.deliverAt && isoDate(self.deliverAt),\n        agreements: formValues.agreements\n          .filter(RM.propEq('isConfirmed', true))\n          .map(RM.prop('id'))\n          .filter(Boolean),\n      }\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setPaymentMethod(method: PaymentGateEnum) {\n      self.payment = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: GCreateOrder.Fragment) {\n      self.orderId = result.id\n      self.branchId = result.companyBranch.id\n      self.deliverAt = undefined\n      logMain('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        logMain('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        logMain(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n      self.isVamInitialized = false\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    useAgreements(agreements: ReadonlyArray<TAgreement>) {\n      if (Array.isArray(agreements)) {\n        self.agreements = agreements\n      }\n      self.isVamInitialized = true\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    openTimePicker() {\n      self.timePickerOpen = true\n    },\n    closeTimePicker() {\n      self.timePickerOpen = false\n    },\n    setCartRefresh(shouldRefresh: boolean) {\n      self.shouldRefreshCart = shouldRefresh\n    },\n    setTips(tips: string) {\n      self.tips = tips\n    },\n    setDeliverAt(deliverAt: Date | undefined) {\n      self.deliverAt = deliverAt\n    },\n    enableDelayedOrder() {\n      self.delayedOrderEnabled = true\n    },\n    async queryPaymentStatus(\n      orderId: ID = self.orderId!,\n    ): Promise<GOrderPaymentStatus.Status | null> {\n      const variables: GOrderPaymentStatus.Variables = {\n        orderId,\n      }\n      try {\n        const result = await self.client.query<GOrderPaymentStatus.Query>({\n          fetchPolicy: 'no-cache',\n          query: OrderPaymentStatusQuery,\n          variables,\n        })\n        return result.data.status\n      } catch (err) {\n        logOrder('failed to verify payment status for order %s: ', orderId)\n        return null\n      }\n    },\n    rememberFormValues(values: IOrderFormState) {\n      if (self.root.user.shouldRememberForm) {\n        self.firstname = values.firstname\n        self.lastname = values.lastname\n        self.email = values.email\n        self.phone = values.phone\n        self.phonePrefix = values.phonePrefix\n        self.note = values.note\n        self.tips = values.tips\n        self.payment = values.payment\n      } else {\n        self.firstname = ''\n        self.lastname = ''\n        self.email = ''\n        self.phone = ''\n        self.phonePrefix = ''\n        self.note = ''\n        self.tips = ''\n        self.payment = PaymentGateEnum.Gopay\n      }\n    },\n  }))\n  .actions(self => ({\n    async createDeliveryOrder() {\n      const { business, location } = self.root\n      if (!location.geoPoint) {\n        return null\n      }\n      const variables: GCreateDeliveryOrder.Variables = {\n        gps: location.geoPoint,\n        orderOrigin: business.orderOrigin,\n        ...business.brandOrBranch,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreateDeliveryOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreateDeliveryOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    async createPickupOrder(branchId: ID) {\n      const { business } = self.root\n      const variables: GCreatePickupOrder.Variables = {\n        branchId,\n        orderOrigin: business.orderOrigin,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreatePickupOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreatePickupOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    prefetchPickup() {\n      const { business } = self.root\n      if (business.isBrand) {\n        self.client.query({\n          query: PickupMapBrandQuery,\n          variables: { brandId: business.brandId },\n        })\n      } else {\n        self.client.query({\n          query: PickupMapBranchQuery,\n          variables: { branchId: business.branchId },\n        })\n      }\n    },\n    prefetchFoodMenu(branchId?: ID) {\n      if (branchId) {\n        self.client.query({ query: QFoodMenuDocument, variables: { branchId } })\n      }\n    },\n    prefetchFood(recipeId: ID) {\n      self.client.query({\n        query: OrderCartForRecipeQuery,\n        variables: { recipeId },\n      })\n    },\n    async addFromRecipe(recipeId: ID, sideDishes: ID[] = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<FOrder.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: FOrderFragmentDoc,\n        fragmentName: 'FOrder',\n      })\n      const recipe = self.client.readFragment<FRecipe.Fragment>({\n        id: `Recipe-${recipeId}`,\n        fragment: FRecipeFragmentDoc,\n        fragmentName: 'FRecipe',\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              price: {\n                __typename: 'PriceConverted',\n                value: 0,\n                formattedValue: '---',\n              },\n              recipe: { ...recipe, sideDishes: [] },\n              sideDishes: [],\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async addFromRecipeMobile(recipeId: ID, sideDishes: ID[] = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<FOrderMobileFragment>({\n        id: self.fragmentOrderId,\n        fragment: FOrderMobileFragmentDoc,\n        fragmentName: 'FOrderMobile',\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              recipe: { __typename: 'Recipe', id: recipeId },\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMobileMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async updateItem(itemId: ID, sideDishes: ID[] = []) {\n      const variables: GChangeOrderItem.Variables = {\n        orderId: self.orderId!,\n        itemId,\n        sideDishes,\n      }\n      await self.client.mutate({ mutation: ChangeOrderItemMutation, variables })\n    },\n    removeItemFromCart(itemId: ID) {\n      const variables: GRemoveOrderItem.Variables = {\n        itemId,\n      }\n      const current = self.client.readFragment<FOrder.Fragment>({\n        fragment: FOrderFragmentDoc,\n        fragmentName: 'FOrder',\n        id: self.fragmentOrderId,\n      })\n      self.client.mutate({\n        mutation: RemoveOrderItemMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          destroyOrderRecipe: {\n            ...current,\n            countWares: current ? current.countWares - 1 : 0,\n            items: current\n              ? current.items.filter(item => item.id !== itemId)\n              : [],\n          },\n        },\n      })\n    },\n    async initVam() {\n      const variables: GVamStatus.Variables = {\n        input: {\n          orderId: self.orderId!,\n          email: self.email,\n          firstname: self.firstname,\n          lastname: self.lastname,\n          phone: self.phone,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        self.vamFailed()\n        Sentry.withScope(scope => {\n          Object.keys(variables).forEach(key => {\n            scope.setExtra(key, variables[key])\n          })\n          Sentry.captureException(new VError(err, 'VAM init failed'))\n        })\n      }\n    },\n    async updateVam(formValues: IOrderFormState) {\n      const phone = `${formValues.phonePrefix.trim()}${formValues.phone.trim()}`\n      const email = formValues.email.trim()\n      const firstname = formValues.firstname.trim()\n      const lastname = formValues.lastname.trim()\n      const variables: GVamStatus.Variables = {\n        input: {\n          email,\n          phone,\n          firstname,\n          lastname,\n          orderId: self.orderId!,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        self.vamFailed()\n        Sentry.withScope(scope => {\n          Object.keys(variables).forEach(key => {\n            scope.setExtra(key, variables[key])\n          })\n          Sentry.captureException(new VError(err, 'VAM update failed'))\n        })\n      }\n    },\n    submitOrder: async (formValues: IOrderFormState) => {\n      self.isSubmitting = true\n      let result\n\n      self.rememberFormValues(formValues)\n\n      try {\n        result = await self.client.mutate({\n          fetchPolicy: 'no-cache',\n          mutation: SubmitOrderMutation,\n          variables: self.getSubmitVariables(formValues),\n        })\n      } catch (err) {\n        self.submitFailed()\n        throw reportError(new VError('order submit mutation error: %j', err))\n      }\n\n      if ((result.errors && result.errors.length) || !result.data) {\n        self.submitFailed()\n        throw reportError(\n          new VError('order submit graphql errors: %j', result.errors),\n        )\n      }\n\n      const submitResult: GSubmitOrder.FinishOrder = result.data.finishOrder\n      if (submitResult.userErrors && submitResult.userErrors.length) {\n        self.submitFailed(submitResult.userErrors)\n        throw new VError('Order user errors: %j', submitResult.userErrors)\n      }\n\n      if (formValues.payment === PaymentGateEnum.Cash) {\n        self.submitFinished()\n        return\n      }\n\n      if (!submitResult.gopayUrl) {\n        self.submitFailed()\n        throw reportError(new Error('GoPay url missing from response'))\n      }\n\n      const { gopayUrl } = submitResult\n\n      Sentry.addBreadcrumb({\n        category: 'GoPay',\n        message: 'init payment',\n        level: Sentry.Severity.Info,\n        data: {\n          gopayUrl,\n        },\n      })\n\n      await executeGoPayPayment(submitResult.gopayUrl)\n\n      self.goPayStatusCheck(true)\n      const paymentStatus = await self.queryPaymentStatus()\n      self.goPayStatusCheck(false)\n\n      if (paymentStatus) {\n        if (paymentStatus.isSuccess) {\n          self.submitFinished()\n        } else {\n          self.submitFailed(\n            paymentStatus.userErrors.length\n              ? paymentStatus.userErrors\n              : undefined,\n          )\n          throw new VError('Payment failed: %j', paymentStatus.userErrors)\n        }\n      } else {\n        self.submitFailed()\n        throw reportError(new VError('No payment status returned'))\n      }\n    },\n  }))\n  .actions(self => ({\n    checkPaymentStatus() {\n      const match = window.location.href.match(/orderId=(\\d+)/i)\n      if (!match) {\n        return\n      }\n      const [, orderId] = match\n      when(\n        () => self.root.auth.isValid,\n        async () => {\n          Sentry.addBreadcrumb({\n            category: 'GoPay',\n            message: 'finish after redirect',\n            level: Sentry.Severity.Info,\n            data: {\n              orderId,\n            },\n          })\n          // delay displaying status checking modal\n          const checkDelay = setTimeout(() => self.goPayStatusCheck(true), 500)\n          const paymentStatus = await self.queryPaymentStatus(orderId)\n\n          clearTimeout(checkDelay)\n          self.goPayStatusCheck(false)\n\n          if (paymentStatus && paymentStatus.isSuccess) {\n            self.orderPaid(orderId)\n            window.location.replace(\n              `${self.root.business.routerBasePath}/finish`,\n            )\n          } else {\n            Sentry.captureMessage(\n              'GoPay status check failed',\n              Sentry.Severity.Error,\n            )\n            const phone = self.root.business.branch!.phone\n            self.submitFailed([\n              i18n.t`We were unable to verify status of your payment. Please contact operator using number ${phone}`,\n            ])\n            return\n          }\n        },\n      )\n    },\n  }))\n  .actions(self => ({\n    init() {\n      Sentry.configureScope(scope => {\n        scope.setExtra('orderId', self.orderId)\n      })\n      self.checkPaymentStatus()\n    },\n  }))\n\nfunction reportError(error: Error) {\n  Sentry.captureException(error)\n  return error\n}\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    rememberForm: types.maybeNull(types.boolean),\n    showAppleBanner: types.optional(types.boolean, true),\n  })\n  .volatile(self => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n  }))\n  .actions(self => ({\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n    hideAppleBanner() {\n      self.showAppleBanner = false\n    },\n  }))\n  .views(self => ({\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport {\n  applySnapshot,\n  getSnapshot,\n  Instance,\n  SnapshotIn,\n  types,\n} from 'mobx-state-tree'\n\nimport { logDebug } from '../helpers/logger'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .actions(self => {\n    let initialSnapshot\n    return {\n      afterCreate() {\n        const { business, map, ...snapshot } = getSnapshot(self)\n        initialSnapshot = snapshot\n      },\n      reset() {\n        logDebug(initialSnapshot)\n        applySnapshot(self, initialSnapshot)\n      },\n      init: async () => {\n        self.auth.attachAuthLinkToClient(self.client)\n        await Promise.all(self.persistedModels.map(persistModel))\n        await self.business.queryBusiness()\n        self.order.init()\n        initialSnapshot.business = getSnapshot(self.business)\n      },\n    }\n  })\n\nexport interface IRootEnvironment {\n  client: DefaultApolloClient\n  fetch: TFetch\n  geolocation: Geolocation\n}\n\nexport function createRootModel(client: DefaultApolloClient) {\n  const root = RootModel.create({}, {\n    client,\n    fetch: window.fetch,\n    geolocation: navigator.geolocation,\n  } as IRootEnvironment)\n  root.init()\n  return root\n}\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider } from '@speedlo/graphql'\nimport { useSentryInit } from '@speedlo/sentry'\nimport { updateWorker } from '@speedlo/tools'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport { RootProvider } from './app/useRoot'\nimport Pacman from './common/Pacman'\nimport ThemeSwitchProvider from './common/ThemeSwitchProvider'\nimport { appConfig } from './config'\nimport { createApolloClient } from './graph/createClient'\nimport { useAnalytics } from './hooks/useAnalytics'\nimport { i18n, I18nManager } from './i18n'\nimport { createRootModel } from './models/RootModel'\n\nconst client = createApolloClient()\nconst root = createRootModel(client)\n\nconst Main = () => {\n  useAnalytics({ reportPage: true })\n  useSentryInit(appConfig.sentryDSN)\n  return (\n    <React.Suspense fallback={<Pacman />}>\n      <RootProvider value={root}>\n        <ApolloProvider client={client}>\n          <I18nManager>\n            <Router>\n              <ThemeSwitchProvider>\n                <App />\n              </ThemeSwitchProvider>\n            </Router>\n          </I18nManager>\n        </ApolloProvider>\n      </RootProvider>\n    </React.Suspense>\n  )\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))\n\nupdateWorker.register({\n  autoUpdate: true,\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    if (event.data === 'update-applied') {\n      location.reload()\n    }\n  })\n}\n","import { createDefaultApolloClient } from '@speedlo/graphql'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport createLogLink from 'apollo-link-log'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from '../config'\nimport { logGraph } from '../helpers/logger'\nimport { isNetworkOnline } from '../helpers/offline'\n\nexport function createApolloClient() {\n  return createDefaultApolloClient(\n    createLoggingLink(),\n    createRetryLink(),\n    createOfflineLink(),\n    createHttpLink(),\n  )\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createLoggingLink() {\n  return createLogLink({\n    enabled: process.env.REACT_APP_STAGE === 'dev',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: error => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n"],"sourceRoot":""}