{"version":3,"sources":["helpers/gps.ts","common/AlertModal.tsx","hooks/useOrderModel.ts","common/Pacman.tsx","hooks/useAlertModal.ts","segments/map/hooks/useOrderCreate.ts","helpers/formats.ts","app/useRoot.tsx","i18n.tsx","config.ts","app/ThemeSwitchProvider.tsx","enableDebug.ts","graph/generated.ts","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","../node_modules/@speedlo/assets/flags sync /^/.*/.svg$","../node_modules/@speedlo/assets/logos sync /^/logo/-.*/.svg$","common/ErrorContainer.tsx","common/PageTitle.tsx","app/AddSentryContext.tsx","app/BusinessLoader.tsx","app/CypressHelper.tsx","app/IdentifyGuest.tsx","app/ResetOrderAtRoot.tsx","app/ResetPersistenceButton.tsx","app/SuspendOnInit.tsx","app/hooks/useSuspenseWhen.ts","app/App.tsx","app/Router.tsx","hooks/useAnalytics.ts","helpers/logger.ts","helpers/persistModel.ts","models/BaseModel.ts","models/AuthModel.ts","models/BannerModel.ts","models/BusinessModel.ts","models/CartModel.ts","models/ConfigModel.ts","models/LocationModel.ts","models/MapModel.ts","models/OrderModel.ts","models/UserModel.ts","models/RootModel.ts","index.tsx","graph/createClient.ts","common/Buttons.tsx","common/Responsive.tsx"],"names":["__webpack_require__","d","__webpack_exports__","gpsToLatLngLit","gpsToLatLng","latLngToGps","gps","lat","Number","latitude","lng","longitude","google","maps","LatLng","latLng","AlertModal","_ref","isOpen","headerText","onClose","children","modalProps","Object","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_3__","assign","toggle","className","data-testid","reactstrap__WEBPACK_IMPORTED_MODULE_4__","tag","Container","reactstrap__WEBPACK_IMPORTED_MODULE_6__","useOrderModel","_app_useRoot__WEBPACK_IMPORTED_MODULE_0__","useRoot","order","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","Pacman","_ref$noMargin","noMargin","style","display","alignSelf","justifyContent","name","marginTop","useAlertModal","_React$useState","React","useState","_React$useState2","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","alertModal","setAlertModal","header","body","useOrderCreate","onConfirm","_useRoot","location","business","_useMDeliveryOrderCre","useMDeliveryOrderCreate","deliveryOrderCreate","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","_useMPickupOrderCreat","useMPickupOrderCreate","pickupOrderCreate","createDeliveryOrder","useCallback","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","result","wrap","_context","prev","next","geoPoint","abrupt","branchId","setBranch","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","orderOrigin","brandOrBranch","sent","branch","id","Sentry","withScope","scope","setExtras","requestedBranchId","createdOrderId","createdBranchId","captureMessage","orderCreated","stop","createPickupOrder","_ref2","_callee2","_context2","_x","apply","this","arguments","formatTime","formatAddress","date_fns_fp__WEBPACK_IMPORTED_MODULE_0__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_1__","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","parse","address","street","houseNumber","concat","city","state","RootProvider","rootContext","createContext","undefined","root","useContext","Error","Provider","i18n","setupI18n","I18nManager","user","forceUpdate","useAutorun","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","initialized","languageActivated","loadCatalog","language","log","activate","activateLanguage","i","react__WEBPACK_IMPORTED_MODULE_7___default","_lingui_react__WEBPACK_IMPORTED_MODULE_5__","lang","catalog","load","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","appConfig","fallbackLanguage","supportedLanguages","endpoint","persistenceKey","process","REACT_APP_LOCAL_KEY","googleMapsApi","redirectOnFail","sentryDSN","pageTitleSuffix","analytics","ThemeSwitchProvider","observer","variables","brandId","isBrand","hasOrder","data","useQThemeStyle","skip","isValid","context","noBatch","fetchPolicy","theme","useMemo","styles","defaultTheme","primary","secondary","tertiary","primaryHover","calcHoverColor","secondaryHover","tertiaryHover","tertiaryText","unselected","unselectedHover","unselectedText","storeLogo","storeLogoMobile","backgroundCart","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","active","main","mainSecondary","getTheme","react__WEBPACK_IMPORTED_MODULE_4___default","styled_components__WEBPACK_IMPORTED_MODULE_1__","Fragment","useTheme","ThemeContext","inputColor","Color","lighten","hsl","string","window","localStorage","setItem","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderStateEnum","OrderBillingTypeEnum","PaymentGateEnum","PaymentTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","SectorTypeEnum","ZoneTypeEnum","ShiftUserStateEnum","OrderOriginCategoryEnum","WareCategoryTypeEnum","SubscriptionActionType","WareRequirementEnum","SettingTypeEnum","FCompanyBranchFragmentDoc","gql","_templateObject","FPromoCodeFragmentDoc","_templateObject2","FRecipeFragmentDoc","_templateObject3","FCartItemFragmentDoc","_templateObject4","FPriceFragmentDoc","_templateObject5","FCartGoodsFragmentDoc","_templateObject6","FCartStaticFragmentDoc","_templateObject7","FCartSummaryFragmentDoc","_templateObject8","FRecipeDetailFragmentDoc","_templateObject9","FOrderFinishedFragmentDoc","_templateObject10","FCartPresenceFragmentDoc","_templateObject11","FFoodMenuCategoryFragmentDoc","_templateObject12","FFoodMenuRecipeFragmentDoc","_templateObject13","FOrderCreateFragmentDoc","_templateObject14","FGeoPointFragmentDoc","_templateObject15","FJsonAddressFragmentDoc","_templateObject16","FAddressFragmentDoc","_templateObject17","FCompanyBranchStatusFragmentDoc","_templateObject18","FPickupBranchFragmentDoc","_templateObject19","FShopOpeningHoursFragmentDoc","_templateObject20","QBusinessLookupDocument","_templateObject21","useQBusinessLookup","baseOptions","Hooks","QThemeStyleDocument","_templateObject22","MAddToCartDocument","_templateObject23","useMAddToCart","MChangeCartItemDocument","_templateObject24","useMChangeCartItem","MRemoveCartItemDocument","_templateObject25","useMRemoveCartItem","QCartDocument","_templateObject26","useQCart","QCartItemDocument","_templateObject27","useQCartItem","QCartRecipeDocument","_templateObject28","useQCartRecipe","useExecutableQCartRecipe","options","QOrderFinishDocument","_templateObject29","useQOrderFinish","QFoodMenuDocument","_templateObject30","useQFoodMenu","QFoodMenuCartPresenceDocument","_templateObject31","useQFoodMenuCartPresence","MDeliveryOrderCreateDocument","_templateObject32","MPickupOrderCreateDocument","_templateObject33","QInitialDeliveryLocationDocument","_templateObject34","useQInitialDeliveryLocation","_templateObject35","QPickupMapDocument","_templateObject36","useQPickupMap","QResolveLocationDocument","_templateObject37","useExecutableQResolveLocation","QMobileShopIntroDocument","_templateObject38","useQMobileShopIntro","QMobileShopStatusDocument","_templateObject39","useQMobileShopStatus","QSmartBannerDocument","_templateObject40","useQSmartBanner","MOrderDeliveryTimeDocument","_templateObject41","useMOrderDeliveryTime","_templateObject42","MOrderPromoAddDocument","_templateObject43","useMOrderPromoAdd","MOrderPromoRemoveDocument","_templateObject44","useMOrderPromoRemove","MOrderTipUpdateDocument","_templateObject45","useMOrderTipUpdate","MSubmitOrderDocument","_templateObject46","useMSubmitOrder","QOrderFormDocument","_templateObject47","useQOrderForm","QOrderFormAgreementsDocument","_templateObject48","useQOrderFormAgreements","QOrderPaymentStatusDocument","_templateObject49","useExecutableQOrderPaymentStatus","QOrderPromoCodesDocument","_templateObject50","useQOrderPromoCodes","QOrderTimePickerDocument","_templateObject51","useQOrderTimePicker","QShopHeaderBranchDocument","_templateObject52","useQShopHeaderBranch","QShopHeaderIntroDocument","_templateObject53","useQShopHeaderIntro","map","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","webpackAsyncContext","req","ids","e","then","t","Promise","resolve","code","keys","module","exports","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","./cs.svg","./de.svg","./en.svg","./pl.svg","./sk.svg","webpackContext","webpackContextResolve","./logo-doveze.svg","./logo-gopay.svg","./logo-mastercard.svg","./logo-visa.svg","makeError","message","_","ErrorContainer","errorGuard","_ref$prod","prod","slicedToArray","errorKind","setErrorKind","_useAlertModal","_useAlertModal2","makeAlert","onRetry","onUnhandledError","error","indexOf","isChunkError","setLevel","Severity","Debug","captureException","flushSentry","reload","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","console","react_default","onOperationError","onUserErrors","messages","msg","key","history","useRouterContext","_React$useState3","_React$useState4","modalOpen","setModalOpen","onFeedback","showReportDialog","labelClose","title","onRestart","replace","routerBasePath","render","_lingui_react","Buttons","onClick","tools_dist","onError","DeveloperErrorBoundary","require","default","dist","PageTitle","useEffect","document","autorun","brand","AddSentryContext","useSentryScope","orderModel","orderId","orderBranchId","deliverAt","BusinessLoader","_useQBusinessLookup","requestedCode","url","href","loading","lookup","updateFromLookup","companyId","CypressHelper","props","IdentifyGuest","auth","userId","token","configureScope","setUser","username","setExtra","ResetOrderAtRoot","match","useRouter","path","isExact","orderCancel","ResetPersistenceButton","SuspendOnInit","predicate","suspend","setSuspend","thrown","useRef","resolverRef","current","when","useSuspenseWhen","DesktopApp","lazy","all","bind","MobileApp","App","ErrorContainer_ErrorContainer","IdentifyGuest_IdentifyGuest","PageTitle_PageTitle","ResetOrderAtRoot_ResetOrderAtRoot","CypressHelper_CypressHelper","Suspense","fallback","SuspendOnInit_SuspendOnInit","Responsive","ResetPersistenceButton_ResetPersistenceButton","Router","useObserver","react_router_dom","basename","ReactGA","initialize","debug","gaOptions","siteSpeedSampleRate","logPersist","persistModel","model","modelName","getType","stateKey","writeState","snapshot","localforage","catch","err","setTag","getItem","removeItem","applySnapshot","getSnapshot","onSnapshot","BaseModel","types","volatile","client","actions","self","setClient","views","getPath","trim","getRoot","AuthModel","named","maybeNull","authenticate","addBreadcrumb","category","level","Info","BannerModel","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","isMobileApp","differenceInDays","Boolean","setInstalledNow","setClosedNow","BusinessModel","banners","country","Web","defaultLanguage","company","urlCode","URL","searchParams","get","codeParam","REACT_APP_BUSINESS_CODE","knownBasePath","toLowerCase","ensureBannerForCurrentBranch","has","set","CartModel","withGoods","withPresence","orderIsSubmitting","updateDisplay","isMobile","showGoods","setOrderSubmitting","ConfigModel","orderItemsMax","LocationModel","number","searchValue","optional","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","geolocationPoint","isResolving","hasResolutionResult","isGeolocationAvailable","navigator","geolocation","hasLocation","hasAddress","length","hasSearchValue","isDeliveryAddress","resolutionTarget","setLocation","setIsResolving","resolving","setSearchValue","search","setAddress","clearAddress","setGeolocationPoint","point","disableGeolocation","setResolutionResult","companyBranch","isValidAddress","finalAddress","gpsCoordinates","zone","setSearchResult","setAsNotResolved","setAsNotAddress","resetResolution","GPSCzechia","MapModel","zoom","mapRef","clickPoint","center","setMapRef","ref","updateZoom","getZoom","updatePosition","getCenter","ev","clearClickPoint","OrderModel","orderMethod","Messenger","paymentMethod","Gopay","tips","isSubmitting","isGoPayChecking","submitErrors","lastActiveRecipeId","timePickerOpen","delayedOrderEnabled","addToCartRecipeId","changeCartItemId","isVamInitialized","usingDeliveryOrderMethod","usingPickupOrderMethod","Pickup","usingPaymentMethodWithTips","hasErrors","defaultPhonePrefix","phonePrefix","disableInteraction","useOrderMethod","method","setPaymentMethod","orderPaid","submitStarted","submitFinished","submitFailed","errors","vamFailed","clearErrors","goPayStatusCheck","checking","setUsedRecipeId","recipeId","openTimePicker","closeTimePicker","setTips","setDeliverAt","enableDelayedOrder","addToCart","changeCartItem","itemId","initVam","firstname","lastname","email","phone","note","UserModel","selectedLanguage","rememberForm","boolean","showAppleBanner","closingTimeAlertHidden","orderLimitAlertHidden","memoryApplied","detectLanguage","shouldRememberForm","selectLanguage","showClosingTime","hideClosingTime","showOrderLimit","hideOrderLimit","setFormRememberYes","setFormRememberNo","setMemoryApplied","hideAppleBanner","RootModel","cart","config","persistedModels","extend","initialSnapshot","observable","box","afterCreate","_getSnapshot","objectWithoutProperties","reset","init","_init","asyncToGenerator","regenerator_default","ReactDOM","opts","reportPage","pageview","useAnalytics","useSentryInit","rootInit","rootInst","create","newClient","getToken","fetchGuestToken","createDefaultApolloClient","createAuthLink","createLanguageLink","createLogLink","enabled","createRetryLink","createOfflineLink","createNetworkLink","createApolloClient","value","Router_Router","src_app_App","getElementById","updateWorker","register","autoUpdate","onUpdate","sw","setTimeout","confirm","postMessage","serviceWorker","addEventListener","event","PrimaryButton","styled","Button","withConfig","displayName","componentId","themeProp","SecondaryButton","SelectButtonThemed","selected","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_3___default","css","mediaDesktop","mediaMobile","_ref3","mobileBreakpoint","Desktop","react__WEBPACK_IMPORTED_MODULE_1___default","react_responsive__WEBPACK_IMPORTED_MODULE_2___default","minWidth","Mobile","maxWidth"],"mappings":"0FAIAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAO,IAAMF,EAAiB,SAACG,GAAD,MAA+C,CAC3EC,IAAKC,OAAOF,EAAIG,UAChBC,IAAKF,OAAOF,EAAIK,aAGLP,EAAc,SAACE,GAAD,OACzB,IAAIM,OAAOC,KAAKC,OAAON,OAAOF,EAAIG,UAAWD,OAAOF,EAAIK,aAE7CN,EAAc,SAACU,GAAD,MAA2C,CACpEN,SAAUD,OAAOO,EAAOR,OACxBI,UAAWH,OAAOO,EAAOL,oJCGdM,EAA+B,SAAAC,GAAA,IAC1CC,EAD0CD,EAC1CC,OACAC,EAF0CF,EAE1CE,WACAC,EAH0CH,EAG1CG,QACAC,EAJ0CJ,EAI1CI,SACGC,EALuCC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,qDAO1CQ,EAAAC,EAAAC,cAACC,EAAA,EAADL,OAAAM,OAAA,CACEX,OAAQA,EACRY,OAAQV,EACRW,UAAU,oBACNT,EAJN,CAKEU,cAAY,eAEZP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAaC,IAAKC,IAAWL,OAAQV,EAASW,UAAU,iBACtDN,EAAAC,EAAAC,cAAA,YAAOR,IAETM,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAWL,UAAU,eACnBN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,wBAAwBV,wCCnC7CrB,EAAAC,EAAAC,EAAA,sBAAAmC,IAAA,IAAAC,EAAAtC,EAAA,IAEO,SAASqC,IAEd,OADkBE,cAAVC,yCCHV,IAAAC,EAAAzC,EAAA,GAAA0C,EAAA1C,EAAA2C,EAAAF,GAAAG,EAAA5C,EAAA,KAAA6C,EAAA7C,EAAA2C,EAAAC,GAoBeE,IAbkB,SAAA7B,GAAA,IAAA8B,EAAA9B,EAAG+B,gBAAH,IAAAD,KAAA,OAC/BL,EAAAhB,EAAAC,cAAA,OACEsB,MAAO,CACLC,QAAS,OACTC,UAAW,SACXC,eAAgB,UAElBpB,cAAY,UAEZU,EAAAhB,EAAAC,cAACkB,EAAAnB,EAAD,CAAS2B,KAAK,SAASJ,MAAOD,EAAW,GAAK,CAAEM,UAAW,mHCZxD,SAASC,IAAgB,IAAAC,EACMC,IAAMC,SAAoB,MADhCC,EAAApC,OAAAqC,EAAA,EAAArC,CAAAiC,EAAA,GACvBK,EADuBF,EAAA,GACXG,EADWH,EAAA,GAiB9B,MAAO,CAACE,EAdU,SAACE,EAAgBC,GACjCF,EACEL,IAAM9B,cACJX,IACA,CACEE,QAAQ,EACRE,QAAS,kBAAM0C,EAAc,OAC7B3C,WAAY4C,GAEdC,+JCPD,SAASC,EAAeC,GAAuB,IAAAC,EACd5B,cAA9BC,EAD4C2B,EAC5C3B,MAAO4B,EADqCD,EACrCC,SAAUC,EAD2BF,EAC3BE,SAD2BC,EAGtBC,cAAvBC,EAH6CjD,OAAAkD,EAAA,EAAAlD,CAAA+C,EAAA,MAAAI,EAIxBC,cAArBC,EAJ6CrD,OAAAkD,EAAA,EAAAlD,CAAAmD,EAAA,MA6DpD,MAAO,CAAEG,oBAvDmBpB,IAAMqB,YAANvD,OAAAwD,EAAA,EAAAxD,CAAAyD,EAAAtD,EAAAuD,KAAkB,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAtD,EAAA0D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACvCnB,EAASoB,SAD8B,CAAAH,EAAAE,KAAA,eAAAF,EAAAI,OAAA,wBAIxCrB,EAASsB,UACXlD,EAAMmD,UAAUvB,EAASsB,UALiBL,EAAAE,KAAA,EAOvBf,EAAoBjD,OAAAqE,EAAA,EAAArE,CAAA,CACvCjB,IAAK8D,EAASoB,SACdK,YAAaxB,EAASwB,aACnBxB,EAASyB,gBAV8B,QAOtCX,EAPsCE,EAAAU,QAatC3B,EAASsB,UAAYP,EAAO3C,MAAMwD,OAAOC,KAAO7B,EAASsB,UAC3DQ,SAAOC,UAAU,SAAAC,GACfA,EAAMC,UAAU,CACdC,kBAAmBlC,EAASsB,SAC5Ba,eAAgBpB,EAAO3C,MAAMyD,GAC7BO,gBAAiBrB,EAAO3C,MAAMwD,OAAOC,KAEvCC,SAAOO,eACL,sDAINjE,EAAMkE,aAAavB,EAAO3C,OAC1B0B,KA1B0C,wBAAAmB,EAAAsB,SAAAzB,MA4B3C,CAAChB,IA2B0B0C,kBAzBP,eAAAC,EAAAtF,OAAAwD,EAAA,EAAAxD,CAAAyD,EAAAtD,EAAAuD,KAAG,SAAA6B,EAAOpB,GAAP,IAAAP,EAAA,OAAAH,EAAAtD,EAAA0D,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAExB/C,EAAMmD,UAAUD,GAFQqB,EAAAxB,KAAA,EAGHX,EAAkB,CACrCc,WACAG,YAAaxB,EAASwB,cALA,QAGlBV,EAHkB4B,EAAAhB,QAQlBZ,EAAO3C,MAAMwD,OAAOC,KAAOP,GAC7BQ,SAAOC,UAAU,SAAAC,GACfA,EAAMC,UAAU,CACdC,kBAAmBZ,EACnBa,eAAgBpB,EAAO3C,MAAMyD,GAC7BO,gBAAiBrB,EAAO3C,MAAMwD,OAAOC,KAEvCC,SAAOO,eACL,oDAINjE,EAAMkE,aAAavB,EAAO3C,OAC1B0B,KArBsB,wBAAA6C,EAAAJ,SAAAG,MAAH,gBAAAE,GAAA,OAAAH,EAAAI,MAAAC,KAAAC,YAAA,uCC7CzBnH,EAAAC,EAAAC,EAAA,sBAAAkH,IAAApH,EAAAC,EAAAC,EAAA,sBAAAmH,IAAA,IAAAC,EAAAtH,EAAA,KAAAuH,EAAAvH,EAAA,KAKawH,EALbxH,EAAA2C,EAAA4E,GAK6BE,EAEhBC,EAAeC,4BAAkB,CAAEC,OAAQJ,IAE3CJ,EAAaS,iBAAO,QAOpBR,GAJiBK,EADA,iBAGLI,gBAAM,SAEF,SAACC,GAC5B,OAAKA,EAAQC,OAMRD,EAAQE,YAGb,GAAAC,OAAUH,EAAQC,OAAlB,KAAAE,OAA4BH,EAAQE,YAApC,MAAAC,OAAoDH,EAAQI,MAF1D,GAAAD,OAAUH,EAAQC,OAAlB,MAAAE,OAA6BH,EAAQI,MANjCJ,EAAQI,KACV,GAAAD,OAAUH,EAAQI,KAAlB,KAAAD,OAA0BH,EAAQE,aAEpC,GAAAC,OAAUH,EAAQK,0CCrBtBpI,EAAAC,EAAAC,EAAA,sBAAAqC,IAAAvC,EAAAC,EAAAC,EAAA,sBAAAmI,IAAA,IAAA5F,EAAAzC,EAAA,GAIasI,EAJbtI,EAAA2C,EAAAF,GAI2BgB,EAAM8E,mBAC/BC,GAGWjG,EAAU,WACrB,IAAMkG,EAAOC,qBAAWJ,GACxB,IAAKG,EACH,MAAM,IAAIE,MAAM,oCAElB,OAAOF,GAGIJ,EAAeC,EAAYM,yMCT3BC,EAAOC,sBAEPC,EAAwB,SAAA9H,GAAkB,IAAfI,EAAeJ,EAAfI,SAChCoH,EAAOlG,cACLyG,EAASP,EAATO,KAF6CxF,EAG7BC,IAAMC,SAAS,GAA9BuF,EAH4C1H,OAAAkD,EAAA,EAAAlD,CAAAiC,EAAA,MAerD,OAVA0F,qBAAU3H,OAAAwD,EAAA,EAAAxD,CAAA4H,EAAAzH,EAAAuD,KAAC,SAAAC,IAAA,OAAAiE,EAAAzH,EAAA0D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACLkD,EAAKW,aAAgBJ,EAAKK,kBADrB,CAAAhE,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAED+D,EAAYN,EAAKO,UAFhB,OAGPP,EAAKQ,IAAL,oBAAAtB,OAA6Bc,EAAKO,SAAlC,cACAV,EAAKY,SAAST,EAAKO,UACnBP,EAAKU,mBACLT,EAAY,SAAAU,GAAC,OAAIA,EAAI,IANd,wBAAAtE,EAAAsB,SAAAzB,OAUJ0E,EAAAlI,EAAAC,cAACkI,EAAA,aAAD,CAAchB,KAAMA,GAAOxH,aAGrBiI,+EAAf,SAAAxC,EAA2BgD,GAA3B,IAAAC,EAAA,OAAAZ,EAAAzH,EAAA0D,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OAAAwB,EAAAxB,KAAA,eAIIwE,EAJJhD,EAAAhB,KAAAgB,EAAAxB,KAAA,sBAAAwB,EAAAxB,KAAA,EAUoBvF,EAAA,IAAAA,CAAA,KAAAkI,OAEF4B,EAFE,iBAVpB,OAUIC,EAVJhD,EAAAhB,KAAA,OAeE8C,EAAKmB,KAALzI,OAAA0I,EAAA,EAAA1I,CAAA,GAAauI,EAAOC,IAftB,yBAAAhD,EAAAJ,SAAAG,+DC3BA9G,EAAAC,EAAAC,EAAA,sBAAAgK,IAAO,IAAMA,EAAY,CACvBC,iBAAkB,KAClBC,mBAAoB,CAAC,KAAM,KAAM,KAAM,KAAM,MAC7CC,SAAU,6CACVC,eAAgBC,0RAAYC,qBAAuB,eACnDC,cAAeF,0CACfG,eAAgB,wBAChBC,UAAW,GACXC,gBAAiB,QACjBC,UAAW,IAcXtJ,OAAOM,OAAOqI,EAAW,CACvBG,SAAU,mCACVC,eAAgB,cAChBK,UAAW,6DACXC,gBAAiB,YACjBC,UAAW,gBACXJ,cAAe,6LCbbK,EAAsBC,mBAAiB,SAAA9J,GAAkB,IAAfI,EAAeJ,EAAfI,SAAe8C,EACjC5B,cAApBC,EADqD2B,EACrD3B,MAAO6B,EAD8CF,EAC9CE,SAET2G,EAAkC,CACtCC,QAAS5G,EAAS6G,UAAY1I,EAAM2I,SAAW9G,EAAS4G,aAAUzC,EAClE9C,SACErB,EAAS6G,UAAY1I,EAAM2I,cACvB3C,EACAhG,EAAMkD,UAAYrB,EAASqB,UAG3B0F,EAASC,YAAeL,EAAW,CACzCM,MAAOjH,EAASkH,UAAY/I,EAAM2I,SAClCK,QAAS,CAAEC,SAAS,GACpBC,YAAa,gBAHPN,KAMFO,EAAQlI,IAAMmI,QAClB,kBAeG,SAAkBC,GAEvB,IAIMC,EAAe,CACnBC,QALqB,UAMrBC,UALuB,UAMvBC,SALsB,UAMtBC,aAAcC,EARO,WASrBC,eAAgBD,EATK,WAUrBE,cAAeF,EARO,WAStBG,aAAc,QACdC,WAAY,UACZC,gBAAiB,UACjBC,eAAgB,UAChBC,UAAW,KACXC,gBAAiB,KACjBC,oBAAgBpE,GAGlB,GAAIqD,EACF,OAAOtK,OAAAsL,EAAA,EAAAtL,CAAA,GACFuK,EADL,CAEEC,QAASF,EAAOiB,QAvBG,UAwBnBd,UAAWH,EAAOkB,MAvBG,UAwBrBd,SAAUJ,EAAOmB,eAvBG,UAwBpBd,aAAcL,EAAOiB,QAAUX,EAAeN,EAAOiB,QACrDV,eAAgBP,EAAOkB,MAAQZ,EAAeN,EAAOkB,MACrDV,cACER,EAAOmB,eAAiBb,EAAeN,EAAOmB,eAChDN,UAAWb,EAAOa,UAClBC,gBAAiBd,EAAOc,gBACxBC,eAAgBf,EAAOe,iBAI3B,OAAOd,EArDCmB,CAAS7B,GAAQA,EAAKO,OAASP,EAAKO,MAAME,SAChD,CAACT,IAGH,OACE8B,EAAAxL,EAAAC,cAACwL,EAAA,cAAD,CAAexB,MAAOA,GACpBuB,EAAAxL,EAAAC,cAAAuL,EAAAxL,EAAA0L,SAAA,KAAG/L,MAKF,SAASgM,IACd,OAAO5J,IAAMiF,WAAW4E,gBA4C1B,SAASnB,EAAeoB,GACtB,OAAOC,IAAMD,GACVE,QAAQ,IACRC,MACAC,SAKU7C,qFClGf8C,OAAOC,aAAaC,QAAQ,QAAS,k1CCmsBzBC,EAMAC,EAMAC,EAQAC,EAUAC,EAQAC,EAiBAC,EAQAC,EAKAC,EAOAC,EAKAC,EAiBAC,EAKAC,EAMAC,EAOAC,EAMAC,EA2CAC,EAQAC,EAOAC,EAMAC,EAOAC,EAQAC,EAQAC,EAoBAC,EAKAC,EAMAC,EAOAC,EAOAC,EAOAC,EAOAC,EAOAC,w2gBAlRA9B,kFAMAC,iGAMAC,oFAQAC,sKAUAC,2IAQAC,qVAiBAC,0EAQAC,wDAKAC,4FAOAC,4DAKAC,8SAiBAC,kEAKAC,sFAMAC,0FAOAC,kEAMAC,+kCA2CAC,4IAQAC,0FAOAC,4EAMAC,8FAOAC,gIAQAC,4HAQAC,+cAoBAC,sDAKAC,wEAMAC,0IAOAC,4FAOAC,6FAOAC,kGAOAC,8GAOAC,2JA0pCL,IAAMC,GAA4BC,IAAHC,MAuBzBC,GAAwBF,IAAHG,MAOrBC,GAAqBJ,IAAHK,MAQlBC,GAAuBN,IAAHO,KAQ7BH,IAGSI,GAAoBR,IAAHS,MAOjBC,GAAwBV,IAAHW,KAiC9BL,GACAE,IAGSI,GAAyBZ,IAAHa,KAU/BL,IAGSM,GAA0Bd,IAAHe,KAShCP,IAGSQ,GAA2BhB,IAAHiB,KAqBjCT,IAGSU,GAA4BlB,IAAHmB,KAqBlCb,GACAE,IAGSY,GAA2BpB,IAAHqB,MAYxBC,GAA+BtB,IAAHuB,MAQ5BC,GAA6BxB,IAAHyB,KAYnCjB,IAGSkB,GAA0B1B,IAAH2B,MASvBC,GAAuB5B,IAAH6B,MAOpBC,GAA0B9B,IAAH+B,MASvBC,GAAsBhC,IAAHiC,KAQ5BH,IAGSI,GAAkClC,IAAHmC,MAiB/BC,GAA2BpC,IAAHqC,KAgBjCT,GACAI,GACAE,IAGSI,GAA+BtC,IAAHuC,KAOrCL,IAOSM,GAA0BxC,IAAHyC,KAchC1C,IAGG,SAAS2C,GACdzH,EACA0H,GAEA,OAAOC,WACLJ,GACAvH,EACA0H,GAaG,IAAME,GAAsB7C,IAAH8C,MAezB,SAASxH,GACdL,EACA0H,GAEA,OAAOC,WACLC,GACA5H,EACA0H,GAaG,IAAMI,GAAqB/C,IAAHgD,KAqB3BlC,GACAJ,GACAU,IAGG,SAAS6B,GACdN,GAKA,OAAOC,cACLG,GACAJ,GAIG,IAAMO,GAA0BlD,IAAHmD,KAgBhCrC,GACAJ,IAGG,SAAS0C,GACdT,GAKA,OAAOC,cACLM,GACAP,GAIG,IAAMU,GAA0BrD,IAAHsD,KAahCxC,GACAJ,GACAU,IAGG,SAASmC,GACdZ,GAKA,OAAOC,cACLS,GACAV,GAIG,IAAMa,GAAgBxD,IAAHyD,KAUtB3C,GACAJ,GACAU,GACAR,IAGG,SAAS8C,GACdzI,EACA0H,GAEA,OAAOC,WACLY,GACAvI,EACA0H,GAaG,IAAMgB,GAAoB3D,IAAH4D,KAgB1B5C,IAGG,SAAS6C,GACd5I,EACA0H,GAEA,OAAOC,WACLe,GACA1I,EACA0H,GAaG,IAAMmB,GAAsB9D,IAAH+D,KAO5B/C,IAGG,SAASgD,GACd/I,EACA0H,GAEA,OAAOC,WACLkB,GACA7I,EACA0H,GAIG,SAASsB,GACdC,GAEA,OAAOtB,qBACLkB,GACAI,GAIG,IAAMC,GAAuBnE,IAAHoE,KAuB7BlD,IAGG,SAASmD,GACdpJ,EACA0H,GAEA,OAAOC,WACLuB,GACAlJ,EACA0H,GAaG,IAAM2B,GAAoBtE,IAAHuE,KAgB1BjD,GACAE,IAGG,SAASgD,GACdvJ,EACA0H,GAEA,OAAOC,WACL0B,GACArJ,EACA0H,GAaG,IAAM8B,GAAgCzE,IAAH0E,KAQtCtD,IAGG,SAASuD,GACd1J,EACA0H,GAEA,OAAOC,WAGL6B,GAA+BxJ,EAAW0H,GAYvC,IAAMiC,GAA+B5E,IAAH6E,KAmBrCnD,IAGG,SAASlN,GACdmO,GAKA,OAAOC,cAGLgC,GAA8BjC,GAG3B,IAAMmC,GAA6B9E,IAAH+E,KASnCrD,IAGG,SAAS9M,GACd+N,GAKA,OAAOC,cAGLkC,GAA4BnC,GAGzB,IAAMqC,GAAmChF,IAAHiF,MAWtC,SAASC,GACdjK,EACA0H,GAEA,OAAOC,WAGLoC,GAAkC/J,EAAW0H,GAYT3C,IAAHmF,MA+B9B,IAAMC,GAAqBpF,IAAHqF,KAU3BjD,IAGG,SAASkD,GACdrK,EACA0H,GAEA,OAAOC,WACLwC,GACAnK,EACA0H,GAaG,IAAM4C,GAA2BvF,IAAHwF,KAmCjC1D,IAcG,SAAS2D,GACdvB,GAEA,OAAOtB,qBAGL2C,GAA0BrB,GAGvB,IAAMwB,GAA2B1F,IAAH2F,KAS9B,SAASC,GACd3K,EACA0H,GAEA,OAAOC,WACL8C,GACAzK,EACA0H,GAaG,IAAMkD,GAA4B7F,IAAH8F,IAQlC5D,IAGG,SAAS6D,GACd9K,EACA0H,GAEA,OAAOC,WACLiD,GACA5K,EACA0H,GAaG,IAAMqD,GAAuBhG,IAAHiG,KAa1B,SAASC,GACdjL,EACA0H,GAEA,OAAOC,WACLoD,GACA/K,EACA0H,GAaG,IAAMwD,GAA6BnG,IAAHoG,IAYnCtF,GACAJ,IAGG,SAAS2F,GACd1D,GAKA,OAAOC,cAGLuD,GAA4BxD,GAGI3C,IAAHsG,KAuC1B,IAAMC,GAAyBvG,IAAHwG,IAe/BtG,GACAY,GACAJ,IAGG,SAAS+F,GACd9D,GAKA,OAAOC,cACL2D,GACA5D,GAIG,IAAM+D,GAA4B1G,IAAH2G,IAgBlCzG,GACAY,GACAJ,IAGG,SAASkG,GACdjE,GAKA,OAAOC,cAGL8D,GAA2B/D,GAGxB,IAAMkE,GAA0B7G,IAAH8G,IAQhChG,GACAJ,IAGG,SAASqG,GACdpE,GAKA,OAAOC,cACLiE,GACAlE,GAIG,IAAMqE,GAAuBhH,IAAHiH,KA2B1B,SAASC,GACdvE,GAKA,OAAOC,cACLoE,GACArE,GAIG,IAAMwE,GAAqBnH,IAAHoH,KAUxB,SAASC,GACdpM,EACA0H,GAEA,OAAOC,WACLuE,GACAlM,EACA0H,GAaG,IAAM2E,GAA+BtH,IAAHuH,KAYlC,SAASC,GACdvM,EACA0H,GAEA,OAAOC,WAGL0E,GAA8BrM,EAAW0H,GAYtC,IAAM8E,GAA8BzH,IAAH0H,KAoBjC,SAASC,GACdzD,GAEA,OAAOtB,qBAGL6E,GAA6BvD,GAG1B,IAAM0D,GAA2B5H,IAAH6H,IAUjC3H,IAGG,SAAS4H,GACd7M,EACA0H,GAEA,OAAOC,WACLgF,GACA3M,EACA0H,GAaG,IAAMoF,GAA2B/H,IAAHgI,KAmB9B,SAASC,GACdhN,EACA0H,GAEA,OAAOC,WACLmF,GACA9M,EACA0H,GAaG,IAAMuF,GAA4BlI,IAAHmI,IAYlCnG,GACAM,GACAJ,IAGG,SAASkG,GACdnN,EACA0H,GAEA,OAAOC,WACLsF,GACAjN,EACA0H,GAaG,IAAM0F,GAA2BrI,IAAHsI,KAS9B,SAASC,GACdtN,EACA0H,GAEA,OAAOC,WACLyF,GACApN,EACA0H,uFCp+GJ,IAAA6F,EAAA,CACAC,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,uBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,IAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAT,EAAAQ,GACA,OAAAC,EAOAhZ,EAAAiZ,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAAjT,EAAA+S,EAAA,GACA,OAAAhZ,EAAAmZ,EAAAlT,EAAA,KARAmT,QAAAC,UAAAH,KAAA,WACA,IAAAD,EAAA,IAAAtQ,MAAA,uBAAAoQ,EAAA,KAEA,MADAE,EAAAK,KAAA,mBACAL,IAQAH,EAAAS,KAAA,WACA,OAAAhY,OAAAgY,KAAAhB,IAEAO,EAAA7S,GAAA,IACAuT,EAAAC,QAAAX,uBC5CA,IAAAP,EAAA,CACAmB,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,uBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,IAGA,SAAAjB,EAAAC,GACA,IAAAC,EAAAT,EAAAQ,GACA,OAAAC,EAOAhZ,EAAAiZ,EAAAD,EAAA,IAAAE,KAAA,WACA,IAAAjT,EAAA+S,EAAA,GACA,OAAAhZ,EAAAmZ,EAAAlT,EAAA,KARAmT,QAAAC,UAAAH,KAAA,WACA,IAAAD,EAAA,IAAAtQ,MAAA,uBAAAoQ,EAAA,KAEA,MADAE,EAAAK,KAAA,mBACAL,IAQAH,EAAAS,KAAA,WACA,OAAAhY,OAAAgY,KAAAhB,IAEAO,EAAA7S,GAAA,IACAuT,EAAAC,QAAAX,uBC5CA,IAAAP,EAAA,CACAyB,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,IACAC,WAAA,KAIA,SAAAC,EAAAtB,GACA,IAAA9S,EAAAqU,EAAAvB,GACA,OAAA/Y,EAAAiG,GAEA,SAAAqU,EAAAvB,GACA,IAAA9S,EAAAsS,EAAAQ,GACA,KAAA9S,EAAA,IACA,IAAAgT,EAAA,IAAAtQ,MAAA,uBAAAoQ,EAAA,KAEA,MADAE,EAAAK,KAAA,mBACAL,EAEA,OAAAhT,EAEAoU,EAAAd,KAAA,WACA,OAAAhY,OAAAgY,KAAAhB,IAEA8B,EAAAhB,QAAAiB,EACAd,EAAAC,QAAAY,EACAA,EAAApU,GAAA,yBC3BA,IAAAsS,EAAA,CACAgC,oBAAA,IACAC,mBAAA,IACAC,wBAAA,IACAC,kBAAA,KAIA,SAAAL,EAAAtB,GACA,IAAA9S,EAAAqU,EAAAvB,GACA,OAAA/Y,EAAAiG,GAEA,SAAAqU,EAAAvB,GACA,IAAA9S,EAAAsS,EAAAQ,GACA,KAAA9S,EAAA,IACA,IAAAgT,EAAA,IAAAtQ,MAAA,uBAAAoQ,EAAA,KAEA,MADAE,EAAAK,KAAA,mBACAL,EAEA,OAAAhT,EAEAoU,EAAAd,KAAA,WACA,OAAAhY,OAAAgY,KAAAhB,IAEA8B,EAAAhB,QAAAiB,EACAd,EAAAC,QAAAY,EACAA,EAAApU,GAAA,uMCNM0U,EAAY,SAACC,GAAD,SAAA1S,OACb0S,EADa,KAAA1S,OACFW,EAAA,EAAIgS,EAAA,4CAEPC,EAAmC,SAAA7Z,GAG1C,IA4HA8Z,EA9HJ1Z,EAEIJ,EAFJI,SAEI2Z,EAAA/Z,EADJga,YACI,IAAAD,KAAAxX,EAC8BC,IAAMC,SAAoB,QADxDC,EAAApC,OAAA2Z,EAAA,EAAA3Z,CAAAiC,EAAA,GACG2X,EADHxX,EAAA,GACcyX,EADdzX,EAAA,GAAA0X,EAE4B9X,cAF5B+X,EAAA/Z,OAAA2Z,EAAA,EAAA3Z,CAAA8Z,EAAA,GAEGxX,EAFHyX,EAAA,GAEeC,EAFfD,EAAA,GAIEE,EAAU/X,IAAMqB,YAAY,WAChCsW,EAAa,SACZ,IAEGK,EAAmBhY,IAAMqB,YAAY,SAAC4W,GAC1C,GAmJJ,SAAsBA,GACpB,OAAOA,EAAMd,SAAWc,EAAMd,QAAQe,QAAQ,kBAAoB,EApJ5DC,CAAaF,GAMf,OALAxV,SAAOC,UAAU,SAAAC,GACfA,EAAMyV,SAAS3V,SAAO4V,SAASC,OAC/B7V,SAAO8V,iBAAiBN,UAE1BO,wBAAc/C,KAAK,kBAAMtL,OAAOxJ,SAAS8X,WAGvCC,wBAAcT,IAAUU,oCAA0BV,GACpDN,EAAa,uBAGflV,SAAO8V,iBAAiBN,GACxBN,EAAa,gBACZ,IAEGiB,EAAiB5Y,IAAMqB,YAC3B,SAAC4W,EAAcY,GACTA,EACFlB,EAAa,uBAEbmB,QAAQb,MAAMA,GACdH,EACE1S,EAAA,EAAIgS,EAAA,mBACJ2B,EAAA9a,EAAAC,cAAA,WACGgZ,EACC9R,EAAA,EAAIgS,EAAA,gEAMd,IAGI4B,EAAmBhZ,IAAMqB,YAAY,SAAA4W,GACzCa,QAAQb,MAAMA,GACdH,EACE1S,EAAA,EAAIgS,EAAA,yBACJ2B,EAAA9a,EAAAC,cAAA,WACGgZ,EAAU9R,EAAA,EAAIgS,EAAA,yDAGlB,IAEG6B,EAAejZ,IAAMqB,YAAY,SAAC6X,GACtCpB,EACE1S,EAAA,EAAIgS,EAAA,wBACJ2B,EAAA9a,EAAAC,cAAA,WACGgb,EAASpE,IAAI,SAAAqE,GAAG,OACfJ,EAAA9a,EAAAC,cAAA,OAAKkb,IAAKD,GAAMA,QAIrB,IAEKE,EAAYC,6BAAZD,QAjEJE,EAkE8BvZ,IAAMC,UAAS,GAlE7CuZ,EAAA1b,OAAA2Z,EAAA,EAAA3Z,CAAAyb,EAAA,GAkEGE,EAlEHD,EAAA,GAkEcE,EAlEdF,EAAA,GAoEEG,EAAa3Z,IAAMqB,YAAY,WACnCqY,GAAa,GA4FfjX,SAAOmX,iBAAiB,CACtBC,WAAYzU,EAAA,EAAIgS,EAAA,SAChB0C,MAAO1U,EAAA,EAAIgS,EAAA,kCA5FV,IAEKxW,EAAa9B,cAAb8B,SAEFmZ,EAAY/Z,IAAMqB,YAAY,WAClCqY,GAAa,GACbL,EAAQW,QAAQpZ,EAASqZ,gBACzB9P,OAAOxJ,SAAS8X,UACf,IAEGyB,EAAS,WACb,OAAQxC,GACN,IAAK,qBACH,OACEqB,EAAA9a,EAAAC,cAACX,EAAA,EAAD,CACEE,OAAQgc,EACR/b,WAAY0H,EAAA,EAAIgS,EAAA,uCAEhB2B,EAAA9a,EAAAC,cAACic,EAAA,MAAD,CAAA3X,GAAA,gEAGAuW,EAAA9a,EAAAC,cAACkc,EAAA,EAAD,CAAeC,QAAStC,GACtBgB,EAAA9a,EAAAC,cAACic,EAAA,MAAD,CAAA3X,GAAA,cAKR,IAAK,aACH,OACEuW,EAAA9a,EAAAC,cAACX,EAAA,EAAD,CACEE,OAAQgc,EACR/b,WAAY0H,EAAA,EAAIgS,EAAA,kCAEhB2B,EAAA9a,EAAAC,cAACic,EAAA,MAAD,CAAA3X,GAAA,oHAIAuW,EAAA9a,EAAAC,cAAA,WACA6a,EAAA9a,EAAAC,cAACkc,EAAA,EAAD,CAAeC,QAASN,GACtBhB,EAAA9a,EAAAC,cAACic,EAAA,MAAD,CAAA3X,GAAA,yBAEFuW,EAAA9a,EAAAC,cAACkc,EAAA,EAAD,CAAiBC,QAASV,GACxBZ,EAAA9a,EAAAC,cAACic,EAAA,MAAD,CAAA3X,GAAA,oBAKR,QACE,OAAO5E,IAOb,GAAI4Z,EACFF,EACEyB,EAAA9a,EAAAC,cAACoc,EAAA,mBAAD,CACEC,QAAS,SAAAtC,GACPD,EAAiBC,KAGlBiC,SAGA,CACL,IAAMM,EAAyBC,EAAQ,KACpCC,QACHpD,EAAayB,EAAA9a,EAAAC,cAACsc,EAAD,KAAyBN,KAGxC,OACEnB,EAAA9a,EAAAC,cAACyc,EAAA,eAAD,CACE/B,eAAgBA,EAChBI,iBAAkBA,EAClBC,aAAcA,GAEdF,EAAA9a,EAAAC,cAAA6a,EAAA9a,EAAA0L,SAAA,KACGvJ,EACAkX,kCC1KIsD,EAAsB,WAAM,IAC/Bha,EAAa9B,cAAb8B,SAiBR,OAfAZ,IAAM6a,UAAU,WACd,GAAKC,SAGL,OAAOC,kBAAQ,WACTna,EAASkH,QACXgT,SAAShB,MAAT,GAAArV,OAAoB7D,EAAS2B,OAAQyY,MAAMpb,KAA3C,OAAA6E,OACEgC,IAAUU,iBAGZ2T,SAAShB,MAAQrT,IAAUU,mBAG9B,IAEI,+BCnBI8T,EAAmB3T,mBAAS,WACvC,IAAM3E,EAAQuY,2BACRC,EAAavc,cAQnB,OANA+D,EAAMC,UAAU,CACdwY,QAASD,EAAWC,QACpBC,cAAeF,EAAWlZ,SAC1BqZ,UAAWH,EAAWG,YAGjB,eCPIC,EAAiBjU,mBAAS,WACrC,IAAMtC,EAAOlG,cACL8B,EAAa9B,cAAb8B,SAFmC4a,EAIjBxM,YACxB,CACE6G,KAAMjV,EAAS6a,cACfC,IAAKvR,OAAOxJ,SAASgb,MAEvB,CACE9T,MAAO7C,EAAKW,YACZoC,QAAS,CAAEC,SAAS,GACpBC,YAAa,gBARTN,EAJmC6T,EAInC7T,KAAMiU,EAJ6BJ,EAI7BI,QAuCd,OA3BA5b,IAAM6a,UAAU,WACd,IAAIe,IAAWhb,EAASkH,QAAxB,CAIA,IAAKH,EAAKkU,OAAOtZ,OASf,OARAE,SAAOC,UAAU,SAAAC,GACfA,EAAMC,UAAU,CACd8Y,IAAKvR,OAAOxJ,SAASgb,KACrBF,cAAe7a,EAAS6a,gBAE1BhZ,SAAOO,eAAe,4BAqB1BmH,OAAOxJ,SAASqZ,QAAQvT,IAAUQ,gBAflCrG,EAASkb,iBAAiBnU,EAAKkU,QAC/Bjb,EAASmF,IACP,0DACAnF,EAASqB,SACTrB,EAAS4G,QACT5G,EAASmb,UACTnb,EAAS6G,YAIN,wBCxCIuU,EAAkC,SAAAC,GAE3C,OAAO,MCPEC,EAA0B,WAAM,IACnCC,EAASrd,cAATqd,KASR,OARA1W,qBAAW,WACT,IAAMjD,EAAK2Z,EAAKC,OACVC,EAAQF,EAAKE,MACnB5Z,SAAO6Z,eAAe,SAAA3Z,GACpBA,EAAM4Z,QAAQ,CAAE/Z,KAAIga,SAAU,UAC9B7Z,EAAM8Z,SAAS,QAASJ,OAGrB,MCXIK,EAA6B,WAAM,IACtCC,EAAUC,oBAAU,CAC1BC,KAAM,MADAF,MAGFxB,EAAavc,cAMnB,OALAoB,IAAM6a,UAAU,WACV8B,GAASA,EAAMG,SAAW3B,EAAWzT,UACvCyT,EAAW4B,gBAGR,MCRIC,EAA2C,SAAAf,GACzCnd,cAEX,OAAO,MCDJ,IAAMme,EAAkC,SAAAzf,GAAkB,IAAfI,EAAeJ,EAAfI,SAAe8C,EACpC5B,cAAnB8B,EADuDF,EACvDE,SAAU2E,EAD6C7E,EAC7C6E,KAMlB,OCbK,SAAyB2X,GAA0B,IAAAnd,EAC1BC,IAAMC,SAA8B,MADVC,EAAApC,OAAA2Z,EAAA,EAAA3Z,CAAAiC,EAAA,GACjDod,EADiDjd,EAAA,GACxCkd,EADwCld,EAAA,GAElDmd,EAASrd,IAAMsd,QAAO,GACtBC,EAAcvd,IAAMsd,SAsB1B,GApBAtd,IAAM6a,UAAU,YACM,IAAhBqC,KAAoC,OAAZC,IAC1BC,EACE,IAAIzH,QAAQ,SAAAC,GACV2H,EAAYC,QAAU5H,KAG1B6H,eACE,kBAAOP,KACP,WACMK,EAAYC,UACdD,EAAYC,UACZD,EAAYC,QAAU,KACtBJ,EAAW,WAKlB,CAACF,IAEY,OAAZC,IAAqBE,EAAOG,QAE9B,MADAH,EAAOG,SAAU,EACXL,EDhBRO,CAFkB,mBAAQ9c,EAASkH,SAAWvC,EAAKK,qBAI5CmT,EAAA9a,EAAAC,cAAA6a,EAAA9a,EAAA0L,SAAA,KAAG/L,aECN+f,EAAa3d,IAAM4d,KAAK,kBAAMjI,QAAAkI,IAAA,CAAAthB,EAAAiZ,EAAA,GAAAjZ,EAAAiZ,EAAA,GAAAjZ,EAAAiZ,EAAA,MAAAC,KAAAlZ,EAAAuhB,KAAA,cAC9BC,EAAY/d,IAAM4d,KAAK,kBAAMjI,QAAAkI,IAAA,CAAAthB,EAAAiZ,EAAA,GAAAjZ,EAAAiZ,EAAA,GAAAjZ,EAAAiZ,EAAA,MAAAC,KAAAlZ,EAAAuhB,KAAA,cA0BpBE,EAxBO,kBACpBjF,EAAA9a,EAAAC,cAAC+f,EAAD,CAAgBzG,MAAM1Q,GACpBiS,EAAA9a,EAAAC,cAACmJ,EAAA,EAAD,KACE0R,EAAA9a,EAAAC,cAACqd,EAAD,MACAxC,EAAA9a,EAAAC,cAACggB,EAAD,MACAnF,EAAA9a,EAAAC,cAACigB,EAAD,MACApF,EAAA9a,EAAAC,cAAC+c,EAAD,MACAlC,EAAA9a,EAAAC,cAACkgB,EAAD,MACArF,EAAA9a,EAAAC,cAACmgB,EAAD,MACAtF,EAAA9a,EAAAC,cAAC6a,EAAA9a,EAAMqgB,SAAP,CAAgBC,SAAUxF,EAAA9a,EAAAC,cAACmB,EAAA,EAAD,OACxB0Z,EAAA9a,EAAAC,cAACsgB,EAAD,KACEzF,EAAA9a,EAAAC,cAACugB,EAAA,EAAD,KACE1F,EAAA9a,EAAAC,cAACyf,EAAD,OAEF5E,EAAA9a,EAAAC,cAACugB,EAAA,EAAD,KACE1F,EAAA9a,EAAAC,cAAC6f,EAAD,OAEFhF,EAAA9a,EAAAC,cAACwgB,EAAD,oBC/BGC,EAAmB,SAAAnhB,GAAkB,IAAfI,EAAeJ,EAAfI,SACzBgD,EAAa9B,cAAb8B,SACR,OAAOge,sBAAY,kBACjB7F,EAAA9a,EAAAC,cAAC2gB,EAAA,EAAD,CACEC,SAAUle,EAASqZ,eACnBb,IAAKxY,EAASqZ,gBAEbrc,4CCRDwb,EAAM3S,IAAUW,UACtB,GAAIgS,EAAK,CAEP2F,IAAQC,WAAW5F,EAAK,CACtB6F,OAFYnY,EAGZoY,UAAW,CACTC,oBAAqB,6DCRdC,GADWH,IAAM,gBACJA,IAAM,mBCUxBpY,GAAmBJ,IAAnBI,eAED,SAASwY,GAAaC,GAC3B,IAAMC,EAAYC,kBAAQF,GAAO1f,KAC3B6f,EAAQ,GAAAhb,OAAMoC,GAAN,KAAApC,OAAwB8a,GAEhCG,EAAa,SAAAC,GACjB,OAAOC,IAAYvV,QAAQoV,EAAUE,GAAUE,MAAM,SAAAC,GACnDrd,SAAOC,UAAU,SAAAC,GACfA,EAAMod,OAAO,cAAeN,GAC5B9c,EAAMC,UAAU,CACd+c,aAEFld,SAAO8V,iBAAiBuH,QAK9B,OAAOF,IACJI,QAAQP,GACRI,MAAM,SAAAC,GACLF,IAAYK,WAAWR,GACvBhd,SAAOC,UAAU,SAAAC,GACfA,EAAMod,OAAO,cAAeN,GAC5Bhd,SAAO8V,iBAAiBuH,OAG3BrK,KAAK,SAAA9Q,GACU,OAAVA,GACFub,wBAAcZ,EAAO3a,GACrBya,EAAW,oBAAqBK,IAEhCC,EAAWS,sBAAYb,IAAQ7J,KAAK,WAClC2J,EAAW,uBAAwBK,KAIvCW,qBAAWd,EAAOI,KC5CjB,IAAMW,GAAYC,QACtBhB,QACAiB,SAAS,iBAAO,CACfC,OAAS,QAEVC,QAAQ,SAAAC,GAAI,MAAK,CAChBC,UADgB,SACNH,GACRE,EAAKF,OAASA,MAGjBI,MAAM,SAAAF,GAAI,MAAK,CACd3a,UACE,IAAMnG,EAAOihB,kBAAQH,GAAMI,QAAUtB,kBAAQkB,GAAM9gB,KAInD,OAAOqf,IAAK,eAAAxa,OAAgB7E,KAE9BoF,WACE,OAAO+b,kBAAoBL,OCpBpBM,GAAYX,GAAUY,MAAM,QACtChF,MAAM,CACLI,MAAOiE,QAAMY,UAAUZ,QAAMpW,QAC7BkS,OAAQkE,QAAMY,UAAUZ,QAAMpW,UAE/B0W,MAAM,SAAAF,GAAI,MAAK,CACd5Y,cACE,OAAsB,OAAf4Y,EAAKrE,UAGfoE,QAAQ,SAAAC,GAAI,MAAK,CAChBS,aADgB,SACH9E,EAAeD,GAC1BsE,EAAKrE,MAAQA,EACbqE,EAAKtE,OAASA,EACd3Z,SAAO2e,cAAc,CACnBC,SAAU,OACVC,MAAO7e,SAAO4V,SAASkJ,KACvB5Z,KAAM,CACJyU,SACAC,yBChBGmF,GAAcnB,GAAUY,MAAM,UACxChF,MAAM,CACLha,SAAUqe,QAAMmB,WAChBC,SAAUpB,QAAMqB,MAAMrB,QAAMsB,MAC5BC,YAAavB,QAAMqB,MAAMrB,QAAMsB,QAEhChB,MAAM,SAAAF,GAAI,MAAK,CACdoB,sBACE,OAAIpB,EAAK1b,KAAKpE,SAASmhB,iBAIrBrB,EAAKgB,UACLM,4BAAiB,IAAIJ,KAAQlB,EAAKgB,UAhBvB,SAqBXhB,EAAKmB,aACLG,4BAAiB,IAAIJ,KAAQlB,EAAKmB,aArBrB,MA0BPI,QAAQvB,EAAKgB,UAAYhB,EAAKmB,mBAGzCpB,QAAQ,SAAAC,GAAI,MAAK,CAChBwB,gBADgB,WAEdxB,EAAKmB,YAAc,IAAID,MAEzBO,aAJgB,WAKdzB,EAAKgB,SAAW,IAAIE,SCjBbQ,GAAgB/B,GAAUY,MAAM,YAC1ChF,MAAM,CACLpG,KAAMyK,QAAMY,UAAUZ,QAAMpW,QAC5BmY,QAAS/B,QAAMxL,IAAI0M,MAEpBjB,SAAyB,iBAAO,CAC/B9Y,SAAS,EACTsa,aAAa,EACbxf,OAAQ,KACR+f,QAAS,KACTlgB,YAAawJ,IAAgB2W,IAC7BtI,eAAgB,GAChBuI,gBAAiB,QAElB5B,MAAM,SAAAF,GAAI,MAAK,CACdze,eACE,OAAOye,EAAKne,QAAUme,EAAKne,OAAOC,IAEpCuZ,gBACE,OAAO2E,EAAKne,QAAUme,EAAKne,OAAOkgB,QAAQjgB,IAE5CgF,cACE,OAAOkZ,EAAKne,QAAUme,EAAKne,OAAOyY,MAAMxY,IAE1CH,oBACE,MAAO,CACLmF,QAASkZ,EAAKjZ,QAAUhE,KAAK+D,aAAUzC,EACvC9C,SAAUye,EAAKjZ,aAAU1C,EAAYtB,KAAKxB,WAG9C6F,cACE,OAAuB,OAAhB4Y,EAAKne,QAEdkZ,oBACE,IAAMiH,EAoDQ,IAAIvY,OAAOwY,IAAIxY,OAAOxJ,SAASgb,MAChCiH,aAAaC,IAAIC,KAAc,KAnD5C,OAAIpC,EAAK7K,OAAS6M,EACThC,EAAK7K,KAGP6M,GAAWhC,EAAK7K,MAAQ/O,0RAAYic,4BAG9CtC,QAAQ,SAAAC,GAAI,MAAK,CAChB5E,iBADgB,SACCD,GAA+B,IAE5CpU,EAKEoU,EALFpU,QACAsa,EAIElG,EAJFkG,YACAiB,EAGEnH,EAHFmH,cACA5gB,EAEEyZ,EAFFzZ,YACAG,EACEsZ,EADFtZ,OAGGA,IAKLme,EAAKjZ,QAAUA,EACfiZ,EAAKqB,YAAcA,EACnBrB,EAAKne,OAASA,EACdme,EAAK4B,QAAU/f,EAAO+B,QAAQge,SAAW,KACzC5B,EAAKzG,eAAiB+I,EACtBtC,EAAKte,YAAcA,EACnBse,EAAK8B,gBAAkB3G,EAAO2G,gBAAgBS,cAO5CvC,EAAK7K,KAAO,OAGhBqN,6BA/BgB,WAgCd,IAAMjhB,EAAWye,EAAKze,SAItB,OAHKye,EAAK2B,QAAQc,IAAIlhB,IACpBye,EAAK2B,QAAQe,IAAInhB,EAAU,CAAEA,aAExBye,EAAK2B,QAAQQ,IAAI5gB,OAIxB6gB,GAAY,MCtGX,IAAMO,GAAYhD,GAAUY,MAAM,QACtCV,SAAS,iBAAO,CACf+C,WAAW,EACXC,cAAc,EACdC,mBAAmB,KAEpB/C,QAAQ,SAAAC,GAAI,MAAK,CAChB+C,cADgB,SACFC,EAAmBC,GAC/BjD,EAAK4C,WAAaI,GAAYC,EAC9BjD,EAAK6C,cAAeG,IAAYC,GAElCC,mBALgB,SAKGjf,GACjB+b,EAAK8C,kBAAoB7e,MCZlBkf,GAAcxD,GAAUY,MAAM,UAAUhF,MAAM,CACzD6H,cAAe,yBCGJC,GAAgB1D,GAAUY,MAAM,YAC1ChF,MAAM,CACLjf,SAAUsjB,QAAMqB,MAAMrB,QAAM0D,QAC5B9mB,UAAWojB,QAAMqB,MAAMrB,QAAM0D,QAC7BC,YAAa3D,QAAM4D,SAAS5D,QAAMpW,OAAQ,IAC1C5F,QAASgc,QAAMqB,MAAMrB,QAAMpW,UAE5BqW,SAAS,iBAAO,CACfte,SAAU,KACVxE,QAAQ,EACR0mB,YAAY,EACZC,iBAAiB,EACjBC,oBAAoB,EACpBC,qBAAqB,EACrBC,iBAAkB,KAClBC,aAAa,EACbC,qBAAqB,KAEtB7D,MAAM,SAAAF,GAAI,MAAK,CACdgE,6BACE,OAAOzC,QAAQ0C,UAAUC,cAAgBlE,EAAK4D,sBAEhDO,kBACE,YAAyB9f,IAAlB2b,EAAK1jB,eAA6C+H,IAAnB2b,EAAKxjB,WAE7C4nB,iBACE,OAAO7C,QAAQvB,EAAKpc,SAAWoc,EAAKpc,QAAQygB,OAAS,IAEvDC,qBACE,OAAOtE,EAAKuD,YAAYnD,OAAOiE,OAAS,GAE1CE,wBACE,OAAOvE,EAAKyD,YAAczD,EAAK0D,iBAAmB1D,EAAK2D,oBAEzDtiB,eACE,OAAI0B,KAAKohB,YACA,CACL7nB,SAAU0jB,EAAK1jB,SACfE,UAAWwjB,EAAKxjB,WAGb,MAETgoB,uBAAuB,IACbtkB,EAAa8f,EAAK1b,KAAlBpE,SACR,OAAIA,EAAS6G,QACJ,CACLD,QAAS5G,EAAS4G,SAGf,CACLvF,SAAUrB,EAASqB,WAGvB3E,aACE,OAAImG,KAAK1B,SACArF,aAAe+G,KAAK1B,UAEtB,SAGV0e,QAAQ,SAAAC,GAAI,MAAK,CAChByE,YADgB,SAAA3nB,GAC+B,IAAjCR,EAAiCQ,EAAjCR,SAAUE,EAAuBM,EAAvBN,UACtBwjB,EAAK1jB,SAAWA,EAChB0jB,EAAKxjB,UAAYA,GAEnBkoB,eALgB,SAKDC,GACTA,IAAc3E,EAAK8D,cACrB9D,EAAK8D,YAAca,EACnB3E,EAAK3a,IAAL,iBAAAtB,OAA0B4gB,EAAY,UAAY,YAGtDC,eAXgB,SAWDC,GACb7E,EAAKuD,YAAcsB,GAErBC,WAdgB,SAcLlhB,GACToc,EAAKpc,QAAUA,EACfoc,EAAK3a,IAAL,kBAAAtB,OAA2BH,KAE7BmhB,aAlBgB,WAmBd/E,EAAKpc,aAAUS,EACf2b,EAAK3a,IAAI,oBAEX2f,oBAtBgB,SAsBIC,GAClBjF,EAAK6D,iBAAmBoB,GAE1BC,mBAzBgB,WA0BdlF,EAAK4D,qBAAsB,MAG9B7D,QAAQ,SAAAC,GAAI,MAAK,CAChBmF,oBADgB,SACInkB,GAClBgf,EAAKze,SAAWP,EAAOokB,cAAgBpkB,EAAOokB,cAActjB,GAAK,KACjEke,EAAKyD,WAAaziB,EAAOyiB,WACzBzD,EAAK0D,gBAAkB1iB,EAAOqkB,eAC9BrF,EAAK2D,mBAAqB3iB,EAAO2iB,mBAE7B3iB,EAAOskB,eAAiBtF,EAAKsE,gBAC/BtE,EAAK8E,WAAW5hB,aAAclC,EAAOskB,eAGvCtF,EAAK+D,qBAAsB,EAErB/iB,EAAOyiB,YAAcziB,EAAOukB,gBAKlCvF,EAAKyE,YAAYzjB,EAAOukB,gBACxBvF,EAAK3a,IAAL,iCAAAtB,OACmCic,EAAKze,SADxC,YAAAwC,OAEI/C,EAAOwkB,KAAOxkB,EAAOwkB,KAAK1jB,GAAK,QAPjCke,EAAK3a,IAAI,iBAWbogB,gBAzBgB,SAyBAzkB,GACdgf,EAAKyE,YAAYzjB,EAAO7E,KACxB6jB,EAAK8E,WAAW9jB,EAAO4C,SACvBoc,EAAK0E,gBAAe,IAEtBgB,iBA9BgB,WA+Bd1F,EAAK+D,qBAAsB,EAC3B/D,EAAKyD,YAAa,EAClBzD,EAAK0E,gBAAe,IAEtBiB,gBAnCgB,WAoCd3F,EAAK+D,qBAAsB,EAC3B/D,EAAKyD,YAAa,EAClBzD,EAAK0D,iBAAkB,EACvB1D,EAAK0E,gBAAe,IAEtBkB,gBAzCgB,WA0Cd5F,EAAKze,SAAW,KAChBye,EAAKyD,YAAa,EAClBzD,EAAK0D,iBAAkB,EACvB1D,EAAK2D,oBAAqB,EAC1B3D,EAAK+D,qBAAsB,EAC3B/D,EAAK+E,mBC5IEc,GACD,WADCA,GAEA,WAGAC,GAAWnG,GAAUY,MAAM,OACrChF,MAAM,CACLwK,KAAMnG,QAAM4D,SAAS5D,QAAM0D,OAAQ,IACnChnB,SAAUsjB,QAAM4D,SAAS5D,QAAM0D,OAAQuC,IACvCrpB,UAAWojB,QAAM4D,SAAS5D,QAAM0D,OAAQuC,MAEzChG,SAAS,iBAAO,CACfmG,OAAQ,KACRC,WAAY,QAEb/F,MAAM,SAAAF,GAAI,MAAK,CACdkG,aACE,OAAOlqB,aAAegkB,OAGzBD,QAAQ,SAAAC,GAAI,MAAK,CAChBmG,UADgB,SACNC,GACRpG,EAAKgG,OAASI,GAEhBC,WAJgB,SAILN,QACI1hB,IAAT0hB,EACF/F,EAAK+F,KAAOA,EACH/F,EAAKgG,SACdhG,EAAK+F,KAAO/F,EAAKgG,OAAOM,YAG5BC,eAXgB,SAWDpqB,GACb,GAAIA,EACF6jB,EAAK1jB,SAAWH,EAAIG,SACpB0jB,EAAKxjB,UAAYL,EAAIK,eAChB,GAAIwjB,EAAKgG,OAAQ,CACtB,IAAME,EAASlG,EAAKgG,OAAOQ,YAC3BxG,EAAK1jB,SAAW4pB,EAAO9pB,MACvB4jB,EAAKxjB,UAAY0pB,EAAO3pB,QAG5Bod,QArBgB,SAqBR8M,GACNzG,EAAKiG,WAAa/pB,aAAYuqB,EAAG7pB,SAEnC8pB,gBAxBgB,WAyBd1G,EAAKiG,WAAa,SCxCXU,GAAahH,GAAUY,MAAM,SACvChF,MAAM,CACLha,SAAUqe,QAAMY,UAAUZ,QAAMpW,QAChCkR,QAASkF,QAAMY,UAAUZ,QAAMpW,QAC/Bod,YAAa7b,IAAiB8b,UAC9BC,cAAejc,IAAgBkc,MAC/BC,KAAM,IAEPnH,SAAS,iBAAO,CACfjF,UAAW,KACXqM,cAAc,EACdC,iBAAiB,EACjBC,aAAc,KACdC,mBAAoB,KACpBC,gBAAgB,EAChBC,qBAAqB,EACrBC,kBAAmB,KACnBC,iBAAkB,KAClBC,kBAAkB,KAEnBvH,MAAM,SAAAF,GAAI,MAAK,CACdhZ,eACE,OAAwB,OAAjBgZ,EAAKtF,SAEdgN,+BACE,OAAO1H,EAAK4G,cAAgB7b,IAAiB8b,WAE/Cc,6BACE,OAAO3H,EAAK4G,cAAgB7b,IAAiB6c,QAE/CC,iCACE,OAAO7H,EAAK8G,gBAAkBjc,IAAgBkc,OAEhDe,gBACE,OAAOvG,QAAQvB,EAAKmH,cAAgBnH,EAAKmH,aAAa9C,OAAS,IAEjE0D,yBACE,OAAI/H,EAAK1b,KAAKpE,SAASkH,SAAW4Y,EAAK1b,KAAKpE,SAAS0hB,QAC5C5B,EAAK1b,KAAKpE,SAAS0hB,QAAQoG,YAE7B,IAETC,yBACE,OAAOjI,EAAKiH,cAAgBjH,EAAKkH,oBAGpCnH,QAAQ,SAAAC,GAAI,MAAK,CAChBkI,eADgB,SACDC,GACbnI,EAAK4G,YAAcuB,GAErBC,iBAJgB,SAICD,GACfnI,EAAK8G,cAAgBqB,GAEvB3mB,UAPgB,SAOND,GACRye,EAAKze,SAAWA,GAElBgB,aAVgB,SAUHvB,GACXgf,EAAKtF,QAAU1Z,EAAOc,GACtBke,EAAKze,SAAWP,EAAOa,OAAOC,GAC9Bke,EAAKpF,UAAY,KACjBoF,EAAK3a,IAAI,iCAAkC2a,EAAKtF,QAASsF,EAAKze,WAEhE8mB,UAhBgB,SAgBN3N,GACJsF,EAAKtF,UAAYA,IACnBsF,EAAKtF,QAAUA,EACfsF,EAAK3a,IAAI,8DAGbgX,YAtBgB,YAuBV2D,EAAKze,UAAYye,EAAKtF,UACxBsF,EAAK3a,IACH,oCACA2a,EAAK1b,KAAKjG,MAAMqc,QAChBsF,EAAK1b,KAAKjG,MAAMkD,UAGpBye,EAAKtF,QAAU,KACfsF,EAAKze,SAAW,KAChBye,EAAKpF,UAAY,MAEnB0N,cAlCgB,WAmCdtI,EAAKiH,cAAe,GAEtBsB,eArCgB,WAsCdvI,EAAKiH,cAAe,GAEtBuB,aAxCgB,SAwCHC,GACXzI,EAAKiH,cAAe,EACpBjH,EAAKmH,aAAesB,GAAU,CAC5B/jB,EAAA,EAAIgS,EAAA,yDAGRgS,UA9CgB,WA+Cd1I,EAAKmH,aAAe,CAClBziB,EAAA,EAAIgS,EAAA,8JAGRiS,YAnDgB,WAoDd3I,EAAKmH,aAAe,MAEtByB,iBAtDgB,SAsDCC,GACf7I,EAAKkH,gBAAkB2B,GAEzBC,gBAzDgB,SAyDAC,GACd/I,EAAKoH,mBAAqB2B,GAE5BC,eA5DgB,WA6DdhJ,EAAKqH,gBAAiB,GAExB4B,gBA/DgB,WAgEdjJ,EAAKqH,gBAAiB,GAExB6B,QAlEgB,SAkERlC,GACNhH,EAAKgH,KAAOA,GAEdmC,aArEgB,SAqEHvO,GACXoF,EAAKpF,UAAYA,GAEnBwO,mBAxEgB,WAyEdpJ,EAAKsH,qBAAsB,GAE7B+B,UA3EgB,SA2ENN,GACR/I,EAAKuH,kBAAoBwB,GAE3BO,eA9EgB,SA8EDC,GACbvJ,EAAKwH,iBAAmB+B,MAG3BxJ,QAAQ,SAAAC,GAAI,MAAK,CAChBwJ,QADgB,WAEdxJ,EAAKyH,kBAAmB,MAI3BlM,MAAM,CACLkO,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,MAAO,GACP5B,YAAa,GACb6B,KAAM,eChJGC,GAAYnK,GAAUY,MAAM,QACtChF,MAAM,CACLwO,iBAAkBnK,QAAMqB,MAAMrB,QAAMpW,QACpCwgB,aAAcpK,QAAMY,UAAUZ,QAAMqK,SACpCC,gBAAiBtK,QAAM4D,SAAS5D,QAAMqK,SAAS,KAEhDpK,SAAS,iBAAO,CACfsK,wBAAwB,EACxBC,uBAAuB,EACvBllB,mBAAmB,EACnBmlB,eAAe,KAEhBnK,MAAM,SAAAF,GAAI,MAAK,CACd5a,eACE,OACE4a,EAAK+J,kBACL/J,EAAK1b,KAAKpE,SAAS4hB,iBACnBwI,0BAAevkB,IAAUE,mBAAoBF,IAAUC,mBAG3DukB,yBACE,OAA6B,IAAtBvK,EAAKgK,iBAGfjK,QAAQ,SAAAC,GAAI,MAAK,CAChBwK,eADgB,SACD7kB,GACTA,IAASqa,EAAK+J,mBAChB/J,EAAK9a,mBAAoB,GAE3B8a,EAAK+J,iBAAmBpkB,EACxBqa,EAAK3a,IAAI,uBAAwBM,IAEnCJ,iBARgB,WASdya,EAAK9a,mBAAoB,EACzB8a,EAAK3a,IAAI,wBAAyB2a,EAAK5a,WAEzCqlB,gBAZgB,WAadzK,EAAKmK,wBAAyB,GAEhCO,gBAfgB,WAgBd1K,EAAKmK,wBAAyB,GAEhCQ,eAlBgB,WAmBd3K,EAAKoK,uBAAwB,GAE/BQ,eArBgB,WAsBd5K,EAAKoK,uBAAwB,GAE/BS,mBAxBgB,WAyBd7K,EAAKgK,cAAe,GAEtBc,kBA3BgB,WA4Bd9K,EAAKgK,cAAe,GAEtBe,iBA9BgB,WA+Bd/K,EAAKqK,eAAgB,GAEvBW,gBAjCgB,WAkCdhL,EAAKkK,iBAAkB,MC5ChBe,GAAYtL,GAAUY,MAAM,QACtChF,MAAM,CACLE,KAAMmE,QAAM4D,SAASlD,GAAW,IAChCpgB,SAAU0f,QAAM4D,SAAS9B,GAAe,IACxCwJ,KAAMtL,QAAM4D,SAASb,GAAW,IAChCwI,OAAQvL,QAAM4D,SAASL,GAAa,IACpC/O,IAAKwL,QAAM4D,SAASsC,GAAU,IAC9BznB,MAAOuhB,QAAM4D,SAASmD,GAAY,IAClC1mB,SAAU2f,QAAM4D,SAASH,GAAe,IACxCxe,KAAM+a,QAAM4D,SAASsG,GAAW,MAEjC5J,MAAM,SAAAF,GAAI,MAAK,CACdoL,sBACE,MAAO,CACLpL,EAAKvE,KACLuE,EAAKnb,KACLmb,EAAK9f,SACL8f,EAAK/f,SACL+f,EAAK3hB,MACL2hB,EAAK5L,SAIViX,OAAO,SAAArL,GACN,IAAIsL,EACErmB,EAAcsmB,aAAWC,KAAI,GACnC,MAAO,CACLtL,MAAO,CACLjb,kBACE,OAAOA,EAAYkd,QAGvBpC,QAAS,CACP0L,YADO,WACO,IAAAC,EAC2BjM,sBAAYO,GAAzBf,GADdyM,EACJxrB,SADIwrB,EACMtX,IADNhX,OAAAuuB,EAAA,EAAAvuB,CAAAsuB,EAAA,qBAEZJ,EAAkBrM,GAEpB2M,MALO,WAMLpM,wBAAcQ,EAAMsL,IAEtBO,KAAI,eAAAC,EAAA1uB,OAAA2uB,EAAA,EAAA3uB,CAAA4uB,EAAAzuB,EAAAuD,KAAE,SAAAC,IAAA,OAAAirB,EAAAzuB,EAAA0D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACE6T,QAAQkI,IAAI6C,EAAKoL,gBAAgBhX,IAAIuK,KADvC,OAEJ2M,EAAgBprB,SAAWuf,sBAAYO,EAAK9f,UAC5C8f,EAAK3a,IAAI,eACTJ,EAAYyd,KAAI,GAJZ,wBAAAxhB,EAAAsB,SAAAzB,MAAF,yBAAA+qB,EAAAhpB,MAAAC,KAAAC,YAAA,OCZZipB,IAASzS,OAAOnB,EAAA9a,EAAAC,cA/BH,YdMN,WAAoD,IAA9B0uB,EAA8BlpB,UAAAqhB,OAAA,QAAAhgB,IAAArB,UAAA,GAAAA,UAAA,GAAJ,GACrD1D,IAAM6a,UAAU,WACV+R,EAAKC,YAAczT,GACrB2F,IAAQ+N,SAAS3iB,OAAOxJ,SAASgb,OAElC,IACIoD,IcXPgO,CAAa,CAAEF,YAAY,IAC3BG,wBAAcvmB,IAAUS,WAExB,IAAM+lB,EAAWjtB,IAAMsd,SAJNvd,EAKFC,IAAMC,SAAS,WAC5B,IAAMitB,EAAWvB,GAAUwB,OAAO,IAElC,OADAF,EAASzP,QAAU0P,EAASX,OACrBW,IAHFloB,EALUlH,OAAA2Z,EAAA,EAAA3Z,CAAAiC,EAAA,MAAAwZ,EAWAvZ,IAAMC,SAAS,WAC9B,IAAMmtB,ECfH,SAA4BpoB,EAAkBioB,GACnD,IAAMI,EAAQ,eAAA7vB,EAAAM,OAAA2uB,EAAA,EAAA3uB,CAAA4uB,EAAAzuB,EAAAuD,KAAG,SAAAC,IAAA,IAAA2B,EAAAiZ,EAAAD,EAAA,OAAAsQ,EAAAzuB,EAAA0D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACTmrB,EADS,WAEXjoB,EAAKmX,KAAKE,MAFC,CAAAza,EAAAE,KAAA,eAAAF,EAAAI,OAAA,SAGNgD,EAAKmX,KAAKE,OAHJ,cAAAza,EAAAE,KAAA,EAKiBwrB,0BAAgB7mB,IAAUG,UAL3C,cAAAxD,EAAAxB,EAAAU,KAKP+Z,EALOjZ,EAKPiZ,MAAOD,EALAhZ,EAKAgZ,OACfpX,EAAKmX,KAAKgF,aAAa9E,EAAOD,GANfxa,EAAAI,OAAA,SAORqa,GAPQ,yBAAAza,EAAAsB,SAAAzB,MAAH,yBAAAjE,EAAAgG,MAAAC,KAAAC,YAAA,GAYd,OAAO6pB,oCACLC,yBAAe,CAAEH,aACjBI,6BAJc,kBAAMzoB,EAAKO,KAAKO,WAK9B4nB,wBAAc,CAAEC,SAAS7mB,IACzB8mB,4BACAC,8BACAC,4BAAkBrnB,IAAUG,WDJVmnB,CAAmB/oB,EAAMioB,EAASzP,SAGpD,OADAxY,EAAKjG,MAAM4hB,UAAUyM,GACdA,IAJF5M,EAXU1iB,OAAA2Z,EAAA,EAAA3Z,CAAAyb,EAAA,MAkBjB,OACER,EAAA9a,EAAAC,cAACY,EAAA,EAAD,CAAckvB,MAAOhpB,GACnB+T,EAAA9a,EAAAC,cAACyc,EAAA,eAAD,CAAgB6F,OAAQA,GACtBzH,EAAA9a,EAAAC,cAACkH,EAAA,EAAD,KACE2T,EAAA9a,EAAAC,cAAC+vB,EAAD,KACElV,EAAA9a,EAAAC,cAACgwB,EAAD,WAQI,MAAUpT,SAASqT,eAAe,SAElDC,eAAaC,SAAS,CACpBC,YAAY,EACZC,SAAU,SAACC,GACTC,WAAW,WAEPtkB,OAAOukB,QACLtpB,EAAA,EAAIgS,EAAA,oFAGNoX,EAAGG,YAAY,iBAEhB,QAIHhK,UAAUiK,eACZjK,UAAUiK,cAAcC,iBAAiB,UAAW,SAAAC,GAC/B,mBAAfA,EAAMnnB,MACRhH,SAAS8X,usBE7DR,IAAMsW,EAAgBC,kBAAOC,KAAVC,WAAA,CAAAC,YAAA,yBAAAC,YAAA,YAAGJ,CAAH,0LAGJK,EAAU,aACdA,EAAU,aAEJA,EAAU,kBACdA,EAAU,mBAOjBC,EAAkBN,kBAAOC,KAAVC,WAAA,CAAAC,YAAA,2BAAAC,YAAA,YAAGJ,CAAH,4IAGNK,EAAU,YACdA,EAAU,YAEJA,EAAU,iBACdA,EAAU,kBASjBE,EAAqBP,kBAChC,SAAAxxB,KAAGgyB,SAAHhyB,EAAa0K,MAAb,IAAuB+T,EAAvBne,OAAA2xB,EAAA,EAAA3xB,CAAAN,EAAA,6BACEkyB,EAAAzxB,EAAAC,cAACM,EAAA,EAAWyd,KAFeiT,WAAA,CAAAC,YAAA,8BAAAC,YAAA,YAAGJ,CAAH,SAK3B,SAAA5rB,GAAA,IAAG8E,EAAH9E,EAAG8E,MAAOsnB,EAAVpsB,EAAUosB,SAAV,OAA8CG,cAA9CpjB,IAGEqjB,YAHFnjB,IAIsB+iB,EAAWtnB,EAAMM,SAAWN,EAAMY,YAEtD+mB,YANFljB,IAOsB6iB,EAAWtnB,EAAMM,SAAW,SAChCgnB,EAAWtnB,EAAMM,SAAWN,EAAMY,WACzC0mB,EAAWtnB,EAAMW,aAAeX,EAAMc,eAG3CwmB,EAAWtnB,EAAMU,cAAgBV,EAAMa,gBAEzBymB,EAAWtnB,EAAMU,cAAgBV,EAAMa,gBAC9CymB,EAAWtnB,EAAMW,aAAeX,EAAMc,kBAKvD,SAASqmB,EAAUzvB,GACjB,OAAO,SAAAkwB,GAAA,OAAAA,EAAG5nB,MAAuCtI,oPC3DtCmwB,EAAmB,IAEnBC,EAAU,SAAA/T,GAAK,OAC1BgU,EAAAhyB,EAAAC,cAACgyB,EAAAjyB,EAADH,OAAAM,OAAA,GAAqB6d,EAArB,CAA4BkU,SAAUJ,MAE3BK,EAAS,SAAAnU,GAAK,OACzBgU,EAAAhyB,EAAAC,cAACgyB,EAAAjyB,EAADH,OAAAM,OAAA,GAAqB6d,EAArB,CAA4BoU,SAAUN,MAmB3BH,EAAe,kBAAaD,cAAb,mCACLI,EAAmB,GAEpCJ,MAAGnsB,WAAH,EAAAE,aAIOmsB,EAAc,kBAAaF,cAAb,mCACJI,EAAmB,GAEpCJ,MAAGnsB,WAAH,EAAAE","file":"static/js/main.2d45686f.chunk.js","sourcesContent":["import { FGeoPointFragment } from '../graph/generated'\n\nexport type GeoPoint = Omit<FGeoPointFragment, '__typename'>\n\nexport const gpsToLatLngLit = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import './Modal.css'\n\nimport React from 'react'\nimport {\n  Container,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalProps,\n} from 'reactstrap'\n\ninterface IProps extends ModalProps {\n  isOpen: boolean\n  headerText: string\n  onClose?(): void\n}\n\nexport const AlertModal: React.FC<IProps> = ({\n  isOpen,\n  headerText,\n  onClose,\n  children,\n  ...modalProps\n}) => (\n  <Modal\n    isOpen={isOpen}\n    toggle={onClose}\n    className=\"modal__container\"\n    {...modalProps}\n    data-testid=\"alertModal\"\n  >\n    <ModalHeader tag={Container} toggle={onClose} className=\"modal__header\">\n      <span>{headerText}</span>\n    </ModalHeader>\n    <ModalBody className=\"modal__body\">\n      <div className=\"modal__body__content\">{children}</div>\n    </ModalBody>\n  </Modal>\n)\n","import { useRoot } from '../app/useRoot'\n\nexport function useOrderModel() {\n  const { order } = useRoot()\n  return order\n}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import React from 'react'\n\nimport { AlertModal } from '../common/AlertModal'\n\nexport function useAlertModal() {\n  const [alertModal, setAlertModal] = React.useState<ReactNode>(null)\n\n  const makeAlert = (header: string, body: ReactNode | string) => {\n    setAlertModal(\n      React.createElement(\n        AlertModal,\n        {\n          isOpen: true,\n          onClose: () => setAlertModal(null),\n          headerText: header,\n        },\n        body,\n      ),\n    )\n  }\n\n  return [alertModal, makeAlert] as [ReactNode, typeof makeAlert]\n}\n","import { Sentry } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { useRoot } from '../../../app/useRoot'\nimport {\n  useMDeliveryOrderCreate,\n  useMPickupOrderCreate,\n} from '../../../graph/generated'\n\nexport function useOrderCreate(onConfirm: () => void) {\n  const { order, location, business } = useRoot()\n\n  const [deliveryOrderCreate] = useMDeliveryOrderCreate()\n  const [pickupOrderCreate] = useMPickupOrderCreate()\n\n  const createDeliveryOrder = React.useCallback(async () => {\n    if (!location.geoPoint) {\n      return\n    }\n    if (location.branchId) {\n      order.setBranch(location.branchId)\n    }\n    const result = await deliveryOrderCreate({\n      gps: location.geoPoint,\n      orderOrigin: business.orderOrigin,\n      ...business.brandOrBranch,\n    })\n    if (result) {\n      if (location.branchId && result.order.branch.id !== location.branchId) {\n        Sentry.withScope(scope => {\n          scope.setExtras({\n            requestedBranchId: location.branchId,\n            createdOrderId: result.order.id,\n            createdBranchId: result.order.branch.id,\n          })\n          Sentry.captureMessage(\n            'Delivery order was created for different branch.',\n          )\n        })\n      }\n      order.orderCreated(result.order)\n      onConfirm()\n    }\n  }, [onConfirm])\n\n  const createPickupOrder = async (branchId: ID) => {\n    // it's necessary to set asap so correct data are displayed further\n    order.setBranch(branchId)\n    const result = await pickupOrderCreate({\n      branchId,\n      orderOrigin: business.orderOrigin,\n    })\n    if (result) {\n      if (result.order.branch.id !== branchId) {\n        Sentry.withScope(scope => {\n          scope.setExtras({\n            requestedBranchId: branchId,\n            createdOrderId: result.order.id,\n            createdBranchId: result.order.branch.id,\n          })\n          Sentry.captureMessage(\n            'Pickup order was created for different branch.',\n          )\n        })\n      }\n      order.orderCreated(result.order)\n      onConfirm()\n    }\n  }\n\n  return { createDeliveryOrder, createPickupOrder }\n}\n","import { format, formatWithOptions, parse } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\n\nimport { FJsonAddressFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const formatTime = format('H:mm')\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const parseTime = parse('HH:mm')\n\nexport const formatAddress = (address: FJsonAddressFragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const RootProvider = rootContext.Provider\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useAutorun } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useRoot } from './app/useRoot'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const root = useRoot()\n  const { user } = root\n  const [, forceUpdate] = React.useState(1)\n\n  useAutorun(async () => {\n    if (root.initialized && !user.languageActivated) {\n      await loadCatalog(user.language)\n      user.log(`loaded language \"${user.language}\" catalog`)\n      i18n.activate(user.language)\n      user.activateLanguage()\n      forceUpdate(i => i + 1)\n    }\n  })\n\n  return <I18nProvider i18n={i18n}>{children}</I18nProvider>\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  googleMapsApi: process.env.REACT_APP_LOCAL_GOOGLE_API_KEY,\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: '',\n  pageTitleSuffix: 'LOCAL',\n  analytics: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n    analytics: '',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n    analytics: 'UA-4990100-13',\n    googleMapsApi: 'AIzaSyCDn-SXz6ngOCNVwHR8zDY38JopNFVIrsU',\n  })\n}\n","import Color from 'color'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { ThemeContext, ThemeProvider } from 'styled-components/macro'\n\nimport {\n  QThemeStyleStyles,\n  QThemeStyleVariables,\n  useQThemeStyle,\n} from '../graph/generated'\nimport { useRoot } from './useRoot'\n\ninterface IProps {\n  children: ReactNode[]\n}\n\nconst ThemeSwitchProvider = observer<IProps>(({ children }) => {\n  const { order, business } = useRoot()\n\n  const variables: QThemeStyleVariables = {\n    brandId: business.isBrand && !order.hasOrder ? business.brandId : undefined,\n    branchId:\n      business.isBrand && !order.hasOrder\n        ? undefined\n        : order.branchId || business.branchId,\n  }\n\n  const { data } = useQThemeStyle(variables, {\n    skip: !business.isValid && !order.hasOrder,\n    context: { noBatch: true },\n    fetchPolicy: 'cache-first',\n  })\n\n  const theme = React.useMemo(\n    () => getTheme(data && data.theme && data.theme.styles),\n    [data],\n  )\n\n  return (\n    <ThemeProvider theme={theme}>\n      <>{children}</>\n    </ThemeProvider>\n  )\n})\n\nexport function useTheme() {\n  return React.useContext(ThemeContext) as TTheme\n}\n\nexport function getTheme(styles?: QThemeStyleStyles) {\n  // Fallback colors\n  const defaultPrimary = '#54984a'\n  const defaultSecondary = '#99230e'\n  const defaultTertiary = '#d9a700'\n\n  const defaultTheme = {\n    primary: defaultPrimary,\n    secondary: defaultSecondary,\n    tertiary: defaultTertiary,\n    primaryHover: calcHoverColor(defaultPrimary),\n    secondaryHover: calcHoverColor(defaultPrimary),\n    tertiaryHover: calcHoverColor(defaultTertiary),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    storeLogo: null,\n    storeLogoMobile: null,\n    backgroundCart: undefined,\n  }\n\n  if (styles) {\n    return {\n      ...defaultTheme,\n      primary: styles.active || defaultPrimary,\n      secondary: styles.main || defaultSecondary,\n      tertiary: styles.mainSecondary || defaultTertiary,\n      primaryHover: styles.active && calcHoverColor(styles.active),\n      secondaryHover: styles.main && calcHoverColor(styles.main),\n      tertiaryHover:\n        styles.mainSecondary && calcHoverColor(styles.mainSecondary),\n      storeLogo: styles.storeLogo,\n      storeLogoMobile: styles.storeLogoMobile,\n      backgroundCart: styles.backgroundCart,\n    }\n  }\n\n  return defaultTheme\n}\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport type TTheme = ReturnType<typeof getTheme>\n\nexport default ThemeSwitchProvider\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', 'doveze*')\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n\n  readonly sector?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderWifiCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly sector?: Maybe<string>\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderStaffImport {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly companyBranch: string\n\n  readonly acceptedAt?: Maybe<string>\n\n  readonly orderRecipes: ReadonlyArray<InputOrderRecipeCreates>\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly invoice: string\n\n  readonly invoiceNumber: number\n\n  readonly paymentMethods: ReadonlyArray<InputOrderPaymentMethodsCreate>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  Driver = 'DRIVER',\n  FeAdmin = 'FE_ADMIN',\n  FeCompletion = 'FE_COMPLETION',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n  De = 'DE',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n  WifiDelayed = 'WIFI_DELAYED',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n}\n/** Possible sector types */\nexport enum SectorTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible order origin categories */\nexport enum OrderOriginCategoryEnum {\n  Website = 'WEBSITE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Doveze = 'DOVEZE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type QBusinessLookupVariables = {\n  readonly code?: Maybe<string>\n  readonly url?: Maybe<string>\n}\n\nexport type QBusinessLookupQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lookup: QBusinessLookupLookup\n}\n\nexport type QBusinessLookupLookup = {\n  readonly __typename?: 'CompanyBrandLookUp'\n\n  readonly branch: Maybe<QBusinessLookupBranch>\n\n  readonly isBrand: boolean\n\n  readonly isMobileApp: boolean\n\n  readonly knownBasePath: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly defaultLanguage: LanguageEnum\n}\n\nexport type QBusinessLookupBranch = FCompanyBranchFragment\n\nexport type QThemeStyleVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QThemeStyleQuery = {\n  readonly __typename?: 'Query'\n\n  readonly theme: QThemeStyleTheme\n}\n\nexport type QThemeStyleTheme = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly styles: QThemeStyleStyles\n}\n\nexport type QThemeStyleStyles = {\n  readonly __typename?: 'GraphicStyle'\n\n  readonly active: string\n\n  readonly main: string\n\n  readonly mainSecondary: string\n\n  readonly storeLogo: string\n\n  readonly storeLogoMobile: string\n\n  readonly backgroundCart: string\n}\n\nexport type MAddToCartVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type MAddToCartMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly add: MAddToCartAdd\n}\n\nexport type MAddToCartAdd = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment\n\nexport type MChangeCartItemVariables = {\n  readonly orderId: string\n  readonly itemId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n  readonly withGoods: boolean\n}\n\nexport type MChangeCartItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly change: MChangeCartItemChange\n}\n\nexport type MChangeCartItemChange = FCartSummaryFragment & FCartGoodsFragment\n\nexport type MRemoveCartItemVariables = {\n  readonly itemId: string\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type MRemoveCartItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly remove: MRemoveCartItemRemove\n}\n\nexport type MRemoveCartItemRemove = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment\n\nexport type QCartVariables = {\n  readonly orderId: string\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type QCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QCartOrder\n}\n\nexport type QCartOrder = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment &\n  FCartStaticFragment\n\nexport type QCartItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCartItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCartItemItem\n}\n\nexport type QCartItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCartItemRecipe\n\n  readonly sideDishes: ReadonlyArray<QCartItemSideDishes>\n}\n\nexport type QCartItemRecipe = FRecipeDetailFragment\n\nexport type QCartItemSideDishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCartItem_Recipe\n}\n\nexport type QCartItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCartRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCartRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCartRecipeRecipe\n}\n\nexport type QCartRecipeRecipe = FRecipeDetailFragment\n\nexport type QOrderFinishVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderFinishQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFinishOrder\n\n  readonly companyBranch: QOrderFinishCompanyBranch\n\n  readonly androidApp: Maybe<QOrderFinishAndroidApp>\n\n  readonly iosApp: Maybe<QOrderFinishIosApp>\n}\n\nexport type QOrderFinishOrder = FOrderFinishedFragment\n\nexport type QOrderFinishCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly phone: string\n\n  readonly company: QOrderFinishCompany\n}\n\nexport type QOrderFinishCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type QOrderFinishAndroidApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QOrderFinishIosApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QFoodMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QFoodMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareCategories: ReadonlyArray<QFoodMenuWareCategories>\n}\n\nexport type QFoodMenuWareCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly recipes: ReadonlyArray<QFoodMenuRecipes>\n} & FFoodMenuCategoryFragment\n\nexport type QFoodMenuRecipes = FFoodMenuRecipeFragment\n\nexport type QFoodMenuCartPresenceVariables = {\n  readonly orderId: string\n}\n\nexport type QFoodMenuCartPresenceQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QFoodMenuCartPresenceOrder\n}\n\nexport type QFoodMenuCartPresenceOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FCartPresenceFragment\n\nexport type MDeliveryOrderCreateVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type MDeliveryOrderCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: MDeliveryOrderCreateOrder\n}\n\nexport type MDeliveryOrderCreateOrder = FOrderCreateFragment\n\nexport type MPickupOrderCreateVariables = {\n  readonly branchId: string\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type MPickupOrderCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: MPickupOrderCreateOrder\n}\n\nexport type MPickupOrderCreateOrder = FOrderCreateFragment\n\nexport type QInitialDeliveryLocationVariables = {}\n\nexport type QInitialDeliveryLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly location: QInitialDeliveryLocationLocation\n}\n\nexport type QInitialDeliveryLocationLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly gpsCoordinates: Maybe<QInitialDeliveryLocationGpsCoordinates>\n}\n\nexport type QInitialDeliveryLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type QInitialLocationVariables = {}\n\nexport type QInitialLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly initialLocation: QInitialLocationInitialLocation\n}\n\nexport type QInitialLocationInitialLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly gpsCoordinates: Maybe<QInitialLocationGpsCoordinates>\n}\n\nexport type QInitialLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type QPickupMapVariables = {\n  readonly branchSpecific: boolean\n  readonly brandId?: Maybe<string>\n  readonly branchId: string\n}\n\nexport type QPickupMapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly brand: ReadonlyArray<QPickupMapBrand>\n\n  readonly branch: QPickupMapBranch\n}\n\nexport type QPickupMapBrand = FPickupBranchFragment\n\nexport type QPickupMapBranch = FPickupBranchFragment\n\nexport type QResolveLocationVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly address?: Maybe<string>\n  readonly latitude?: Maybe<number>\n  readonly longitude?: Maybe<number>\n}\n\nexport type QResolveLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QResolveLocationResolveLocation\n}\n\nexport type QResolveLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly finalAddress: Maybe<QResolveLocationFinalAddress>\n\n  readonly isResolved: boolean\n\n  readonly isValidAddress: boolean\n\n  readonly inDeliveryLocation: boolean\n\n  readonly gpsCoordinates: Maybe<QResolveLocationGpsCoordinates>\n\n  readonly companyBranch: Maybe<QResolveLocationCompanyBranch>\n\n  readonly zone: Maybe<QResolveLocationZone>\n}\n\nexport type QResolveLocationFinalAddress = FJsonAddressFragment\n\nexport type QResolveLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type QResolveLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type QResolveLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type QMobileShopIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QMobileShopIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: QMobileShopIntroIntro\n}\n\nexport type QMobileShopIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type QMobileShopStatusVariables = {\n  readonly branchId: string\n}\n\nexport type QMobileShopStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: QMobileShopStatusBranch\n}\n\nexport type QMobileShopStatusBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n} & FCompanyBranchStatusFragment\n\nexport type QSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type QSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<QSmartBannerApp>\n}\n\nexport type QSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type MOrderDeliveryTimeVariables = {\n  readonly orderId: string\n  readonly deliverAt?: Maybe<string>\n  readonly withGoods: boolean\n}\n\nexport type MOrderDeliveryTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderDeliveryTimeUpdateOrder\n}\n\nexport type MOrderDeliveryTimeUpdateOrder = FCartSummaryFragment &\n  FCartGoodsFragment\n\nexport type MOrderFinishVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MOrderFinishMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MOrderFinishFinishOrder\n}\n\nexport type MOrderFinishFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type MOrderPromoAddVariables = {\n  readonly orderId: string\n  readonly code: string\n  readonly withGoods: boolean\n}\n\nexport type MOrderPromoAddMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MOrderPromoAddAddOrderPromoCode\n}\n\nexport type MOrderPromoAddAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MOrderPromoAddOrder\n}\n\nexport type MOrderPromoAddOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoAddPromoCodes>\n} & (FCartSummaryFragment & FCartGoodsFragment)\n\nexport type MOrderPromoAddPromoCodes = FPromoCodeFragment\n\nexport type MOrderPromoRemoveVariables = {\n  readonly orderId: string\n  readonly codeId: string\n  readonly withGoods: boolean\n}\n\nexport type MOrderPromoRemoveMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MOrderPromoRemoveRemoveOrderPromoCode\n}\n\nexport type MOrderPromoRemoveRemoveOrderPromoCode = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoRemovePromoCodes>\n} & (FCartSummaryFragment & FCartGoodsFragment)\n\nexport type MOrderPromoRemovePromoCodes = FPromoCodeFragment\n\nexport type MOrderTipUpdateVariables = {\n  readonly orderId: string\n  readonly tips: number\n  readonly withGoods: boolean\n}\n\nexport type MOrderTipUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderTipUpdateUpdateOrder\n}\n\nexport type MOrderTipUpdateUpdateOrder = FCartSummaryFragment &\n  FCartGoodsFragment\n\nexport type MSubmitOrderVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MSubmitOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly submitOrder: MSubmitOrderSubmitOrder\n}\n\nexport type MSubmitOrderSubmitOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type QOrderFormVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFormOrder\n}\n\nexport type QOrderFormOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QOrderFormAgreementsVariables = {\n  readonly input: InputVamStatus\n}\n\nexport type QOrderFormAgreementsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly agreements: ReadonlyArray<QOrderFormAgreementsAgreements>\n}\n\nexport type QOrderFormAgreementsAgreements = {\n  readonly __typename?: 'VAMAgreement'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly description: string\n\n  readonly isConfirmed: boolean\n\n  readonly isMandatory: boolean\n}\n\nexport type QOrderPaymentStatusVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPaymentStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly status: QOrderPaymentStatusStatus\n}\n\nexport type QOrderPaymentStatusStatus = {\n  readonly __typename?: 'OrderOnlinePaymentStatus'\n\n  readonly isSuccess: boolean\n\n  readonly userErrors: ReadonlyArray<string>\n}\n\nexport type QOrderPromoCodesVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPromoCodesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderPromoCodesOrder\n}\n\nexport type QOrderPromoCodesOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<QOrderPromoCodesPromoCodes>\n}\n\nexport type QOrderPromoCodesPromoCodes = FPromoCodeFragment\n\nexport type QOrderTimePickerVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderTimePickerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QOrderTimePickerCompanyBranch\n}\n\nexport type QOrderTimePickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly businessHours: ReadonlyArray<QOrderTimePickerBusinessHours>\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly delayedDeliveryEnabled: boolean\n}\n\nexport type QOrderTimePickerBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n}\n\nexport type QShopHeaderBranchVariables = {\n  readonly branchId: string\n}\n\nexport type QShopHeaderBranchQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: QShopHeaderBranchBranch\n}\n\nexport type QShopHeaderBranchBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly address: QShopHeaderBranchAddress\n} & (FShopOpeningHoursFragment & FCompanyBranchStatusFragment)\n\nexport type QShopHeaderBranchAddress = FAddressFragment\n\nexport type QShopHeaderIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QShopHeaderIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: QShopHeaderIntroIntro\n}\n\nexport type QShopHeaderIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly brand: FCompanyBranchBrand\n\n  readonly company: FCompanyBranchCompany\n\n  readonly address: FCompanyBranchAddress\n\n  readonly phone: string\n\n  readonly supportedLanguages: ReadonlyArray<LanguageEnum>\n}\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly code: string\n}\n\nexport type FCompanyBranchCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FJsonAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly location: Maybe<FAddressLocation>\n}\n\nexport type FAddressLocation = FJsonAddressFragment\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly formattedValue: string\n}\n\nexport type FRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sideDishCount: number\n}\n\nexport type FCompanyBranchStatusFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly businessHours: ReadonlyArray<FCompanyBranchStatusBusinessHours>\n\n  readonly defaultDeliveryTimeEnabled: boolean\n\n  readonly defaultPickupTimeEnabled: boolean\n}\n\nexport type FCompanyBranchStatusBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n}\n\nexport type FPromoCodeFragment = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type FCartGoodsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly items: ReadonlyArray<FCartGoodsItems>\n\n  readonly coverPrice: FCartGoodsCoverPrice\n\n  readonly transportFee: FCartGoodsTransportFee\n\n  readonly discounts: ReadonlyArray<FCartGoodsDiscounts>\n\n  readonly totalDiscount: FCartGoodsTotalDiscount\n\n  readonly tip: FCartGoodsTip\n}\n\nexport type FCartGoodsItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly automatic: boolean\n\n  readonly price: FCartGoodsPrice\n\n  readonly sideDishes: ReadonlyArray<FCartGoodsSideDishes>\n} & FCartItemFragment\n\nexport type FCartGoodsPrice = FPriceFragment\n\nexport type FCartGoodsSideDishes = FCartItemFragment\n\nexport type FCartGoodsCoverPrice = FPriceFragment\n\nexport type FCartGoodsTransportFee = FPriceFragment\n\nexport type FCartGoodsDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCartGoods_Price\n}\n\nexport type FCartGoods_Price = FPriceFragment\n\nexport type FCartGoodsTotalDiscount = FPriceFragment\n\nexport type FCartGoodsTip = FPriceFragment\n\nexport type FCartItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartItemRecipe\n}\n\nexport type FCartItemRecipe = FRecipeFragment\n\nexport type FCartStaticFragment = {\n  readonly __typename?: 'Order'\n\n  readonly minimalOrderPrice: Maybe<FCartStaticMinimalOrderPrice>\n\n  readonly deliveryType: Maybe<FCartStaticDeliveryType>\n}\n\nexport type FCartStaticMinimalOrderPrice = FPriceFragment\n\nexport type FCartStaticDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FCartSummaryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly totalSum: FCartSummaryTotalSum\n}\n\nexport type FCartSummaryTotalSum = FPriceFragment\n\nexport type FRecipeDetailFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly categories: ReadonlyArray<FRecipeDetailCategories>\n}\n\nexport type FRecipeDetailCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly maxRecipesCount: number\n\n  readonly sideDishes: ReadonlyArray<FRecipeDetailSideDishes>\n}\n\nexport type FRecipeDetailSideDishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FRecipeDetailPrice\n}\n\nexport type FRecipeDetailPrice = FPriceFragment\n\nexport type FOrderFinishedFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly items: ReadonlyArray<FOrderFinishedItems>\n\n  readonly totalSum: FOrderFinishedTotalSum\n\n  readonly orderPayments: ReadonlyArray<FOrderFinishedOrderPayments>\n}\n\nexport type FOrderFinishedItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sideDishes: ReadonlyArray<FOrderFinishedSideDishes>\n} & FCartItemFragment\n\nexport type FOrderFinishedSideDishes = FCartItemFragment\n\nexport type FOrderFinishedTotalSum = FPriceFragment\n\nexport type FOrderFinishedOrderPayments = {\n  readonly __typename?: 'OrderPaymentMethod'\n\n  readonly paymentMethod: FOrderFinishedPaymentMethod\n}\n\nexport type FOrderFinishedPaymentMethod = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly paymentType: FOrderFinishedPaymentType\n}\n\nexport type FOrderFinishedPaymentType = {\n  readonly __typename?: 'PaymentType'\n\n  readonly enum: PaymentTypeEnum\n}\n\nexport type FCartPresenceFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly presence: ReadonlyArray<FCartPresencePresence>\n}\n\nexport type FCartPresencePresence = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartPresenceRecipe\n}\n\nexport type FCartPresenceRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type FFoodMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n}\n\nexport type FFoodMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FFoodMenuRecipePrice\n\n  readonly sideDishCount: number\n}\n\nexport type FFoodMenuRecipePrice = FPriceFragment\n\nexport type FOrderCreateFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly branch: FOrderCreateBranch\n}\n\nexport type FOrderCreateBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type FPickupBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly gps: FPickupBranchGps\n\n  readonly address: FPickupBranchAddress\n\n  readonly pickupEnabled: boolean\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nexport type FPickupBranchGps = FGeoPointFragment\n\nexport type FPickupBranchAddress = FAddressFragment\n\nexport type FShopOpeningHoursFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      id\n      country {\n        phonePrefix\n      }\n    }\n    phone\n    supportedLanguages(userSpecific: true)\n  }\n`\n\nexport const FPromoCodeFragmentDoc = gql`\n  fragment FPromoCode on PromoCode {\n    id\n    code\n  }\n`\n\nexport const FRecipeFragmentDoc = gql`\n  fragment FRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FCartItemFragmentDoc = gql`\n  fragment FCartItem on OrderRecipe {\n    id\n    recipe {\n      ...FRecipe\n    }\n  }\n\n  ${FRecipeFragmentDoc}\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const FCartGoodsFragmentDoc = gql`\n  fragment FCartGoods on Order {\n    items {\n      ...FCartItem\n      automatic\n      price: priceWithSideDishes {\n        ...FPrice\n      }\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartStaticFragmentDoc = gql`\n  fragment FCartStatic on Order {\n    minimalOrderPrice {\n      ...FPrice\n    }\n    deliveryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartSummaryFragmentDoc = gql`\n  fragment FCartSummary on Order {\n    id\n    countWares\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FRecipeDetailFragmentDoc = gql`\n  fragment FRecipeDetail on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      maxRecipesCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderFinishedFragmentDoc = gql`\n  fragment FOrderFinished on Order {\n    id\n    items {\n      ...FCartItem\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    totalSum {\n      ...FPrice\n    }\n    orderPayments {\n      paymentMethod {\n        paymentType {\n          enum\n        }\n      }\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartPresenceFragmentDoc = gql`\n  fragment FCartPresence on Order {\n    id\n    presence: items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FFoodMenuCategoryFragmentDoc = gql`\n  fragment FFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n`\n\nexport const FFoodMenuRecipeFragmentDoc = gql`\n  fragment FFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...FPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderCreateFragmentDoc = gql`\n  fragment FOrderCreate on Order {\n    id\n    branch: companyBranch {\n      id\n    }\n  }\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FJsonAddressFragmentDoc = gql`\n  fragment FJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n  }\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on Address {\n    id\n    location {\n      ...FJsonAddress\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport const FCompanyBranchStatusFragmentDoc = gql`\n  fragment FCompanyBranchStatus on CompanyBranch {\n    id\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours: businessHoursIntervals {\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n    defaultDeliveryTimeEnabled\n    defaultPickupTimeEnabled\n  }\n`\n\nexport const FPickupBranchFragmentDoc = gql`\n  fragment FPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport const FShopOpeningHoursFragmentDoc = gql`\n  fragment FShopOpeningHours on CompanyBranch {\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const QBusinessLookupDocument = gql`\n  query QBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...FCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n      defaultLanguage: userDefaultLanguage\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQBusinessLookup(\n  variables?: QBusinessLookupVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBusinessLookupVariables>,\n) {\n  return Hooks.useQuery<QBusinessLookupQuery, QBusinessLookupVariables>(\n    QBusinessLookupDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQBusinessLookup(\n  options?: Hooks.ExecutableQueryOptions<QBusinessLookupVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QBusinessLookupQuery,\n    QBusinessLookupVariables\n  >(QBusinessLookupDocument, options)\n}\n\nexport const QThemeStyleDocument = gql`\n  query QThemeStyle($brandId: ID, $branchId: ID) {\n    theme: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n\nexport function useQThemeStyle(\n  variables?: QThemeStyleVariables,\n  baseOptions?: Hooks.QueryHookOptions<QThemeStyleVariables>,\n) {\n  return Hooks.useQuery<QThemeStyleQuery, QThemeStyleVariables>(\n    QThemeStyleDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQThemeStyle(\n  options?: Hooks.ExecutableQueryOptions<QThemeStyleVariables>,\n) {\n  return Hooks.useExecutableQuery<QThemeStyleQuery, QThemeStyleVariables>(\n    QThemeStyleDocument,\n    options,\n  )\n}\n\nexport const MAddToCartDocument = gql`\n  mutation MAddToCart(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n    $withGoods: Boolean!\n    $withPresence: Boolean!\n  ) {\n    add: createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useMAddToCart(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddToCartMutation,\n    MAddToCartVariables\n  >,\n) {\n  return Hooks.useMutation<MAddToCartMutation, MAddToCartVariables>(\n    MAddToCartDocument,\n    baseOptions,\n  )\n}\n\nexport const MChangeCartItemDocument = gql`\n  mutation MChangeCartItem(\n    $orderId: ID!\n    $itemId: ID!\n    $sideDishes: [ID!]\n    $withGoods: Boolean!\n  ) {\n    change: updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMChangeCartItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangeCartItemMutation,\n    MChangeCartItemVariables\n  >,\n) {\n  return Hooks.useMutation<MChangeCartItemMutation, MChangeCartItemVariables>(\n    MChangeCartItemDocument,\n    baseOptions,\n  )\n}\n\nexport const MRemoveCartItemDocument = gql`\n  mutation MRemoveCartItem(\n    $itemId: ID!\n    $withGoods: Boolean!\n    $withPresence: Boolean!\n  ) {\n    remove: destroyOrderRecipe(id: $itemId) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useMRemoveCartItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveCartItemMutation,\n    MRemoveCartItemVariables\n  >,\n) {\n  return Hooks.useMutation<MRemoveCartItemMutation, MRemoveCartItemVariables>(\n    MRemoveCartItemDocument,\n    baseOptions,\n  )\n}\n\nexport const QCartDocument = gql`\n  query QCart($orderId: ID!, $withGoods: Boolean!, $withPresence: Boolean!) {\n    order(id: $orderId) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n      ...FCartStatic\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n  ${FCartStaticFragmentDoc}\n`\n\nexport function useQCart(\n  variables?: QCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartVariables>,\n) {\n  return Hooks.useQuery<QCartQuery, QCartVariables>(\n    QCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCart(\n  options?: Hooks.ExecutableQueryOptions<QCartVariables>,\n) {\n  return Hooks.useExecutableQuery<QCartQuery, QCartVariables>(\n    QCartDocument,\n    options,\n  )\n}\n\nexport const QCartItemDocument = gql`\n  query QCartItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FRecipeDetail\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FRecipeDetailFragmentDoc}\n`\n\nexport function useQCartItem(\n  variables?: QCartItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartItemVariables>,\n) {\n  return Hooks.useQuery<QCartItemQuery, QCartItemVariables>(\n    QCartItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCartItem(\n  options?: Hooks.ExecutableQueryOptions<QCartItemVariables>,\n) {\n  return Hooks.useExecutableQuery<QCartItemQuery, QCartItemVariables>(\n    QCartItemDocument,\n    options,\n  )\n}\n\nexport const QCartRecipeDocument = gql`\n  query QCartRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FRecipeDetail\n    }\n  }\n\n  ${FRecipeDetailFragmentDoc}\n`\n\nexport function useQCartRecipe(\n  variables?: QCartRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartRecipeVariables>,\n) {\n  return Hooks.useQuery<QCartRecipeQuery, QCartRecipeVariables>(\n    QCartRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCartRecipe(\n  options?: Hooks.ExecutableQueryOptions<QCartRecipeVariables>,\n) {\n  return Hooks.useExecutableQuery<QCartRecipeQuery, QCartRecipeVariables>(\n    QCartRecipeDocument,\n    options,\n  )\n}\n\nexport const QOrderFinishDocument = gql`\n  query QOrderFinish($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      ...FOrderFinished\n    }\n    companyBranch(id: $branchId) {\n      id\n      phone\n      company {\n        id\n      }\n    }\n    androidApp: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: ANDROID\n    ) {\n      url\n    }\n    iosApp: mobileApplicationSettings(companyBranch: $branchId, platform: IOS) {\n      url\n    }\n  }\n\n  ${FOrderFinishedFragmentDoc}\n`\n\nexport function useQOrderFinish(\n  variables?: QOrderFinishVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFinishVariables>,\n) {\n  return Hooks.useQuery<QOrderFinishQuery, QOrderFinishVariables>(\n    QOrderFinishDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderFinish(\n  options?: Hooks.ExecutableQueryOptions<QOrderFinishVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderFinishQuery, QOrderFinishVariables>(\n    QOrderFinishDocument,\n    options,\n  )\n}\n\nexport const QFoodMenuDocument = gql`\n  query QFoodMenu($branchId: ID!) {\n    wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: MAIN\n      orderOriginCategory: DOVEZE\n      enabled: true\n      isAvailable: true\n    ) {\n      ...FFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...FFoodMenuRecipe\n      }\n    }\n  }\n\n  ${FFoodMenuCategoryFragmentDoc}\n  ${FFoodMenuRecipeFragmentDoc}\n`\n\nexport function useQFoodMenu(\n  variables?: QFoodMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuVariables>,\n) {\n  return Hooks.useQuery<QFoodMenuQuery, QFoodMenuVariables>(\n    QFoodMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQFoodMenu(\n  options?: Hooks.ExecutableQueryOptions<QFoodMenuVariables>,\n) {\n  return Hooks.useExecutableQuery<QFoodMenuQuery, QFoodMenuVariables>(\n    QFoodMenuDocument,\n    options,\n  )\n}\n\nexport const QFoodMenuCartPresenceDocument = gql`\n  query QFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...FCartPresence\n    }\n  }\n\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useQFoodMenuCartPresence(\n  variables?: QFoodMenuCartPresenceVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuCartPresenceVariables>,\n) {\n  return Hooks.useQuery<\n    QFoodMenuCartPresenceQuery,\n    QFoodMenuCartPresenceVariables\n  >(QFoodMenuCartPresenceDocument, variables, baseOptions)\n}\n\nexport function useExecutableQFoodMenuCartPresence(\n  options?: Hooks.ExecutableQueryOptions<QFoodMenuCartPresenceVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QFoodMenuCartPresenceQuery,\n    QFoodMenuCartPresenceVariables\n  >(QFoodMenuCartPresenceDocument, options)\n}\n\nexport const MDeliveryOrderCreateDocument = gql`\n  mutation MDeliveryOrderCreate(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...FOrderCreate\n    }\n  }\n\n  ${FOrderCreateFragmentDoc}\n`\n\nexport function useMDeliveryOrderCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MDeliveryOrderCreateMutation,\n    MDeliveryOrderCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MDeliveryOrderCreateMutation,\n    MDeliveryOrderCreateVariables\n  >(MDeliveryOrderCreateDocument, baseOptions)\n}\n\nexport const MPickupOrderCreateDocument = gql`\n  mutation MPickupOrderCreate($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...FOrderCreate\n    }\n  }\n\n  ${FOrderCreateFragmentDoc}\n`\n\nexport function useMPickupOrderCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPickupOrderCreateMutation,\n    MPickupOrderCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MPickupOrderCreateMutation,\n    MPickupOrderCreateVariables\n  >(MPickupOrderCreateDocument, baseOptions)\n}\n\nexport const QInitialDeliveryLocationDocument = gql`\n  query QInitialDeliveryLocation {\n    location: resolveLocation {\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\nexport function useQInitialDeliveryLocation(\n  variables?: QInitialDeliveryLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QInitialDeliveryLocationVariables>,\n) {\n  return Hooks.useQuery<\n    QInitialDeliveryLocationQuery,\n    QInitialDeliveryLocationVariables\n  >(QInitialDeliveryLocationDocument, variables, baseOptions)\n}\n\nexport function useExecutableQInitialDeliveryLocation(\n  options?: Hooks.ExecutableQueryOptions<QInitialDeliveryLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QInitialDeliveryLocationQuery,\n    QInitialDeliveryLocationVariables\n  >(QInitialDeliveryLocationDocument, options)\n}\n\nexport const QInitialLocationDocument = gql`\n  query QInitialLocation {\n    initialLocation: resolveLocation {\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\nexport function useQInitialLocation(\n  variables?: QInitialLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QInitialLocationVariables>,\n) {\n  return Hooks.useQuery<QInitialLocationQuery, QInitialLocationVariables>(\n    QInitialLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQInitialLocation(\n  options?: Hooks.ExecutableQueryOptions<QInitialLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QInitialLocationQuery,\n    QInitialLocationVariables\n  >(QInitialLocationDocument, options)\n}\n\nexport const QPickupMapDocument = gql`\n  query QPickupMap($branchSpecific: Boolean!, $brandId: ID, $branchId: ID!) {\n    brand: companyBranches(brand: $brandId) @skip(if: $branchSpecific) {\n      ...FPickupBranch\n    }\n    branch: companyBranch(id: $branchId) @include(if: $branchSpecific) {\n      ...FPickupBranch\n    }\n  }\n\n  ${FPickupBranchFragmentDoc}\n`\n\nexport function useQPickupMap(\n  variables?: QPickupMapVariables,\n  baseOptions?: Hooks.QueryHookOptions<QPickupMapVariables>,\n) {\n  return Hooks.useQuery<QPickupMapQuery, QPickupMapVariables>(\n    QPickupMapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQPickupMap(\n  options?: Hooks.ExecutableQueryOptions<QPickupMapVariables>,\n) {\n  return Hooks.useExecutableQuery<QPickupMapQuery, QPickupMapVariables>(\n    QPickupMapDocument,\n    options,\n  )\n}\n\nexport const QResolveLocationDocument = gql`\n  query QResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      finalAddress {\n        ...FJsonAddress\n      }\n      isResolved\n      isValidAddress\n      inDeliveryLocation\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      companyBranch {\n        id\n        isOpen\n      }\n      zone {\n        id\n      }\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport function useQResolveLocation(\n  variables?: QResolveLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QResolveLocationVariables>,\n) {\n  return Hooks.useQuery<QResolveLocationQuery, QResolveLocationVariables>(\n    QResolveLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQResolveLocation(\n  options?: Hooks.ExecutableQueryOptions<QResolveLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QResolveLocationQuery,\n    QResolveLocationVariables\n  >(QResolveLocationDocument, options)\n}\n\nexport const QMobileShopIntroDocument = gql`\n  query QMobileShopIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useQMobileShopIntro(\n  variables?: QMobileShopIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMobileShopIntroVariables>,\n) {\n  return Hooks.useQuery<QMobileShopIntroQuery, QMobileShopIntroVariables>(\n    QMobileShopIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMobileShopIntro(\n  options?: Hooks.ExecutableQueryOptions<QMobileShopIntroVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMobileShopIntroQuery,\n    QMobileShopIntroVariables\n  >(QMobileShopIntroDocument, options)\n}\n\nexport const QMobileShopStatusDocument = gql`\n  query QMobileShopStatus($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useQMobileShopStatus(\n  variables?: QMobileShopStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMobileShopStatusVariables>,\n) {\n  return Hooks.useQuery<QMobileShopStatusQuery, QMobileShopStatusVariables>(\n    QMobileShopStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMobileShopStatus(\n  options?: Hooks.ExecutableQueryOptions<QMobileShopStatusVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMobileShopStatusQuery,\n    QMobileShopStatusVariables\n  >(QMobileShopStatusDocument, options)\n}\n\nexport const QSmartBannerDocument = gql`\n  query QSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useQSmartBanner(\n  variables?: QSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QSmartBannerVariables>,\n) {\n  return Hooks.useQuery<QSmartBannerQuery, QSmartBannerVariables>(\n    QSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQSmartBanner(\n  options?: Hooks.ExecutableQueryOptions<QSmartBannerVariables>,\n) {\n  return Hooks.useExecutableQuery<QSmartBannerQuery, QSmartBannerVariables>(\n    QSmartBannerDocument,\n    options,\n  )\n}\n\nexport const MOrderDeliveryTimeDocument = gql`\n  mutation MOrderDeliveryTime(\n    $orderId: ID!\n    $deliverAt: DateTime\n    $withGoods: Boolean!\n  ) {\n    updateOrder(id: $orderId, order: { deliverAt: $deliverAt }) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderDeliveryTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >(MOrderDeliveryTimeDocument, baseOptions)\n}\n\nexport const MOrderFinishDocument = gql`\n  mutation MOrderFinish(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMOrderFinish(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderFinishMutation,\n    MOrderFinishVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderFinishMutation, MOrderFinishVariables>(\n    MOrderFinishDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoAddDocument = gql`\n  mutation MOrderPromoAdd($orderId: ID!, $code: String!, $withGoods: Boolean!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        id\n        promoCodes {\n          ...FPromoCode\n        }\n        ...FCartSummary\n        ...FCartGoods @include(if: $withGoods)\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderPromoAdd(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoAddMutation,\n    MOrderPromoAddVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderPromoAddMutation, MOrderPromoAddVariables>(\n    MOrderPromoAddDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoRemoveDocument = gql`\n  mutation MOrderPromoRemove(\n    $orderId: ID!\n    $codeId: ID!\n    $withGoods: Boolean!\n  ) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderPromoRemove(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >(MOrderPromoRemoveDocument, baseOptions)\n}\n\nexport const MOrderTipUpdateDocument = gql`\n  mutation MOrderTipUpdate($orderId: ID!, $tips: Float!, $withGoods: Boolean!) {\n    updateOrder(id: $orderId, order: { tips: $tips }) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderTipUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTipUpdateMutation,\n    MOrderTipUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderTipUpdateMutation, MOrderTipUpdateVariables>(\n    MOrderTipUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSubmitOrderDocument = gql`\n  mutation MSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    submitOrder: finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMSubmitOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSubmitOrderMutation,\n    MSubmitOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MSubmitOrderMutation, MSubmitOrderVariables>(\n    MSubmitOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDocument = gql`\n  query QOrderForm($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      countWares\n      orderStateCategory\n    }\n  }\n`\n\nexport function useQOrderForm(\n  variables?: QOrderFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormVariables>,\n) {\n  return Hooks.useQuery<QOrderFormQuery, QOrderFormVariables>(\n    QOrderFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderForm(\n  options?: Hooks.ExecutableQueryOptions<QOrderFormVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderFormQuery, QOrderFormVariables>(\n    QOrderFormDocument,\n    options,\n  )\n}\n\nexport const QOrderFormAgreementsDocument = gql`\n  query QOrderFormAgreements($input: InputVamStatus!) {\n    agreements: vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n\nexport function useQOrderFormAgreements(\n  variables?: QOrderFormAgreementsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormAgreementsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormAgreementsQuery,\n    QOrderFormAgreementsVariables\n  >(QOrderFormAgreementsDocument, variables, baseOptions)\n}\n\nexport function useExecutableQOrderFormAgreements(\n  options?: Hooks.ExecutableQueryOptions<QOrderFormAgreementsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderFormAgreementsQuery,\n    QOrderFormAgreementsVariables\n  >(QOrderFormAgreementsDocument, options)\n}\n\nexport const QOrderPaymentStatusDocument = gql`\n  query QOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport function useQOrderPaymentStatus(\n  variables?: QOrderPaymentStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPaymentStatusVariables>,\n) {\n  return Hooks.useQuery<QOrderPaymentStatusQuery, QOrderPaymentStatusVariables>(\n    QOrderPaymentStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderPaymentStatus(\n  options?: Hooks.ExecutableQueryOptions<QOrderPaymentStatusVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderPaymentStatusQuery,\n    QOrderPaymentStatusVariables\n  >(QOrderPaymentStatusDocument, options)\n}\n\nexport const QOrderPromoCodesDocument = gql`\n  query QOrderPromoCodes($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useQOrderPromoCodes(\n  variables?: QOrderPromoCodesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPromoCodesVariables>,\n) {\n  return Hooks.useQuery<QOrderPromoCodesQuery, QOrderPromoCodesVariables>(\n    QOrderPromoCodesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderPromoCodes(\n  options?: Hooks.ExecutableQueryOptions<QOrderPromoCodesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderPromoCodesQuery,\n    QOrderPromoCodesVariables\n  >(QOrderPromoCodesDocument, options)\n}\n\nexport const QOrderTimePickerDocument = gql`\n  query QOrderTimePicker($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      isOpen\n      businessHours: businessHoursIntervals {\n        openAt\n        closeAt\n        closed\n      }\n      defaultDeliveryTime\n      defaultPickupTime\n      willOpenAt\n      willCloseAt\n      delayedDeliveryEnabled\n    }\n  }\n`\n\nexport function useQOrderTimePicker(\n  variables?: QOrderTimePickerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderTimePickerVariables>,\n) {\n  return Hooks.useQuery<QOrderTimePickerQuery, QOrderTimePickerVariables>(\n    QOrderTimePickerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderTimePicker(\n  options?: Hooks.ExecutableQueryOptions<QOrderTimePickerVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderTimePickerQuery,\n    QOrderTimePickerVariables\n  >(QOrderTimePickerDocument, options)\n}\n\nexport const QShopHeaderBranchDocument = gql`\n  query QShopHeaderBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      address {\n        ...FAddress\n      }\n      ...FShopOpeningHours\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FShopOpeningHoursFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useQShopHeaderBranch(\n  variables?: QShopHeaderBranchVariables,\n  baseOptions?: Hooks.QueryHookOptions<QShopHeaderBranchVariables>,\n) {\n  return Hooks.useQuery<QShopHeaderBranchQuery, QShopHeaderBranchVariables>(\n    QShopHeaderBranchDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQShopHeaderBranch(\n  options?: Hooks.ExecutableQueryOptions<QShopHeaderBranchVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QShopHeaderBranchQuery,\n    QShopHeaderBranchVariables\n  >(QShopHeaderBranchDocument, options)\n}\n\nexport const QShopHeaderIntroDocument = gql`\n  query QShopHeaderIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useQShopHeaderIntro(\n  variables?: QShopHeaderIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<QShopHeaderIntroVariables>,\n) {\n  return Hooks.useQuery<QShopHeaderIntroQuery, QShopHeaderIntroVariables>(\n    QShopHeaderIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQShopHeaderIntro(\n  options?: Hooks.ExecutableQueryOptions<QShopHeaderIntroVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QShopHeaderIntroQuery,\n    QShopHeaderIntroVariables\n  >(QShopHeaderIntroDocument, options)\n}\n\n// Generated in 2019-06-25T18:01:56+02:00\n","var map = {\n\t\"./cs/messages.po\": [\n\t\t898,\n\t\t2\n\t],\n\t\"./de/messages.po\": [\n\t\t899,\n\t\t3\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t901,\n\t\t5\n\t],\n\t\"./en/messages.po\": [\n\t\t900,\n\t\t4\n\t],\n\t\"./pl/messages.po\": [\n\t\t902,\n\t\t6\n\t],\n\t\"./sk/messages.po\": [\n\t\t903,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 822;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t904,\n\t\t2\n\t],\n\t\"./de/messages.js\": [\n\t\t905,\n\t\t3\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t907,\n\t\t5\n\t],\n\t\"./en/messages.js\": [\n\t\t906,\n\t\t4\n\t],\n\t\"./pl/messages.js\": [\n\t\t908,\n\t\t6\n\t],\n\t\"./sk/messages.js\": [\n\t\t909,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 823;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs.svg\": 870,\n\t\"./de.svg\": 871,\n\t\"./en.svg\": 872,\n\t\"./pl.svg\": 873,\n\t\"./sk.svg\": 874\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 869;","var map = {\n\t\"./logo-doveze.svg\": 877,\n\t\"./logo-gopay.svg\": 878,\n\t\"./logo-mastercard.svg\": 879,\n\t\"./logo-visa.svg\": 880\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 876;","import { Trans } from '@lingui/macro'\nimport { ApolloDefender, isNetworkUnreachableError } from '@speedlo/graphql'\nimport { useRouterContext } from '@speedlo/hooks'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\n\nimport { useRoot } from '../app/useRoot'\nimport { useAlertModal } from '../hooks/useAlertModal'\nimport { i18n } from '../i18n'\nimport { AlertModal } from './AlertModal'\nimport { PrimaryButton, SecondaryButton } from './Buttons'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const ErrorContainer: React.FC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n  const [alertModal, makeAlert] = useAlertModal()\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(error)\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        console.error(error)\n        makeAlert(\n          i18n.t`Service problem`,\n          <div>\n            {makeError(\n              i18n.t`Unexpected error occured in communication with service.`,\n            )}\n          </div>,\n        )\n      }\n    },\n    [],\n  )\n\n  const onOperationError = React.useCallback(error => {\n    console.error(error)\n    makeAlert(\n      i18n.t`Communication problem`,\n      <div>\n        {makeError(i18n.t`Unexpected error occured while sending a request.`)}\n      </div>,\n    )\n  }, [])\n\n  const onUserErrors = React.useCallback((messages: ReadonlyArray<string>) => {\n    makeAlert(\n      i18n.t`Problems encountered`,\n      <div>\n        {messages.map(msg => (\n          <div key={msg}>{msg}</div>\n        ))}\n      </div>,\n    )\n  }, [])\n\n  const { history } = useRouterContext()\n  const [modalOpen, setModalOpen] = React.useState(true)\n\n  const onFeedback = React.useCallback(() => {\n    setModalOpen(false)\n    showFeedback()\n  }, [])\n\n  const { business } = useRoot()\n\n  const onRestart = React.useCallback(() => {\n    setModalOpen(false)\n    history.replace(business.routerBasePath)\n    window.location.reload()\n  }, [])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Service is temporarily unavailable`}\n          >\n            <Trans>\n              Please try again in moment. We apologize for inconvenience.\n            </Trans>\n            <PrimaryButton onClick={onRetry}>\n              <Trans>Try now</Trans>\n            </PrimaryButton>\n          </AlertModal>\n        )\n      }\n      case 'otherError': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Unexpected error has occurred`}\n          >\n            <Trans>\n              If you like, please fill out feedback form so we can fix the\n              problem faster. Restart the application otherwise.\n            </Trans>\n            <br />\n            <PrimaryButton onClick={onRestart}>\n              <Trans>Restart application</Trans>\n            </PrimaryButton>\n            <SecondaryButton onClick={onFeedback}>\n              <Trans>Send feedback</Trans>\n            </SecondaryButton>\n          </AlertModal>\n        )\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  let errorGuard\n\n  if (prod) {\n    errorGuard = (\n      <SillyErrorBoundary\n        onError={error => {\n          onUnhandledError(error)\n        }}\n      >\n        {render()}\n      </SillyErrorBoundary>\n    )\n  } else {\n    const DeveloperErrorBoundary = require('react-error-guard/lib/DeveloperErrorBoundary')\n      .default\n    errorGuard = <DeveloperErrorBoundary>{render()}</DeveloperErrorBoundary>\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onOperationError={onOperationError}\n      onUserErrors={onUserErrors}\n    >\n      <>\n        {alertModal}\n        {errorGuard}\n      </>\n    </ApolloDefender>\n  )\n}\n\nfunction isChunkError(error: Error) {\n  return error.message && error.message.indexOf('Loading chunk') >= 0\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected problem occurred`,\n  })\n}\n","import { autorun } from 'mobx'\nimport React from 'react'\n\nimport { useRoot } from '../app/useRoot'\nimport { appConfig } from '../config'\n\nexport const PageTitle: React.FC = () => {\n  const { business } = useRoot()\n\n  React.useEffect(() => {\n    if (!document) {\n      return\n    }\n    return autorun(() => {\n      if (business.isValid) {\n        document.title = `${business.branch!.brand.name} - ${\n          appConfig.pageTitleSuffix\n        }`\n      } else {\n        document.title = appConfig.pageTitleSuffix\n      }\n    })\n  }, [])\n\n  return null\n}\n","import { useSentryScope } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\n\nimport { useOrderModel } from '../hooks/useOrderModel'\n\nexport const AddSentryContext = observer(() => {\n  const scope = useSentryScope()\n  const orderModel = useOrderModel()\n\n  scope.setExtras({\n    orderId: orderModel.orderId,\n    orderBranchId: orderModel.branchId,\n    deliverAt: orderModel.deliverAt,\n  })\n\n  return null\n})\n","import { Sentry } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { appConfig } from '../config'\nimport { useQBusinessLookup } from '../graph/generated'\nimport { useRoot } from './useRoot'\n\nexport const BusinessLoader = observer(() => {\n  const root = useRoot()\n  const { business } = useRoot()\n\n  const { data, loading } = useQBusinessLookup(\n    {\n      code: business.requestedCode,\n      url: window.location.href,\n    },\n    {\n      skip: !root.initialized,\n      context: { noBatch: true },\n      fetchPolicy: 'cache-first',\n    },\n  )\n\n  React.useEffect(() => {\n    if (loading || business.isValid) {\n      return\n    }\n\n    if (!data.lookup.branch) {\n      Sentry.withScope(scope => {\n        scope.setExtras({\n          url: window.location.href,\n          requestedCode: business.requestedCode,\n        })\n        Sentry.captureMessage('No business found')\n      })\n      redirectAway()\n      return\n    }\n\n    business.updateFromLookup(data.lookup)\n    business.log(\n      'identified branch %s, brand %s; company %s, isBrand: %s',\n      business.branchId,\n      business.brandId,\n      business.companyId,\n      business.isBrand,\n    )\n  })\n\n  return null\n})\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n","import { useRouterContext, useWhen } from '@speedlo/hooks'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { GeoPoint } from '../helpers/gps'\nimport { useOrderCreate } from '../segments/map/hooks/useOrderCreate'\nimport { useRoot } from './useRoot'\n\ninterface IProps {}\n\nexport const CypressHelper: React.FC<IProps> = props => {\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n\n  const { user, business, location, order, map } = useRoot()\n  const { history } = useRouterContext()\n  const { createPickupOrder, createDeliveryOrder } = useOrderCreate(() => {\n    history.push('/order')\n  })\n\n  useWhen(\n    () => user.root.initialized,\n    () => {\n      if (window.location.search.includes('useDevLang')) {\n        user.selectLanguage('en-dev')\n      }\n    },\n  )\n\n  const businessValid = new Promise(resolve => {\n    when(() => business.isValid, resolve)\n  })\n\n  const createDeliveryOrderWithGps = (gps: GeoPoint, branchId: ID) => {\n    location.setLocation(gps)\n    order.setBranch(branchId)\n    return businessValid.then(() => createDeliveryOrder())\n  }\n\n  const createPickupOrderForBranch = (branchId: ID) => {\n    return businessValid.then(() => createPickupOrder(branchId))\n  }\n\n  const changeMapLocation = (gps: GeoPoint, zoom?: number) => {\n    map.updatePosition(gps)\n    map.updateZoom(zoom)\n  }\n\n  Object.assign(window, {\n    createPickupOrderForBranch,\n    createDeliveryOrderWithGps,\n    changeMapLocation,\n  })\n\n  return <Route path=\"/cypress\" component={() => null} />\n}\n","import { useAutorun } from '@speedlo/hooks'\nimport { Sentry } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { useRoot } from './useRoot'\n\nexport const IdentifyGuest: React.FC = () => {\n  const { auth } = useRoot()\n  useAutorun(() => {\n    const id = auth.userId!\n    const token = auth.token\n    Sentry.configureScope(scope => {\n      scope.setUser({ id, username: 'GUEST' })\n      scope.setExtra('token', token)\n    })\n  })\n  return null\n}\n","import { useRouter } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useOrderModel } from '../hooks/useOrderModel'\n\nexport const ResetOrderAtRoot: React.FC = () => {\n  const { match } = useRouter({\n    path: '/',\n  })\n  const orderModel = useOrderModel()\n  React.useEffect(() => {\n    if (match && match.isExact && orderModel.hasOrder) {\n      orderModel.orderCancel()\n    }\n  })\n  return null\n}\n","import React from 'react'\n\nimport { SecondaryButton } from '../common/Buttons'\nimport { useRoot } from './useRoot'\n\ninterface IProps {}\n\nexport const ResetPersistenceButton: React.FC<IProps> = props => {\n  const root = useRoot()\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  return (\n    <SecondaryButton\n      onClick={() => {\n        root.reset()\n        setTimeout(() => location.reload(), 500)\n      }}\n    >\n      Reset uživ. dat [DEV]\n    </SecondaryButton>\n  )\n}\n","import React from 'react'\n\nimport { useSuspenseWhen } from './hooks/useSuspenseWhen'\nimport { useRoot } from './useRoot'\n\ninterface IProps {\n  children: ReactNode[]\n}\n\nexport const SuspendOnInit: React.FC<IProps> = ({ children }) => {\n  const { business, user } = useRoot()\n\n  const predicate = () => !(business.isValid && user.languageActivated)\n\n  useSuspenseWhen(predicate)\n\n  return <>{children}</>\n}\n","import { when } from 'mobx'\nimport React from 'react'\n\nexport function useSuspenseWhen(predicate: () => boolean) {\n  const [suspend, setSuspend] = React.useState<Maybe<Promise<any>>>(null)\n  const thrown = React.useRef(false)\n  const resolverRef = React.useRef<Maybe<AnyFunction>>()\n\n  React.useEffect(() => {\n    if (predicate() === true && suspend === null) {\n      setSuspend(\n        new Promise(resolve => {\n          resolverRef.current = resolve\n        }),\n      )\n      when(\n        () => !predicate(),\n        () => {\n          if (resolverRef.current) {\n            resolverRef.current()\n            resolverRef.current = null\n            setSuspend(null)\n          }\n        },\n      )\n    }\n  }, [predicate])\n\n  if (suspend !== null && !thrown.current) {\n    thrown.current = true\n    throw suspend\n  }\n}\n","import './App.css'\n\nimport React from 'react'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport Pacman from '../common/Pacman'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile } from '../common/Responsive'\nimport { AddSentryContext } from './AddSentryContext'\nimport { BusinessLoader } from './BusinessLoader'\nimport { CypressHelper } from './CypressHelper'\nimport { IdentifyGuest } from './IdentifyGuest'\nimport { ResetOrderAtRoot } from './ResetOrderAtRoot'\nimport { ResetPersistenceButton } from './ResetPersistenceButton'\nimport { SuspendOnInit } from './SuspendOnInit'\nimport ThemeSwitchProvider from './ThemeSwitchProvider'\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App: React.FC = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <ThemeSwitchProvider>\n      <BusinessLoader />\n      <IdentifyGuest />\n      <PageTitle />\n      <AddSentryContext />\n      <ResetOrderAtRoot />\n      <CypressHelper />\n      <React.Suspense fallback={<Pacman />}>\n        <SuspendOnInit>\n          <Desktop>\n            <DesktopApp />\n          </Desktop>\n          <Mobile>\n            <MobileApp />\n          </Mobile>\n          <ResetPersistenceButton />\n        </SuspendOnInit>\n      </React.Suspense>\n    </ThemeSwitchProvider>\n  </ErrorContainer>\n)\n\nexport default App\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from './useRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() => (\n    <BrowserRouter\n      basename={business.routerBasePath}\n      key={business.routerBasePath}\n    >\n      {children}\n    </BrowserRouter>\n  ))\n}\n","import React from 'react'\nimport ReactGA from 'react-ga'\n\nimport { appConfig } from '../config'\n\nconst key = appConfig.analytics\nif (key) {\n  const debug = process.env.REACT_APP_STAGE !== 'prod'\n  ReactGA.initialize(key, {\n    debug,\n    gaOptions: {\n      siteSpeedSampleRate: 50,\n    },\n  })\n  if (debug) {\n    ReactGA.ga('set', 'sendHitTask', null)\n  }\n}\n\ninterface IOptions {\n  reportPage: boolean\n}\n\nexport function useAnalytics(opts: Partial<IOptions> = {}) {\n  React.useEffect(() => {\n    if (opts.reportPage && key) {\n      ReactGA.pageview(window.location.href)\n    }\n  }, [])\n  return ReactGA\n}\n","import debug from 'debug'\n\nexport const logDebug = debug('doveze:debug')\nexport const logPersist = debug('doveze:persist')\n","import { Sentry } from '@speedlo/sentry'\nimport localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => {\n    return localforage.setItem(stateKey, snapshot).catch(err => {\n      Sentry.withScope(scope => {\n        scope.setTag('persistence', stateKey)\n        scope.setExtras({\n          snapshot,\n        })\n        Sentry.captureException(err)\n      })\n    })\n  }\n\n  return localforage\n    .getItem(stateKey)\n    .catch(err => {\n      localforage.removeItem(stateKey)\n      Sentry.withScope(scope => {\n        scope.setTag('persistence', stateKey)\n        Sentry.captureException(err)\n      })\n    })\n    .then(state => {\n      if (state !== null) {\n        applySnapshot(model, state)\n        logPersist('restored state %s', stateKey)\n      } else {\n        writeState(getSnapshot(model)).then(() => {\n          logPersist('initialized state %s', stateKey)\n        })\n      }\n\n      onSnapshot(model, writeState)\n    })\n}\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport debug from 'debug'\nimport { getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types\n  .model()\n  .volatile(() => ({\n    client: (null as unknown) as DefaultApolloClient,\n  }))\n  .actions(self => ({\n    setClient(client: DefaultApolloClient) {\n      self.client = client\n    },\n  }))\n  .views(self => ({\n    get log() {\n      const name = getPath(self).trim() || getType(self).name\n      // if (process.env.NODE_ENV === 'test') {\n      //   return (...args) => console.log(`model${name}`, ...args)\n      // }\n      return debug(`doveze:model${name}`)\n    },\n    get root() {\n      return getRoot<TRootModel>(self)\n    },\n  }))\n","import { Sentry } from '@speedlo/sentry'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return self.token !== null\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      Sentry.addBreadcrumb({\n        category: 'Auth',\n        level: Sentry.Severity.Info,\n        data: {\n          userId,\n          token,\n        },\n      })\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport {\n  FCompanyBranchCountry,\n  FCompanyBranchFragment,\n  OrderOriginEnum,\n  QBusinessLookupLookup,\n} from '../graph/generated'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\n\ntype TBranch = Omit<FCompanyBranchFragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<FCompanyBranchCountry>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n  defaultLanguage: Maybe<string>\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n    defaultLanguage: null,\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get brandOrBranch() {\n      return {\n        brandId: self.isBrand ? this.brandId : undefined,\n        branchId: self.isBrand ? undefined : this.branchId,\n      }\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      const urlCode = readBusinessCodeFromUrl()\n      // prefer stored code if none was specified in url\n      if (self.code && !urlCode) {\n        return self.code\n      }\n      // url code has priority with fallback to stored one or a static one from build\n      return urlCode || self.code || process.env.REACT_APP_BUSINESS_CODE\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: QBusinessLookupLookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        // handled in BusinessLoader.tsx\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n      self.defaultLanguage = lookup.defaultLanguage.toLowerCase()\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const CartModel = BaseModel.named('Cart')\n  .volatile(() => ({\n    withGoods: false,\n    withPresence: false,\n    orderIsSubmitting: false,\n  }))\n  .actions(self => ({\n    updateDisplay(isMobile: boolean, showGoods: boolean) {\n      self.withGoods = !isMobile || showGoods\n      self.withPresence = isMobile ? !showGoods : true\n    },\n    setOrderSubmitting(state: boolean) {\n      self.orderIsSubmitting = state\n    },\n  }))\n\nexport interface TCartModel extends Instance<typeof CartModel> {}\nexport interface TCartModelProps extends SnapshotIn<typeof CartModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport interface TConfigModel extends Instance<typeof ConfigModel> {}\nexport interface TConfigModelProps extends SnapshotIn<typeof ConfigModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { QResolveLocationResolveLocation } from '../graph/generated'\nimport { formatAddress } from '../helpers/formats'\nimport { GeoPoint, gpsToLatLngLit } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\nimport { AddressSearchResult } from '../segments/map/hooks/useAddressSearch'\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.maybe(types.number),\n    longitude: types.maybe(types.number),\n    searchValue: types.optional(types.string, ''),\n    address: types.maybe(types.string),\n  })\n  .volatile(() => ({\n    branchId: null as MaybeID,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    geolocationPoint: null as Maybe<GeoPoint>,\n    isResolving: false,\n    hasResolutionResult: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(navigator.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== undefined || self.longitude !== undefined\n    },\n    get hasAddress() {\n      return Boolean(self.address && self.address.length > 0)\n    },\n    get hasSearchValue() {\n      return self.searchValue.trim().length > 0\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get geoPoint() {\n      if (this.hasLocation) {\n        return {\n          latitude: self.latitude!,\n          longitude: self.longitude!,\n        }\n      }\n      return null\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      if (this.geoPoint) {\n        return gpsToLatLngLit(this.geoPoint)\n      }\n      return null\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: GeoPoint) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n    setIsResolving(resolving: boolean) {\n      if (resolving !== self.isResolving) {\n        self.isResolving = resolving\n        self.log(`resolving has ${resolving ? 'started' : 'ended'}`)\n      }\n    },\n    setSearchValue(search: string) {\n      self.searchValue = search\n    },\n    setAddress(address: string) {\n      self.address = address\n      self.log(`set address to ${address}`)\n    },\n    clearAddress() {\n      self.address = undefined\n      self.log('cleared address')\n    },\n    setGeolocationPoint(point: GeoPoint) {\n      self.geolocationPoint = point\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = true\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: QResolveLocationResolveLocation) {\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n\n      if (result.finalAddress && !self.hasSearchValue) {\n        self.setAddress(formatAddress(result.finalAddress))\n      }\n\n      self.hasResolutionResult = true\n\n      if (!(result.isResolved && result.gpsCoordinates)) {\n        self.log('not resolved')\n        return\n      }\n\n      self.setLocation(result.gpsCoordinates)\n      self.log(\n        `resolved location for branch: ${self.branchId}, zone: ${\n          result.zone ? result.zone.id : null\n        }`,\n      )\n    },\n    setSearchResult(result: AddressSearchResult) {\n      self.setLocation(result.gps)\n      self.setAddress(result.address)\n      self.setIsResolving(false)\n    },\n    setAsNotResolved() {\n      self.hasResolutionResult = true\n      self.isResolved = false\n      self.setIsResolving(false)\n    },\n    setAsNotAddress() {\n      self.hasResolutionResult = true\n      self.isResolved = true\n      self.isStreetAddress = false\n      self.setIsResolving(false)\n    },\n    resetResolution() {\n      self.branchId = null\n      self.isResolved = false\n      self.isStreetAddress = false\n      self.inDeliveryLocation = false\n      self.hasResolutionResult = false\n      self.clearAddress()\n    },\n  }))\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { GeoPoint, gpsToLatLngLit, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile(() => ({\n    mapRef: null as Maybe<google.maps.Map>,\n    clickPoint: null as Maybe<GeoPoint>,\n  }))\n  .views(self => ({\n    get center() {\n      return gpsToLatLngLit(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<google.maps.Map>) {\n      self.mapRef = ref\n    },\n    updateZoom(zoom?: number) {\n      if (zoom !== undefined) {\n        self.zoom = zoom\n      } else if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition(gps?: GeoPoint) {\n      if (gps) {\n        self.latitude = gps.latitude\n        self.longitude = gps.longitude\n      } else if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport {\n  DeliveryTypeEnum,\n  FOrderCreateFragment,\n  PaymentGateEnum,\n} from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { BaseModel } from './BaseModel'\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    paymentMethod: PaymentGateEnum.Gopay,\n    tips: 0,\n  })\n  .volatile(() => ({\n    deliverAt: null as Maybe<Date>,\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null as Maybe<RoA<string>>,\n    lastActiveRecipeId: null as MaybeID,\n    timePickerOpen: false,\n    delayedOrderEnabled: false,\n    addToCartRecipeId: null as MaybeID,\n    changeCartItemId: null as MaybeID,\n    isVamInitialized: false,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get usingPaymentMethodWithTips() {\n      return self.paymentMethod === PaymentGateEnum.Gopay\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return ''\n    },\n    get disableInteraction() {\n      return self.isSubmitting || self.isGoPayChecking\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setPaymentMethod(method: PaymentGateEnum) {\n      self.paymentMethod = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: FOrderCreateFragment) {\n      self.orderId = result.id\n      self.branchId = result.branch.id\n      self.deliverAt = null\n      self.log('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        self.log('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        self.log(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n      self.deliverAt = null\n    },\n    submitStarted() {\n      self.isSubmitting = true\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    openTimePicker() {\n      self.timePickerOpen = true\n    },\n    closeTimePicker() {\n      self.timePickerOpen = false\n    },\n    setTips(tips: number) {\n      self.tips = tips\n    },\n    setDeliverAt(deliverAt: Maybe<Date>) {\n      self.deliverAt = deliverAt\n    },\n    enableDelayedOrder() {\n      self.delayedOrderEnabled = true\n    },\n    addToCart(recipeId: MaybeID) {\n      self.addToCartRecipeId = recipeId\n    },\n    changeCartItem(itemId: MaybeID) {\n      self.changeCartItemId = itemId\n    },\n  }))\n  .actions(self => ({\n    initVam() {\n      self.isVamInitialized = true\n    },\n  }))\n  // for backward-compatibility with OrderFormMemory\n  .props({\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n  })\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import { detectLanguage } from '@speedlo/ui'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    selectedLanguage: types.maybe(types.string),\n    rememberForm: types.maybeNull(types.boolean),\n    showAppleBanner: types.optional(types.boolean, true),\n  })\n  .volatile(() => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n    languageActivated: false,\n    memoryApplied: false,\n  }))\n  .views(self => ({\n    get language() {\n      return (\n        self.selectedLanguage ||\n        self.root.business.defaultLanguage ||\n        detectLanguage(appConfig.supportedLanguages, appConfig.fallbackLanguage)\n      )\n    },\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n  .actions(self => ({\n    selectLanguage(lang: string) {\n      if (lang !== self.selectedLanguage) {\n        self.languageActivated = false\n      }\n      self.selectedLanguage = lang\n      self.log('selected language %s', lang)\n    },\n    activateLanguage() {\n      self.languageActivated = true\n      self.log('activated language %s', self.language)\n    },\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n    setMemoryApplied() {\n      self.memoryApplied = true\n    },\n    hideAppleBanner() {\n      self.showAppleBanner = false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { observable } from 'mobx'\nimport {\n  applySnapshot,\n  getSnapshot,\n  Instance,\n  SnapshotIn,\n  types,\n} from 'mobx-state-tree'\n\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { CartModel } from './CartModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    cart: types.optional(CartModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .extend(self => {\n    let initialSnapshot\n    const initialized = observable.box(false)\n    return {\n      views: {\n        get initialized() {\n          return initialized.get()\n        },\n      },\n      actions: {\n        afterCreate() {\n          const { business, map, ...snapshot } = getSnapshot(self)\n          initialSnapshot = snapshot\n        },\n        reset() {\n          applySnapshot(self, initialSnapshot)\n        },\n        init: async () => {\n          await Promise.all(self.persistedModels.map(persistModel))\n          initialSnapshot.business = getSnapshot(self.business)\n          self.log('initialized')\n          initialized.set(true)\n        },\n      },\n    }\n  })\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import './enableDebug'\n\nimport { ApolloProvider } from '@speedlo/graphql'\nimport { useSentryInit } from '@speedlo/sentry'\nimport { updateWorker } from '@speedlo/tools'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport { RootProvider } from './app/useRoot'\nimport { appConfig } from './config'\nimport { createApolloClient } from './graph/createClient'\nimport { useAnalytics } from './hooks/useAnalytics'\nimport { i18n, I18nManager } from './i18n'\nimport { RootModel } from './models/RootModel'\n\nconst Main = () => {\n  useAnalytics({ reportPage: true })\n  useSentryInit(appConfig.sentryDSN)\n\n  const rootInit = React.useRef<Promise<void>>()\n  const [root] = React.useState(() => {\n    const rootInst = RootModel.create({})\n    rootInit.current = rootInst.init()\n    return rootInst\n  })\n\n  const [client] = React.useState(() => {\n    const newClient = createApolloClient(root, rootInit.current!)\n    // TODO: Required for legacy code of calling GraphQL from models\n    root.order.setClient(newClient)\n    return newClient\n  })\n\n  return (\n    <RootProvider value={root}>\n      <ApolloProvider client={client}>\n        <I18nManager>\n          <Router>\n            <App />\n          </Router>\n        </I18nManager>\n      </ApolloProvider>\n    </RootProvider>\n  )\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))\n\nupdateWorker.register({\n  autoUpdate: true,\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    if (event.data === 'update-applied') {\n      location.reload()\n    }\n  })\n}\n","import {\n  createAuthLink,\n  createDefaultApolloClient,\n  createLanguageLink,\n  createLogLink,\n  createNetworkLink,\n  createOfflineLink,\n  createRetryLink,\n  fetchGuestToken,\n} from '@speedlo/graphql'\n\nimport { appConfig } from '../config'\nimport { TRootModel } from '../models/RootModel'\n\nexport function createApolloClient(root: TRootModel, rootInit: Promise<void>) {\n  const getToken = async () => {\n    await rootInit\n    if (root.auth.token) {\n      return root.auth.token\n    }\n    const { token, userId } = await fetchGuestToken(appConfig.endpoint)\n    root.auth.authenticate(token, userId)\n    return token\n  }\n\n  const getLang = () => root.user.language\n\n  return createDefaultApolloClient(\n    createAuthLink({ getToken }),\n    createLanguageLink(getLang),\n    createLogLink({ enabled: process.env.REACT_APP_STAGE !== 'prod' }),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint),\n  )\n}\n","import React from 'react'\nimport { Button, ButtonProps } from 'reactstrap'\nimport styled, { css } from 'styled-components/macro'\n\nimport { TTheme } from '../app/ThemeSwitchProvider'\nimport { mediaDesktop, mediaMobile } from '../common/Responsive'\n\nexport const PrimaryButton = styled(Button)`\n  font-size: 1.1rem;\n  font-variant-caps: all-small-caps;\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n  &:active {\n    background-color: #262626 !important;\n  }\n`\n\nexport const SecondaryButton = styled(Button)`\n  font-size: 1.1rem;\n  font-variant-caps: all-small-caps;\n  background-color: ${themeProp('tertiary')};\n  border-color: ${themeProp('tertiary')};\n  &:hover {\n    background-color: ${themeProp('tertiaryHover')};\n    border-color: ${themeProp('tertiaryHover')};\n  }\n`\n\ninterface ISelectButtonThemed {\n  selected?: boolean\n  theme: TTheme\n}\n\nexport const SelectButtonThemed = styled(\n  ({ selected, theme, ...props }: ButtonProps & ISelectButtonThemed) => (\n    <Button {...props} />\n  ),\n)`\n  ${({ theme, selected }: ISelectButtonThemed) => css`\n    font-size: 1.1rem;\n    font-variant-caps: all-small-caps;\n    ${mediaDesktop`\n      background-color: ${selected ? theme.tertiary : theme.unselected}\n    `};\n    ${mediaMobile`\n      background-color: ${selected ? theme.tertiary : 'white'}`}\n      border-color: ${selected ? theme.tertiary : theme.unselected};\n      color: ${selected ? theme.tertiaryText : theme.unselectedText};\n      &:hover {\n        background-color: ${\n          selected ? theme.tertiaryHover : theme.unselectedHover\n        };\n        border-color: ${selected ? theme.tertiaryHover : theme.unselectedHover};\n        color: ${selected ? theme.tertiaryText : theme.unselectedText};\n      }\n  `};\n`\n\nfunction themeProp(name: keyof TTheme) {\n  return ({ theme }: { theme?: TTheme }) => theme![name] as string\n}\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components/macro'\n\nexport const mobileBreakpoint = 767\n\nexport const Desktop = props => (\n  <ReactResponsive {...props} minWidth={mobileBreakpoint} />\n)\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxWidth={mobileBreakpoint} />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.FC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${mobileBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${mobileBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n"],"sourceRoot":""}