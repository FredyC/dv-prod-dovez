{"version":3,"sources":["helpers/gps.ts","common/AlertModal.tsx","hooks/useOrderModel.ts","common/Pacman.tsx","hooks/useAlertModal.ts","segments/map/hooks/useOrderCreate.ts","helpers/formats.ts","app/useRoot.tsx","i18n.tsx","segments/orderForm/OrderFormMemory.ts","app/ThemeSwitchProvider.tsx","config.ts","enableDebug.ts","graph/generated.ts","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","../node_modules/@speedlo/assets/flags sync /^/.*/.svg$","../node_modules/@speedlo/assets/logos sync /^/logo/-.*/.svg$","common/ErrorContainer.tsx","common/PageTitle.tsx","app/AddSentryContext.tsx","app/BusinessLoader.tsx","app/CypressHelper.tsx","app/IdentifyGuest.tsx","app/ResetOrderAtRoot.tsx","app/ResetPersistenceButton.tsx","app/SuspendOnInit.tsx","app/hooks/useSuspenseWhen.ts","app/App.tsx","app/Router.tsx","hooks/useAnalytics.ts","helpers/logger.ts","helpers/persistModel.ts","models/BaseModel.ts","models/AuthModel.ts","models/BannerModel.ts","models/BusinessModel.ts","models/CartModel.ts","models/ConfigModel.ts","models/LocationModel.ts","models/MapModel.ts","models/OrderModel.ts","models/UserModel.ts","models/RootModel.ts","index.tsx","graph/createClient.ts","common/Buttons.tsx","common/Responsive.tsx"],"names":["gpsToLatLngLit","gps","lat","Number","latitude","lng","longitude","gpsToLatLng","google","maps","LatLng","latLngToGps","latLng","AlertModal","isOpen","headerText","onClose","children","modalProps","toggle","className","data-testid","tag","Container","useOrderModel","useRoot","order","Pacman","noMargin","style","display","alignSelf","justifyContent","name","marginTop","useAlertModal","React","useState","alertModal","setAlertModal","useCallback","header","body","createElement","useOrderCreate","onConfirm","location","business","useMDeliveryOrderCreate","deliveryOrderCreate","useMPickupOrderCreate","pickupOrderCreate","createDeliveryOrder","a","geoPoint","branchId","setBranch","orderOrigin","brandOrBranch","result","branch","id","Sentry","withScope","scope","setExtras","requestedBranchId","createdOrderId","createdBranchId","captureMessage","orderCreated","createPickupOrder","currentLocale","csLocale","formatLocale","formatWithOptions","locale","formatTime","format","formatAddress","parse","address","street","houseNumber","city","state","rootContext","createContext","undefined","root","useContext","Error","RootProvider","Provider","i18n","setupI18n","I18nManager","user","forceUpdate","useAutorun","initialized","languageActivated","loadCatalog","language","log","activate","activateLanguage","i","lang","catalog","load","memoryKey","appConfig","persistenceKey","catchError","err","setTag","captureException","writeMemory","debounce","values","done","localforage","setItem","firstname","lastname","email","phonePrefix","phone","note","OrderFormMemory","memo","formik","useFormikContext","applyMemory","memory","memoryApplied","Object","keys","forEach","field","value","setFieldValue","length","setFieldTouched","setMemoryApplied","useEffect","getItem","catch","then","when","orderModel","agreements","getLegacyMemory","shouldRememberForm","ThemeSwitchProvider","observer","variables","brandId","isBrand","hasOrder","data","useQThemeStyle","skip","isValid","context","noBatch","fetchPolicy","theme","useMemo","styles","defaultTheme","primary","secondary","tertiary","primaryHover","calcHoverColor","secondaryHover","tertiaryHover","tertiaryText","unselected","unselectedHover","unselectedText","storeLogo","storeLogoMobile","backgroundCart","active","main","mainSecondary","getTheme","useTheme","ThemeContext","inputColor","Color","lighten","hsl","string","fallbackLanguage","supportedLanguages","endpoint","process","REACT_APP_LOCAL_KEY","googleMapsApi","redirectOnFail","sentryDSN","pageTitleSuffix","analytics","assign","window","localStorage","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderStateEnum","OrderBillingTypeEnum","PaymentGateEnum","PaymentTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","SectorTypeEnum","ZoneTypeEnum","ShiftUserStateEnum","OrderOriginCategoryEnum","WareCategoryTypeEnum","SubscriptionActionType","WareRequirementEnum","SettingTypeEnum","FCompanyBranchFragmentDoc","gql","FPromoCodeFragmentDoc","FRecipeFragmentDoc","FCartItemFragmentDoc","FPriceFragmentDoc","FCartGoodsFragmentDoc","FCartStaticFragmentDoc","FCartSummaryFragmentDoc","FRecipeDetailFragmentDoc","FOrderFinishedFragmentDoc","FCartPresenceFragmentDoc","FFoodMenuCategoryFragmentDoc","FFoodMenuRecipeFragmentDoc","FOrderCreateFragmentDoc","FGeoPointFragmentDoc","FJsonAddressFragmentDoc","FAddressFragmentDoc","FCompanyBranchStatusFragmentDoc","FPickupBranchFragmentDoc","FShopOpeningHoursFragmentDoc","QBusinessLookupDocument","useQBusinessLookup","baseOptions","Hooks","QThemeStyleDocument","MAddToCartDocument","useMAddToCart","MChangeCartItemDocument","useMChangeCartItem","MRemoveCartItemDocument","useMRemoveCartItem","QCartDocument","useQCart","QCartItemDocument","useQCartItem","QCartRecipeDocument","useQCartRecipe","useExecutableQCartRecipe","options","QOrderFinishDocument","useQOrderFinish","QFoodMenuDocument","useQFoodMenu","QFoodMenuCartPresenceDocument","useQFoodMenuCartPresence","MDeliveryOrderCreateDocument","MPickupOrderCreateDocument","QInitialDeliveryLocationDocument","useQInitialDeliveryLocation","QPickupMapDocument","useQPickupMap","QResolveLocationDocument","useExecutableQResolveLocation","QMobileShopIntroDocument","useQMobileShopIntro","QMobileShopStatusDocument","useQMobileShopStatus","QSmartBannerDocument","useQSmartBanner","MOrderDeliveryTimeDocument","useMOrderDeliveryTime","MOrderPromoAddDocument","useMOrderPromoAdd","MOrderPromoRemoveDocument","useMOrderPromoRemove","MOrderTipUpdateDocument","useMOrderTipUpdate","MSubmitOrderDocument","useMSubmitOrder","QOrderFormDocument","useQOrderForm","QOrderFormAgreementsDocument","useQOrderFormAgreements","QOrderPaymentStatusDocument","useExecutableQOrderPaymentStatus","QOrderPromoCodesDocument","useQOrderPromoCodes","QOrderTimePickerDocument","useQOrderTimePicker","QShopHeaderBranchDocument","useQShopHeaderBranch","QShopHeaderIntroDocument","useQShopHeaderIntro","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","code","ids","t","module","exports","webpackContext","webpackContextResolve","makeError","message","ErrorContainer","errorGuard","prod","errorKind","setErrorKind","makeAlert","onRetry","onUnhandledError","error","indexOf","isChunkError","setLevel","Severity","Debug","flushSentry","reload","isApolloError","isNetworkUnreachableError","onNetworkError","isUnreachable","console","onOperationError","onUserErrors","messages","msg","key","history","useRouterContext","modalOpen","setModalOpen","onFeedback","showReportDialog","labelClose","title","onRestart","replace","routerBasePath","render","onClick","onError","DeveloperErrorBoundary","require","default","PageTitle","suffix","hostname","includes","getProdSuffix","document","autorun","brand","trim","AddSentryContext","useSentryScope","orderId","orderBranchId","deliverAt","BusinessLoader","requestedCode","url","href","loading","lookup","updateFromLookup","companyId","CypressHelper","props","IdentifyGuest","auth","userId","token","configureScope","setUser","username","setExtra","ResetOrderAtRoot","match","useRouter","path","isExact","orderCancel","ResetPersistenceButton","SuspendOnInit","predicate","suspend","setSuspend","thrown","useRef","resolverRef","current","useSuspenseWhen","DesktopApp","lazy","MobileApp","App","Suspense","fallback","Router","useObserver","basename","ReactGA","initialize","debug","gaOptions","siteSpeedSampleRate","logPersist","persistModel","model","modelName","getType","stateKey","writeState","snapshot","removeItem","applySnapshot","getSnapshot","onSnapshot","BaseModel","types","volatile","client","actions","self","setClient","views","getPath","getRoot","AuthModel","named","maybeNull","authenticate","addBreadcrumb","category","level","Info","BannerModel","identifier","closedAt","maybe","Date","installedAt","isMobileApp","differenceInDays","Boolean","setInstalledNow","setClosedNow","BusinessModel","banners","country","Web","defaultLanguage","company","this","urlCode","URL","searchParams","get","codeParam","REACT_APP_BUSINESS_CODE","knownBasePath","toLowerCase","ensureBannerForCurrentBranch","has","set","CartModel","withGoods","withPresence","orderIsSubmitting","updateDisplay","isMobile","showGoods","setOrderSubmitting","ConfigModel","orderItemsMax","LocationModel","number","searchValue","optional","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","geolocationPoint","isResolving","hasResolutionResult","navigator","geolocation","hasLocation","setLocation","setIsResolving","resolving","setSearchValue","search","setAddress","clearAddress","setGeolocationPoint","point","disableGeolocation","setResolutionResult","companyBranch","isValidAddress","finalAddress","hasSearchValue","gpsCoordinates","zone","setSearchResult","setAsNotResolved","setAsNotAddress","resetResolution","GPSCzechia","MapModel","zoom","mapRef","clickPoint","setMapRef","ref","updateZoom","getZoom","updatePosition","center","getCenter","ev","clearClickPoint","OrderModel","orderMethod","Messenger","paymentMethod","Gopay","tips","isSubmitting","isGoPayChecking","submitErrors","lastActiveRecipeId","timePickerOpen","delayedOrderEnabled","addToCartRecipeId","changeCartItemId","isVamInitialized","Pickup","useOrderMethod","method","setPaymentMethod","orderPaid","submitStarted","submitFinished","submitFailed","errors","vamFailed","clearErrors","goPayStatusCheck","checking","setUsedRecipeId","recipeId","openTimePicker","closeTimePicker","setTips","setDeliverAt","enableDelayedOrder","addToCart","changeCartItem","itemId","initVam","UserModel","selectedLanguage","rememberForm","boolean","showAppleBanner","closingTimeAlertHidden","orderLimitAlertHidden","detectLanguage","selectLanguage","showClosingTime","hideClosingTime","showOrderLimit","hideOrderLimit","setFormRememberYes","setFormRememberNo","hideAppleBanner","RootModel","cart","config","extend","initialSnapshot","observable","box","afterCreate","reset","init","all","persistedModels","ReactDOM","opts","reportPage","pageview","useAnalytics","useSentryInit","rootInit","rootInst","create","newClient","getToken","fetchGuestToken","createDefaultApolloClient","createAuthLink","createLanguageLink","createLogLink","enabled","createRetryLink","createOfflineLink","createNetworkLink","createApolloClient","getElementById","updateWorker","register","autoUpdate","onUpdate","sw","setTimeout","confirm","postMessage","serviceWorker","addEventListener","event","PrimaryButton","styled","Button","themeProp","SecondaryButton","SelectButtonThemed","selected","css","mediaDesktop","mediaMobile","mobileBreakpoint","Desktop","minWidth","Mobile","maxWidth"],"mappings":"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,0BAAAA,E,oBAAAA,E,gBAAAA,E,YAAAA,E,wBAAAA,E,uBAAAA,E,sBAAAA,E,eAAAA,E,oBAAAA,E,kCAAAA,E,iBAAAA,E,eAAAA,M,cAiBAC,K,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,SAAAA,M,cAQAC,K,kBAAAA,E,WAAAA,M,cAKAC,K,oBAAAA,E,YAAAA,E,cAAAA,E,eAAAA,M,cAOAC,K,YAAAA,E,qBAAAA,M,cAKAC,K,0CAAAA,E,sBAAAA,E,UAAAA,E,YAAAA,E,gBAAAA,E,oBAAAA,E,YAAAA,E,UAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,sBAAAA,E,cAAAA,E,qBAAAA,M,cAiBAC,K,oBAAAA,E,mBAAAA,M,cAKAC,K,kBAAAA,E,kBAAAA,E,qBAAAA,M,cAMAC,K,kBAAAA,E,gBAAAA,E,YAAAA,E,aAAAA,M,cAOAC,K,UAAAA,E,cAAAA,E,aAAAA,M,cAMAC,K,iBAAAA,E,oBAAAA,E,yBAAAA,E,oBAAAA,E,0BAAAA,E,yCAAAA,E,gBAAAA,E,YAAAA,E,8BAAAA,E,gBAAAA,E,8BAAAA,E,qCAAAA,E,UAAAA,E,gBAAAA,E,sBAAAA,E,6BAAAA,E,cAAAA,E,oBAAAA,E,kCAAAA,E,uBAAAA,E,YAAAA,E,kCAAAA,E,eAAAA,E,4BAAAA,E,YAAAA,E,sBAAAA,E,cAAAA,E,oBAAAA,E,0CAAAA,E,2CAAAA,E,mCAAAA,E,4BAAAA,E,oBAAAA,E,6BAAAA,E,iCAAAA,E,yBAAAA,E,2BAAAA,E,8CAAAA,E,6BAAAA,E,4BAAAA,M,cA2CAC,K,qBAAAA,E,wBAAAA,E,UAAAA,E,6BAAAA,E,uBAAAA,M,cAQAC,K,cAAAA,E,gBAAAA,E,gBAAAA,E,aAAAA,M,cAOAC,K,YAAAA,E,gBAAAA,E,mBAAAA,M,cAMAC,K,gBAAAA,E,sBAAAA,E,YAAAA,E,aAAAA,M,cAOAC,K,cAAAA,E,sBAAAA,E,gBAAAA,E,oBAAAA,E,uBAAAA,M,cAQAC,K,kBAAAA,E,kBAAAA,E,YAAAA,E,oBAAAA,E,uBAAAA,M,cAQAC,K,UAAAA,E,uBAAAA,E,6BAAAA,E,qBAAAA,E,cAAAA,E,YAAAA,E,cAAAA,E,yBAAAA,E,gBAAAA,E,gBAAAA,E,oBAAAA,E,8CAAAA,E,2DAAAA,E,8CAAAA,E,yBAAAA,E,UAAAA,E,oBAAAA,M,cAoBAC,K,YAAAA,E,eAAAA,M,cAKAC,K,YAAAA,E,cAAAA,E,iBAAAA,M,cAMAC,K,oBAAAA,E,oBAAAA,E,0CAAAA,E,yBAAAA,M,cAOAC,K,kBAAAA,E,YAAAA,E,cAAAA,E,iBAAAA,M,cAOAC,K,YAAAA,E,qBAAAA,E,cAAAA,E,eAAAA,M,cAOAC,K,gBAAAA,E,gBAAAA,E,kBAAAA,E,iBAAAA,M,cAOAC,K,mBAAAA,E,oBAAAA,E,iBAAAA,E,uBAAAA,M,cAOAC,K,4BAAAA,E,wCAAAA,E,cAAAA,E,UAAAA,E,kBAAAA,E,mBAAAA,M,KA0pCL,IAAMC,GAA4BC,IAAH,MAuBzBC,GAAwBD,IAAH,MAOrBE,GAAqBF,IAAH,MAQlBG,GAAuBH,IAAH,KAQ7BE,IAGSE,GAAoBJ,IAAH,MAOjBK,GAAwBL,IAAH,KAiC9BG,GACAC,IAGSE,GAAyBN,IAAH,KAU/BI,IAGSG,GAA0BP,IAAH,KAShCI,IAGSI,GAA2BR,IAAH,KAqBjCI,IAGSK,GAA4BT,IAAH,KAqBlCG,GACAC,IAGSM,GAA2BV,IAAH,MAYxBW,GAA+BX,IAAH,MAQ5BY,GAA6BZ,IAAH,KAYnCI,IAGSS,GAA0Bb,IAAH,MASvBc,GAAuBd,IAAH,MAOpBe,GAA0Bf,IAAH,MASvBgB,GAAsBhB,IAAH,KAQ5Be,IAGSE,GAAkCjB,IAAH,MAiB/BkB,GAA2BlB,IAAH,KAgBjCc,GACAE,GACAC,IAGSE,GAA+BnB,IAAH,KAOrCiB,IAOSG,GAA0BpB,IAAH,KAchCD,IAGG,SAASsB,GACd1G,EACA2G,GAEA,OAAOC,WACLH,GACAzG,EACA2G,GAaG,IAAME,GAAsBxB,IAAH,MAezB,SAAShF,GACdL,EACA2G,GAEA,OAAOC,WACLC,GACA7G,EACA2G,GAaG,IAAMG,GAAqBzB,IAAH,KAqB3BO,GACAF,GACAK,IAGG,SAASgB,GACdJ,GAKA,OAAOC,cACLE,GACAH,GAIG,IAAMK,GAA0B3B,IAAH,KAgBhCO,GACAF,IAGG,SAASuB,GACdN,GAKA,OAAOC,cACLI,GACAL,GAIG,IAAMO,GAA0B7B,IAAH,KAahCO,GACAF,GACAK,IAGG,SAASoB,GACdR,GAKA,OAAOC,cACLM,GACAP,GAIG,IAAMS,GAAgB/B,IAAH,KAUtBO,GACAF,GACAK,GACAJ,IAGG,SAAS0B,GACdrH,EACA2G,GAEA,OAAOC,WACLQ,GACApH,EACA2G,GAaG,IAAMW,GAAoBjC,IAAH,KAgB1BQ,IAGG,SAAS0B,GACdvH,EACA2G,GAEA,OAAOC,WACLU,GACAtH,EACA2G,GAaG,IAAMa,GAAsBnC,IAAH,KAO5BQ,IAGG,SAAS4B,GACdzH,EACA2G,GAEA,OAAOC,WACLY,GACAxH,EACA2G,GAIG,SAASe,GACdC,GAEA,OAAOf,qBACLY,GACAG,GAIG,IAAMC,GAAuBvC,IAAH,KAuB7BS,IAGG,SAAS+B,GACd7H,EACA2G,GAEA,OAAOC,WACLgB,GACA5H,EACA2G,GAaG,IAAMmB,GAAoBzC,IAAH,KAgB1BW,GACAC,IAGG,SAAS8B,GACd/H,EACA2G,GAEA,OAAOC,WACLkB,GACA9H,EACA2G,GAaG,IAAMqB,GAAgC3C,IAAH,KAQtCU,IAGG,SAASkC,GACdjI,EACA2G,GAEA,OAAOC,WAGLoB,GAA+BhI,EAAW2G,GAYvC,IAAMuB,GAA+B7C,IAAH,KAmBrCa,IAGG,SAAS/M,GACdwN,GAKA,OAAOC,cAGLsB,GAA8BvB,GAG3B,IAAMwB,GAA6B9C,IAAH,KASnCa,IAGG,SAAS7M,GACdsN,GAKA,OAAOC,cAGLuB,GAA4BxB,GAGzB,IAAMyB,GAAmC/C,IAAH,MAWtC,SAASgD,GACdrI,EACA2G,GAEA,OAAOC,WAGLwB,GAAkCpI,EAAW2G,GAYTtB,IAAH,MA+B9B,IAAMiD,GAAqBjD,IAAH,KAU3BkB,IAGG,SAASgC,GACdvI,EACA2G,GAEA,OAAOC,WACL0B,GACAtI,EACA2G,GAaG,IAAM6B,GAA2BnD,IAAH,KAmCjCe,IAcG,SAASqC,GACdd,GAEA,OAAOf,qBAGL4B,GAA0Bb,GAGvB,IAAMe,GAA2BrD,IAAH,KAS9B,SAASsD,GACd3I,EACA2G,GAEA,OAAOC,WACL8B,GACA1I,EACA2G,GAaG,IAAMiC,GAA4BvD,IAAH,IAQlCiB,IAGG,SAASuC,GACd7I,EACA2G,GAEA,OAAOC,WACLgC,GACA5I,EACA2G,GAaG,IAAMmC,GAAuBzD,IAAH,KAa1B,SAAS0D,GACd/I,EACA2G,GAEA,OAAOC,WACLkC,GACA9I,EACA2G,GAaG,IAAMqC,GAA6B3D,IAAH,IAYnCO,GACAF,IAGG,SAASuD,GACdtC,GAKA,OAAOC,cAGLoC,GAA4BrC,GAGItB,IAAH,KAuC1B,IAAM6D,GAAyB7D,IAAH,IAe/BC,GACAM,GACAF,IAGG,SAASyD,GACdxC,GAKA,OAAOC,cACLsC,GACAvC,GAIG,IAAMyC,GAA4B/D,IAAH,IAgBlCC,GACAM,GACAF,IAGG,SAAS2D,GACd1C,GAKA,OAAOC,cAGLwC,GAA2BzC,GAGxB,IAAM2C,GAA0BjE,IAAH,IAQhCO,GACAF,IAGG,SAAS6D,GACd5C,GAKA,OAAOC,cACL0C,GACA3C,GAIG,IAAM6C,GAAuBnE,IAAH,KA2B1B,SAASoE,GACd9C,GAKA,OAAOC,cACL4C,GACA7C,GAIG,IAAM+C,GAAqBrE,IAAH,KAUxB,SAASsE,GACd3J,EACA2G,GAEA,OAAOC,WACL8C,GACA1J,EACA2G,GAaG,IAAMiD,GAA+BvE,IAAH,KAYlC,SAASwE,GACd7J,EACA2G,GAEA,OAAOC,WAGLgD,GAA8B5J,EAAW2G,GAYtC,IAAMmD,GAA8BzE,IAAH,KAoBjC,SAAS0E,GACdpC,GAEA,OAAOf,qBAGLkD,GAA6BnC,GAG1B,IAAMqC,GAA2B3E,IAAH,IAUjCC,IAGG,SAAS2E,GACdjK,EACA2G,GAEA,OAAOC,WACLoD,GACAhK,EACA2G,GAaG,IAAMuD,GAA2B7E,IAAH,KAmB9B,SAAS8E,GACdnK,EACA2G,GAEA,OAAOC,WACLsD,GACAlK,EACA2G,GAaG,IAAMyD,GAA4B/E,IAAH,IAYlCgB,GACAG,GACAF,IAGG,SAAS+D,GACdrK,EACA2G,GAEA,OAAOC,WACLwD,GACApK,EACA2G,GAaG,IAAM2D,GAA2BjF,IAAH,KAS9B,SAASkF,GACdvK,EACA2G,GAEA,OAAOC,WACL0D,GACAtK,EACA2G,K,kFCp+GJ,IAAI6D,EAAM,CACT,mBAAoB,CACnB,IACA,GAED,mBAAoB,CACnB,IACA,GAED,uBAAwB,CACvB,IACA,GAED,mBAAoB,CACnB,IACA,GAED,mBAAoB,CACnB,IACA,GAED,mBAAoB,CACnB,IACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUtL,KAAK,WAC7B,IAAIuL,EAAI,IAAIjP,MAAM,uBAAyB4O,EAAM,KAEjD,MADAK,EAAEC,KAAO,mBACHD,IAIR,IAAIE,EAAMT,EAAIE,GAAM1Q,EAAKiR,EAAI,GAC7B,OAAON,EAAoBI,EAAEE,EAAI,IAAIzL,KAAK,WACzC,OAAOmL,EAAoBO,EAAElR,EAAI,KAGnCyQ,EAAoB5L,KAAO,WAC1B,OAAOD,OAAOC,KAAK2L,IAEpBC,EAAoBzQ,GAAK,IACzBmR,EAAOC,QAAUX,G,oBC5CjB,IAAID,EAAM,CACT,mBAAoB,CACnB,IACA,GAED,mBAAoB,CACnB,IACA,GAED,uBAAwB,CACvB,IACA,GAED,mBAAoB,CACnB,IACA,GAED,mBAAoB,CACnB,IACA,GAED,mBAAoB,CACnB,IACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUtL,KAAK,WAC7B,IAAIuL,EAAI,IAAIjP,MAAM,uBAAyB4O,EAAM,KAEjD,MADAK,EAAEC,KAAO,mBACHD,IAIR,IAAIE,EAAMT,EAAIE,GAAM1Q,EAAKiR,EAAI,GAC7B,OAAON,EAAoBI,EAAEE,EAAI,IAAIzL,KAAK,WACzC,OAAOmL,EAAoBO,EAAElR,EAAI,KAGnCyQ,EAAoB5L,KAAO,WAC1B,OAAOD,OAAOC,KAAK2L,IAEpBC,EAAoBzQ,GAAK,IACzBmR,EAAOC,QAAUX,G,oBC5CjB,IAAID,EAAM,CACT,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,KAIb,SAASa,EAAeX,GACvB,IAAI1Q,EAAKsR,EAAsBZ,GAC/B,OAAOC,EAAoB3Q,GAE5B,SAASsR,EAAsBZ,GAC9B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIjP,MAAM,uBAAyB4O,EAAM,KAEjD,MADAK,EAAEC,KAAO,mBACHD,EAEP,OAAOP,EAAIE,GAEZW,EAAexM,KAAO,WACrB,OAAOD,OAAOC,KAAK2L,IAEpBa,EAAeP,QAAUQ,EACzBH,EAAOC,QAAUC,EACjBA,EAAerR,GAAK,K,oBC1BpB,IAAIwQ,EAAM,CACT,oBAAqB,IACrB,mBAAoB,IACpB,wBAAyB,IACzB,kBAAmB,KAIpB,SAASa,EAAeX,GACvB,IAAI1Q,EAAKsR,EAAsBZ,GAC/B,OAAOC,EAAoB3Q,GAE5B,SAASsR,EAAsBZ,GAC9B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIjP,MAAM,uBAAyB4O,EAAM,KAEjD,MADAK,EAAEC,KAAO,mBACHD,EAEP,OAAOP,EAAIE,GAEZW,EAAexM,KAAO,WACrB,OAAOD,OAAOC,KAAK2L,IAEpBa,EAAeP,QAAUQ,EACzBH,EAAOC,QAAUC,EACjBA,EAAerR,GAAK,K,iMCLduR,EAAY,SAACC,GAAD,gBACbA,EADa,YACFvP,EAAA,EAAK,EAAD,4CAEPwP,EAAmC,SAAC,GAG1C,IAkIDC,EApIJtU,EAEI,EAFJA,SAEI,IADJuU,YACI,WAC8BpT,IAAMC,SAAoB,QADxD,mBACGoT,EADH,KACcC,EADd,OAE4BvT,cAF5B,mBAEGG,EAFH,KAEeqT,EAFf,KAIEC,EAAUxT,IAAMI,YAAY,WAChCkT,EAAa,SACZ,IAEGG,EAAmBzT,IAAMI,YAAY,SAACsT,GAC1C,GAyJJ,SAAsBA,GACpB,OAAOA,EAAMT,SAAWS,EAAMT,QAAQU,QAAQ,kBAAoB,EA1J5DC,CAAaF,GAMf,OALAhS,IAAOC,UAAU,SAAAC,GACfA,EAAMiS,SAASnS,IAAOoS,SAASC,OAC/BrS,IAAOuD,iBAAiByO,UAE1BM,cAAc/M,KAAK,kBAAM2D,OAAOlK,SAASuT,WAGvCC,wBAAcR,IAAUS,oCAA0BT,GACpDJ,EAAa,uBAGf5R,IAAOuD,iBAAiByO,GACxBJ,EAAa,gBACZ,IAEGc,EAAiBpU,IAAMI,YAC3B,SAACsT,EAAcW,GACTA,EACFf,EAAa,uBAEbgB,QAAQZ,MAAMA,GACdH,EACE7P,EAAA,EAAK,EAAD,mBACJ,6BACGsP,EACCtP,EAAA,EAAK,EAAD,gEAMd,CAAC6P,IAGGgB,EAAmBvU,IAAMI,YAC7B,SAAAsT,GACEY,QAAQZ,MAAMA,GACdH,EACE7P,EAAA,EAAK,EAAD,yBACJ,6BACGsP,EAAUtP,EAAA,EAAK,EAAD,yDAIrB,CAAC6P,IAGGiB,EAAexU,IAAMI,YACzB,SAACqU,GACClB,EACE7P,EAAA,EAAK,EAAD,wBACJ,6BACG+Q,EAASxC,IAAI,SAAAyC,GAAG,OACf,yBAAKC,IAAKD,GAAMA,QAKxB,CAACnB,IAGKqB,EAAYC,cAAZD,QAvEJ,EAwE8B5U,IAAMC,UAAS,GAxE7C,mBAwEG6U,EAxEH,KAwEcC,EAxEd,KA0EEC,EAAahV,IAAMI,YAAY,WACnC2U,GAAa,GA4FfrT,IAAOuT,iBAAiB,CACtBC,WAAYxR,EAAA,EAAK,EAAD,SAChByR,MAAOzR,EAAA,EAAK,EAAD,kCA5FV,IAEK/C,EAAatB,cAAbsB,SAEFyU,EAAYpV,IAAMI,YAAY,WAClC2U,GAAa,GACbH,EAAQS,QAAQ1U,EAAS2U,gBACzB1K,OAAOlK,SAASuT,UACf,CAACtT,EAAS2U,eAAgBV,IAEvBW,EAAS,WACb,OAAQlC,GACN,IAAK,qBACH,OACE,kBAAC5U,EAAA,EAAD,CACEC,OAAQoW,EACRnW,WAAY+E,EAAA,EAAK,EAAD,uCAEhB,kBAAC,QAAD,oEAGA,kBAAC,IAAD,CAAe8R,QAAShC,GACtB,kBAAC,QAAD,kBAKR,IAAK,aACH,OACE,kBAAC/U,EAAA,EAAD,CACEC,OAAQoW,EACRnW,WAAY+E,EAAA,EAAK,EAAD,kCAEhB,kBAAC,QAAD,wHAIA,6BACA,kBAAC,IAAD,CAAe8R,QAASJ,GACtB,kBAAC,QAAD,6BAEF,kBAAC,IAAD,CAAiBI,QAASR,GACxB,kBAAC,QAAD,wBAKR,QACE,OAAOnW,IAOb,GAAIuU,EACFD,EACE,kBAAC,qBAAD,CACEsC,QAAS,SAAA/B,GACPD,EAAiBC,KAGlB6B,SAGA,CACL,IAAMG,EAAyBC,EAAQ,KACpCC,QACHzC,EAAa,kBAACuC,EAAD,KAAyBH,KAGxC,OACE,kBAAC,iBAAD,CACEnB,eAAgBA,EAChBG,iBAAkBA,EAClBC,aAAcA,GAEd,oCACGtU,EACAiT,K,qBChLI0C,EAAsB,WAAO,IAChClV,EAAatB,cAAbsB,SAGFmV,EAmBR,WAA0B,IAChBC,EAAanL,OAAOlK,SAApBqV,SACR,GAAIA,EAASC,SAAS,aACpB,MAAO,cACF,GAAID,EAASC,SAAS,cAC3B,MAAO,eAET,MAAO,GA1BoBC,IAAsB,GAgBjD,OAdAjW,IAAM8G,UAAU,WACd,GAAKoP,SAGL,OAAOC,kBAAQ,WAAO,IACZ3U,EAAWb,EAAXa,OAEN0U,SAASf,MADP3T,EACe,UAViB,UAUjB,YAAaA,EAAO4U,MAAMvW,KAA1B,YAAkCiW,GAASO,OAE3C,UAZiB,UAYjB,YAAaP,GAASO,UAG1C,CAAC1V,EAfoC,UAelBmV,IAEf,M,6BCrBIQ,EAAmB9O,YAAS,WACvC,IAAM5F,EAAQ2U,cACRpP,EAAa/H,cAQnB,OANAwC,EAAMC,UAAU,CACd2U,QAASrP,EAAWqP,QACpBC,cAAetP,EAAWhG,SAC1BuV,UAAWvP,EAAWuP,YAGjB,O,gBCPIC,EAAiBnP,YAAS,WACrC,IAAMnE,EAAOhE,cACLsB,EAAatB,cAAbsB,SAFmC,EAIjBwN,YACxB,CACEsE,KAAM9R,EAASiW,cACfC,IAAKjM,OAAOlK,SAASoW,MAEvB,CACE/O,MAAO1E,EAAKW,YACZiE,QAAS,CAAEC,SAAS,GACpBC,YAAa,gBARTN,EAJmC,EAInCA,KAAMkP,EAJ6B,EAI7BA,QAuCd,OA3BA/W,IAAM8G,UAAU,WACd,IAAIiQ,IAAWpW,EAASqH,QAAxB,CAIA,IAAKH,EAAKmP,OAAOxV,OASf,OARAE,IAAOC,UAAU,SAAAC,GACfA,EAAMC,UAAU,CACdgV,IAAKjM,OAAOlK,SAASoW,KACrBF,cAAejW,EAASiW,gBAE1BlV,IAAOO,eAAe,4BAqB1B2I,OAAOlK,SAAS2U,QAAQzQ,IAAU2F,gBAflC5J,EAASsW,iBAAiBpP,EAAKmP,QAC/BrW,EAASyD,IACP,0DACAzD,EAASQ,SACTR,EAAS+G,QACT/G,EAASuW,UACTvW,EAASgH,YAIN,O,iBCxCIwP,EAAkC,SAAAC,GAE3C,OAAO,MCPEC,EAA0B,WAAO,IACpCC,EAASjY,cAATiY,KASR,OARAvT,YAAW,WACT,IAAMtC,EAAK6V,EAAKC,OACVC,EAAQF,EAAKE,MACnB9V,IAAO+V,eAAe,SAAA7V,GACpBA,EAAM8V,QAAQ,CAAEjW,KAAIkW,SAAU,UAC9B/V,EAAMgW,SAAS,QAASJ,OAGrB,MCXIK,EAA6B,WAAO,IACvCC,EAAUC,YAAU,CAC1BC,KAAM,MADAF,MAGF3Q,EAAa/H,cAMnB,OALAY,IAAM8G,UAAU,WACVgR,GAASA,EAAMG,SAAW9Q,EAAWS,UACvCT,EAAW+Q,gBAGR,M,iBCNIC,G,OAA2C,SAAAf,GACzC/X,cAEX,OAAO,OCHJ,IAAM+Y,EAAkC,SAAC,GAAkB,IAAhBvZ,EAAe,EAAfA,SAAe,EACpCQ,cAAnBsB,EADuD,EACvDA,SAAUkD,EAD6C,EAC7CA,KAMlB,OCbK,SAAyBwU,GAA2B,IAAD,EAC1BrY,IAAMC,SAA8B,MADV,mBACjDqY,EADiD,KACxCC,EADwC,KAElDC,EAASxY,IAAMyY,QAAO,GACtBC,EAAc1Y,IAAMyY,SAsB1B,GApBAzY,IAAM8G,UAAU,YACM,IAAhBuR,KAAoC,OAAZC,IAC1BC,EACE,IAAIjG,QAAQ,SAAAC,GACVmG,EAAYC,QAAUpG,KAG1BrL,eACE,kBAAOmR,KACP,WACMK,EAAYC,UACdD,EAAYC,UACZD,EAAYC,QAAU,KACtBJ,EAAW,WAKlB,CAACF,EAAWC,IAEC,OAAZA,IAAqBE,EAAOG,QAE9B,MADAH,EAAOG,SAAU,EACXL,EDhBRM,CAFkB,mBAAQjY,EAASqH,SAAWnE,EAAKI,qBAI5C,oCAAGpF,I,SECNga,EAAa7Y,IAAM8Y,KAAK,kBAAM,+DAC9BC,EAAY/Y,IAAM8Y,KAAK,kBAAM,+DA0BpBE,EAxBO,kBACpB,kBAAC,EAAD,CAAgB5F,MAAMhJ,GACpB,kBAAC7C,EAAA,EAAD,KACE,kBAACoP,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACL,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAM2C,SAAP,CAAgBC,SAAU,kBAAC3Z,EAAA,EAAD,OACxB,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAACsZ,EAAD,OAEF,kBAAC,IAAD,KACE,kBAACE,EAAD,OAEF,kBAAC,EAAD,W,SC/BGI,EAAmB,SAAC,GAAkB,IAAhBta,EAAe,EAAfA,SACzB8B,EAAatB,cAAbsB,SACR,OAAOyY,YAAY,kBACjB,kBAAC,IAAD,CACEC,SAAU1Y,EAAS2U,eACnBX,IAAKhU,EAAS2U,gBAEbzW,M,sCCRD8V,EAAM/P,IAAU8F,UACtB,GAAIiK,EAAK,CAEP2E,IAAQC,WAAW5E,EAAK,CACtB6E,OAFYpP,EAGZqP,UAAW,CACTC,oBAAqB,M,qCCRdC,GADWH,IAAM,gBACJA,IAAM,mBCUxB3U,GAAmBD,IAAnBC,eAED,SAAS+U,GAAaC,GAC3B,IAAMC,EAAYC,YAAQF,GAAOha,KAC3Bma,EAAQ,UAAMnV,GAAN,YAAwBiV,GAEhCG,EAAa,SAAAC,GACjB,OAAO5U,IAAYC,QAAQyU,EAAUE,GAAUlT,MAAM,SAAAjC,GACnDrD,IAAOC,UAAU,SAAAC,GACfA,EAAMoD,OAAO,cAAegV,GAC5BpY,EAAMC,UAAU,CACdqY,aAEFxY,IAAOuD,iBAAiBF,QAK9B,OAAOO,IACJyB,QAAQiT,GACRhT,MAAM,SAAAjC,GACLO,IAAY6U,WAAWH,GACvBtY,IAAOC,UAAU,SAAAC,GACfA,EAAMoD,OAAO,cAAegV,GAC5BtY,IAAOuD,iBAAiBF,OAG3BkC,KAAK,SAAAhE,GACU,OAAVA,GACFmX,YAAcP,EAAO5W,GACrB0W,EAAW,oBAAqBK,IAEhCC,EAAWI,YAAYR,IAAQ5S,KAAK,WAClC0S,EAAW,uBAAwBK,KAIvCM,YAAWT,EAAOI,KC5CjB,IAAMM,GAAYC,IACtBX,QACAY,SAAS,iBAAO,CACfC,OAAS,QAEVC,QAAQ,SAAAC,GAAI,MAAK,CAChBC,UADgB,SACNH,GACRE,EAAKF,OAASA,MAGjBI,MAAM,SAAAF,GAAI,MAAK,CACd,UACE,IAAM/a,EAAOkb,YAAQH,GAAMvE,QAAU0D,YAAQa,GAAM/a,KAInD,OAAO2Z,IAAM,eAAD,OAAgB3Z,KAE9B,WACE,OAAOmb,YAAoBJ,OCpBpBK,GAAYV,GAAUW,MAAM,QACtC9D,MAAM,CACLI,MAAOgD,IAAMW,UAAUX,IAAMxQ,QAC7BuN,OAAQiD,IAAMW,UAAUX,IAAMxQ,UAE/B8Q,MAAM,SAAAF,GAAI,MAAK,CACd,cACE,OAAsB,OAAfA,EAAKpD,UAGfmD,QAAQ,SAAAC,GAAI,MAAK,CAChBQ,aADgB,SACH5D,EAAeD,GAC1BqD,EAAKpD,MAAQA,EACboD,EAAKrD,OAASA,EACd7V,IAAO2Z,cAAc,CACnBC,SAAU,OACVC,MAAO7Z,IAAOoS,SAAS0H,KACvB3T,KAAM,CACJ0P,SACAC,e,UChBGiE,GAAclB,GAAUW,MAAM,UACxC9D,MAAM,CACLjW,SAAUqZ,IAAMkB,WAChBC,SAAUnB,IAAMoB,MAAMpB,IAAMqB,MAC5BC,YAAatB,IAAMoB,MAAMpB,IAAMqB,QAEhCf,MAAM,SAAAF,GAAI,MAAK,CACd,sBACE,OAAIA,EAAKvX,KAAK1C,SAASob,iBAIrBnB,EAAKe,UACLK,4BAAiB,IAAIH,KAAQjB,EAAKe,UAhBvB,SAqBXf,EAAKkB,aACLE,4BAAiB,IAAIH,KAAQjB,EAAKkB,aArBrB,MA0BPG,QAAQrB,EAAKe,UAAYf,EAAKkB,mBAGzCnB,QAAQ,SAAAC,GAAI,MAAK,CAChBsB,gBADgB,WAEdtB,EAAKkB,YAAc,IAAID,MAEzBM,aAJgB,WAKdvB,EAAKe,SAAW,IAAIE,SCjBbO,GAAgB7B,GAAUW,MAAM,YAC1C9D,MAAM,CACL3E,KAAM+H,IAAMW,UAAUX,IAAMxQ,QAC5BqS,QAAS7B,IAAMvI,IAAIwJ,MAEpBhB,SAAyB,iBAAO,CAC/B9S,SAAS,EACToU,aAAa,EACbva,OAAQ,KACR8a,QAAS,KACTjb,YAAa+K,IAAgBmQ,IAC7BjH,eAAgB,GAChBkH,gBAAiB,QAElB1B,MAAM,SAAAF,GAAI,MAAK,CACd,eACE,OAAOA,EAAKpZ,QAAUoZ,EAAKpZ,OAAOC,IAEpC,gBACE,OAAOmZ,EAAKpZ,QAAUoZ,EAAKpZ,OAAOib,QAAQhb,IAE5C,cACE,OAAOmZ,EAAKpZ,QAAUoZ,EAAKpZ,OAAO4U,MAAM3U,IAE1C,oBACE,MAAO,CACLiG,QAASkT,EAAKjT,QAAU+U,KAAKhV,aAAUtE,EACvCjC,SAAUyZ,EAAKjT,aAAUvE,EAAYsZ,KAAKvb,WAG9C,cACE,OAAuB,OAAhByZ,EAAKpZ,QAEd,oBACE,IAAMmb,EAoDQ,IAAI/R,OAAOgS,IAAIhS,OAAOlK,SAASoW,MAChC+F,aAAaC,IAAIC,KAAc,KAnD5C,OAAInC,EAAKnI,OAASkK,EACT/B,EAAKnI,KAGPkK,GAAW/B,EAAKnI,MAAQrI,0RAAY4S,4BAG9CrC,QAAQ,SAAAC,GAAI,MAAK,CAChB3D,iBADgB,SACCD,GAAgC,IAE7CrP,EAKEqP,EALFrP,QACAoU,EAIE/E,EAJF+E,YACAkB,EAGEjG,EAHFiG,cACA5b,EAEE2V,EAFF3V,YACAG,EACEwV,EADFxV,OAGGA,IAKLoZ,EAAKjT,QAAUA,EACfiT,EAAKmB,YAAcA,EACnBnB,EAAKpZ,OAASA,EACdoZ,EAAK0B,QAAU9a,EAAOqB,QAAQyZ,SAAW,KACzC1B,EAAKtF,eAAiB2H,EACtBrC,EAAKvZ,YAAcA,EACnBuZ,EAAK4B,gBAAkBxF,EAAOwF,gBAAgBU,cAO5CtC,EAAKnI,KAAO,OAGhB0K,6BA/BgB,WAgCd,IAAMhc,EAAWyZ,EAAKzZ,SAItB,OAHKyZ,EAAKyB,QAAQe,IAAIjc,IACpByZ,EAAKyB,QAAQgB,IAAIlc,EAAU,CAAEA,aAExByZ,EAAKyB,QAAQS,IAAI3b,OAIxB4b,GAAY,MCtGX,IAAMO,GAAY/C,GAAUW,MAAM,QACtCT,SAAS,iBAAO,CACf8C,WAAW,EACXC,cAAc,EACdC,mBAAmB,KAEpB9C,QAAQ,SAAAC,GAAI,MAAK,CAChB8C,cADgB,SACFC,EAAmBC,GAC/BhD,EAAK2C,WAAaI,GAAYC,EAC9BhD,EAAK4C,cAAeG,IAAYC,GAElCC,mBALgB,SAKG5a,GACjB2X,EAAK6C,kBAAoBxa,MCZlB6a,GAAcvD,GAAUW,MAAM,UAAU9D,MAAM,CACzD2G,cAAe,K,oBCGJC,GAAgBzD,GAAUW,MAAM,YAC1C9D,MAAM,CACLpZ,SAAUwc,IAAMoB,MAAMpB,IAAMyD,QAC5B/f,UAAWsc,IAAMoB,MAAMpB,IAAMyD,QAC7BC,YAAa1D,IAAM2D,SAAS3D,IAAMxQ,OAAQ,IAC1CnH,QAAS2X,IAAMoB,MAAMpB,IAAMxQ,UAE5ByQ,SAAS,iBAAO,CACftZ,SAAU,KACVzC,QAAQ,EACR0f,YAAY,EACZC,iBAAiB,EACjBC,oBAAoB,EACpBC,qBAAqB,EACrBC,iBAAkB,KAClBC,aAAa,EACbC,qBAAqB,KAEtB5D,MAAM,SAAAF,GAAI,MAAK,CACd,6BACE,OAAOqB,QAAQ0C,UAAUC,cAAgBhE,EAAK2D,sBAEhD,kBACE,YAAyBnb,IAAlBwX,EAAK5c,eAA6CoF,IAAnBwX,EAAK1c,WAE7C,iBACE,OAAO+d,QAAQrB,EAAK/X,SAAW+X,EAAK/X,QAAQ8D,OAAS,IAEvD,qBACE,OAAOiU,EAAKsD,YAAY7H,OAAO1P,OAAS,GAE1C,wBACE,OAAOiU,EAAKwD,YAAcxD,EAAKyD,iBAAmBzD,EAAK0D,oBAEzD,eACE,OAAI5B,KAAKmC,YACA,CACL7gB,SAAU4c,EAAK5c,SACfE,UAAW0c,EAAK1c,WAGb,MAET,uBAAwB,IACdyC,EAAaia,EAAKvX,KAAlB1C,SACR,OAAIA,EAASgH,QACJ,CACLD,QAAS/G,EAAS+G,SAGf,CACLvG,SAAUR,EAASQ,WAGvB,aACE,OAAIub,KAAKxb,SACAtD,aAAe8e,KAAKxb,UAEtB,SAGVyZ,QAAQ,SAAAC,GAAI,MAAK,CAChBkE,YADgB,YACgC,IAAlC9gB,EAAiC,EAAjCA,SAAUE,EAAuB,EAAvBA,UACtB0c,EAAK5c,SAAWA,EAChB4c,EAAK1c,UAAYA,GAEnB6gB,eALgB,SAKDC,GACTA,IAAcpE,EAAK6D,cACrB7D,EAAK6D,YAAcO,EACnBpE,EAAKxW,IAAL,wBAA0B4a,EAAY,UAAY,YAGtDC,eAXgB,SAWDC,GACbtE,EAAKsD,YAAcgB,GAErBC,WAdgB,SAcLtc,GACT+X,EAAK/X,QAAUA,EACf+X,EAAKxW,IAAL,yBAA2BvB,KAE7Buc,aAlBgB,WAmBdxE,EAAK/X,aAAUO,EACfwX,EAAKxW,IAAI,oBAEXib,oBAtBgB,SAsBIC,GAClB1E,EAAK4D,iBAAmBc,GAE1BC,mBAzBgB,WA0Bd3E,EAAK2D,qBAAsB,MAG9B5D,QAAQ,SAAAC,GAAI,MAAK,CAChB4E,oBADgB,SACIje,GAClBqZ,EAAKzZ,SAAWI,EAAOke,cAAgBle,EAAOke,cAAche,GAAK,KACjEmZ,EAAKwD,WAAa7c,EAAO6c,WACzBxD,EAAKyD,gBAAkB9c,EAAOme,eAC9B9E,EAAK0D,mBAAqB/c,EAAO+c,mBAE7B/c,EAAOoe,eAAiB/E,EAAKgF,gBAC/BhF,EAAKuE,WAAWxc,aAAcpB,EAAOoe,eAGvC/E,EAAK8D,qBAAsB,EAErBnd,EAAO6c,YAAc7c,EAAOse,gBAKlCjF,EAAKkE,YAAYvd,EAAOse,gBACxBjF,EAAKxW,IAAL,wCACmCwW,EAAKzZ,SADxC,mBAEII,EAAOue,KAAOve,EAAOue,KAAKre,GAAK,QAPjCmZ,EAAKxW,IAAI,iBAWb2b,gBAzBgB,SAyBAxe,GACdqZ,EAAKkE,YAAYvd,EAAO1D,KACxB+c,EAAKuE,WAAW5d,EAAOsB,SACvB+X,EAAKmE,gBAAe,IAEtBiB,iBA9BgB,WA+BdpF,EAAK8D,qBAAsB,EAC3B9D,EAAKwD,YAAa,EAClBxD,EAAKmE,gBAAe,IAEtBkB,gBAnCgB,WAoCdrF,EAAK8D,qBAAsB,EAC3B9D,EAAKwD,YAAa,EAClBxD,EAAKyD,iBAAkB,EACvBzD,EAAKmE,gBAAe,IAEtBmB,gBAzCgB,WA0CdtF,EAAKzZ,SAAW,KAChByZ,EAAKwD,YAAa,EAClBxD,EAAKyD,iBAAkB,EACvBzD,EAAK0D,oBAAqB,EAC1B1D,EAAK8D,qBAAsB,EAC3B9D,EAAKwE,mBC5IEe,GACD,WADCA,GAEA,WAGAC,GAAW7F,GAAUW,MAAM,OACrC9D,MAAM,CACLiJ,KAAM7F,IAAM2D,SAAS3D,IAAMyD,OAAQ,IACnCjgB,SAAUwc,IAAM2D,SAAS3D,IAAMyD,OAAQkC,IACvCjiB,UAAWsc,IAAM2D,SAAS3D,IAAMyD,OAAQkC,MAEzC1F,SAAS,iBAAO,CACf6F,OAAQ,KACRC,WAAY,QAEbzF,MAAM,SAAAF,GAAI,MAAK,CACd,aACE,OAAOhd,aAAegd,OAGzBD,QAAQ,SAAAC,GAAI,MAAK,CAChB4F,UADgB,SACNC,GACR7F,EAAK0F,OAASG,GAEhBC,WAJgB,SAILL,QACIjd,IAATid,EACFzF,EAAKyF,KAAOA,EACHzF,EAAK0F,SACd1F,EAAKyF,KAAOzF,EAAK0F,OAAOK,YAG5BC,eAXgB,SAWD/iB,GACb,GAAIA,EACF+c,EAAK5c,SAAWH,EAAIG,SACpB4c,EAAK1c,UAAYL,EAAIK,eAChB,GAAI0c,EAAK0F,OAAQ,CACtB,IAAMO,EAASjG,EAAK0F,OAAOQ,YAC3BlG,EAAK5c,SAAW6iB,EAAO/iB,MACvB8c,EAAK1c,UAAY2iB,EAAO5iB,QAG5BuX,QArBgB,SAqBRuL,GACNnG,EAAK2F,WAAahiB,aAAYwiB,EAAGviB,SAEnCwiB,gBAxBgB,WAyBdpG,EAAK2F,WAAa,SCxCXU,GAAa1G,GAAUW,MAAM,SACvC9D,MAAM,CACLjW,SAAUqZ,IAAMW,UAAUX,IAAMxQ,QAChCwM,QAASgE,IAAMW,UAAUX,IAAMxQ,QAC/BkX,YAAajV,IAAiBkV,UAC9BC,cAAerV,IAAgBsV,MAC/BC,KAAM,IAEP7G,SAAS,iBAAO,CACf/D,UAAW,KACX6K,cAAc,EACdC,iBAAiB,EACjBC,aAAc,KACdC,mBAAoB,KACpBC,gBAAgB,EAChBC,qBAAqB,EACrBC,kBAAmB,KACnBC,iBAAkB,KAClBC,kBAAkB,KAEnBjH,MAAM,SAAAF,GAAI,MAAK,CACd,eACE,OAAwB,OAAjBA,EAAKpE,SAEd,+BACE,OAAOoE,EAAKsG,cAAgBjV,IAAiBkV,WAE/C,6BACE,OAAOvG,EAAKsG,cAAgBjV,IAAiB+V,QAE/C,iCACE,OAAOpH,EAAKwG,gBAAkBrV,IAAgBsV,OAEhD,gBACE,OAAOpF,QAAQrB,EAAK6G,cAAgB7G,EAAK6G,aAAa9a,OAAS,IAEjE,yBACE,OAAIiU,EAAKvX,KAAK1C,SAASqH,SAAW4S,EAAKvX,KAAK1C,SAAS2b,QAC5C1B,EAAKvX,KAAK1C,SAAS2b,QAAQ3W,YAE7B,IAET,yBACE,OAAOiV,EAAK2G,cAAgB3G,EAAK4G,oBAGpC7G,QAAQ,SAAAC,GAAI,MAAK,CAChBqH,eADgB,SACDC,GACbtH,EAAKsG,YAAcgB,GAErBC,iBAJgB,SAICD,GACftH,EAAKwG,cAAgBc,GAEvB9gB,UAPgB,SAOND,GACRyZ,EAAKzZ,SAAWA,GAElBe,aAVgB,SAUHX,GACXqZ,EAAKpE,QAAUjV,EAAOE,GACtBmZ,EAAKzZ,SAAWI,EAAOC,OAAOC,GAC9BmZ,EAAKlE,UAAY,KACjBkE,EAAKxW,IAAI,iCAAkCwW,EAAKpE,QAASoE,EAAKzZ,WAEhEihB,UAhBgB,SAgBN5L,GACJoE,EAAKpE,UAAYA,IACnBoE,EAAKpE,QAAUA,EACfoE,EAAKxW,IAAI,8DAGb8T,YAtBgB,YAuBV0C,EAAKzZ,UAAYyZ,EAAKpE,UACxBoE,EAAKxW,IACH,oCACAwW,EAAKvX,KAAK/D,MAAMkX,QAChBoE,EAAKvX,KAAK/D,MAAM6B,UAGpByZ,EAAKpE,QAAU,KACfoE,EAAKzZ,SAAW,KAChByZ,EAAKlE,UAAY,MAEnB2L,cAlCgB,WAmCdzH,EAAK2G,cAAe,GAEtBe,eArCgB,WAsCd1H,EAAK2G,cAAe,GAEtBgB,aAxCgB,SAwCHC,GACX5H,EAAK2G,cAAe,EACpB3G,EAAK6G,aAAee,GAAU,CAC5B9e,EAAA,EAAK,EAAD,yDAGR+e,UA9CgB,WA+Cd7H,EAAK6G,aAAe,CAClB/d,EAAA,EAAK,EAAD,8JAGRgf,YAnDgB,WAoDd9H,EAAK6G,aAAe,MAEtBkB,iBAtDgB,SAsDCC,GACfhI,EAAK4G,gBAAkBoB,GAEzBC,gBAzDgB,SAyDAC,GACdlI,EAAK8G,mBAAqBoB,GAE5BC,eA5DgB,WA6DdnI,EAAK+G,gBAAiB,GAExBqB,gBA/DgB,WAgEdpI,EAAK+G,gBAAiB,GAExBsB,QAlEgB,SAkER3B,GACN1G,EAAK0G,KAAOA,GAEd4B,aArEgB,SAqEHxM,GACXkE,EAAKlE,UAAYA,GAEnByM,mBAxEgB,WAyEdvI,EAAKgH,qBAAsB,GAE7BwB,UA3EgB,SA2ENN,GACRlI,EAAKiH,kBAAoBiB,GAE3BO,eA9EgB,SA8EDC,GACb1I,EAAKkH,iBAAmBwB,MAG3B3I,QAAQ,SAAAC,GAAI,MAAK,CAChB2I,QADgB,WAEd3I,EAAKmH,kBAAmB,MAI3B3K,MAAM,CACL5R,UAAW,GACXC,SAAU,GACVC,MAAO,GACPE,MAAO,GACPD,YAAa,GACbE,KAAM,K,UChJG2d,GAAYjJ,GAAUW,MAAM,QACtC9D,MAAM,CACLqM,iBAAkBjJ,IAAMoB,MAAMpB,IAAMxQ,QACpC0Z,aAAclJ,IAAMW,UAAUX,IAAMmJ,SACpCC,gBAAiBpJ,IAAM2D,SAAS3D,IAAMmJ,SAAS,KAEhDlJ,SAAS,iBAAO,CACfoJ,wBAAwB,EACxBC,uBAAuB,EACvB7f,mBAAmB,EACnBmC,eAAe,KAEhB0U,MAAM,SAAAF,GAAI,MAAK,CACd,eACE,OACEA,EAAK6I,kBACL7I,EAAKvX,KAAK1C,SAAS6b,iBACnBuH,aAAenf,IAAUsF,mBAAoBtF,IAAUqF,mBAG3D,yBACE,OAA6B,IAAtB2Q,EAAK8I,iBAGf/I,QAAQ,SAAAC,GAAI,MAAK,CAChBoJ,eADgB,SACDxf,GACTA,IAASoW,EAAK6I,mBAChB7I,EAAK3W,mBAAoB,GAE3B2W,EAAK6I,iBAAmBjf,EACxBoW,EAAKxW,IAAI,uBAAwBI,IAEnCF,iBARgB,WASdsW,EAAK3W,mBAAoB,EACzB2W,EAAKxW,IAAI,wBAAyBwW,EAAKzW,WAEzC8f,gBAZgB,WAadrJ,EAAKiJ,wBAAyB,GAEhCK,gBAfgB,WAgBdtJ,EAAKiJ,wBAAyB,GAEhCM,eAlBgB,WAmBdvJ,EAAKkJ,uBAAwB,GAE/BM,eArBgB,WAsBdxJ,EAAKkJ,uBAAwB,GAE/BO,mBAxBgB,WAyBdzJ,EAAK8I,cAAe,GAEtBY,kBA3BgB,WA4Bd1J,EAAK8I,cAAe,GAEtB7c,iBA9BgB,WA+Bd+T,EAAKxU,eAAgB,GAEvBme,gBAjCgB,WAkCd3J,EAAKgJ,iBAAkB,MC5ChBY,GAAYjK,GAAUW,MAAM,QACtC9D,MAAM,CACLE,KAAMkD,IAAM2D,SAASlD,GAAW,IAChCta,SAAU6Z,IAAM2D,SAAS/B,GAAe,IACxCqI,KAAMjK,IAAM2D,SAASb,GAAW,IAChCoH,OAAQlK,IAAM2D,SAASL,GAAa,IACpC7L,IAAKuI,IAAM2D,SAASiC,GAAU,IAC9B9gB,MAAOkb,IAAM2D,SAAS8C,GAAY,IAClCvgB,SAAU8Z,IAAM2D,SAASH,GAAe,IACxCna,KAAM2W,IAAM2D,SAASqF,GAAW,MAEjC1I,MAAM,SAAAF,GAAI,MAAK,CACd,sBACE,MAAO,CACLA,EAAKtD,KACLsD,EAAK/W,KACL+W,EAAKja,SACLia,EAAKla,SACLka,EAAKtb,MACLsb,EAAK3I,SAIV0S,OAAO,SAAA/J,GACN,IAAIgK,EACE5gB,EAAc6gB,aAAWC,KAAI,GACnC,MAAO,CACLhK,MAAO,CACL,kBACE,OAAO9W,EAAY8Y,QAGvBnC,QAAS,CACPoK,YADO,WACQ,IAAD,EAC2B1K,YAAYO,GAAzBV,GADd,EACJvZ,SADI,EACMsR,IADN,mCAEZ2S,EAAkB1K,GAEpB8K,MALO,WAML5K,YAAcQ,EAAMgK,IAEtBK,KAAK,WAAD,2BAAE,sBAAAhkB,EAAA,qEACEqR,QAAQ4S,IAAItK,EAAKuK,gBAAgBlT,IAAI2H,KADvC,OAEJgL,EAAgBjkB,SAAW0Z,YAAYO,EAAKja,UAC5Cia,EAAKxW,IAAI,eACTJ,EAAYqZ,KAAI,GAJZ,yCAAF,kDAAC,OCZb+H,IAAS7P,OAAO,kBA/BH,YdMN,WAAqD,IAA/B8P,EAA8B,uDAAJ,GACrDrlB,IAAM8G,UAAU,WACVue,EAAKC,YAAc3Q,GACrB2E,IAAQiM,SAAS3a,OAAOlK,SAASoW,OAElC,CAACuO,EAAKC,aACFhM,IcXPkM,CAAa,CAAEF,YAAY,IAC3BG,YAAc7gB,IAAU4F,WAExB,IAAMkb,EAAW1lB,IAAMyY,SAJN,EAKFzY,IAAMC,SAAS,WAC5B,IAAM0lB,EAAWnB,GAAUoB,OAAO,IAElC,OADAF,EAAS/M,QAAUgN,EAASV,OACrBU,IAHFtiB,EALU,sBAWArD,IAAMC,SAAS,WAC9B,IAAM4lB,ECfH,SAA4BxiB,EAAkBqiB,GACnD,IAAMI,EAAQ,sCAAG,gCAAA7kB,EAAA,qEACTykB,EADS,WAEXriB,EAAKiU,KAAKE,MAFC,yCAGNnU,EAAKiU,KAAKE,OAHJ,uBAKiBuO,0BAAgBnhB,IAAUuF,UAL3C,uBAKPqN,EALO,EAKPA,MAAOD,EALA,EAKAA,OACflU,EAAKiU,KAAK8D,aAAa5D,EAAOD,GANf,kBAORC,GAPQ,0CAAH,qDAYd,OAAOwO,oCACLC,yBAAe,CAAEH,aACjBI,6BAJc,kBAAM7iB,EAAKQ,KAAKM,WAK9BgiB,wBAAc,CAAEC,SAAShc,IACzBic,4BACAC,8BACAC,4BAAkB3hB,IAAUuF,WDJVqc,CAAmBnjB,EAAMqiB,EAAS/M,SAGpD,OADAtV,EAAK/D,MAAMub,UAAUgL,GACdA,IAJFnL,EAXU,oBAkBjB,OACE,kBAAC,IAAD,CAAcjU,MAAOpD,GACnB,kBAAC,iBAAD,CAAgBqX,OAAQA,GACtB,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,WAQI,MAAUxE,SAASuQ,eAAe,SAElDC,eAAaC,SAAS,CACpBC,YAAY,EACZC,SAAU,SAACC,GACTC,WAAW,WAEPnc,OAAOoc,QACLtjB,EAAA,EAAK,EAAD,oFAGNojB,EAAGG,YAAY,iBAEhB,QAIHtI,UAAUuI,eACZvI,UAAUuI,cAAcC,iBAAiB,UAAW,SAAAC,GAC/B,mBAAfA,EAAMvf,MACR+C,OAAOlK,SAASuT,Y,2rBE7Df,IAAMoT,EAAgBC,YAAOC,KAAV,gEAAGD,CAAH,0LAGJE,EAAU,aACdA,EAAU,aAEJA,EAAU,kBACdA,EAAU,mBAOjBC,EAAkBH,YAAOC,KAAV,kEAAGD,CAAH,4IAGNE,EAAU,YACdA,EAAU,YAEJA,EAAU,iBACdA,EAAU,kBASjBE,EAAqBJ,YAChC,cAAGK,SAAH,EAAavf,MAAb,IAAuBgP,EAAvB,2CACE,kBAAC,IAAWA,KAFe,qEAAGkQ,CAAH,SAK3B,gBAAGlf,EAAH,EAAGA,MAAOuf,EAAV,EAAUA,SAAV,OAA8CC,YAA7C,IAGCC,YAHD,IAIqBF,EAAWvf,EAAMM,SAAWN,EAAMY,YAEtD8e,YAND,IAOqBH,EAAWvf,EAAMM,SAAW,SAChCif,EAAWvf,EAAMM,SAAWN,EAAMY,WACzC2e,EAAWvf,EAAMW,aAAeX,EAAMc,eAG3Cye,EAAWvf,EAAMU,cAAgBV,EAAMa,gBAEzB0e,EAAWvf,EAAMU,cAAgBV,EAAMa,gBAC9C0e,EAAWvf,EAAMW,aAAeX,EAAMc,kBAKvD,SAASse,EAAU3nB,GACjB,OAAO,qBAAGuI,MAAuCvI,M,8OC3DtCkoB,EAAmB,IAEnBC,EAAU,SAAA5Q,GAAK,OAC1B,kBAAC,IAAD,iBAAqBA,EAArB,CAA4B6Q,SAAUF,MAE3BG,EAAS,SAAA9Q,GAAK,OACzB,kBAAC,IAAD,iBAAqBA,EAArB,CAA4B+Q,SAAUJ,MAmB3BF,EAAe,kBAAaD,YAAZ,CAAD,kCACLG,EAAmB,GAEpCH,IAAG,WAAH,eAIOE,EAAc,kBAAaF,YAAZ,CAAD,kCACJG,EAAmB,GAEpCH,IAAG,WAAH,iB","file":"static/js/main.241fe614.chunk.js","sourcesContent":["import { FGeoPointFragment } from '../graph/generated'\n\nexport type GeoPoint = LegacyOmit<FGeoPointFragment, '__typename'>\n\nexport const gpsToLatLngLit = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\n/* global google */\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import './Modal.css'\n\nimport React from 'react'\nimport {\n  Container,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalProps,\n} from 'reactstrap'\n\ninterface IProps extends ModalProps {\n  isOpen: boolean\n  headerText: string\n  onClose?(): void\n}\n\nexport const AlertModal: React.FC<IProps> = ({\n  isOpen,\n  headerText,\n  onClose,\n  children,\n  ...modalProps\n}) => (\n  <Modal\n    isOpen={isOpen}\n    toggle={onClose}\n    className=\"modal__container\"\n    {...modalProps}\n    data-testid=\"alertModal\"\n  >\n    <ModalHeader tag={Container} toggle={onClose} className=\"modal__header\">\n      <span>{headerText}</span>\n    </ModalHeader>\n    <ModalBody className=\"modal__body\">\n      <div className=\"modal__body__content\">{children}</div>\n    </ModalBody>\n  </Modal>\n)\n","import { useRoot } from '../app/useRoot'\n\nexport function useOrderModel() {\n  const { order } = useRoot()\n  return order\n}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import React from 'react'\n\nimport { AlertModal } from '../common/AlertModal'\n\nexport function useAlertModal() {\n  const [alertModal, setAlertModal] = React.useState<ReactNode>(null)\n\n  const makeAlert = React.useCallback(\n    (header: string, body: ReactNode | string) => {\n      setAlertModal(\n        React.createElement(\n          AlertModal,\n          {\n            isOpen: true,\n            onClose: () => setAlertModal(null),\n            headerText: header,\n          },\n          body,\n        ),\n      )\n    },\n    [],\n  )\n\n  return [alertModal, makeAlert] as [ReactNode, typeof makeAlert]\n}\n","import { Sentry } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { useRoot } from '../../../app/useRoot'\nimport {\n  useMDeliveryOrderCreate,\n  useMPickupOrderCreate,\n} from '../../../graph/generated'\n\nexport function useOrderCreate(onConfirm: () => void) {\n  const { order, location, business } = useRoot()\n\n  const [deliveryOrderCreate] = useMDeliveryOrderCreate()\n  const [pickupOrderCreate] = useMPickupOrderCreate()\n\n  const createDeliveryOrder = React.useCallback(async () => {\n    if (!location.geoPoint) {\n      return\n    }\n    if (location.branchId) {\n      order.setBranch(location.branchId)\n    }\n    const result = await deliveryOrderCreate({\n      gps: location.geoPoint,\n      orderOrigin: business.orderOrigin,\n      ...business.brandOrBranch,\n    })\n    if (result) {\n      if (location.branchId && result.order.branch.id !== location.branchId) {\n        Sentry.withScope(scope => {\n          scope.setExtras({\n            requestedBranchId: location.branchId,\n            createdOrderId: result.order.id,\n            createdBranchId: result.order.branch.id,\n          })\n          Sentry.captureMessage(\n            'Delivery order was created for different branch.',\n          )\n        })\n      }\n      order.orderCreated(result.order)\n      onConfirm()\n    }\n  }, [business, deliveryOrderCreate, location, onConfirm, order])\n\n  const createPickupOrder = async (branchId: ID) => {\n    // it's necessary to set asap so correct data are displayed further\n    order.setBranch(branchId)\n    const result = await pickupOrderCreate({\n      branchId,\n      orderOrigin: business.orderOrigin,\n    })\n    if (result) {\n      if (result.order.branch.id !== branchId) {\n        Sentry.withScope(scope => {\n          scope.setExtras({\n            requestedBranchId: branchId,\n            createdOrderId: result.order.id,\n            createdBranchId: result.order.branch.id,\n          })\n          Sentry.captureMessage(\n            'Pickup order was created for different branch.',\n          )\n        })\n      }\n      order.orderCreated(result.order)\n      onConfirm()\n    }\n  }\n\n  return { createDeliveryOrder, createPickupOrder }\n}\n","import { format, formatWithOptions, parse } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\n\nimport { FJsonAddressFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const formatTime = format('H:mm')\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const parseTime = parse('HH:mm')\n\nexport const formatAddress = (address: FJsonAddressFragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const RootProvider = rootContext.Provider\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useAutorun } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useRoot } from './app/useRoot'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const root = useRoot()\n  const { user } = root\n  const [, forceUpdate] = React.useState(1)\n\n  useAutorun(async () => {\n    if (root.initialized && !user.languageActivated) {\n      await loadCatalog(user.language)\n      user.log(`loaded language \"${user.language}\" catalog`)\n      i18n.activate(user.language)\n      user.activateLanguage()\n      forceUpdate(i => i + 1)\n    }\n  })\n\n  return <I18nProvider i18n={i18n}>{children}</I18nProvider>\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { debounce } from 'debounce'\nimport { useFormikContext } from 'formik'\nimport localforage from 'localforage'\nimport { when } from 'mobx'\nimport React from 'react'\n\nimport { useRoot } from '../../app/useRoot'\nimport { appConfig } from '../../config'\nimport { TOrderModel } from '../../models/OrderModel'\nimport { OrderFormValues } from './OrderFormSetup'\n\nexport const memoryKey = `${appConfig.persistenceKey}_orderForm`\n\nconst catchError = err => {\n  Sentry.withScope(scope => {\n    scope.setTag('persistence', memoryKey)\n    Sentry.captureException(err)\n  })\n}\n\nconst writeMemory = debounce((values: OrderFormValues, done: () => void) => {\n  localforage.setItem(memoryKey, {\n    firstname: values.firstname,\n    lastname: values.lastname,\n    email: values.email,\n    phonePrefix: values.phonePrefix,\n    phone: values.phone,\n    note: values.note,\n  })\n  done()\n}, 3000)\n\nconst readMemory = (): Promise<any> => {\n  return localforage.getItem(memoryKey).catch(catchError)\n}\n\nexport const OrderFormMemory = React.memo(() => {\n  const { user } = useRoot()\n  const formik = useFormikContext<OrderFormValues>()\n\n  const applyMemory = React.useCallback(\n    (memory: OrderFormValues) => {\n      if (user.memoryApplied) {\n        return\n      }\n      Object.keys(memory).forEach((field: any) => {\n        const value = memory[field]\n        formik.setFieldValue(field, value)\n        if (value.length) {\n          formik.setFieldTouched(field, true)\n        }\n      })\n      user.setMemoryApplied()\n      user.log('applied order form memory')\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [user],\n  )\n\n  React.useEffect(() => {\n    readMemory().then(memory => {\n      if (memory) {\n        applyMemory(memory)\n        return\n      }\n      // legacy memory from OrderModel\n      when(\n        () => user.root.initialized,\n        () => {\n          applyMemory(getLegacyMemory(user.root.order))\n        },\n      )\n    })\n  }, [applyMemory, user])\n\n  React.useEffect(() => {\n    if (!(user.shouldRememberForm && user.memoryApplied)) {\n      return\n    }\n    writeMemory(formik.values, () => {\n      user.log('written order form memory')\n    })\n  }, [formik.values, user])\n\n  return null\n})\n\nfunction getLegacyMemory(orderModel: TOrderModel) {\n  orderModel.log('using legacy memory')\n  const { firstname, lastname, email, phone, phonePrefix, note } = orderModel\n  return {\n    firstname,\n    lastname,\n    email,\n    phone,\n    phonePrefix,\n    note,\n    agreements: [],\n  }\n}\n","import Color from 'color'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { ThemeContext, ThemeProvider } from 'styled-components/macro'\n\nimport {\n  QThemeStyleStyles,\n  QThemeStyleVariables,\n  useQThemeStyle,\n} from '../graph/generated'\nimport { useRoot } from './useRoot'\n\ninterface IProps {\n  children: ReactNode[]\n}\n\nconst ThemeSwitchProvider = observer<IProps>(({ children }) => {\n  const { order, business } = useRoot()\n\n  const variables: QThemeStyleVariables = {\n    brandId: business.isBrand && !order.hasOrder ? business.brandId : undefined,\n    branchId:\n      business.isBrand && !order.hasOrder\n        ? undefined\n        : order.branchId || business.branchId,\n  }\n\n  const { data } = useQThemeStyle(variables, {\n    skip: !business.isValid && !order.hasOrder,\n    context: { noBatch: true },\n    fetchPolicy: 'cache-first',\n  })\n\n  const theme = React.useMemo(\n    () => getTheme(data && data.theme && data.theme.styles),\n    [data],\n  )\n\n  return (\n    <ThemeProvider theme={theme}>\n      <>{children}</>\n    </ThemeProvider>\n  )\n})\n\nexport function useTheme() {\n  return React.useContext(ThemeContext) as TTheme\n}\n\nexport function getTheme(styles?: QThemeStyleStyles) {\n  // Fallback colors\n  const defaultPrimary = '#54984a'\n  const defaultSecondary = '#99230e'\n  const defaultTertiary = '#d9a700'\n\n  const defaultTheme = {\n    primary: defaultPrimary,\n    secondary: defaultSecondary,\n    tertiary: defaultTertiary,\n    primaryHover: calcHoverColor(defaultPrimary),\n    secondaryHover: calcHoverColor(defaultPrimary),\n    tertiaryHover: calcHoverColor(defaultTertiary),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    storeLogo: null,\n    storeLogoMobile: null,\n    backgroundCart: undefined,\n  }\n\n  if (styles) {\n    return {\n      ...defaultTheme,\n      primary: styles.active || defaultPrimary,\n      secondary: styles.main || defaultSecondary,\n      tertiary: styles.mainSecondary || defaultTertiary,\n      primaryHover: styles.active && calcHoverColor(styles.active),\n      secondaryHover: styles.main && calcHoverColor(styles.main),\n      tertiaryHover:\n        styles.mainSecondary && calcHoverColor(styles.mainSecondary),\n      storeLogo: styles.storeLogo,\n      storeLogoMobile: styles.storeLogoMobile,\n      backgroundCart: styles.backgroundCart,\n    }\n  }\n\n  return defaultTheme\n}\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport type TTheme = ReturnType<typeof getTheme>\n\nexport default ThemeSwitchProvider\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://app.dev.speedlo.cloud',\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  googleMapsApi: process.env.REACT_APP_LOCAL_GOOGLE_API_KEY,\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: '',\n  pageTitleSuffix: 'LOCAL',\n  analytics: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n    analytics: '',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n    analytics: 'UA-4990100-13',\n    googleMapsApi: 'AIzaSyCDn-SXz6ngOCNVwHR8zDY38JopNFVIrsU',\n  })\n}\n","// @ts-ignore temporary before figuring out a logging solution that works in prod\nwindow.localStorage.setItem('debug', 'doveze*')\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n\n  readonly sector?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderWifiCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly sector?: Maybe<string>\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderStaffImport {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly companyBranch: string\n\n  readonly acceptedAt?: Maybe<string>\n\n  readonly orderRecipes: ReadonlyArray<InputOrderRecipeCreates>\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly invoice: string\n\n  readonly invoiceNumber: number\n\n  readonly paymentMethods: ReadonlyArray<InputOrderPaymentMethodsCreate>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  Driver = 'DRIVER',\n  FeAdmin = 'FE_ADMIN',\n  FeCompletion = 'FE_COMPLETION',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n  De = 'DE',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n  WifiDelayed = 'WIFI_DELAYED',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n}\n/** Possible sector types */\nexport enum SectorTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible order origin categories */\nexport enum OrderOriginCategoryEnum {\n  Website = 'WEBSITE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Doveze = 'DOVEZE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type QBusinessLookupVariables = {\n  readonly code?: Maybe<string>\n  readonly url?: Maybe<string>\n}\n\nexport type QBusinessLookupQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lookup: QBusinessLookupLookup\n}\n\nexport type QBusinessLookupLookup = {\n  readonly __typename?: 'CompanyBrandLookUp'\n\n  readonly branch: Maybe<QBusinessLookupBranch>\n\n  readonly isBrand: boolean\n\n  readonly isMobileApp: boolean\n\n  readonly knownBasePath: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly defaultLanguage: LanguageEnum\n}\n\nexport type QBusinessLookupBranch = FCompanyBranchFragment\n\nexport type QThemeStyleVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QThemeStyleQuery = {\n  readonly __typename?: 'Query'\n\n  readonly theme: QThemeStyleTheme\n}\n\nexport type QThemeStyleTheme = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly styles: QThemeStyleStyles\n}\n\nexport type QThemeStyleStyles = {\n  readonly __typename?: 'GraphicStyle'\n\n  readonly active: string\n\n  readonly main: string\n\n  readonly mainSecondary: string\n\n  readonly storeLogo: string\n\n  readonly storeLogoMobile: string\n\n  readonly backgroundCart: string\n}\n\nexport type MAddToCartVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type MAddToCartMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly add: MAddToCartAdd\n}\n\nexport type MAddToCartAdd = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment\n\nexport type MChangeCartItemVariables = {\n  readonly orderId: string\n  readonly itemId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n  readonly withGoods: boolean\n}\n\nexport type MChangeCartItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly change: MChangeCartItemChange\n}\n\nexport type MChangeCartItemChange = FCartSummaryFragment & FCartGoodsFragment\n\nexport type MRemoveCartItemVariables = {\n  readonly itemId: string\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type MRemoveCartItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly remove: MRemoveCartItemRemove\n}\n\nexport type MRemoveCartItemRemove = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment\n\nexport type QCartVariables = {\n  readonly orderId: string\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type QCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QCartOrder\n}\n\nexport type QCartOrder = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment &\n  FCartStaticFragment\n\nexport type QCartItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCartItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCartItemItem\n}\n\nexport type QCartItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCartItemRecipe\n\n  readonly sideDishes: ReadonlyArray<QCartItemSideDishes>\n}\n\nexport type QCartItemRecipe = FRecipeDetailFragment\n\nexport type QCartItemSideDishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCartItem_Recipe\n}\n\nexport type QCartItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCartRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCartRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCartRecipeRecipe\n}\n\nexport type QCartRecipeRecipe = FRecipeDetailFragment\n\nexport type QOrderFinishVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderFinishQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFinishOrder\n\n  readonly companyBranch: QOrderFinishCompanyBranch\n\n  readonly androidApp: Maybe<QOrderFinishAndroidApp>\n\n  readonly iosApp: Maybe<QOrderFinishIosApp>\n}\n\nexport type QOrderFinishOrder = FOrderFinishedFragment\n\nexport type QOrderFinishCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly phone: string\n\n  readonly company: QOrderFinishCompany\n}\n\nexport type QOrderFinishCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type QOrderFinishAndroidApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QOrderFinishIosApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QFoodMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QFoodMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareCategories: ReadonlyArray<QFoodMenuWareCategories>\n}\n\nexport type QFoodMenuWareCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly recipes: ReadonlyArray<QFoodMenuRecipes>\n} & FFoodMenuCategoryFragment\n\nexport type QFoodMenuRecipes = FFoodMenuRecipeFragment\n\nexport type QFoodMenuCartPresenceVariables = {\n  readonly orderId: string\n}\n\nexport type QFoodMenuCartPresenceQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QFoodMenuCartPresenceOrder\n}\n\nexport type QFoodMenuCartPresenceOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FCartPresenceFragment\n\nexport type MDeliveryOrderCreateVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type MDeliveryOrderCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: MDeliveryOrderCreateOrder\n}\n\nexport type MDeliveryOrderCreateOrder = FOrderCreateFragment\n\nexport type MPickupOrderCreateVariables = {\n  readonly branchId: string\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type MPickupOrderCreateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: MPickupOrderCreateOrder\n}\n\nexport type MPickupOrderCreateOrder = FOrderCreateFragment\n\nexport type QInitialDeliveryLocationVariables = {}\n\nexport type QInitialDeliveryLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly location: QInitialDeliveryLocationLocation\n}\n\nexport type QInitialDeliveryLocationLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly gpsCoordinates: Maybe<QInitialDeliveryLocationGpsCoordinates>\n}\n\nexport type QInitialDeliveryLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type QInitialLocationVariables = {}\n\nexport type QInitialLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly initialLocation: QInitialLocationInitialLocation\n}\n\nexport type QInitialLocationInitialLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly gpsCoordinates: Maybe<QInitialLocationGpsCoordinates>\n}\n\nexport type QInitialLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type QPickupMapVariables = {\n  readonly branchSpecific: boolean\n  readonly brandId?: Maybe<string>\n  readonly branchId: string\n}\n\nexport type QPickupMapQuery = {\n  readonly __typename?: 'Query'\n\n  readonly brand: ReadonlyArray<QPickupMapBrand>\n\n  readonly branch: QPickupMapBranch\n}\n\nexport type QPickupMapBrand = FPickupBranchFragment\n\nexport type QPickupMapBranch = FPickupBranchFragment\n\nexport type QResolveLocationVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly address?: Maybe<string>\n  readonly latitude?: Maybe<number>\n  readonly longitude?: Maybe<number>\n}\n\nexport type QResolveLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: QResolveLocationResolveLocation\n}\n\nexport type QResolveLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly finalAddress: Maybe<QResolveLocationFinalAddress>\n\n  readonly isResolved: boolean\n\n  readonly isValidAddress: boolean\n\n  readonly inDeliveryLocation: boolean\n\n  readonly gpsCoordinates: Maybe<QResolveLocationGpsCoordinates>\n\n  readonly companyBranch: Maybe<QResolveLocationCompanyBranch>\n\n  readonly zone: Maybe<QResolveLocationZone>\n}\n\nexport type QResolveLocationFinalAddress = FJsonAddressFragment\n\nexport type QResolveLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type QResolveLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type QResolveLocationZone = {\n  readonly __typename?: 'Zone'\n\n  readonly id: string\n}\n\nexport type QMobileShopIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QMobileShopIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: QMobileShopIntroIntro\n}\n\nexport type QMobileShopIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type QMobileShopStatusVariables = {\n  readonly branchId: string\n}\n\nexport type QMobileShopStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: QMobileShopStatusBranch\n}\n\nexport type QMobileShopStatusBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n} & FCompanyBranchStatusFragment\n\nexport type QSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type QSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<QSmartBannerApp>\n}\n\nexport type QSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type MOrderDeliveryTimeVariables = {\n  readonly orderId: string\n  readonly deliverAt?: Maybe<string>\n  readonly withGoods: boolean\n}\n\nexport type MOrderDeliveryTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderDeliveryTimeUpdateOrder\n}\n\nexport type MOrderDeliveryTimeUpdateOrder = FCartSummaryFragment &\n  FCartGoodsFragment\n\nexport type MOrderFinishVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MOrderFinishMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MOrderFinishFinishOrder\n}\n\nexport type MOrderFinishFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type MOrderPromoAddVariables = {\n  readonly orderId: string\n  readonly code: string\n  readonly withGoods: boolean\n}\n\nexport type MOrderPromoAddMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MOrderPromoAddAddOrderPromoCode\n}\n\nexport type MOrderPromoAddAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MOrderPromoAddOrder\n}\n\nexport type MOrderPromoAddOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoAddPromoCodes>\n} & (FCartSummaryFragment & FCartGoodsFragment)\n\nexport type MOrderPromoAddPromoCodes = FPromoCodeFragment\n\nexport type MOrderPromoRemoveVariables = {\n  readonly orderId: string\n  readonly codeId: string\n  readonly withGoods: boolean\n}\n\nexport type MOrderPromoRemoveMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MOrderPromoRemoveRemoveOrderPromoCode\n}\n\nexport type MOrderPromoRemoveRemoveOrderPromoCode = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoRemovePromoCodes>\n} & (FCartSummaryFragment & FCartGoodsFragment)\n\nexport type MOrderPromoRemovePromoCodes = FPromoCodeFragment\n\nexport type MOrderTipUpdateVariables = {\n  readonly orderId: string\n  readonly tips: number\n  readonly withGoods: boolean\n}\n\nexport type MOrderTipUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderTipUpdateUpdateOrder\n}\n\nexport type MOrderTipUpdateUpdateOrder = FCartSummaryFragment &\n  FCartGoodsFragment\n\nexport type MSubmitOrderVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MSubmitOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly submitOrder: MSubmitOrderSubmitOrder\n}\n\nexport type MSubmitOrderSubmitOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type QOrderFormVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFormOrder\n}\n\nexport type QOrderFormOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QOrderFormAgreementsVariables = {\n  readonly input: InputVamStatus\n}\n\nexport type QOrderFormAgreementsQuery = {\n  readonly __typename?: 'Query'\n\n  readonly agreements: ReadonlyArray<QOrderFormAgreementsAgreements>\n}\n\nexport type QOrderFormAgreementsAgreements = {\n  readonly __typename?: 'VAMAgreement'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly description: string\n\n  readonly isConfirmed: boolean\n\n  readonly isMandatory: boolean\n}\n\nexport type QOrderPaymentStatusVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPaymentStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly status: QOrderPaymentStatusStatus\n}\n\nexport type QOrderPaymentStatusStatus = {\n  readonly __typename?: 'OrderOnlinePaymentStatus'\n\n  readonly isSuccess: boolean\n\n  readonly userErrors: ReadonlyArray<string>\n}\n\nexport type QOrderPromoCodesVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPromoCodesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderPromoCodesOrder\n}\n\nexport type QOrderPromoCodesOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<QOrderPromoCodesPromoCodes>\n}\n\nexport type QOrderPromoCodesPromoCodes = FPromoCodeFragment\n\nexport type QOrderTimePickerVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderTimePickerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QOrderTimePickerCompanyBranch\n}\n\nexport type QOrderTimePickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly businessHours: ReadonlyArray<QOrderTimePickerBusinessHours>\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly delayedDeliveryEnabled: boolean\n}\n\nexport type QOrderTimePickerBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n}\n\nexport type QShopHeaderBranchVariables = {\n  readonly branchId: string\n}\n\nexport type QShopHeaderBranchQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: QShopHeaderBranchBranch\n}\n\nexport type QShopHeaderBranchBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly address: QShopHeaderBranchAddress\n} & (FShopOpeningHoursFragment & FCompanyBranchStatusFragment)\n\nexport type QShopHeaderBranchAddress = FAddressFragment\n\nexport type QShopHeaderIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QShopHeaderIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: QShopHeaderIntroIntro\n}\n\nexport type QShopHeaderIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly brand: FCompanyBranchBrand\n\n  readonly company: FCompanyBranchCompany\n\n  readonly address: FCompanyBranchAddress\n\n  readonly phone: string\n\n  readonly supportedLanguages: ReadonlyArray<LanguageEnum>\n}\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly code: string\n}\n\nexport type FCompanyBranchCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FJsonAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly location: Maybe<FAddressLocation>\n}\n\nexport type FAddressLocation = FJsonAddressFragment\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly formattedValue: string\n}\n\nexport type FRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sideDishCount: number\n}\n\nexport type FCompanyBranchStatusFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly businessHours: ReadonlyArray<FCompanyBranchStatusBusinessHours>\n\n  readonly defaultDeliveryTimeEnabled: boolean\n\n  readonly defaultPickupTimeEnabled: boolean\n}\n\nexport type FCompanyBranchStatusBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n}\n\nexport type FPromoCodeFragment = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type FCartGoodsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly items: ReadonlyArray<FCartGoodsItems>\n\n  readonly coverPrice: FCartGoodsCoverPrice\n\n  readonly transportFee: FCartGoodsTransportFee\n\n  readonly discounts: ReadonlyArray<FCartGoodsDiscounts>\n\n  readonly totalDiscount: FCartGoodsTotalDiscount\n\n  readonly tip: FCartGoodsTip\n}\n\nexport type FCartGoodsItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly automatic: boolean\n\n  readonly price: FCartGoodsPrice\n\n  readonly sideDishes: ReadonlyArray<FCartGoodsSideDishes>\n} & FCartItemFragment\n\nexport type FCartGoodsPrice = FPriceFragment\n\nexport type FCartGoodsSideDishes = FCartItemFragment\n\nexport type FCartGoodsCoverPrice = FPriceFragment\n\nexport type FCartGoodsTransportFee = FPriceFragment\n\nexport type FCartGoodsDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCartGoods_Price\n}\n\nexport type FCartGoods_Price = FPriceFragment\n\nexport type FCartGoodsTotalDiscount = FPriceFragment\n\nexport type FCartGoodsTip = FPriceFragment\n\nexport type FCartItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartItemRecipe\n}\n\nexport type FCartItemRecipe = FRecipeFragment\n\nexport type FCartStaticFragment = {\n  readonly __typename?: 'Order'\n\n  readonly minimalOrderPrice: Maybe<FCartStaticMinimalOrderPrice>\n\n  readonly deliveryType: Maybe<FCartStaticDeliveryType>\n}\n\nexport type FCartStaticMinimalOrderPrice = FPriceFragment\n\nexport type FCartStaticDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FCartSummaryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly totalSum: FCartSummaryTotalSum\n}\n\nexport type FCartSummaryTotalSum = FPriceFragment\n\nexport type FRecipeDetailFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly categories: ReadonlyArray<FRecipeDetailCategories>\n}\n\nexport type FRecipeDetailCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly maxRecipesCount: number\n\n  readonly sideDishes: ReadonlyArray<FRecipeDetailSideDishes>\n}\n\nexport type FRecipeDetailSideDishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FRecipeDetailPrice\n}\n\nexport type FRecipeDetailPrice = FPriceFragment\n\nexport type FOrderFinishedFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly items: ReadonlyArray<FOrderFinishedItems>\n\n  readonly totalSum: FOrderFinishedTotalSum\n\n  readonly orderPayments: ReadonlyArray<FOrderFinishedOrderPayments>\n}\n\nexport type FOrderFinishedItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sideDishes: ReadonlyArray<FOrderFinishedSideDishes>\n} & FCartItemFragment\n\nexport type FOrderFinishedSideDishes = FCartItemFragment\n\nexport type FOrderFinishedTotalSum = FPriceFragment\n\nexport type FOrderFinishedOrderPayments = {\n  readonly __typename?: 'OrderPaymentMethod'\n\n  readonly paymentMethod: FOrderFinishedPaymentMethod\n}\n\nexport type FOrderFinishedPaymentMethod = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly paymentType: FOrderFinishedPaymentType\n}\n\nexport type FOrderFinishedPaymentType = {\n  readonly __typename?: 'PaymentType'\n\n  readonly enum: PaymentTypeEnum\n}\n\nexport type FCartPresenceFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly presence: ReadonlyArray<FCartPresencePresence>\n}\n\nexport type FCartPresencePresence = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartPresenceRecipe\n}\n\nexport type FCartPresenceRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type FFoodMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n}\n\nexport type FFoodMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FFoodMenuRecipePrice\n\n  readonly sideDishCount: number\n}\n\nexport type FFoodMenuRecipePrice = FPriceFragment\n\nexport type FOrderCreateFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly branch: FOrderCreateBranch\n}\n\nexport type FOrderCreateBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type FPickupBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly gps: FPickupBranchGps\n\n  readonly address: FPickupBranchAddress\n\n  readonly pickupEnabled: boolean\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nexport type FPickupBranchGps = FGeoPointFragment\n\nexport type FPickupBranchAddress = FAddressFragment\n\nexport type FShopOpeningHoursFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      id\n      country {\n        phonePrefix\n      }\n    }\n    phone\n    supportedLanguages(userSpecific: true)\n  }\n`\n\nexport const FPromoCodeFragmentDoc = gql`\n  fragment FPromoCode on PromoCode {\n    id\n    code\n  }\n`\n\nexport const FRecipeFragmentDoc = gql`\n  fragment FRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FCartItemFragmentDoc = gql`\n  fragment FCartItem on OrderRecipe {\n    id\n    recipe {\n      ...FRecipe\n    }\n  }\n\n  ${FRecipeFragmentDoc}\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const FCartGoodsFragmentDoc = gql`\n  fragment FCartGoods on Order {\n    items {\n      ...FCartItem\n      automatic\n      price: priceWithSideDishes {\n        ...FPrice\n      }\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartStaticFragmentDoc = gql`\n  fragment FCartStatic on Order {\n    minimalOrderPrice {\n      ...FPrice\n    }\n    deliveryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartSummaryFragmentDoc = gql`\n  fragment FCartSummary on Order {\n    id\n    countWares\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FRecipeDetailFragmentDoc = gql`\n  fragment FRecipeDetail on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      maxRecipesCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderFinishedFragmentDoc = gql`\n  fragment FOrderFinished on Order {\n    id\n    items {\n      ...FCartItem\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    totalSum {\n      ...FPrice\n    }\n    orderPayments {\n      paymentMethod {\n        paymentType {\n          enum\n        }\n      }\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartPresenceFragmentDoc = gql`\n  fragment FCartPresence on Order {\n    id\n    presence: items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FFoodMenuCategoryFragmentDoc = gql`\n  fragment FFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n`\n\nexport const FFoodMenuRecipeFragmentDoc = gql`\n  fragment FFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...FPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderCreateFragmentDoc = gql`\n  fragment FOrderCreate on Order {\n    id\n    branch: companyBranch {\n      id\n    }\n  }\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FJsonAddressFragmentDoc = gql`\n  fragment FJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n  }\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on Address {\n    id\n    location {\n      ...FJsonAddress\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport const FCompanyBranchStatusFragmentDoc = gql`\n  fragment FCompanyBranchStatus on CompanyBranch {\n    id\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours: businessHoursIntervals {\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n    defaultDeliveryTimeEnabled\n    defaultPickupTimeEnabled\n  }\n`\n\nexport const FPickupBranchFragmentDoc = gql`\n  fragment FPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport const FShopOpeningHoursFragmentDoc = gql`\n  fragment FShopOpeningHours on CompanyBranch {\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const QBusinessLookupDocument = gql`\n  query QBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...FCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n      defaultLanguage: userDefaultLanguage\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQBusinessLookup(\n  variables?: QBusinessLookupVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBusinessLookupVariables>,\n) {\n  return Hooks.useQuery<QBusinessLookupQuery, QBusinessLookupVariables>(\n    QBusinessLookupDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQBusinessLookup(\n  options?: Hooks.ExecutableQueryOptions<QBusinessLookupVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QBusinessLookupQuery,\n    QBusinessLookupVariables\n  >(QBusinessLookupDocument, options)\n}\n\nexport const QThemeStyleDocument = gql`\n  query QThemeStyle($brandId: ID, $branchId: ID) {\n    theme: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n\nexport function useQThemeStyle(\n  variables?: QThemeStyleVariables,\n  baseOptions?: Hooks.QueryHookOptions<QThemeStyleVariables>,\n) {\n  return Hooks.useQuery<QThemeStyleQuery, QThemeStyleVariables>(\n    QThemeStyleDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQThemeStyle(\n  options?: Hooks.ExecutableQueryOptions<QThemeStyleVariables>,\n) {\n  return Hooks.useExecutableQuery<QThemeStyleQuery, QThemeStyleVariables>(\n    QThemeStyleDocument,\n    options,\n  )\n}\n\nexport const MAddToCartDocument = gql`\n  mutation MAddToCart(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n    $withGoods: Boolean!\n    $withPresence: Boolean!\n  ) {\n    add: createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useMAddToCart(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddToCartMutation,\n    MAddToCartVariables\n  >,\n) {\n  return Hooks.useMutation<MAddToCartMutation, MAddToCartVariables>(\n    MAddToCartDocument,\n    baseOptions,\n  )\n}\n\nexport const MChangeCartItemDocument = gql`\n  mutation MChangeCartItem(\n    $orderId: ID!\n    $itemId: ID!\n    $sideDishes: [ID!]\n    $withGoods: Boolean!\n  ) {\n    change: updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMChangeCartItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangeCartItemMutation,\n    MChangeCartItemVariables\n  >,\n) {\n  return Hooks.useMutation<MChangeCartItemMutation, MChangeCartItemVariables>(\n    MChangeCartItemDocument,\n    baseOptions,\n  )\n}\n\nexport const MRemoveCartItemDocument = gql`\n  mutation MRemoveCartItem(\n    $itemId: ID!\n    $withGoods: Boolean!\n    $withPresence: Boolean!\n  ) {\n    remove: destroyOrderRecipe(id: $itemId) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useMRemoveCartItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveCartItemMutation,\n    MRemoveCartItemVariables\n  >,\n) {\n  return Hooks.useMutation<MRemoveCartItemMutation, MRemoveCartItemVariables>(\n    MRemoveCartItemDocument,\n    baseOptions,\n  )\n}\n\nexport const QCartDocument = gql`\n  query QCart($orderId: ID!, $withGoods: Boolean!, $withPresence: Boolean!) {\n    order(id: $orderId) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n      ...FCartStatic\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n  ${FCartStaticFragmentDoc}\n`\n\nexport function useQCart(\n  variables?: QCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartVariables>,\n) {\n  return Hooks.useQuery<QCartQuery, QCartVariables>(\n    QCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCart(\n  options?: Hooks.ExecutableQueryOptions<QCartVariables>,\n) {\n  return Hooks.useExecutableQuery<QCartQuery, QCartVariables>(\n    QCartDocument,\n    options,\n  )\n}\n\nexport const QCartItemDocument = gql`\n  query QCartItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FRecipeDetail\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FRecipeDetailFragmentDoc}\n`\n\nexport function useQCartItem(\n  variables?: QCartItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartItemVariables>,\n) {\n  return Hooks.useQuery<QCartItemQuery, QCartItemVariables>(\n    QCartItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCartItem(\n  options?: Hooks.ExecutableQueryOptions<QCartItemVariables>,\n) {\n  return Hooks.useExecutableQuery<QCartItemQuery, QCartItemVariables>(\n    QCartItemDocument,\n    options,\n  )\n}\n\nexport const QCartRecipeDocument = gql`\n  query QCartRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FRecipeDetail\n    }\n  }\n\n  ${FRecipeDetailFragmentDoc}\n`\n\nexport function useQCartRecipe(\n  variables?: QCartRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartRecipeVariables>,\n) {\n  return Hooks.useQuery<QCartRecipeQuery, QCartRecipeVariables>(\n    QCartRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQCartRecipe(\n  options?: Hooks.ExecutableQueryOptions<QCartRecipeVariables>,\n) {\n  return Hooks.useExecutableQuery<QCartRecipeQuery, QCartRecipeVariables>(\n    QCartRecipeDocument,\n    options,\n  )\n}\n\nexport const QOrderFinishDocument = gql`\n  query QOrderFinish($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      ...FOrderFinished\n    }\n    companyBranch(id: $branchId) {\n      id\n      phone\n      company {\n        id\n      }\n    }\n    androidApp: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: ANDROID\n    ) {\n      url\n    }\n    iosApp: mobileApplicationSettings(companyBranch: $branchId, platform: IOS) {\n      url\n    }\n  }\n\n  ${FOrderFinishedFragmentDoc}\n`\n\nexport function useQOrderFinish(\n  variables?: QOrderFinishVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFinishVariables>,\n) {\n  return Hooks.useQuery<QOrderFinishQuery, QOrderFinishVariables>(\n    QOrderFinishDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderFinish(\n  options?: Hooks.ExecutableQueryOptions<QOrderFinishVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderFinishQuery, QOrderFinishVariables>(\n    QOrderFinishDocument,\n    options,\n  )\n}\n\nexport const QFoodMenuDocument = gql`\n  query QFoodMenu($branchId: ID!) {\n    wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: MAIN\n      orderOriginCategory: DOVEZE\n      enabled: true\n      isAvailable: true\n    ) {\n      ...FFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...FFoodMenuRecipe\n      }\n    }\n  }\n\n  ${FFoodMenuCategoryFragmentDoc}\n  ${FFoodMenuRecipeFragmentDoc}\n`\n\nexport function useQFoodMenu(\n  variables?: QFoodMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuVariables>,\n) {\n  return Hooks.useQuery<QFoodMenuQuery, QFoodMenuVariables>(\n    QFoodMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQFoodMenu(\n  options?: Hooks.ExecutableQueryOptions<QFoodMenuVariables>,\n) {\n  return Hooks.useExecutableQuery<QFoodMenuQuery, QFoodMenuVariables>(\n    QFoodMenuDocument,\n    options,\n  )\n}\n\nexport const QFoodMenuCartPresenceDocument = gql`\n  query QFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...FCartPresence\n    }\n  }\n\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useQFoodMenuCartPresence(\n  variables?: QFoodMenuCartPresenceVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuCartPresenceVariables>,\n) {\n  return Hooks.useQuery<\n    QFoodMenuCartPresenceQuery,\n    QFoodMenuCartPresenceVariables\n  >(QFoodMenuCartPresenceDocument, variables, baseOptions)\n}\n\nexport function useExecutableQFoodMenuCartPresence(\n  options?: Hooks.ExecutableQueryOptions<QFoodMenuCartPresenceVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QFoodMenuCartPresenceQuery,\n    QFoodMenuCartPresenceVariables\n  >(QFoodMenuCartPresenceDocument, options)\n}\n\nexport const MDeliveryOrderCreateDocument = gql`\n  mutation MDeliveryOrderCreate(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...FOrderCreate\n    }\n  }\n\n  ${FOrderCreateFragmentDoc}\n`\n\nexport function useMDeliveryOrderCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MDeliveryOrderCreateMutation,\n    MDeliveryOrderCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MDeliveryOrderCreateMutation,\n    MDeliveryOrderCreateVariables\n  >(MDeliveryOrderCreateDocument, baseOptions)\n}\n\nexport const MPickupOrderCreateDocument = gql`\n  mutation MPickupOrderCreate($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...FOrderCreate\n    }\n  }\n\n  ${FOrderCreateFragmentDoc}\n`\n\nexport function useMPickupOrderCreate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MPickupOrderCreateMutation,\n    MPickupOrderCreateVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MPickupOrderCreateMutation,\n    MPickupOrderCreateVariables\n  >(MPickupOrderCreateDocument, baseOptions)\n}\n\nexport const QInitialDeliveryLocationDocument = gql`\n  query QInitialDeliveryLocation {\n    location: resolveLocation {\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\nexport function useQInitialDeliveryLocation(\n  variables?: QInitialDeliveryLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QInitialDeliveryLocationVariables>,\n) {\n  return Hooks.useQuery<\n    QInitialDeliveryLocationQuery,\n    QInitialDeliveryLocationVariables\n  >(QInitialDeliveryLocationDocument, variables, baseOptions)\n}\n\nexport function useExecutableQInitialDeliveryLocation(\n  options?: Hooks.ExecutableQueryOptions<QInitialDeliveryLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QInitialDeliveryLocationQuery,\n    QInitialDeliveryLocationVariables\n  >(QInitialDeliveryLocationDocument, options)\n}\n\nexport const QInitialLocationDocument = gql`\n  query QInitialLocation {\n    initialLocation: resolveLocation {\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\nexport function useQInitialLocation(\n  variables?: QInitialLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QInitialLocationVariables>,\n) {\n  return Hooks.useQuery<QInitialLocationQuery, QInitialLocationVariables>(\n    QInitialLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQInitialLocation(\n  options?: Hooks.ExecutableQueryOptions<QInitialLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QInitialLocationQuery,\n    QInitialLocationVariables\n  >(QInitialLocationDocument, options)\n}\n\nexport const QPickupMapDocument = gql`\n  query QPickupMap($branchSpecific: Boolean!, $brandId: ID, $branchId: ID!) {\n    brand: companyBranches(brand: $brandId) @skip(if: $branchSpecific) {\n      ...FPickupBranch\n    }\n    branch: companyBranch(id: $branchId) @include(if: $branchSpecific) {\n      ...FPickupBranch\n    }\n  }\n\n  ${FPickupBranchFragmentDoc}\n`\n\nexport function useQPickupMap(\n  variables?: QPickupMapVariables,\n  baseOptions?: Hooks.QueryHookOptions<QPickupMapVariables>,\n) {\n  return Hooks.useQuery<QPickupMapQuery, QPickupMapVariables>(\n    QPickupMapDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQPickupMap(\n  options?: Hooks.ExecutableQueryOptions<QPickupMapVariables>,\n) {\n  return Hooks.useExecutableQuery<QPickupMapQuery, QPickupMapVariables>(\n    QPickupMapDocument,\n    options,\n  )\n}\n\nexport const QResolveLocationDocument = gql`\n  query QResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      finalAddress {\n        ...FJsonAddress\n      }\n      isResolved\n      isValidAddress\n      inDeliveryLocation\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      companyBranch {\n        id\n        isOpen\n      }\n      zone {\n        id\n      }\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport function useQResolveLocation(\n  variables?: QResolveLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QResolveLocationVariables>,\n) {\n  return Hooks.useQuery<QResolveLocationQuery, QResolveLocationVariables>(\n    QResolveLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQResolveLocation(\n  options?: Hooks.ExecutableQueryOptions<QResolveLocationVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QResolveLocationQuery,\n    QResolveLocationVariables\n  >(QResolveLocationDocument, options)\n}\n\nexport const QMobileShopIntroDocument = gql`\n  query QMobileShopIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useQMobileShopIntro(\n  variables?: QMobileShopIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMobileShopIntroVariables>,\n) {\n  return Hooks.useQuery<QMobileShopIntroQuery, QMobileShopIntroVariables>(\n    QMobileShopIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMobileShopIntro(\n  options?: Hooks.ExecutableQueryOptions<QMobileShopIntroVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMobileShopIntroQuery,\n    QMobileShopIntroVariables\n  >(QMobileShopIntroDocument, options)\n}\n\nexport const QMobileShopStatusDocument = gql`\n  query QMobileShopStatus($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useQMobileShopStatus(\n  variables?: QMobileShopStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<QMobileShopStatusVariables>,\n) {\n  return Hooks.useQuery<QMobileShopStatusQuery, QMobileShopStatusVariables>(\n    QMobileShopStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQMobileShopStatus(\n  options?: Hooks.ExecutableQueryOptions<QMobileShopStatusVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QMobileShopStatusQuery,\n    QMobileShopStatusVariables\n  >(QMobileShopStatusDocument, options)\n}\n\nexport const QSmartBannerDocument = gql`\n  query QSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useQSmartBanner(\n  variables?: QSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QSmartBannerVariables>,\n) {\n  return Hooks.useQuery<QSmartBannerQuery, QSmartBannerVariables>(\n    QSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQSmartBanner(\n  options?: Hooks.ExecutableQueryOptions<QSmartBannerVariables>,\n) {\n  return Hooks.useExecutableQuery<QSmartBannerQuery, QSmartBannerVariables>(\n    QSmartBannerDocument,\n    options,\n  )\n}\n\nexport const MOrderDeliveryTimeDocument = gql`\n  mutation MOrderDeliveryTime(\n    $orderId: ID!\n    $deliverAt: DateTime\n    $withGoods: Boolean!\n  ) {\n    updateOrder(id: $orderId, order: { deliverAt: $deliverAt }) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderDeliveryTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >(MOrderDeliveryTimeDocument, baseOptions)\n}\n\nexport const MOrderFinishDocument = gql`\n  mutation MOrderFinish(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMOrderFinish(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderFinishMutation,\n    MOrderFinishVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderFinishMutation, MOrderFinishVariables>(\n    MOrderFinishDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoAddDocument = gql`\n  mutation MOrderPromoAdd($orderId: ID!, $code: String!, $withGoods: Boolean!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        id\n        promoCodes {\n          ...FPromoCode\n        }\n        ...FCartSummary\n        ...FCartGoods @include(if: $withGoods)\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderPromoAdd(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoAddMutation,\n    MOrderPromoAddVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderPromoAddMutation, MOrderPromoAddVariables>(\n    MOrderPromoAddDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoRemoveDocument = gql`\n  mutation MOrderPromoRemove(\n    $orderId: ID!\n    $codeId: ID!\n    $withGoods: Boolean!\n  ) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderPromoRemove(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >(MOrderPromoRemoveDocument, baseOptions)\n}\n\nexport const MOrderTipUpdateDocument = gql`\n  mutation MOrderTipUpdate($orderId: ID!, $tips: Float!, $withGoods: Boolean!) {\n    updateOrder(id: $orderId, order: { tips: $tips }) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderTipUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTipUpdateMutation,\n    MOrderTipUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderTipUpdateMutation, MOrderTipUpdateVariables>(\n    MOrderTipUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSubmitOrderDocument = gql`\n  mutation MSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    submitOrder: finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMSubmitOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSubmitOrderMutation,\n    MSubmitOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MSubmitOrderMutation, MSubmitOrderVariables>(\n    MSubmitOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDocument = gql`\n  query QOrderForm($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      countWares\n      orderStateCategory\n    }\n  }\n`\n\nexport function useQOrderForm(\n  variables?: QOrderFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormVariables>,\n) {\n  return Hooks.useQuery<QOrderFormQuery, QOrderFormVariables>(\n    QOrderFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderForm(\n  options?: Hooks.ExecutableQueryOptions<QOrderFormVariables>,\n) {\n  return Hooks.useExecutableQuery<QOrderFormQuery, QOrderFormVariables>(\n    QOrderFormDocument,\n    options,\n  )\n}\n\nexport const QOrderFormAgreementsDocument = gql`\n  query QOrderFormAgreements($input: InputVamStatus!) {\n    agreements: vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n\nexport function useQOrderFormAgreements(\n  variables?: QOrderFormAgreementsVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormAgreementsVariables>,\n) {\n  return Hooks.useQuery<\n    QOrderFormAgreementsQuery,\n    QOrderFormAgreementsVariables\n  >(QOrderFormAgreementsDocument, variables, baseOptions)\n}\n\nexport function useExecutableQOrderFormAgreements(\n  options?: Hooks.ExecutableQueryOptions<QOrderFormAgreementsVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderFormAgreementsQuery,\n    QOrderFormAgreementsVariables\n  >(QOrderFormAgreementsDocument, options)\n}\n\nexport const QOrderPaymentStatusDocument = gql`\n  query QOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport function useQOrderPaymentStatus(\n  variables?: QOrderPaymentStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPaymentStatusVariables>,\n) {\n  return Hooks.useQuery<QOrderPaymentStatusQuery, QOrderPaymentStatusVariables>(\n    QOrderPaymentStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderPaymentStatus(\n  options?: Hooks.ExecutableQueryOptions<QOrderPaymentStatusVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderPaymentStatusQuery,\n    QOrderPaymentStatusVariables\n  >(QOrderPaymentStatusDocument, options)\n}\n\nexport const QOrderPromoCodesDocument = gql`\n  query QOrderPromoCodes($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useQOrderPromoCodes(\n  variables?: QOrderPromoCodesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPromoCodesVariables>,\n) {\n  return Hooks.useQuery<QOrderPromoCodesQuery, QOrderPromoCodesVariables>(\n    QOrderPromoCodesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderPromoCodes(\n  options?: Hooks.ExecutableQueryOptions<QOrderPromoCodesVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderPromoCodesQuery,\n    QOrderPromoCodesVariables\n  >(QOrderPromoCodesDocument, options)\n}\n\nexport const QOrderTimePickerDocument = gql`\n  query QOrderTimePicker($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      isOpen\n      businessHours: businessHoursIntervals {\n        openAt\n        closeAt\n        closed\n      }\n      defaultDeliveryTime\n      defaultPickupTime\n      willOpenAt\n      willCloseAt\n      delayedDeliveryEnabled\n    }\n  }\n`\n\nexport function useQOrderTimePicker(\n  variables?: QOrderTimePickerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderTimePickerVariables>,\n) {\n  return Hooks.useQuery<QOrderTimePickerQuery, QOrderTimePickerVariables>(\n    QOrderTimePickerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQOrderTimePicker(\n  options?: Hooks.ExecutableQueryOptions<QOrderTimePickerVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QOrderTimePickerQuery,\n    QOrderTimePickerVariables\n  >(QOrderTimePickerDocument, options)\n}\n\nexport const QShopHeaderBranchDocument = gql`\n  query QShopHeaderBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      address {\n        ...FAddress\n      }\n      ...FShopOpeningHours\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FShopOpeningHoursFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useQShopHeaderBranch(\n  variables?: QShopHeaderBranchVariables,\n  baseOptions?: Hooks.QueryHookOptions<QShopHeaderBranchVariables>,\n) {\n  return Hooks.useQuery<QShopHeaderBranchQuery, QShopHeaderBranchVariables>(\n    QShopHeaderBranchDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQShopHeaderBranch(\n  options?: Hooks.ExecutableQueryOptions<QShopHeaderBranchVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QShopHeaderBranchQuery,\n    QShopHeaderBranchVariables\n  >(QShopHeaderBranchDocument, options)\n}\n\nexport const QShopHeaderIntroDocument = gql`\n  query QShopHeaderIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useQShopHeaderIntro(\n  variables?: QShopHeaderIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<QShopHeaderIntroVariables>,\n) {\n  return Hooks.useQuery<QShopHeaderIntroQuery, QShopHeaderIntroVariables>(\n    QShopHeaderIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport function useExecutableQShopHeaderIntro(\n  options?: Hooks.ExecutableQueryOptions<QShopHeaderIntroVariables>,\n) {\n  return Hooks.useExecutableQuery<\n    QShopHeaderIntroQuery,\n    QShopHeaderIntroVariables\n  >(QShopHeaderIntroDocument, options)\n}\n\n// Generated in 2019-08-20T17:29:24+02:00\n","var map = {\n\t\"./cs/messages.po\": [\n\t\t903,\n\t\t2\n\t],\n\t\"./de/messages.po\": [\n\t\t904,\n\t\t3\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t906,\n\t\t5\n\t],\n\t\"./en/messages.po\": [\n\t\t905,\n\t\t4\n\t],\n\t\"./pl/messages.po\": [\n\t\t907,\n\t\t6\n\t],\n\t\"./sk/messages.po\": [\n\t\t908,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 829;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t909,\n\t\t2\n\t],\n\t\"./de/messages.js\": [\n\t\t910,\n\t\t3\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t912,\n\t\t5\n\t],\n\t\"./en/messages.js\": [\n\t\t911,\n\t\t4\n\t],\n\t\"./pl/messages.js\": [\n\t\t913,\n\t\t6\n\t],\n\t\"./sk/messages.js\": [\n\t\t914,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 830;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs.svg\": 870,\n\t\"./de.svg\": 871,\n\t\"./en.svg\": 872,\n\t\"./pl.svg\": 873,\n\t\"./sk.svg\": 874\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 869;","var map = {\n\t\"./logo-doveze.svg\": 877,\n\t\"./logo-gopay.svg\": 878,\n\t\"./logo-mastercard.svg\": 879,\n\t\"./logo-visa.svg\": 880\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 876;","import { Trans } from '@lingui/macro'\nimport { ApolloDefender, isNetworkUnreachableError } from '@speedlo/graphql'\nimport { useRouterContext } from '@speedlo/hooks'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\n\nimport { useRoot } from '../app/useRoot'\nimport { useAlertModal } from '../hooks/useAlertModal'\nimport { i18n } from '../i18n'\nimport { AlertModal } from './AlertModal'\nimport { PrimaryButton, SecondaryButton } from './Buttons'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const ErrorContainer: React.FC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n  const [alertModal, makeAlert] = useAlertModal()\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(error)\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        console.error(error)\n        makeAlert(\n          i18n.t`Service problem`,\n          <div>\n            {makeError(\n              i18n.t`Unexpected error occured in communication with service.`,\n            )}\n          </div>,\n        )\n      }\n    },\n    [makeAlert],\n  )\n\n  const onOperationError = React.useCallback(\n    error => {\n      console.error(error)\n      makeAlert(\n        i18n.t`Communication problem`,\n        <div>\n          {makeError(i18n.t`Unexpected error occured while sending a request.`)}\n        </div>,\n      )\n    },\n    [makeAlert],\n  )\n\n  const onUserErrors = React.useCallback(\n    (messages: ReadonlyArray<string>) => {\n      makeAlert(\n        i18n.t`Problems encountered`,\n        <div>\n          {messages.map(msg => (\n            <div key={msg}>{msg}</div>\n          ))}\n        </div>,\n      )\n    },\n    [makeAlert],\n  )\n\n  const { history } = useRouterContext()\n  const [modalOpen, setModalOpen] = React.useState(true)\n\n  const onFeedback = React.useCallback(() => {\n    setModalOpen(false)\n    showFeedback()\n  }, [])\n\n  const { business } = useRoot()\n\n  const onRestart = React.useCallback(() => {\n    setModalOpen(false)\n    history.replace(business.routerBasePath)\n    window.location.reload()\n  }, [business.routerBasePath, history])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Service is temporarily unavailable`}\n          >\n            <Trans>\n              Please try again in moment. We apologize for inconvenience.\n            </Trans>\n            <PrimaryButton onClick={onRetry}>\n              <Trans>Try now</Trans>\n            </PrimaryButton>\n          </AlertModal>\n        )\n      }\n      case 'otherError': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Unexpected error has occurred`}\n          >\n            <Trans>\n              If you like, please fill out feedback form so we can fix the\n              problem faster. Restart the application otherwise.\n            </Trans>\n            <br />\n            <PrimaryButton onClick={onRestart}>\n              <Trans>Restart application</Trans>\n            </PrimaryButton>\n            <SecondaryButton onClick={onFeedback}>\n              <Trans>Send feedback</Trans>\n            </SecondaryButton>\n          </AlertModal>\n        )\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  let errorGuard\n\n  if (prod) {\n    errorGuard = (\n      <SillyErrorBoundary\n        onError={error => {\n          onUnhandledError(error)\n        }}\n      >\n        {render()}\n      </SillyErrorBoundary>\n    )\n  } else {\n    const DeveloperErrorBoundary = require('react-error-guard/lib/DeveloperErrorBoundary')\n      .default\n    errorGuard = <DeveloperErrorBoundary>{render()}</DeveloperErrorBoundary>\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onOperationError={onOperationError}\n      onUserErrors={onUserErrors}\n    >\n      <>\n        {alertModal}\n        {errorGuard}\n      </>\n    </ApolloDefender>\n  )\n}\n\nfunction isChunkError(error: Error) {\n  return error.message && error.message.indexOf('Loading chunk') >= 0\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected problem occurred`,\n  })\n}\n","import { autorun } from 'mobx'\nimport env from 'penv.macro'\nimport React from 'react'\n\nimport { useRoot } from '../app/useRoot'\n\nexport const PageTitle: React.FC = () => {\n  const { business } = useRoot()\n\n  const prefix = env({ dev: '[DEV]' }) || '[LOCAL]'\n  const suffix = env({ prod: getProdSuffix() }) || ''\n\n  React.useEffect(() => {\n    if (!document) {\n      return\n    }\n    return autorun(() => {\n      const { branch } = business\n      if (branch) {\n        document.title = `${prefix} ${branch.brand.name} ${suffix}`.trim()\n      } else {\n        document.title = `${prefix} ${suffix}`.trim()\n      }\n    })\n  }, [business, prefix, suffix])\n\n  return null\n}\n\nfunction getProdSuffix() {\n  const { hostname } = window.location\n  if (hostname.includes('doveze.cz')) {\n    return '- Doveze.cz'\n  } else if (hostname.includes('dovezie.sk')) {\n    return '- Dovezie.sk'\n  }\n  return ''\n}\n","import { useSentryScope } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\n\nimport { useOrderModel } from '../hooks/useOrderModel'\n\nexport const AddSentryContext = observer(() => {\n  const scope = useSentryScope()\n  const orderModel = useOrderModel()\n\n  scope.setExtras({\n    orderId: orderModel.orderId,\n    orderBranchId: orderModel.branchId,\n    deliverAt: orderModel.deliverAt,\n  })\n\n  return null\n})\n","import { Sentry } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { appConfig } from '../config'\nimport { useQBusinessLookup } from '../graph/generated'\nimport { useRoot } from './useRoot'\n\nexport const BusinessLoader = observer(() => {\n  const root = useRoot()\n  const { business } = useRoot()\n\n  const { data, loading } = useQBusinessLookup(\n    {\n      code: business.requestedCode,\n      url: window.location.href,\n    },\n    {\n      skip: !root.initialized,\n      context: { noBatch: true },\n      fetchPolicy: 'cache-first',\n    },\n  )\n\n  React.useEffect(() => {\n    if (loading || business.isValid) {\n      return\n    }\n\n    if (!data.lookup.branch) {\n      Sentry.withScope(scope => {\n        scope.setExtras({\n          url: window.location.href,\n          requestedCode: business.requestedCode,\n        })\n        Sentry.captureMessage('No business found')\n      })\n      redirectAway()\n      return\n    }\n\n    business.updateFromLookup(data.lookup)\n    business.log(\n      'identified branch %s, brand %s; company %s, isBrand: %s',\n      business.branchId,\n      business.brandId,\n      business.companyId,\n      business.isBrand,\n    )\n  })\n\n  return null\n})\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n","import { useRouterContext, useWhen } from '@speedlo/hooks'\nimport { when } from 'mobx'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport { GeoPoint } from '../helpers/gps'\nimport { useOrderCreate } from '../segments/map/hooks/useOrderCreate'\nimport { useRoot } from './useRoot'\n\ninterface IProps {}\n\nexport const CypressHelper: React.FC<IProps> = props => {\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n\n  /* eslint-disable react-hooks/rules-of-hooks */\n\n  const { user, business, location, order, map } = useRoot()\n  const { history } = useRouterContext()\n  const { createPickupOrder, createDeliveryOrder } = useOrderCreate(() => {\n    history.push('/order')\n  })\n\n  useWhen(\n    () => user.root.initialized,\n    () => {\n      if (window.location.search.includes('useDevLang')) {\n        user.selectLanguage('en-dev')\n      }\n    },\n  )\n\n  const businessValid = new Promise(resolve => {\n    when(() => business.isValid, resolve)\n  })\n\n  const createDeliveryOrderWithGps = (gps: GeoPoint, branchId: ID) => {\n    location.setLocation(gps)\n    order.setBranch(branchId)\n    return businessValid.then(() => createDeliveryOrder())\n  }\n\n  const createPickupOrderForBranch = (branchId: ID) => {\n    return businessValid.then(() => createPickupOrder(branchId))\n  }\n\n  const changeMapLocation = (gps: GeoPoint, zoom?: number) => {\n    map.updatePosition(gps)\n    map.updateZoom(zoom)\n  }\n\n  Object.assign(window, {\n    createPickupOrderForBranch,\n    createDeliveryOrderWithGps,\n    changeMapLocation,\n  })\n\n  return <Route path=\"/cypress\" component={() => null} />\n}\n","import { useAutorun } from '@speedlo/hooks'\nimport { Sentry } from '@speedlo/sentry'\nimport React from 'react'\n\nimport { useRoot } from './useRoot'\n\nexport const IdentifyGuest: React.FC = () => {\n  const { auth } = useRoot()\n  useAutorun(() => {\n    const id = auth.userId!\n    const token = auth.token\n    Sentry.configureScope(scope => {\n      scope.setUser({ id, username: 'GUEST' })\n      scope.setExtra('token', token)\n    })\n  })\n  return null\n}\n","import { useRouter } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useOrderModel } from '../hooks/useOrderModel'\n\nexport const ResetOrderAtRoot: React.FC = () => {\n  const { match } = useRouter({\n    path: '/',\n  })\n  const orderModel = useOrderModel()\n  React.useEffect(() => {\n    if (match && match.isExact && orderModel.hasOrder) {\n      orderModel.orderCancel()\n    }\n  })\n  return null\n}\n","import localforage from 'localforage'\nimport React from 'react'\n\nimport { SecondaryButton } from '../common/Buttons'\nimport { memoryKey } from '../segments/orderForm/OrderFormMemory'\nimport { useRoot } from './useRoot'\n\ninterface IProps {}\n\nexport const ResetPersistenceButton: React.FC<IProps> = props => {\n  const root = useRoot()\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  return (\n    <SecondaryButton\n      onClick={() => {\n        root.reset()\n        localforage.removeItem(memoryKey)\n        setTimeout(() => window.location.reload(), 500)\n      }}\n    >\n      Reset uživ. dat [DEV]\n    </SecondaryButton>\n  )\n}\n","import React from 'react'\n\nimport { useSuspenseWhen } from './hooks/useSuspenseWhen'\nimport { useRoot } from './useRoot'\n\ninterface IProps {\n  children: ReactNode[]\n}\n\nexport const SuspendOnInit: React.FC<IProps> = ({ children }) => {\n  const { business, user } = useRoot()\n\n  const predicate = () => !(business.isValid && user.languageActivated)\n\n  useSuspenseWhen(predicate)\n\n  return <>{children}</>\n}\n","import { when } from 'mobx'\nimport React from 'react'\n\nexport function useSuspenseWhen(predicate: () => boolean) {\n  const [suspend, setSuspend] = React.useState<Maybe<Promise<any>>>(null)\n  const thrown = React.useRef(false)\n  const resolverRef = React.useRef<Maybe<AnyFunction>>()\n\n  React.useEffect(() => {\n    if (predicate() === true && suspend === null) {\n      setSuspend(\n        new Promise(resolve => {\n          resolverRef.current = resolve\n        }),\n      )\n      when(\n        () => !predicate(),\n        () => {\n          if (resolverRef.current) {\n            resolverRef.current()\n            resolverRef.current = null\n            setSuspend(null)\n          }\n        },\n      )\n    }\n  }, [predicate, suspend])\n\n  if (suspend !== null && !thrown.current) {\n    thrown.current = true\n    throw suspend\n  }\n}\n","import './App.css'\n\nimport React from 'react'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport Pacman from '../common/Pacman'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile } from '../common/Responsive'\nimport { AddSentryContext } from './AddSentryContext'\nimport { BusinessLoader } from './BusinessLoader'\nimport { CypressHelper } from './CypressHelper'\nimport { IdentifyGuest } from './IdentifyGuest'\nimport { ResetOrderAtRoot } from './ResetOrderAtRoot'\nimport { ResetPersistenceButton } from './ResetPersistenceButton'\nimport { SuspendOnInit } from './SuspendOnInit'\nimport ThemeSwitchProvider from './ThemeSwitchProvider'\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App: React.FC = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <ThemeSwitchProvider>\n      <BusinessLoader />\n      <IdentifyGuest />\n      <PageTitle />\n      <AddSentryContext />\n      <ResetOrderAtRoot />\n      <CypressHelper />\n      <React.Suspense fallback={<Pacman />}>\n        <SuspendOnInit>\n          <Desktop>\n            <DesktopApp />\n          </Desktop>\n          <Mobile>\n            <MobileApp />\n          </Mobile>\n          <ResetPersistenceButton />\n        </SuspendOnInit>\n      </React.Suspense>\n    </ThemeSwitchProvider>\n  </ErrorContainer>\n)\n\nexport default App\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from './useRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() => (\n    <BrowserRouter\n      basename={business.routerBasePath}\n      key={business.routerBasePath}\n    >\n      {children}\n    </BrowserRouter>\n  ))\n}\n","import React from 'react'\nimport ReactGA from 'react-ga'\n\nimport { appConfig } from '../config'\n\nconst key = appConfig.analytics\nif (key) {\n  const debug = process.env.REACT_APP_STAGE !== 'prod'\n  ReactGA.initialize(key, {\n    debug,\n    gaOptions: {\n      siteSpeedSampleRate: 50,\n    },\n  })\n  if (debug) {\n    ReactGA.ga('set', 'sendHitTask', null)\n  }\n}\n\ninterface IOptions {\n  reportPage: boolean\n}\n\nexport function useAnalytics(opts: Partial<IOptions> = {}) {\n  React.useEffect(() => {\n    if (opts.reportPage && key) {\n      ReactGA.pageview(window.location.href)\n    }\n  }, [opts.reportPage])\n  return ReactGA\n}\n","import debug from 'debug'\n\nexport const logDebug = debug('doveze:debug')\nexport const logPersist = debug('doveze:persist')\n","import { Sentry } from '@speedlo/sentry'\nimport localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => {\n    return localforage.setItem(stateKey, snapshot).catch(err => {\n      Sentry.withScope(scope => {\n        scope.setTag('persistence', stateKey)\n        scope.setExtras({\n          snapshot,\n        })\n        Sentry.captureException(err)\n      })\n    })\n  }\n\n  return localforage\n    .getItem(stateKey)\n    .catch(err => {\n      localforage.removeItem(stateKey)\n      Sentry.withScope(scope => {\n        scope.setTag('persistence', stateKey)\n        Sentry.captureException(err)\n      })\n    })\n    .then(state => {\n      if (state !== null) {\n        applySnapshot(model, state)\n        logPersist('restored state %s', stateKey)\n      } else {\n        writeState(getSnapshot(model)).then(() => {\n          logPersist('initialized state %s', stateKey)\n        })\n      }\n\n      onSnapshot(model, writeState)\n    })\n}\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport debug from 'debug'\nimport { getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types\n  .model()\n  .volatile(() => ({\n    client: (null as unknown) as DefaultApolloClient,\n  }))\n  .actions(self => ({\n    setClient(client: DefaultApolloClient) {\n      self.client = client\n    },\n  }))\n  .views(self => ({\n    get log() {\n      const name = getPath(self).trim() || getType(self).name\n      // if (process.env.NODE_ENV === 'test') {\n      //   return (...args) => console.log(`model${name}`, ...args)\n      // }\n      return debug(`doveze:model${name}`)\n    },\n    get root() {\n      return getRoot<TRootModel>(self)\n    },\n  }))\n","import { Sentry } from '@speedlo/sentry'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return self.token !== null\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      Sentry.addBreadcrumb({\n        category: 'Auth',\n        level: Sentry.Severity.Info,\n        data: {\n          userId,\n          token,\n        },\n      })\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport {\n  FCompanyBranchCountry,\n  FCompanyBranchFragment,\n  OrderOriginEnum,\n  QBusinessLookupLookup,\n} from '../graph/generated'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\n\ntype TBranch = LegacyOmit<FCompanyBranchFragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<FCompanyBranchCountry>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n  defaultLanguage: Maybe<string>\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n    defaultLanguage: null,\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get brandOrBranch() {\n      return {\n        brandId: self.isBrand ? this.brandId : undefined,\n        branchId: self.isBrand ? undefined : this.branchId,\n      }\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      const urlCode = readBusinessCodeFromUrl()\n      // prefer stored code if none was specified in url\n      if (self.code && !urlCode) {\n        return self.code\n      }\n      // url code has priority with fallback to stored one or a static one from build\n      return urlCode || self.code || process.env.REACT_APP_BUSINESS_CODE\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: QBusinessLookupLookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        // handled in BusinessLoader.tsx\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n      self.defaultLanguage = lookup.defaultLanguage.toLowerCase()\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const CartModel = BaseModel.named('Cart')\n  .volatile(() => ({\n    withGoods: false,\n    withPresence: false,\n    orderIsSubmitting: false,\n  }))\n  .actions(self => ({\n    updateDisplay(isMobile: boolean, showGoods: boolean) {\n      self.withGoods = !isMobile || showGoods\n      self.withPresence = isMobile ? !showGoods : true\n    },\n    setOrderSubmitting(state: boolean) {\n      self.orderIsSubmitting = state\n    },\n  }))\n\nexport interface TCartModel extends Instance<typeof CartModel> {}\nexport interface TCartModelProps extends SnapshotIn<typeof CartModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport interface TConfigModel extends Instance<typeof ConfigModel> {}\nexport interface TConfigModelProps extends SnapshotIn<typeof ConfigModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { QResolveLocationResolveLocation } from '../graph/generated'\nimport { formatAddress } from '../helpers/formats'\nimport { GeoPoint, gpsToLatLngLit } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\nimport { AddressSearchResult } from '../segments/map/hooks/useAddressSearch'\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.maybe(types.number),\n    longitude: types.maybe(types.number),\n    searchValue: types.optional(types.string, ''),\n    address: types.maybe(types.string),\n  })\n  .volatile(() => ({\n    branchId: null as MaybeID,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    geolocationPoint: null as Maybe<GeoPoint>,\n    isResolving: false,\n    hasResolutionResult: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(navigator.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== undefined || self.longitude !== undefined\n    },\n    get hasAddress() {\n      return Boolean(self.address && self.address.length > 0)\n    },\n    get hasSearchValue() {\n      return self.searchValue.trim().length > 0\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get geoPoint() {\n      if (this.hasLocation) {\n        return {\n          latitude: self.latitude!,\n          longitude: self.longitude!,\n        }\n      }\n      return null\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      if (this.geoPoint) {\n        return gpsToLatLngLit(this.geoPoint)\n      }\n      return null\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: GeoPoint) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n    setIsResolving(resolving: boolean) {\n      if (resolving !== self.isResolving) {\n        self.isResolving = resolving\n        self.log(`resolving has ${resolving ? 'started' : 'ended'}`)\n      }\n    },\n    setSearchValue(search: string) {\n      self.searchValue = search\n    },\n    setAddress(address: string) {\n      self.address = address\n      self.log(`set address to ${address}`)\n    },\n    clearAddress() {\n      self.address = undefined\n      self.log('cleared address')\n    },\n    setGeolocationPoint(point: GeoPoint) {\n      self.geolocationPoint = point\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = true\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: QResolveLocationResolveLocation) {\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n\n      if (result.finalAddress && !self.hasSearchValue) {\n        self.setAddress(formatAddress(result.finalAddress))\n      }\n\n      self.hasResolutionResult = true\n\n      if (!(result.isResolved && result.gpsCoordinates)) {\n        self.log('not resolved')\n        return\n      }\n\n      self.setLocation(result.gpsCoordinates)\n      self.log(\n        `resolved location for branch: ${self.branchId}, zone: ${\n          result.zone ? result.zone.id : null\n        }`,\n      )\n    },\n    setSearchResult(result: AddressSearchResult) {\n      self.setLocation(result.gps)\n      self.setAddress(result.address)\n      self.setIsResolving(false)\n    },\n    setAsNotResolved() {\n      self.hasResolutionResult = true\n      self.isResolved = false\n      self.setIsResolving(false)\n    },\n    setAsNotAddress() {\n      self.hasResolutionResult = true\n      self.isResolved = true\n      self.isStreetAddress = false\n      self.setIsResolving(false)\n    },\n    resetResolution() {\n      self.branchId = null\n      self.isResolved = false\n      self.isStreetAddress = false\n      self.inDeliveryLocation = false\n      self.hasResolutionResult = false\n      self.clearAddress()\n    },\n  }))\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { GeoPoint, gpsToLatLngLit, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile(() => ({\n    mapRef: null as Maybe<google.maps.Map>,\n    clickPoint: null as Maybe<GeoPoint>,\n  }))\n  .views(self => ({\n    get center() {\n      return gpsToLatLngLit(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<google.maps.Map>) {\n      self.mapRef = ref\n    },\n    updateZoom(zoom?: number) {\n      if (zoom !== undefined) {\n        self.zoom = zoom\n      } else if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition(gps?: GeoPoint) {\n      if (gps) {\n        self.latitude = gps.latitude\n        self.longitude = gps.longitude\n      } else if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport {\n  DeliveryTypeEnum,\n  FOrderCreateFragment,\n  PaymentGateEnum,\n} from '../graph/generated'\nimport { i18n } from '../i18n'\nimport { BaseModel } from './BaseModel'\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    paymentMethod: PaymentGateEnum.Gopay,\n    tips: 0,\n  })\n  .volatile(() => ({\n    deliverAt: null as Maybe<Date>,\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null as Maybe<RoA<string>>,\n    lastActiveRecipeId: null as MaybeID,\n    timePickerOpen: false,\n    delayedOrderEnabled: false,\n    addToCartRecipeId: null as MaybeID,\n    changeCartItemId: null as MaybeID,\n    isVamInitialized: false,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get usingPaymentMethodWithTips() {\n      return self.paymentMethod === PaymentGateEnum.Gopay\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return ''\n    },\n    get disableInteraction() {\n      return self.isSubmitting || self.isGoPayChecking\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setPaymentMethod(method: PaymentGateEnum) {\n      self.paymentMethod = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: FOrderCreateFragment) {\n      self.orderId = result.id\n      self.branchId = result.branch.id\n      self.deliverAt = null\n      self.log('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        self.log('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        self.log(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n      self.deliverAt = null\n    },\n    submitStarted() {\n      self.isSubmitting = true\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    openTimePicker() {\n      self.timePickerOpen = true\n    },\n    closeTimePicker() {\n      self.timePickerOpen = false\n    },\n    setTips(tips: number) {\n      self.tips = tips\n    },\n    setDeliverAt(deliverAt: Maybe<Date>) {\n      self.deliverAt = deliverAt\n    },\n    enableDelayedOrder() {\n      self.delayedOrderEnabled = true\n    },\n    addToCart(recipeId: MaybeID) {\n      self.addToCartRecipeId = recipeId\n    },\n    changeCartItem(itemId: MaybeID) {\n      self.changeCartItemId = itemId\n    },\n  }))\n  .actions(self => ({\n    initVam() {\n      self.isVamInitialized = true\n    },\n  }))\n  // for backward-compatibility with OrderFormMemory\n  .props({\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n  })\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import { detectLanguage } from '@speedlo/ui'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    selectedLanguage: types.maybe(types.string),\n    rememberForm: types.maybeNull(types.boolean),\n    showAppleBanner: types.optional(types.boolean, true),\n  })\n  .volatile(() => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n    languageActivated: false,\n    memoryApplied: false,\n  }))\n  .views(self => ({\n    get language() {\n      return (\n        self.selectedLanguage ||\n        self.root.business.defaultLanguage ||\n        detectLanguage(appConfig.supportedLanguages, appConfig.fallbackLanguage)\n      )\n    },\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n  .actions(self => ({\n    selectLanguage(lang: string) {\n      if (lang !== self.selectedLanguage) {\n        self.languageActivated = false\n      }\n      self.selectedLanguage = lang\n      self.log('selected language %s', lang)\n    },\n    activateLanguage() {\n      self.languageActivated = true\n      self.log('activated language %s', self.language)\n    },\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n    setMemoryApplied() {\n      self.memoryApplied = true\n    },\n    hideAppleBanner() {\n      self.showAppleBanner = false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { observable } from 'mobx'\nimport {\n  applySnapshot,\n  getSnapshot,\n  Instance,\n  SnapshotIn,\n  types,\n} from 'mobx-state-tree'\n\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { CartModel } from './CartModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    cart: types.optional(CartModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .extend(self => {\n    let initialSnapshot\n    const initialized = observable.box(false)\n    return {\n      views: {\n        get initialized() {\n          return initialized.get()\n        },\n      },\n      actions: {\n        afterCreate() {\n          const { business, map, ...snapshot } = getSnapshot(self)\n          initialSnapshot = snapshot\n        },\n        reset() {\n          applySnapshot(self, initialSnapshot)\n        },\n        init: async () => {\n          await Promise.all(self.persistedModels.map(persistModel))\n          initialSnapshot.business = getSnapshot(self.business)\n          self.log('initialized')\n          initialized.set(true)\n        },\n      },\n    }\n  })\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import './enableDebug'\n\nimport { ApolloProvider } from '@speedlo/graphql'\nimport { useSentryInit } from '@speedlo/sentry'\nimport { updateWorker } from '@speedlo/tools'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport { RootProvider } from './app/useRoot'\nimport { appConfig } from './config'\nimport { createApolloClient } from './graph/createClient'\nimport { useAnalytics } from './hooks/useAnalytics'\nimport { i18n, I18nManager } from './i18n'\nimport { RootModel } from './models/RootModel'\n\nconst Main = () => {\n  useAnalytics({ reportPage: true })\n  useSentryInit(appConfig.sentryDSN)\n\n  const rootInit = React.useRef<Promise<void>>()\n  const [root] = React.useState(() => {\n    const rootInst = RootModel.create({})\n    rootInit.current = rootInst.init()\n    return rootInst\n  })\n\n  const [client] = React.useState(() => {\n    const newClient = createApolloClient(root, rootInit.current!)\n    // TODO: Required for legacy code of calling GraphQL from models\n    root.order.setClient(newClient)\n    return newClient\n  })\n\n  return (\n    <RootProvider value={root}>\n      <ApolloProvider client={client}>\n        <I18nManager>\n          <Router>\n            <App />\n          </Router>\n        </I18nManager>\n      </ApolloProvider>\n    </RootProvider>\n  )\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))\n\nupdateWorker.register({\n  autoUpdate: true,\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    if (event.data === 'update-applied') {\n      window.location.reload()\n    }\n  })\n}\n","import {\n  createAuthLink,\n  createDefaultApolloClient,\n  createLanguageLink,\n  createLogLink,\n  createNetworkLink,\n  createOfflineLink,\n  createRetryLink,\n  fetchGuestToken,\n} from '@speedlo/graphql'\n\nimport { appConfig } from '../config'\nimport { TRootModel } from '../models/RootModel'\n\nexport function createApolloClient(root: TRootModel, rootInit: Promise<void>) {\n  const getToken = async () => {\n    await rootInit\n    if (root.auth.token) {\n      return root.auth.token\n    }\n    const { token, userId } = await fetchGuestToken(appConfig.endpoint)\n    root.auth.authenticate(token, userId)\n    return token\n  }\n\n  const getLang = () => root.user.language\n\n  return createDefaultApolloClient(\n    createAuthLink({ getToken }),\n    createLanguageLink(getLang),\n    createLogLink({ enabled: process.env.REACT_APP_STAGE !== 'prod' }),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint),\n  )\n}\n","import React from 'react'\nimport { Button, ButtonProps } from 'reactstrap'\nimport styled, { css } from 'styled-components/macro'\n\nimport { TTheme } from '../app/ThemeSwitchProvider'\nimport { mediaDesktop, mediaMobile } from '../common/Responsive'\n\nexport const PrimaryButton = styled(Button)`\n  font-size: 1.1rem;\n  font-variant-caps: all-small-caps;\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n  &:active {\n    background-color: #262626 !important;\n  }\n`\n\nexport const SecondaryButton = styled(Button)`\n  font-size: 1.1rem;\n  font-variant-caps: all-small-caps;\n  background-color: ${themeProp('tertiary')};\n  border-color: ${themeProp('tertiary')};\n  &:hover {\n    background-color: ${themeProp('tertiaryHover')};\n    border-color: ${themeProp('tertiaryHover')};\n  }\n`\n\ninterface ISelectButtonThemed {\n  selected?: boolean\n  theme: TTheme\n}\n\nexport const SelectButtonThemed = styled(\n  ({ selected, theme, ...props }: ButtonProps & ISelectButtonThemed) => (\n    <Button {...props} />\n  ),\n)`\n  ${({ theme, selected }: ISelectButtonThemed) => css`\n    font-size: 1.1rem;\n    font-variant-caps: all-small-caps;\n    ${mediaDesktop`\n      background-color: ${selected ? theme.tertiary : theme.unselected}\n    `};\n    ${mediaMobile`\n      background-color: ${selected ? theme.tertiary : 'white'}`}\n      border-color: ${selected ? theme.tertiary : theme.unselected};\n      color: ${selected ? theme.tertiaryText : theme.unselectedText};\n      &:hover {\n        background-color: ${\n          selected ? theme.tertiaryHover : theme.unselectedHover\n        };\n        border-color: ${selected ? theme.tertiaryHover : theme.unselectedHover};\n        color: ${selected ? theme.tertiaryText : theme.unselectedText};\n      }\n  `};\n`\n\nfunction themeProp(name: keyof TTheme) {\n  return ({ theme }: { theme?: TTheme }) => theme![name] as string\n}\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components/macro'\n\nexport const mobileBreakpoint = 767\n\nexport const Desktop = props => (\n  <ReactResponsive {...props} minWidth={mobileBreakpoint} />\n)\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxWidth={mobileBreakpoint} />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.FC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${mobileBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${mobileBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n"],"sourceRoot":""}