{"version":3,"sources":["segments/finish/FinishView.tsx","segments/map/atoms/MapPanning.tsx","segments/map/PickupMapBranch.tsx","segments/map/OrderMap.tsx","segments/map/PickupMap.tsx","segments/map/views/MapView.tsx","segments/shop/OrderAddress.tsx","segments/shop/ShopCloseAlert.tsx","segments/shop/ShopIntro.tsx","segments/shop/ShopLogo.tsx","segments/shop/ShopOpeningHours.tsx","segments/shop/Sticker.tsx","segments/shop/ShopHeader.tsx","segments/shop/ShopHeader.graphql.ts","segments/shop/ShopHeaderView.tsx","segments/orderForm/OrderErrorModal.tsx","segments/orderForm/OrderPaymentButton.tsx","segments/orderForm/OrderPaymentMethod.tsx","segments/orderForm/OrderForm.tsx","segments/orderForm/OrderGoPayModal.tsx","segments/orderForm/OrderFormView.tsx","segments/shop/ShopOverview.tsx","app/DesktopApp.tsx"],"names":["FinishView_FinishView","react_default","a","createElement","reactstrap_es","className","ColStyle","FinishViewLoader","render","result","Fragment","FinishViewOrder","order","FinishViewSupport","branch","companyBranch","FinishViewFooter","finish","MapPanning_MapPanning","PureComponent","[object Object]","this","executePanning","map","gps","props","panToLocation","PickupMapHeaderStyled","Object","styled","withConfig","displayName","theme","primary","tertiaryText","PickupMapBranch","onConfirm","name","ShopAddress","address","ShopStatus","status","opts","Buttons","color","data-testid","disabled","pickupEnabled","onClick","decision","openingIn","closingIn","_lingui_react","id","values","i18n","_","toLocaleUpperCase","getButtonText","mapByOrderMethod","types","MESSENGER","react","DeliveryMap","PICKUP","state","branchId","setNoBranch","setState","renderSite","lib","key","position","lat","latitude","lng","longitude","setActiveBranch","onCloseClick","defaultOptions","maxWidth","rootModel","setBranch","business","prefetchFoodMenu","createPickupOrder","isBrand","PickupMap_graphql","variables","brandId","renderLoading","branches","find","ramda","propEq","OrderMap","WithRoot","BaseMap","model","index_module","isValid","factory","orderMethod","MapView_MapView","OrderMethod","react_router","history","push","OrderAddress","root","location","ShopCloseAlert_ShopCloseAlert","now","ShopIntroStyled","styled_components_browser_esm","div","ShopIntro","headerText","LogoLink","url","children","href","react_router_dom","to","LogoContainerStyled","ShopLogo","BackgroundThemed","imageName","size","ContainerStyled","OpeningHoursStyled","StatusDisplayPosition","span","ShopOpeningHours","businessHours","businessHour","closed","closedNote","openAt","closeAt","ShopStatusDisplay","StickerThemed","IconStyled","Sticker","success","classnames_default","order-method-unselected","order-method-selected","ShopHeaderStyled","ShopHeaderInfoStyled","ShopHeader","isLoading","ShopHeaderIcons","homepageUrl","exact","path","ShopClosingTimeModal","ShopHeaderQuery","graph","fragments_graphql","QueryShopHeader","ShopHeaderView","observe","skip","loading","OrderErrorModal","WithOrder","isOpen","hasErrors","toggle","clearErrors","tag","submitErrors","error","idx","OrderPaymentButton","_a","method","__rest","es","field","fieldApi","_extends","selected","value","setValue","Checkmark","show","OrderPaymentMethod_OrderPaymentMethod","GOPAY","CASH","OrderForm","OrderFormSetup","form","OrderFormInputs","OrderAgreements","OrderSubmitLine","submitForm","canSubmit","isVamInitialized","TextPadding","OrderGoPayModal","AlertModal","isGoPayChecking","Pacman","noMargin","OrderFormView_OrderFormView","orderModel","OrderFormView_graphql","orderId","countWares","ShopOverview_ShopOverview","FoodMenuView","CartView","OrderFormStorageNotice","__webpack_exports__","fluid","component"],"mappings":"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","file":"static/js/9.fbbc1f47.chunk.js","sourcesContent":["import './FinishView.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from 'common/ColStyle'\n\nimport { FinishViewFooter } from './FinishViewFooter'\nimport { FinishViewLoader } from './FinishViewLoader'\nimport { FinishViewOrder } from './FinishViewOrder'\nimport { FinishViewSupport } from './FinishViewSupport'\n\ninterface IProps {}\n\nexport const FinishView: React.SFC<IProps> = ({}) => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyle>\n      <div className=\"finish__view\">\n        <FinishViewLoader\n          render={result => (\n            <>\n              <FinishViewOrder order={result.order} />\n              <FinishViewSupport branch={result.companyBranch} />\n              <FinishViewFooter finish={result} />\n            </>\n          )}\n        />\n      </div>\n    </ColStyle>\n  </Row>\n)\n","import React from 'react'\n\nimport { GeoPoint } from '../../../helpers/gps'\nimport { TMapModel } from '../../../models/MapModel'\n\ninterface IProps {\n  gps?: GeoPoint\n  map: TMapModel\n}\n\nexport class MapPanning extends React.PureComponent<IProps> {\n  componentDidMount() {\n    this.executePanning()\n  }\n  componentDidUpdate() {\n    this.executePanning()\n  }\n  executePanning() {\n    const { map, gps } = this.props\n    if (map && gps) {\n      map.panToLocation(gps)\n    }\n  }\n  render() {\n    return null\n  }\n}\n","import { Plural, Trans } from '@lingui/react'\nimport { i18n } from 'i18n'\nimport React from 'react'\n\nimport { PrimaryButton } from 'common/Buttons'\nimport { ShopAddress } from 'common/ShopAddress'\nimport { IShopStatusRender, ShopStatus } from 'common/ShopStatus'\nimport { GPickupBranch } from 'graph/types'\n\nimport { styled } from '../../styled'\n\ninterface IProps {\n  branch: GPickupBranch.Fragment\n  onConfirm(): void\n}\n\nconst PickupMapHeaderStyled = styled('div')`\n  background-color: ${({ theme }) => theme.primary};\n  color: ${({ theme }) => theme.tertiaryText};\n  text-align: center;\n  padding: 0.4rem 0.2rem 0.2rem 0.2rem;\n  height: 2rem;\n  vertical-align: middle;\n`\n\nexport const PickupMapBranch: React.SFC<IProps> = ({ branch, onConfirm }) => (\n  <div className=\"pickup__map\">\n    <PickupMapHeaderStyled className=\"pickup__map__header\">\n      {branch.name}\n    </PickupMapHeaderStyled>\n    <div className=\"pickup__map__info\">\n      <ShopAddress address={branch.address} />\n    </div>\n    <ShopStatus\n      status={branch}\n      render={opts => (\n        <PrimaryButton\n          color=\"primary\"\n          data-testid=\"submitPickupBranch\"\n          disabled={!branch.pickupEnabled}\n          onClick={onConfirm}\n        >\n          {branch.pickupEnabled ? (\n            getButtonText(opts)\n          ) : (\n            <Trans>Delivery only</Trans>\n          )}\n        </PrimaryButton>\n      )}\n    />\n  </div>\n)\n\nfunction getButtonText({ decision, openingIn, closingIn }: IShopStatusRender) {\n  switch (decision) {\n    case 'Closed':\n      return <Trans>Closed</Trans>\n    case 'ClosingSoon':\n      return (\n        <Plural\n          value={closingIn}\n          one=\"Closing in 1 minute\"\n          other=\"Closing in # minutes\"\n        />\n      )\n    case 'OpeningSoon':\n      return (\n        <Plural\n          value={openingIn}\n          one=\"Opening in 1 minute\"\n          other=\"Opening in # minutes\"\n        />\n      )\n    default:\n      return i18n.t`Pickup here`.toLocaleUpperCase()\n  }\n}\n","import { Observer } from 'mobx-react'\nimport React, { createFactory } from 'react'\n\nimport { BaseMap } from 'common/BaseMap'\nimport { WithRoot } from 'common/WithRoot'\nimport { DeliveryTypeEnum } from 'graph/types'\nimport { TRootModel } from 'models/RootModel'\n\nimport { DeliveryMap } from './DeliveryMap'\nimport { PickupMap } from './PickupMap'\n\ninterface IProps {\n  onConfirm(): void\n}\n\ninterface IMapProps extends IProps {\n  rootModel: TRootModel\n}\n\nconst mapByOrderMethod = {\n  [DeliveryTypeEnum.MESSENGER]: createFactory<IMapProps>(DeliveryMap),\n  [DeliveryTypeEnum.PICKUP]: createFactory<IMapProps>(PickupMap),\n}\n\nexport const OrderMap: React.SFC<IProps> = ({ onConfirm }) => (\n  <WithRoot\n    render={rootModel => (\n      <BaseMap\n        model={rootModel.map}\n        render={() => (\n          <Observer>\n            {() => {\n              if (!rootModel.business.isValid) {\n                return null\n              }\n              const factory = mapByOrderMethod[rootModel.order.orderMethod]\n              return factory({\n                rootModel,\n                onConfirm,\n              })\n            }}\n          </Observer>\n        )}\n      />\n    )}\n  />\n)\n","import './PickupMap.css'\n\nimport React, { Component } from 'react'\nimport { InfoWindow, Marker } from 'react-google-maps'\n\nimport { GPickupBranch } from 'graph/types'\nimport { TRootModel } from 'models/RootModel'\n\nimport { RM } from '../../helpers/ramda'\nimport { MapPanning } from './atoms/MapPanning'\nimport { QueryPickupMapBranch, QueryPickupMapBrand } from './PickupMap.graphql'\nimport { PickupMapBranch } from './PickupMapBranch'\n\ninterface IProps {\n  rootModel: TRootModel\n  onConfirm(): void\n}\n\ninterface IState {\n  branchId: Maybe<ID>\n}\n\nexport class PickupMap extends Component<IProps, IState> {\n  state = {\n    branchId: null,\n  }\n\n  componentDidMount() {\n    this.setActiveBranch(this.props.rootModel.business.branchId!)\n  }\n\n  setActiveBranch(branchId: ID) {\n    this.setState({ branchId: branchId })\n    this.props.rootModel.order.prefetchFoodMenu(branchId)\n  }\n\n  setNoBranch = () => {\n    this.setState({ branchId: null })\n  }\n\n  onConfirm(branchId: ID) {\n    this.props.rootModel.order.createPickupOrder(branchId, this.props.onConfirm)\n  }\n\n  renderSite = (branch: GPickupBranch.Fragment) => (\n    <Marker\n      key={branch.id}\n      position={{ lat: branch.gps.latitude, lng: branch.gps.longitude }}\n      onClick={() => this.setActiveBranch(branch.id)}\n    >\n      {this.state.branchId === branch.id ? (\n        <InfoWindow\n          onCloseClick={this.setNoBranch}\n          defaultOptions={{ maxWidth: 200 }}\n        >\n          <PickupMapBranch\n            branch={branch}\n            onConfirm={() => {\n              this.props.rootModel.order.setBranch(branch.id)\n              this.onConfirm(branch.id)\n            }}\n          />\n        </InfoWindow>\n      ) : null}\n    </Marker>\n  )\n\n  render() {\n    const { map, business } = this.props.rootModel\n    if (business.isBrand) {\n      return (\n        <QueryPickupMapBrand\n          variables={{ brandId: business.brandId! }}\n          renderLoading={false}\n          render={({ branches }) => {\n            const branch =\n              branches && branches.find(RM.propEq('id', business.branchId))\n            return (\n              <>\n                <MapPanning map={map} gps={branch && branch.gps} />\n                {branches && branches.map(this.renderSite)}\n              </>\n            )\n          }}\n        />\n      )\n    }\n    return (\n      <QueryPickupMapBranch\n        variables={{ branchId: business.branchId! }}\n        renderLoading={false}\n        render={({ branch }) => (\n          <>\n            <MapPanning map={map} gps={branch && branch.gps} />\n            {branch && this.renderSite(branch)}\n          </>\n        )}\n      />\n    )\n  }\n}\n","import './MapView.css'\n\nimport React from 'react'\nimport { Route } from 'react-router'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from 'common/ColStyle'\nimport { OrderMethod } from 'segments/destination/OrderMethod'\n\nimport { OrderMap } from '../OrderMap'\n\nexport const MapView = () => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyle>\n      <div className=\"map__view\">\n        <div className=\"map__view__header\">\n          <OrderMethod />\n        </div>\n        <Route>\n          {({ history }) => (\n            <OrderMap onConfirm={() => history.push(`/order`)} />\n          )}\n        </Route>\n      </div>\n    </ColStyle>\n  </Row>\n)\n","import { i18n } from 'i18n'\nimport React from 'react'\n\nimport { ShopAddress } from 'common/ShopAddress'\nimport { WithRoot } from 'common/WithRoot'\nimport { DeliveryTypeEnum, GShopHeader } from 'graph/types'\n\ninterface IProps {\n  address?: GShopHeader.Address\n}\n\nexport const OrderAddress: React.SFC<IProps> = ({ address }) => (\n  <WithRoot\n    render={root => {\n      switch (root.order.orderMethod) {\n        case DeliveryTypeEnum.MESSENGER:\n          return (\n            <span>\n              {i18n.t`Order to address`}: <b>{root.location.address}</b>\n            </span>\n          )\n        case DeliveryTypeEnum.PICKUP:\n          return (\n            <span>\n              {i18n.t`Pickup at address`}:{' '}\n              <b>\n                <ShopAddress address={address} />\n              </b>\n            </span>\n          )\n        default:\n          return null\n      }\n    }}\n  />\n)\n","import './ShopCloseAlert.css'\n\nimport { Plural, Trans } from '@lingui/react'\nimport React from 'react'\nimport { Alert } from 'reactstrap'\n\nimport { ShopStatus } from 'common/ShopStatus'\nimport { GCompanyBranchStatus } from 'graph/types'\n\ninterface IProps {\n  status?: GCompanyBranchStatus.Fragment\n  now?: Date\n}\n\nexport const ShopCloseAlert: React.SFC<IProps> = ({ status, now }) => {\n  return status ? (\n    <ShopStatus\n      now={now}\n      status={status}\n      render={({ decision, closingIn }) => {\n        if (decision === 'ClosingSoon') {\n          return (\n            <Alert className=\"shop__header__alert\">\n              <Trans>\n                Beware! We are\n                <Plural\n                  value={closingIn}\n                  one=\"closing in 1 minute\"\n                  other=\"closing in # minutes\"\n                />. Finish your order quickly.\n              </Trans>\n            </Alert>\n          )\n        }\n        return null\n      }}\n    />\n  ) : null\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GShopHeader } from '../../graph/types'\n\ninterface IProps {\n  branch?: Maybe<GShopHeader.Branch>\n}\n\nconst ShopIntroStyled = styled.div`\n  margin: 0.8rem 1rem 1rem 1.3rem;\n`\n\nexport const ShopIntro: React.SFC<IProps> = ({ branch }) => (\n  <ShopIntroStyled data-testid=\"headerText\">\n    {branch ? branch.headerText : ''}\n  </ShopIntroStyled>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { BackgroundThemed } from 'common/BackgroundThemed'\n\ninterface IProps {\n  url: string\n}\n\nconst LogoLink: React.SFC<IProps> = ({ url, children }) =>\n  url ? <a href={url}>{children}</a> : <Link to=\"/\">{children}</Link>\n\nconst LogoContainerStyled = styled.div`\n  height: 200px;\n  width: 400px;\n  flex: 0 0 400px;\n  & .shop__header__logo {\n    height: 100%;\n  }\n`\n\nexport const ShopLogo: React.SFC<IProps> = props => (\n  <LogoContainerStyled>\n    <LogoLink {...props}>\n      <BackgroundThemed\n        className=\"shop__header__logo\"\n        imageName=\"storeLogo\"\n        size=\"cover\"\n      />\n    </LogoLink>\n  </LogoContainerStyled>\n)\n","import { i18n } from 'i18n'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { GShopHeader } from 'graph/types'\n\nimport { ShopStatusDisplay } from './ShopStatusDisplay'\n\ninterface IProps {\n  branch?: GShopHeader.Branch\n}\n\nconst ContainerStyled = styled.div`\n  margin: 0.4rem 0 0 0.1rem;\n`\n\nconst OpeningHoursStyled = styled.div`\n  margin: -0.2rem 0 0 1.35rem;\n  display: inline-block;\n  vertical-align: middle;\n`\n\nconst StatusDisplayPosition = styled.span`\n  padding-left: 2rem;\n`\n\nexport const ShopOpeningHours: React.SFC<IProps> = ({ branch }) => (\n  <ContainerStyled>\n    <span className=\"flaticon-clock\" />\n    {branch &&\n      branch.businessHours.map(businessHour => (\n        <OpeningHoursStyled data-testid=\"openingHours\" key={businessHour.id}>\n          {businessHour.closed\n            ? businessHour.closedNote || i18n.t`Closed`\n            : `${businessHour.openAt} - ${businessHour.closeAt}`}\n        </OpeningHoursStyled>\n      ))}\n    <StatusDisplayPosition>\n      <ShopStatusDisplay status={branch} />\n    </StatusDisplayPosition>\n  </ContainerStyled>\n)\n","import classNames from 'classnames'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst StickerThemed = styled.div`\n  background: ${({ theme }) => theme.primary};\n  color: white;\n  margin-top: 1rem;\n  padding: 0;\n  border-radius: 0 0.7rem 0.7rem 0;\n  white-space: nowrap;\n  flex: none;\n\n  & p {\n    display: inline-block;\n    margin: 0.6rem 1rem 0 0;\n    vertical-align: top;\n    white-space: nowrap;\n  }\n`\n\nconst IconStyled = styled.span`\n  margin: 0.5rem 1rem 0 0.1rem;\n  &:before,:after {\n  font-size: 1.8rem;\n  margin: 0 0 0 1rem;\n  }\n}\n`\n\ninterface IProps {\n  success?: boolean\n}\n\nexport const Sticker: React.SFC<IProps> = ({ success = false, children }) => (\n  <StickerThemed\n    className={classNames('right__sticker', {\n      'order-method-unselected': !success,\n      'order-method-selected': success,\n    })}\n  >\n    <IconStyled className=\"flaticon-transport\" />\n    <p>{children}</p>\n  </StickerThemed>\n)\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Route } from 'react-router'\nimport { Row } from 'reactstrap'\nimport styled from 'styled-components'\n\nimport { ColStyle } from 'common/ColStyle'\nimport { GShopHeader } from 'graph/types'\n\nimport { OrderAddress } from './OrderAddress'\nimport { ShopCloseAlert } from './ShopCloseAlert'\nimport { ShopClosingTimeModal } from './ShopClosingTimeModal'\nimport { ShopHeaderIcons } from './ShopHeaderIcons'\nimport { ShopIntro } from './ShopIntro'\nimport { ShopLogo } from './ShopLogo'\nimport { ShopOpeningHours } from './ShopOpeningHours'\nimport { Sticker } from './Sticker'\n\ninterface IProps {\n  branch?: GShopHeader.Branch\n  isLoading: boolean\n}\n\nconst ShopHeaderStyled = styled.div`\n  display: flex;\n  min-height: 200px;\n`\n\nconst ShopHeaderInfoStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nexport const ShopHeader: React.SFC<IProps> = ({ branch, isLoading }) => (\n  <div>\n    <Row className=\"justify-content-md-center\">\n      <ShopHeaderIcons />\n    </Row>\n\n    <Row className=\"row-white justify-content-md-center\">\n      <ColStyle>\n        <ShopHeaderStyled data-testid=\"shopHeader\">\n          {isLoading ? null : (\n            <>\n              <ShopLogo url={(branch && branch.homepageUrl) || ''} />\n\n              <ShopHeaderInfoStyled>\n                <Route\n                  exact={true}\n                  path=\"/\"\n                  render={() => (\n                    <>\n                      <Sticker>\n                        <Trans>Choose your delivery option below</Trans>\n                      </Sticker>\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/order\"\n                  render={() => (\n                    <>\n                      <ShopClosingTimeModal status={branch} />\n                      <Sticker success={true}>\n                        <OrderAddress address={branch && branch.address} />\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/finish\"\n                  render={() => (\n                    <>\n                      <Sticker success={true}>\n                        <Trans>Order was send</Trans>\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n              </ShopHeaderInfoStyled>\n              <ShopCloseAlert status={branch} />\n            </>\n          )}\n        </ShopHeaderStyled>\n      </ColStyle>\n    </Row>\n  </div>\n)\n","import { buildQuery, gql } from 'graph'\n\nimport {\n  AddressFragment,\n  CompanyBranchStatusFragment,\n} from 'graph/fragments.graphql'\nimport { GShopHeader } from 'graph/types'\n\nexport const ShopHeaderQuery = gql`\n  query GShopHeader($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      name\n      phone\n      homepageUrl\n      headerText\n      address {\n        ...GAddress\n      }\n      ...GCompanyBranchStatus\n    }\n  }\n  ${AddressFragment}\n  ${CompanyBranchStatusFragment}\n`\n\nexport const QueryShopHeader = buildQuery<\n  GShopHeader.Query,\n  GShopHeader.Variables\n>(ShopHeaderQuery)\n","import React from 'react'\n\nimport { WithRoot } from 'common/WithRoot'\n\nimport { ShopHeader } from './ShopHeader'\nimport { QueryShopHeader } from './ShopHeader.graphql'\n\ninterface IProps {}\n\nexport const ShopHeaderView: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={root => (\n      <QueryShopHeader\n        // need to use branchId from order first as it reflects branch for which\n        // order is being made and it might have different eg. business hours\n        // then the one obtained through business code\n        variables={{ branchId: root.order.branchId || root.business.branchId! }}\n        skip={!root.business.isValid}\n        renderLoading={false}\n        render={({ branch }, { loading }) => (\n          <ShopHeader branch={branch} isLoading={loading} />\n        )}\n      />\n    )}\n  />\n)\n\nexport default ShopHeaderView\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Button, Container, Modal, ModalBody, ModalHeader } from 'reactstrap'\n\nimport 'common/Modal.css'\nimport { WithOrder } from 'common/WithOrder'\n\nexport const OrderErrorModal: React.SFC = () => (\n  <WithOrder\n    observe={true}\n    render={order => (\n      <Modal\n        isOpen={order.hasErrors}\n        toggle={order.clearErrors}\n        className=\"modal__container\"\n      >\n        <ModalHeader\n          toggle={order.clearErrors}\n          tag={Container}\n          className=\"modal__header\"\n        >\n          <span>\n            <Trans>Order can not be completed</Trans>\n          </span>\n        </ModalHeader>\n        <ModalBody className=\"modal__body\">\n          <div className=\"modal__body__content\">\n            {order.hasErrors &&\n              order.submitErrors!.map((error, idx) => (\n                <div key={idx}>{error}</div>\n              ))}\n          </div>\n          <div className=\"modal__body__button__line\">\n            <div className=\"modal__body__button__strip\" />\n            <Button\n              className=\"modal__body__button\"\n              color=\"primary\"\n              onClick={order.clearErrors}\n            >\n              <Trans>I understand</Trans>\n            </Button>\n            />\n          </div>\n        </ModalBody>\n      </Modal>\n    )}\n  />\n)\n","import React from 'react'\nimport { Field } from 'react-form'\n\nimport { SelectButtonThemed } from 'common/Buttons'\nimport { PaymentGateEnum } from 'graph/types'\n\nexport interface IPaymentButtonProps {\n  method: PaymentGateEnum\n  disabled?: boolean\n}\n\nexport const OrderPaymentButton: React.SFC<IPaymentButtonProps> = ({\n  children,\n  disabled,\n  method,\n  ...props\n}) => (\n  <Field\n    field=\"payment\"\n    render={fieldApi => (\n      <SelectButtonThemed\n        disabled={disabled}\n        selected={fieldApi.value === method}\n        onClick={() => {\n          fieldApi.setValue(method)\n        }}\n        {...props}\n      >\n        <Checkmark show={fieldApi.value === method} />\n        {children}\n      </SelectButtonThemed>\n    )}\n  />\n)\n\nfunction Checkmark({ show }: { show: boolean }) {\n  return show ? (\n    <span className=\"flaticon-mark order__payment__method__button__checked\" />\n  ) : (\n    <div className=\"order__payment__method__button__unchecked\" />\n  )\n}\n","import './OrderPaymentMethod.css'\n\nimport { i18n } from 'i18n'\nimport React from 'react'\n\nimport { PaymentGateEnum } from 'graph/types'\n\nimport { OrderPaymentButton } from './OrderPaymentButton'\n\nexport const OrderPaymentMethod: React.SFC = () => (\n  <div className=\"order__payment__method\">\n    <OrderPaymentButton\n      method={PaymentGateEnum.GOPAY}\n      data-testid=\"orderPaymentMethod__GoPay\"\n    >\n      {i18n.t`Pay by card`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n    <OrderPaymentButton\n      method={PaymentGateEnum.CASH}\n      data-testid=\"orderPaymentMethod__Cash\"\n    >\n      {i18n.t`Pay by cash`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n  </div>\n)\n","import React from 'react'\n\nimport { TOrderModel } from '../../models/OrderModel'\nimport { OrderAgreements } from './OrderAgreements'\nimport { OrderFormInputs } from './OrderFormInputs'\nimport { OrderFormSetup } from './OrderFormSetup'\nimport { OrderPaymentMethod } from './OrderPaymentMethod'\nimport { OrderSubmitLine } from './OrderSubmitLine'\n\ninterface IProps {\n  order: TOrderModel\n}\n\nexport const OrderForm: React.SFC<IProps> = ({ order }) => (\n  <OrderFormSetup\n    order={order}\n    render={form => (\n      <div className=\"order__form\">\n        <div className=\"order__form__inner\">\n          <OrderFormInputs />\n          <OrderPaymentMethod />\n          <OrderAgreements />\n        </div>\n        <OrderSubmitLine\n          onClick={form.submitForm}\n          canSubmit={order.isVamInitialized}\n        />\n      </div>\n    )}\n  />\n)\n","import { Trans } from '@lingui/react'\nimport { Observer } from 'mobx-react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { AlertModal } from '../../common/AlertModal'\nimport Pacman from '../../common/Pacman'\nimport { TOrderModel } from '../../models/OrderModel'\n\ninterface IProps {\n  order: TOrderModel\n}\n\nconst TextPadding = styled.div`\n  padding-bottom: 2rem;\n`\n\nexport const OrderGoPayModal: React.SFC<IProps> = ({ order }) => (\n  <Observer>\n    {() => (\n      <AlertModal isOpen={order.isGoPayChecking} headerText=\"GoPay platba\">\n        <TextPadding>\n          <Trans>Checking your GoPay payment, please wait...</Trans>\n        </TextPadding>\n        <Pacman noMargin={true} />\n      </AlertModal>\n    )}\n  </Observer>\n)\n","import './OrderFormView.css'\n\nimport React from 'react'\n\nimport { WithOrder } from 'common/WithOrder'\n\nimport { OrderErrorModal } from './OrderErrorModal'\nimport { OrderForm } from './OrderForm'\nimport { QueryOrderForm } from './OrderFormView.graphql'\nimport { OrderGoPayModal } from './OrderGoPayModal'\n\nexport const OrderFormView: React.SFC = () => (\n  <WithOrder\n    render={orderModel => (\n      <>\n        <QueryOrderForm\n          variables={{ orderId: orderModel.orderId! }}\n          renderLoading={false}\n          render={({ order }) => {\n            return !order || order.countWares === 0 ? null : (\n              <OrderForm order={orderModel} />\n            )\n          }}\n        />\n        <OrderGoPayModal order={orderModel} />\n        <OrderErrorModal />\n      </>\n    )}\n  />\n)\n","import './ShopOverview.css'\n\nimport { i18n } from 'i18n'\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport BackgroundThemed from 'common/BackgroundThemed'\nimport { ColStyleLeft, ColStyleRight } from 'common/ColStyle'\nimport { FoodMenuView } from 'segments/foodMenu/FoodMenuView'\n\nimport { CartView } from '../cart/CartView'\nimport { OrderFormStorageNotice } from '../orderForm/OrderFormStorageNotice'\nimport { OrderFormView } from '../orderForm/OrderFormView'\n\nexport const ShopOverview = () => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyleLeft>\n      <div className=\"shop__overview__column\">\n        <FoodMenuView />\n      </div>\n    </ColStyleLeft>\n\n    <ColStyleRight>\n      <div className=\"shop__overview__column cart__column\">\n        <div className=\"cart__column__header\">\n          <span className=\"flaticon-cart cart__column__header__icon\" />\n          <h4>{i18n.t`Your order`}</h4>\n        </div>\n\n        <BackgroundThemed\n          className=\"cart__column__cart\"\n          imageName=\"backgroundCart\"\n        >\n          <CartView />\n        </BackgroundThemed>\n\n        <OrderFormView />\n      </div>\n    </ColStyleRight>\n    <OrderFormStorageNotice />\n  </Row>\n)\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { Container } from 'reactstrap'\n\nimport { FinishView } from 'segments/finish/FinishView'\nimport { MapView } from 'segments/map/views/MapView'\nimport { ShopHeaderView } from 'segments/shop/ShopHeaderView'\nimport { ShopOverview } from 'segments/shop/ShopOverview'\n\nconst DesktopApp = () => (\n  <Container fluid={true}>\n    <Route path=\"/\" component={ShopHeaderView} />\n    <Route exact={true} path=\"/\" component={MapView} />\n    <Route path=\"/order\" component={ShopOverview} />\n    <Route path=\"/finish\" component={FinishView} />\n  </Container>\n)\n\nexport default DesktopApp\n"],"sourceRoot":""}