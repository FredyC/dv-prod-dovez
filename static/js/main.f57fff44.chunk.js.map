{"version":3,"sources":["helpers/gps.ts","segments/cart/CartView.graphql.ts","segments/foodMenu/FoodMenuView.graphql.ts","segments/mobile/MobileCart.graphql.ts","models/BaseModel.ts","common/Responsive.tsx","segments/map/PickupMap.graphql.ts","models/OrderModel.graphql.ts","index.tsx","helpers/logger.ts","app/App.tsx","graph/fragments.graphql.ts","helpers/sentry.ts","common/ErrorContainer.tsx","config.ts","common/PageTitle.tsx","app/Router.tsx","common/ThemeSwitchProvider.tsx","createClient.ts","graph/errorHandler.ts","helpers/offline.ts","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","models/RootModel.ts","helpers/persistModel.ts","models/AuthModel.ts","models/BusinessModel.ts","models/BannerModel.ts","models/BusinessModel.graphql.ts","models/ThemeModel.ts","models/ThemeModel.graphql.ts","models/ConfigModel.ts","models/LocationModel.ts","models/LocationModel.graphql.ts","models/MapModel.ts","models/OrderModel.ts","helpers/gopay.ts","graph/buildMutation.tsx","models/UserModel.ts","common/WithRoot.tsx","common/Pacman.tsx","i18n.tsx","graph/buildQuery.tsx","graph/types.ts","helpers/ramda.ts","graph/index.ts"],"names":["gps","lat","Number","latitude","lng","longitude","latLng","_graphqlTag","__webpack_require__","_graph","_fragments","OrderFragment","default","CartItemFragment","PriceFragment","CartViewQuery","QueryCartView","buildQuery","_buildQuery","FoodMenuQuery","CartPresenceFragment","FoodMenuCartPresenceQuery","QueryFoodMenuCartPresence","QueryFoodMenu","_FoodMenuView","OrderMobileFragment","MobileCartQuery","QueryMobileCart","_debug","_mobxStateTree","BaseModel","types","model","views","self","log","name","getPath","trim","getType","env","getEnv","client","root","getRoot","_react","_interopRequireDefault","_reactResponsive","_styledComponents","Desktop","props","createElement","_extends","minWidth","Mobile","maxAspectRatio","maxWidth","screen","minAspectRatio","children","mobile","desktop","Fragment","className","args","css","PickupBranchFragment","CompanyBranchStatusFragment","GeoPointFragment","AddressFragment","PickupMapBrandQuery","PickupMapBranchQuery","QueryPickupMapBrand","QueryPickupMapBranch","_CartView","_MobileCart","CartRecipeFragment","OrderCartForRecipeQuery","OrderCartForItemQuery","CreateOrderFragment","CreatePickupOrderMutation","CreateDeliveryOrderMutation","AddToOrderMutation","AddToOrderMobileMutation","ChangeOrderItemMutation","RemoveOrderItemMutation","SubmitOrderMutation","OrderPaymentStatusQuery","VamStatusQuery","_tools","_reactApollo","_reactApolloHooks","_reactDom","_App","_Router","_ThemeSwitchProvider","_WithRoot","_createClient","_sentry","_i18n","_RootModel","createApolloClient","createRootModel","Main","RootProvider","value","ApolloProvider","I18nManager","Router","installSentry","render","document","getElementById","serviceWorker","register","onUpdate","sw","setTimeout","window","confirm","i18n","_","postMessage","navigator","addEventListener","event","data","location","reload","logMain","logDebug","logGraph","logError","logAuth","logRouting","logPersist","logOrder","logSentry","logLang","_react2","_ErrorContainer","_Pacman","_PageTitle","_Responsive","LandscapeMessage","div","withConfig","displayName","DesktopApp","lazy","Promise","all","e","then","t","bind","MobileApp","ErrorContainer","prod","PageTitle","Suspense","fallback","MobileLandscape","Trans","id","JsonAddressFragment","RecipeFragment","PromoCodeFragment","_ravenJs","_verror","_config","_logger","_ramda","cb","sentryDSN","appConfig","config","environment","install","context","userId","token","setUserContext","isGuest","setExtraContext","error","info","isSetup","captureException","extra","showReportDialog","errors","captureBreadcrumb","category","level","message","Object","assign","forEach","err","Error","userErrors","filter","RM","propEq","length","lastEventId","title","head","meta","VError","cause","ErrorBoundaryContainer","ProductionErrorBoundary","dispatchErrorReporting","reportRenderingError","DeveloperErrorBoundary","fallbackLanguage","supportedLanguages","endpoint","persistenceKey","NODE_ENV","PUBLIC_URL","REACT_APP_LOCAL_ENDPOINT","REACT_APP_STAGE","REACT_APP_LOCAL_KEY","redirectOnFail","pageTitleSuffix","_reactDocumentTitle","WithRoot","observe","business","isValid","branch","brand","_mobxReactLite","_reactRouterDom","useRoot","useObserver","BrowserRouter","basename","routerBasePath","key","theme","loaded","ThemeProvider","cache","_apolloCacheInmemory","InMemoryCache","dataIdFromObject","o","__typename","loggingLink","_apolloLinkLog","enabled","httpLink","_apolloLinkBatchHttp","BatchHttpLink","uri","credentials","retryLink","_apolloLinkRetry","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","_operation","offlineLink","_apolloLinkQueue","_mobx","autorun","_offline","isNetworkOnline","open","close","createOfflineLink","errorLink","_errorHandler","createErrorLink","link","_apolloLink","ApolloLink","from","_apolloClient","ApolloClient","_apolloLinkError","errorHandler","graphQLErrors","networkError","operation","reportFailingQuery","query","operationName","variables","map","locations","path","onError","isOnline","change","oldValue","newValue","observable","box","onLine","set","get","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","webpackAsyncContext","req","ids","resolve","code","keys","module","exports","RootModel","create","fetch","geolocation","init","_persistModel","_AuthModel","_BaseModel","_BusinessModel","_ConfigModel","_LocationModel","_MapModel","_OrderModel","_UserModel","named","auth","optional","AuthModel","BusinessModel","ConfigModel","MapModel","order","OrderModel","LocationModel","user","UserModel","persistedModels","actions","__awaiter","authenticateClient","persistModel","queryBusiness","queryInitialUserLocation","checkPaymentStatus","modelName","stateKey","writeState","snapshot","_localforage","setItem","state","getItem","applySnapshot","getSnapshot","removeItem","onSnapshot","_apolloLinkContext","maybeNull","string","getClientHeaders","Authorization","[object Object]","identifyGuest","fetching","authLink","setContext","fetchToken","authenticate","String","headers","concat","preProcessSnapshot","url","Accept","response","json","_types","_BannerModel","_ThemeModel","ThemeModel","banners","BannerModel","volatile","isBrand","isMobileApp","country","orderOrigin","OrderOriginEnum","Web","branchId","companyId","company","brandId","requestedCode","REACT_APP_BUSINESS_CODE","URL","href","searchParams","codeParam","lookup","knownBasePath","address","orderCancel","BranchLookupQuery","replace","updateFromLookup","stylesQuery","queryStyles","setSentryContext","has","_dateFns","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","differenceInDays","Boolean","CompanyBranchFragment","_color","storeLogo","storeLogoMobile","backgroundCart","primary","secondary","secondaryHover","tertiary","tertiaryHover","tertiaryText","unselected","unselectedHover","unselectedText","styles","active","main","calcHoverColor","mainSecondary","CompanyBranchStyleQuery","applyStyle","companyBranch","inputColor","lighten","hsl","orderItemsMax","_gps","number","searchValue","isOpen","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","isResolving","isGeolocationAvailable","hasLocation","hasAddress","isDeliveryAddress","hasFinishedSearch","geoPoint","resolutionTarget","gpsToLatLng","result","finalAddress","street","houseNumber","city","isValidAddress","setLocation","gpsCoordinates","resolver","vars","setIsResolving","ResolveLocationQuery","setResolutionResult","resolveLocation","clearAddress","userLocation","getCurrentPosition","coords","disableGeolocation","alert","enableHighAccuracy","maximumAge","LocationResolutionFragment","GPSCzechia","zoom","mapRef","clickPoint","isReady","center","ref","getZoom","getCenter","radiusMeters","panTo","ev","latLngToGps","_gopay","_PickupMap","orderId","orderMethod","DeliveryTypeEnum","Messenger","payment","PaymentGateEnum","Gopay","firstname","lastname","email","phone","phonePrefix","note","isSubmitting","isGoPayChecking","submitErrors","agreements","lastActiveRecipeId","isVamInitialized","hasOrder","fragmentOrderId","usingDeliveryOrderMethod","usingPickupOrderMethod","Pickup","hasErrors","defaultPhonePrefix","getSubmitVariables","formValues","customer","firstName","lastName","emails","phones","paymentGate","deliverAt","addHours","prop","method","checking","Array","isArray","recipeId","fetchPolicy","status","values","shouldRememberForm","done","undefined","mutate","mutation","orderCreated","initVam","sideDishes","current","readFragment","fragment","fragmentName","recipe","optimisticResponse","createOrderRecipe","countWares","items","price","formattedValue","automatic","itemId","destroyOrderRecipe","item","input","useAgreements","vamStatus","reportError","vamFailed","submitOrder","rememberFormValues","refetchQueries","submitFailed","submitResult","finishOrder","Cash","submitFinished","gopayUrl","executeGoPayPayment","goPayStatusCheck","paymentStatus","queryPaymentStatus","isSuccess","parsedUrl","when","this","checkDelay","clearTimeout","orderPaid","search","pathname","toString","scriptUrl","includes","embedScriptSandbox","embedScript","_scriptjs","loadScript","options","gatewayUrl","inline","getOptions","checkout","_a","__rest","Mutation","rememberForm","boolean","closingTimeAlertHidden","orderLimitAlertHidden","_mobxReact","_interopRequireWildcard","rootContext","createContext","useContext","Observer","Provider","_reactSpinkit","noMargin","style","display","alignSelf","justifyContent","data-testid","marginTop","_core","_hooks","detector","setupI18n","changeLanguage","lang","catalog","load","loadCatalog","activate","detectLanguage","languages","LocaleResolver","UrlDetector","NavigatorDetector","LanguageOnlyTransformer","getLocales","join","find","loc","setReady","useState","language","useAsyncEffect","I18nProvider","renderFragment","renderLoading","renderError","Query","loading","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","LanguageEnum","ShiftUserStateEnum","DeviceStateEnum","DeviceTypeEnum","WareUnitEnum","PaymentTypeEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","ZoneTypeEnum","OrderStateEnum","OrderBillingTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","SubscriptionActionType","SettingTypeEnum","_buildMutation"],"mappings":"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","file":"static/js/main.f57fff44.chunk.js","sourcesContent":["import { GGeoPoint } from '../graph/types'\n\nexport type GeoPoint = Omit<GGeoPoint.Fragment, '__typename'>\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { CartItemFragment, PriceFragment } from '../../graph/fragments.graphql'\nimport { GCartView } from '../../graph/types'\n\nexport const OrderFragment = gql`\n  fragment GOrder on Order {\n    id\n    countWares\n    items {\n      ...GCartItem\n      price: priceWithSideDishes {\n        ...GPrice\n      }\n      sideDishes {\n        ...GCartItem\n      }\n    }\n    coverPrice {\n      ...GPrice\n    }\n    transportFee {\n      ...GPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...GPrice\n      }\n    }\n    totalDiscount {\n      ...GPrice\n    }\n    totalSum {\n      ...GPrice\n    }\n  }\n  ${CartItemFragment}\n  ${PriceFragment}\n`\n\nexport const CartViewQuery = gql`\n  query GCartView($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrder\n      deliveryType {\n        enum\n      }\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const QueryCartView = buildQuery<GCartView.Query, GCartView.Variables>(\n  CartViewQuery,\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport { PriceFragment } from '../../graph/fragments.graphql'\nimport { GFoodMenu, GFoodMenuCartPresence } from '../../graph/types'\n\nexport const FoodMenuQuery = gql`\n  query GFoodMenu($branchId: ID!) {\n    wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      enabled: true\n    ) {\n      ...GFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...GFoodMenuRecipe\n      }\n    }\n  }\n\n  fragment GFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n\n  fragment GFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...GPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${PriceFragment}\n`\n\nexport const CartPresenceFragment = gql`\n  fragment GCartPresence on Order {\n    items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FoodMenuCartPresenceQuery = gql`\n  query GFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...GCartPresence\n    }\n  }\n  ${CartPresenceFragment}\n`\n\nexport const QueryFoodMenuCartPresence = buildQuery<\n  GFoodMenuCartPresence.Query,\n  GFoodMenuCartPresence.Variables\n>(FoodMenuCartPresenceQuery)\n\nexport const QueryFoodMenu = buildQuery<GFoodMenu.Query, GFoodMenu.Variables>(\n  FoodMenuQuery,\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { PriceFragment } from '../../graph/fragments.graphql'\nimport { GMobileCart } from '../../graph/types'\nimport { CartPresenceFragment } from '../foodMenu/FoodMenuView.graphql'\n\nexport const OrderMobileFragment = gql`\n  fragment GOrderMobile on Order {\n    id\n    totalSum {\n      ...GPrice\n    }\n    countWares\n    ...GCartPresence\n  }\n  ${PriceFragment}\n  ${CartPresenceFragment}\n`\n\nexport const MobileCartQuery = gql`\n  query GMobileCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const QueryMobileCart = buildQuery<\n  GMobileCart.Query,\n  GMobileCart.Variables\n>(MobileCartQuery)\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { IRootEnvironment, TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    const name = getPath(self).trim() || getType(self).name\n    return debug(`c2e:model/${name}`)\n  },\n  get env() {\n    return getEnv<IRootEnvironment>(self)\n  },\n  get client() {\n    const { client } = getEnv<IRootEnvironment>(self)\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components'\n\nexport const Desktop = props => <ReactResponsive {...props} minWidth={768} />\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxAspectRatio=\"14/9\" maxWidth={767} />\n)\nexport const MobileLandscape = props => (\n  <ReactResponsive\n    {...props}\n    screen={true}\n    minAspectRatio=\"14/9\"\n    maxWidth={767}\n  />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.SFC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${768 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${767 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport {\n  AddressFragment,\n  CompanyBranchStatusFragment,\n  GeoPointFragment,\n} from '../../graph/fragments.graphql'\nimport { GPickupMapBranch, GPickupMapBrand } from '../../graph/types'\n\nconst PickupBranchFragment = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...GGeoPoint\n    }\n    address {\n      ...GAddress\n    }\n    pickupEnabled\n    ...GCompanyBranchStatus\n  }\n  ${CompanyBranchStatusFragment}\n  ${GeoPointFragment}\n  ${AddressFragment}\n`\n\nexport const PickupMapBrandQuery = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const PickupMapBranchQuery = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const QueryPickupMapBrand = buildQuery<\n  GPickupMapBrand.Query,\n  GPickupMapBrand.Variables\n>(PickupMapBrandQuery)\n\nexport const QueryPickupMapBranch = buildQuery<\n  GPickupMapBranch.Query,\n  GPickupMapBranch.Variables\n>(PickupMapBranchQuery)\n","import gql from 'graphql-tag'\n\nimport { PriceFragment } from '../graph/fragments.graphql'\nimport { OrderFragment } from '../segments/cart/CartView.graphql'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\n\nconst CartRecipeFragment = gql`\n  fragment GCartRecipe on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...GPrice\n        }\n      }\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const OrderCartForRecipeQuery = gql`\n  query GOrderCartForRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...GCartRecipe\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nexport const OrderCartForItemQuery = gql`\n  query GOrderCartForItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...GCartRecipe\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nconst CreateOrderFragment = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const CreatePickupOrderMutation = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const CreateDeliveryOrderMutation = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const AddToOrderMutation = gql`\n  mutation GAddToOrder($orderId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const AddToOrderMobileMutation = gql`\n  mutation GAddToOrderMobile(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const ChangeOrderItemMutation = gql`\n  mutation GChangeOrderItem($orderId: ID!, $itemId: ID!, $sideDishes: [ID!]) {\n    updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const RemoveOrderItemMutation = gql`\n  mutation GRemoveOrderItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const SubmitOrderMutation = gql`\n  mutation GSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime!\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport const OrderPaymentStatusQuery = gql`\n  query GOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport const VamStatusQuery = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n","import { serviceWorker } from '@speedlo/tools'\nimport React from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloProviderHooks } from 'react-apollo-hooks'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport ThemeSwitchProvider from './common/ThemeSwitchProvider'\nimport { RootProvider } from './common/WithRoot'\nimport { createApolloClient } from './createClient'\nimport { installSentry } from './helpers/sentry'\nimport { i18n, I18nManager } from './i18n'\nimport { createRootModel } from './models/RootModel'\n\nconst client = createApolloClient()\nconst root = createRootModel(client)\n\nconst Main = () => (\n  <RootProvider value={root}>\n    <ApolloProvider client={client}>\n      <ApolloProviderHooks client={client}>\n        <I18nManager>\n          <Router>\n            <ThemeSwitchProvider>\n              <App />\n            </ThemeSwitchProvider>\n          </Router>\n        </I18nManager>\n      </ApolloProviderHooks>\n    </ApolloProvider>\n  </RootProvider>\n)\n\ninstallSentry(() => {\n  ReactDOM.render(<Main />, document.getElementById('root'))\n})\n\nserviceWorker.register({\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nnavigator.serviceWorker.addEventListener('message', event => {\n  if (event.data === 'update-applied') {\n    location.reload()\n  }\n})\n","import debug from 'debug'\n\nexport const logMain = debug('c2e:app')\nexport const logDebug = debug('c2e:debug')\nexport const logGraph = debug('c2e:graph')\nexport const logError = debug('c2e:error')\nexport const logAuth = debug('c2e:auth')\nexport const logRouting = debug('c2e:routing')\nexport const logPersist = debug('c2e:persist')\nexport const logOrder = debug('c2e:order')\nexport const logSentry = debug('c2e:sentry')\nexport const logLang = debug('c2e:lang')\n","import './App.css'\n\nimport { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport Pacman from '../common/Pacman'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile, MobileLandscape } from '../common/Responsive'\n\nconst LandscapeMessage = styled.div`\n  font-size: 1.1rem;\n  padding: 3rem;\n  vertical-align: center;\n`\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <PageTitle />\n    <React.Suspense fallback={<Pacman />}>\n      <Desktop>\n        <DesktopApp />\n      </Desktop>\n      <Mobile>\n        <MobileApp />\n      </Mobile>\n    </React.Suspense>\n    <MobileLandscape>\n      <LandscapeMessage>\n        <Trans>\n          We know, you like space. Our app is optimised for desktop. Leave your\n          phone in portrait for now.\n        </Trans>\n      </LandscapeMessage>\n    </MobileLandscape>\n  </ErrorContainer>\n)\n\nexport default App\n","import gql from 'graphql-tag'\n\nexport const JsonAddressFragment = gql`\n  fragment GJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n  }\n`\n\nexport const AddressFragment = gql`\n  fragment GAddress on Address {\n    id\n    location {\n      ...GJsonAddress\n    }\n  }\n  ${JsonAddressFragment}\n`\n\nexport const GeoPointFragment = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const PriceFragment = gql`\n  fragment GPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const RecipeFragment = gql`\n  fragment GRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const CartItemFragment = gql`\n  fragment GCartItem on OrderRecipe {\n    id\n    automatic\n    recipe {\n      ...GRecipe\n    }\n  }\n  ${RecipeFragment}\n`\n\nexport const CompanyBranchStatusFragment = gql`\n  fragment GCompanyBranchStatus on CompanyBranch {\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours {\n      id\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n  }\n`\n\nexport const PromoCodeFragment = gql`\n  fragment GPromoCode on PromoCode {\n    id\n    code\n  }\n`\n","import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\nimport { RM } from './ramda'\n\nexport const installSentry = cb => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyGuest = (userId: string, token: string) => {\n  Raven.setUserContext({\n    isGuest: true,\n    userId,\n    token,\n  })\n}\n\nexport const setSentryContext = (context: object) => {\n  Raven.setExtraContext(context)\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n    Raven.showReportDialog()\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  Raven.captureBreadcrumb({\n    category: 'graphql',\n    level: 'debug',\n    message: 'query',\n    data: {\n      ...data,\n      errors,\n    },\n  })\n  errors.forEach(err => {\n    Raven.captureException(new Error(err.message), { extra: err })\n  })\n  const userErrors = errors.filter(RM.propEq('showToUser', true))\n  if (userErrors.length && Raven.lastEventId()) {\n    Raven.showReportDialog({\n      title: RM.head(userErrors)!.message,\n    })\n  }\n}\n\nexport const reportError = (error: Error, meta: object = {}) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n      ...meta,\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","import React from 'react'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.SFC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  let ErrorBoundaryContainer\n\n  if (prod) {\n    ErrorBoundaryContainer = require('react-error-guard')\n      .ProductionErrorBoundary\n    return (\n      <ErrorBoundaryContainer\n        dispatchErrorReporting={({ error, info }) => {\n          reportRenderingError(error, info)\n        }}\n      >\n        {children}\n      </ErrorBoundaryContainer>\n    )\n  } else {\n    ErrorBoundaryContainer = require('react-error-guard').DeveloperErrorBoundary\n    return <ErrorBoundaryContainer>{children}</ErrorBoundaryContainer>\n  }\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: process.env.REACT_APP_LOCAL_ENDPOINT,\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: null,\n  pageTitleSuffix: 'LOCAL',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n  })\n}\n","import React from 'react'\nimport DocumentTitle from 'react-document-title'\n\nimport { appConfig } from '../config'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {}\n\nexport const PageTitle: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={root => {\n      if (root.business.isValid) {\n        return (\n          <DocumentTitle\n            title={`${root.business.branch!.brand.name} - ${\n              appConfig.pageTitleSuffix\n            }`}\n          />\n        )\n      }\n      return <DocumentTitle title={appConfig.pageTitleSuffix} />\n    }}\n  />\n)\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from '../common/WithRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() =>\n    business.isValid ? (\n      <BrowserRouter\n        basename={business.routerBasePath}\n        key={business.routerBasePath}\n      >\n        {children}\n      </BrowserRouter>\n    ) : null,\n  )\n}\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { ThemeProvider } from 'styled-components'\n\nimport Pacman from './Pacman'\nimport { useRoot } from './WithRoot'\n\nconst ThemeSwitchProvider: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() =>\n    business.theme.loaded ? (\n      <ThemeProvider theme={business.theme}>\n        {children as React.ReactChild}\n      </ThemeProvider>\n    ) : (\n      <Pacman />\n    ),\n  )\n}\n\nexport default ThemeSwitchProvider\n","import { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport createLogLink from 'apollo-link-log'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from './config'\nimport { createErrorLink } from './graph/errorHandler'\nimport { logGraph } from './helpers/logger'\nimport { isNetworkOnline } from './helpers/offline'\n\nexport type GraphClient = ApolloClient<NormalizedCacheObject>\n\nexport function createApolloClient() {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const loggingLink = createLoggingLink()\n  const httpLink = createHttpLink()\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n\n  const link = ApolloLink.from([\n    loggingLink,\n    retryLink,\n    offlineLink,\n    errorLink,\n    httpLink,\n  ])\n\n  return new ApolloClient({ link, cache })\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createLoggingLink() {\n  return createLogLink({\n    enabled: process.env.REACT_APP_STAGE === 'dev',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: (error, _operation) => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ErrorResponse, onError } from 'apollo-link-error'\nimport debug from 'debug'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nconst log = debug('graph:error')\n\nexport const errorHandler = ({\n  graphQLErrors,\n  networkError,\n  operation,\n}: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n    graphQLErrors.map(({ message, locations, path }) =>\n      log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    )\n  }\n  if (networkError) {\n    log(`[Network error]: ${networkError}`)\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","var map = {\n\t\"./cs/messages.js\": [\n\t\t428,\n\t\t5\n\t],\n\t\"./de/messages.js\": [\n\t\t429,\n\t\t6\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t431,\n\t\t8\n\t],\n\t\"./en/messages.js\": [\n\t\t430,\n\t\t7\n\t],\n\t\"./pl/messages.js\": [\n\t\t432,\n\t\t9\n\t],\n\t\"./sk/messages.js\": [\n\t\t433,\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 392;\nmodule.exports = webpackAsyncContext;","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { GraphClient } from '../createClient'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .actions(self => ({\n    init: async () => {\n      self.auth.authenticateClient()\n      await Promise.all(self.persistedModels.map(persistModel))\n      await self.business.queryBusiness()\n      await self.location.queryInitialUserLocation()\n      await self.order.checkPaymentStatus()\n    },\n  }))\n\nexport interface IRootEnvironment {\n  client: GraphClient\n  fetch: TFetch\n  geolocation: Geolocation\n}\n\nexport function createRootModel(client: GraphClient) {\n  const root = RootModel.create({}, {\n    client,\n    fetch: window.fetch,\n    geolocation: navigator.geolocation,\n  } as IRootEnvironment)\n  root.init()\n  return root\n}\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersist('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersist('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersist('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { setContext } from 'apollo-link-context'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logAuth } from '../helpers/logger'\nimport { identifyGuest } from '../helpers/sentry'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return self.token !== null\n    },\n    getClientHeaders() {\n      return {\n        Authorization: `Bearer ${self.token}`,\n      }\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      identifyGuest(userId, token)\n    },\n  }))\n  .actions(self => {\n    let fetching\n\n    const fetch = async () => {\n      if (!fetching) {\n        fetching = fetchToken()\n        const { token, userId } = await fetching\n        self.authenticate(token, String(userId))\n        fetching = null\n      }\n      return fetching\n    }\n\n    const authLink = setContext(async () => {\n      if (!self.token) {\n        await fetch()\n      }\n      return { headers: self.getClientHeaders() }\n    })\n\n    return {\n      authenticateClient() {\n        self.client.link = authLink.concat(self.client.link)\n      },\n    }\n  })\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId && snapshot.token) {\n      identifyGuest(snapshot.userId, snapshot.token)\n    }\n    return snapshot\n  })\n\nfunction fetchToken() {\n  const { endpoint } = appConfig\n  if (!endpoint) {\n    throw new Error('Missing endpoint in configuration.')\n  }\n  logAuth('retrieving guest token...')\n  const url = `${endpoint}/users/token?guest=true`\n  const options = {\n    headers: {\n      Accept: 'application/json',\n    },\n  }\n  logAuth('token retrieved')\n  return fetch(url, options).then(response => response.json())\n}\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport {\n  GBusinessCodeLookup,\n  GCompanyBranch,\n  OrderOriginEnum,\n} from '../graph/types'\nimport { logMain } from '../helpers/logger'\nimport { setSentryContext } from '../helpers/sentry'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\nimport { BranchLookupQuery } from './BusinessModel.graphql'\nimport { ThemeModel } from './ThemeModel'\n\ntype TBranch = Omit<GCompanyBranch.Fragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<GCompanyBranch.Country>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    theme: types.optional(ThemeModel, {}),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      // app can be built with a specific code for a purpose of mobile apps\n      let code = process.env.REACT_APP_BUSINESS_CODE || null\n      if (!code) {\n        // mostly used in DEV because it's not possible to use subdomains for\n        // business resolution ... use either code from url or stored one as fallback\n        const urlCode = readBusinessCodeFromUrl()\n        code = urlCode || self.code\n      }\n      return code\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: GBusinessCodeLookup.Lookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n\n      if (branch.id !== self.root.order.branchId) {\n        self.root.order.orderCancel()\n      }\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    mockBranchData(branch: TBranch) {\n      self.branch = branch\n    },\n  }))\n  .actions(self => ({\n    queryBusiness: async () => {\n      const { data } = await self.client.query<GBusinessCodeLookup.Query>({\n        query: BranchLookupQuery,\n        variables: {\n          code: self.requestedCode,\n          url: window.location.href,\n        },\n      })\n\n      if (!(data && data.lookup && data.lookup.branch)) {\n        logMain('no business found, used code %s', self.requestedCode)\n        redirectAway()\n        return\n      }\n\n      self.updateFromLookup(data.lookup)\n\n      if (self.branchId) {\n        const stylesQuery = self.theme.queryStyles(self.branchId)\n        // no need to wait for styles if some were loaded previously\n        if (!self.theme.loaded) {\n          await stylesQuery\n        }\n      }\n\n      setSentryContext({\n        requestedCode: self.requestedCode,\n        branchId: self.branchId,\n        brandId: self.brandId,\n        companyId: self.companyId,\n        isBrand: self.isBrand,\n      })\n\n      logMain(\n        'identified branch %s, brand %s; company %s, isBrand: %s',\n        self.branchId,\n        self.brandId,\n        self.companyId,\n        self.isBrand,\n      )\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId: branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import gql from 'graphql-tag'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const BranchLookupQuery = gql`\n  query GBusinessCodeLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n  ${CompanyBranchFragment}\n`\n","import Color from 'color'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { GCompanyBranchStyle } from '../graph/types'\nimport { BaseModel } from './BaseModel'\nimport { CompanyBranchStyleQuery } from './ThemeModel.graphql'\n\n// Fallback colors\nconst defaultPrimary = '#54984a'\nconst defaultSecondary = '#99230e'\nconst defaultTertiary = '#d9a700'\n\nexport const ThemeModel = BaseModel.named('Theme')\n  .props({\n    storeLogo: types.maybeNull(types.string),\n    storeLogoMobile: types.maybeNull(types.string),\n    backgroundCart: types.maybeNull(types.string),\n    primary: types.maybeNull(types.string),\n    secondary: types.maybeNull(types.string),\n    secondaryHover: types.maybeNull(types.string),\n    tertiary: types.maybeNull(types.string),\n    tertiaryHover: types.maybeNull(types.string),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    loaded: false,\n  })\n  .actions(self => ({\n    applyStyle(styles: GCompanyBranchStyle.Styles) {\n      Object.assign(self, {\n        primary: styles.active ? styles.active : defaultPrimary,\n        secondary: styles.main ? styles.main : defaultSecondary,\n        secondaryHover: calcHoverColor(\n          styles.main ? styles.main : defaultSecondary,\n        ),\n        tertiary: styles.mainSecondary ? styles.mainSecondary : defaultTertiary,\n        tertiaryHover: calcHoverColor(\n          styles.mainSecondary ? styles.mainSecondary : defaultTertiary,\n        ),\n        tertiaryText: 'white',\n        unselected: '#E5E5E5',\n        unselectedHover: '#EDEDED',\n        unselectedText: '#5A5A5A',\n        storeLogo: styles.storeLogo,\n        storeLogoMobile: styles.storeLogoMobile,\n        backgroundCart: styles.backgroundCart,\n      })\n      self.loaded = true\n    },\n  }))\n  .actions(self => ({\n    queryStyles: async (branchId: ID) => {\n      const { data } = await self.client.query<\n        GCompanyBranchStyle.Query,\n        GCompanyBranchStyle.Variables\n      >({\n        query: CompanyBranchStyleQuery,\n        variables: { branchId },\n      })\n      self.applyStyle(data.companyBranch.styles)\n    },\n  }))\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport interface TThemeModel extends Instance<typeof ThemeModel> {}\nexport interface TThemeModelProps extends SnapshotIn<typeof ThemeModel> {}\n","import gql from 'graphql-tag'\n\nexport const CompanyBranchStyleQuery = gql`\n  query GCompanyBranchStyle($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n","import { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport type TConfigModel = typeof ConfigModel.Type\nexport type TConfigModelProps = typeof ConfigModel.SnapshotType\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { GResolveLocation } from '../graph/types'\nimport { GeoPoint, gpsToLatLng } from '../helpers/gps'\nimport { i18n } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\nimport { ResolveLocationQuery } from './LocationModel.graphql'\n\ninterface IVolatileProps {\n  branchId: MaybeID\n  isOpen: boolean\n  isResolved: boolean\n  isStreetAddress: boolean\n  inDeliveryLocation: boolean\n  geolocationDisabled: boolean\n  isResolving: boolean\n}\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.optional(types.number, Infinity),\n    longitude: types.optional(types.number, Infinity),\n    searchValue: types.optional(types.string, ''),\n    address: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(self => ({\n    branchId: null,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    isResolving: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(self.env.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== Infinity || self.longitude !== Infinity\n    },\n    get hasAddress() {\n      return Boolean(self.address)\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get hasFinishedSearch() {\n      return (self.searchValue.length > 0 || self.address) && !self.isResolving\n    },\n    get geoPoint() {\n      return {\n        latitude: self.latitude,\n        longitude: self.longitude,\n      }\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      const { latitude, longitude } = self\n      return gpsToLatLng({ latitude, longitude })\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: any) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: GResolveLocation.ResolveLocation) {\n      const { finalAddress: address } = result\n      if (address) {\n        self.address = `${address.street} ${address.houseNumber}, ${\n          address.city\n        }`\n      }\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n      if (result.isResolved) {\n        self.setLocation(result.gpsCoordinates)\n        self.log('resolved as %s', self.address)\n      } else {\n        self.log('not resolved')\n      }\n    },\n    setVolatileProps(props: Partial<IVolatileProps>) {\n      Object.assign(self, props)\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = false\n    },\n    clearAddress() {\n      self.address = ''\n    },\n    setIsResolving(state: boolean) {\n      self.isResolving = state\n    },\n  }))\n  .actions(self => {\n    const resolver = async (vars?: Partial<GResolveLocation.Variables>) => {\n      self.setIsResolving(true)\n\n      const variables: GResolveLocation.Variables = {\n        ...self.resolutionTarget,\n        ...vars,\n      }\n      const { data } = await self.client.query<GResolveLocation.Query>({\n        query: ResolveLocationQuery,\n        variables,\n      })\n      if (data !== null) {\n        self.setResolutionResult(data.resolveLocation)\n      }\n      self.setIsResolving(false)\n    }\n    return {\n      queryInitialUserLocation() {\n        self.log('resolving initial user location...')\n        if (self.hasLocation) {\n          resolver({ latitude: self.latitude, longitude: self.longitude })\n        } else if (self.searchValue) {\n          resolver({ address: self.searchValue })\n        } else {\n          resolver()\n        }\n      },\n      withUserAddress(address: string) {\n        self.searchValue = address\n        if (address === '') {\n          self.clearAddress()\n        } else {\n          self.log('resolving user address: %s', address)\n          resolver({ address })\n        }\n      },\n      withUserLocation(userLocation: GeoPoint) {\n        self.log('resolving user location: %j', userLocation)\n        resolver(userLocation)\n      },\n      attemptGeolocation() {\n        self.log('geolocating...')\n        self.env.geolocation.getCurrentPosition(\n          ({ coords }) => {\n            resolver(coords)\n          },\n          err => {\n            self.log(new VError('failed geolocation', err))\n            self.disableGeolocation()\n            window.alert(i18n.t`Your browser does not support geolocation.`)\n          },\n          {\n            enableHighAccuracy: true,\n            maximumAge: 60 * 1000,\n          },\n        )\n      },\n    }\n  })\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import gql from 'graphql-tag'\n\nimport { JsonAddressFragment } from '../graph/fragments.graphql'\n\nconst LocationResolutionFragment = gql`\n  fragment GLocationResolution on AddressResolvedLocation {\n    finalAddress {\n      ...GJsonAddress\n    }\n    isResolved\n    isValidAddress\n    inDeliveryLocation\n    gpsCoordinates {\n      latitude\n      longitude\n    }\n    companyBranch {\n      id\n      isOpen\n    }\n  }\n  ${JsonAddressFragment}\n`\n\nexport const ResolveLocationQuery = gql`\n  query GResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      ...GLocationResolution\n    }\n  }\n  ${LocationResolutionFragment}\n`\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { GeoPoint, gpsToLatLng, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n  clickPoint: Maybe<GeoPoint>\n}\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n    clickPoint: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panToLocation(gps: GeoPoint, radiusMeters: number = 2000) {\n      if (self.mapRef) {\n        // const bounds = getBounds([\n        //   computeDestinationPoint(gps, radiusMeters, 135), // SE corner\n        //   computeDestinationPoint(gps, radiusMeters, 315), // NW corner\n        // ])\n\n        // // @ts-ignore padding missing in types\n        // self.mapRef.panToBounds(\n        //   {\n        //     west: bounds.minLng,\n        //     east: bounds.maxLng,\n        //     north: bounds.minLat,\n        //     south: bounds.maxLat,\n        //   },\n        //   20,\n        // )\n        self.mapRef.panTo(gpsToLatLng(gps))\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import { addHours } from 'date-fns'\nimport { when } from 'mobx'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { FetchResult } from 'react-apollo'\nimport { VError } from 'verror'\n\nimport { RecipeFragment } from '../graph/fragments.graphql'\nimport {\n  DeliveryTypeEnum,\n  GAddToOrder,\n  GChangeOrderItem,\n  GCreateDeliveryOrder,\n  GCreateOrder,\n  GCreatePickupOrder,\n  GOrder,\n  GOrderMobile,\n  GOrderPaymentStatus,\n  GRecipe,\n  GRemoveOrderItem,\n  GSubmitOrder,\n  GVamStatus,\n  PaymentGateEnum,\n} from '../graph/types'\nimport { executeGoPayPayment } from '../helpers/gopay'\nimport { logMain, logOrder } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { reportError } from '../helpers/sentry'\nimport { i18n } from '../i18n'\nimport { OrderFragment } from '../segments/cart/CartView.graphql'\nimport { FoodMenuQuery } from '../segments/foodMenu/FoodMenuView.graphql'\nimport {\n  PickupMapBranchQuery,\n  PickupMapBrandQuery,\n} from '../segments/map/PickupMap.graphql'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\nimport { IOrderFormState } from '../segments/orderForm/OrderFormSetup'\nimport { BaseModel } from './BaseModel'\nimport {\n  AddToOrderMobileMutation,\n  AddToOrderMutation,\n  ChangeOrderItemMutation,\n  CreateDeliveryOrderMutation,\n  CreatePickupOrderMutation,\n  OrderCartForRecipeQuery,\n  OrderPaymentStatusQuery,\n  RemoveOrderItemMutation,\n  SubmitOrderMutation,\n  VamStatusQuery,\n} from './OrderModel.graphql'\n\ninterface IVolatileProps {\n  isSubmitting: boolean\n  isGoPayChecking: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  agreements: TAgreement[]\n  lastActiveRecipeId: MaybeID\n  isVamInitialized: boolean\n}\n\nexport type TAgreement = GVamStatus.VamStatus\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    payment: PaymentGateEnum.Gopay,\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n  })\n  .volatile<IVolatileProps>(self => ({\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null,\n    agreements: [],\n    lastActiveRecipeId: null,\n    isVamInitialized: false,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get fragmentOrderId() {\n      return `Order-${self.orderId}`\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return '+'\n    },\n    getSubmitVariables(formValues: IOrderFormState): GSubmitOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstname,\n          lastName: formValues.lastname,\n          emails: [{ email: formValues.email }],\n          phones: [{ phone: `${formValues.phonePrefix}${formValues.phone}` }],\n        },\n        note: formValues.note,\n        paymentGate: formValues.payment,\n        deliverAt: addHours(new Date(), 1),\n        agreements: formValues.agreements\n          .filter(RM.propEq('isConfirmed', true))\n          .map(RM.prop('id')),\n      }\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: GCreateOrder.Fragment) {\n      self.orderId = result.id\n      self.branchId = result.companyBranch.id\n      logMain('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        logMain('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        logMain(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n      self.isVamInitialized = false\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    useAgreements(agreements: ReadonlyArray<TAgreement>) {\n      if (Array.isArray(agreements)) {\n        self.agreements = agreements\n      }\n      self.isVamInitialized = true\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    async queryPaymentStatus(\n      orderId: ID = self.orderId!,\n    ): Promise<GOrderPaymentStatus.Status | null> {\n      const variables: GOrderPaymentStatus.Variables = {\n        orderId,\n      }\n      try {\n        const result = await self.client.query<GOrderPaymentStatus.Query>({\n          fetchPolicy: 'no-cache',\n          query: OrderPaymentStatusQuery,\n          variables,\n        })\n        return result.data.status\n      } catch (err) {\n        logOrder('failed to verify payment status for order %s: ', orderId)\n        return null\n      }\n    },\n    rememberFormValues(values: IOrderFormState) {\n      if (self.root.user.shouldRememberForm) {\n        self.firstname = values.firstname\n        self.lastname = values.lastname\n        self.email = values.email\n        self.phone = values.phone\n        self.phonePrefix = values.phonePrefix\n        self.note = values.note\n      } else {\n        self.firstname = ''\n        self.lastname = ''\n        self.email = ''\n        self.phone = ''\n        self.phonePrefix = ''\n        self.note = ''\n      }\n    },\n  }))\n  .actions(self => ({\n    async createDeliveryOrder(done: () => void) {\n      const { business } = self.root\n      const variables: GCreateDeliveryOrder.Variables = {\n        gps: self.root.location.geoPoint,\n        orderOrigin: business.orderOrigin,\n        brandId: business.isBrand ? business.brandId : undefined,\n        branchId: business.isBrand ? undefined : business.branchId,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreateDeliveryOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreateDeliveryOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      done()\n    },\n    async createPickupOrder(branchId: ID, done: () => void) {\n      const { business } = self.root\n      const variables: GCreatePickupOrder.Variables = {\n        branchId,\n        orderOrigin: business.orderOrigin,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreatePickupOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreatePickupOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      done()\n    },\n    prefetchPickup() {\n      const { business } = self.root\n      if (business.isBrand) {\n        self.client.query({\n          query: PickupMapBrandQuery,\n          variables: { brandId: business.brandId },\n        })\n      } else {\n        self.client.query({\n          query: PickupMapBranchQuery,\n          variables: { branchId: business.branchId },\n        })\n      }\n    },\n    prefetchFoodMenu(branchId?: ID) {\n      if (branchId) {\n        self.client.query({ query: FoodMenuQuery, variables: { branchId } })\n      }\n    },\n    prefetchFood(recipeId: ID) {\n      self.client.query({\n        query: OrderCartForRecipeQuery,\n        variables: { recipeId },\n      })\n    },\n    async addFromRecipe(recipeId: ID, sideDishes: Array<ID> = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrder.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderFragment,\n        fragmentName: 'GOrder',\n      })\n      const recipe = self.client.readFragment<GRecipe.Fragment>({\n        id: `Recipe-${recipeId}`,\n        fragment: RecipeFragment,\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              price: {\n                __typename: 'PriceConverted',\n                value: 0,\n                formattedValue: '---',\n              },\n              recipe: { ...recipe, sideDishes: [] },\n              sideDishes: [],\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async addFromRecipeMobile(recipeId: ID, sideDishes: Array<ID> = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrderMobile.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderMobileFragment,\n        fragmentName: 'GOrderMobile',\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              recipe: { __typename: 'Recipe', id: recipeId },\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMobileMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async updateItem(itemId: ID, sideDishes: Array<ID> = []) {\n      const variables: GChangeOrderItem.Variables = {\n        orderId: self.orderId!,\n        itemId,\n        sideDishes,\n      }\n      await self.client.mutate({ mutation: ChangeOrderItemMutation, variables })\n    },\n    removeItemFromCart(itemId: ID) {\n      const variables: GRemoveOrderItem.Variables = {\n        itemId,\n      }\n      const current = self.client.readFragment<GOrder.Fragment>({\n        fragment: OrderFragment,\n        fragmentName: 'GOrder',\n        id: self.fragmentOrderId,\n      })\n      self.client.mutate({\n        mutation: RemoveOrderItemMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          destroyOrderRecipe: {\n            ...current,\n            countWares: current ? current.countWares - 1 : 0,\n            items: current\n              ? current.items.filter(item => item.id !== itemId)\n              : [],\n          },\n        },\n      })\n    },\n    async initVam() {\n      const variables: GVamStatus.Variables = {\n        input: {\n          orderId: self.orderId!,\n          email: self.email,\n          firstname: self.firstname,\n          lastname: self.lastname,\n          phone: self.phone,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    async updateVam(formValues: IOrderFormState) {\n      const phone = `${formValues.phonePrefix.trim()}${formValues.phone.trim()}`\n      const email = formValues.email.trim()\n      const firstname = formValues.firstname.trim()\n      const lastname = formValues.lastname.trim()\n      const variables: GVamStatus.Variables = {\n        input: {\n          email,\n          phone,\n          firstname,\n          lastname,\n          orderId: self.orderId!,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    submitOrder: async (formValues: IOrderFormState) => {\n      self.isSubmitting = true\n      let result: FetchResult\n\n      self.rememberFormValues(formValues)\n\n      try {\n        result = await self.client.mutate({\n          fetchPolicy: 'no-cache',\n          mutation: SubmitOrderMutation,\n          variables: self.getSubmitVariables(formValues),\n          refetchQueries: ['GCartView', 'GMobileCart'],\n        })\n      } catch (err) {\n        self.submitFailed()\n        throw reportError(new VError('submit mutation error: %j', err))\n      }\n\n      if ((result.errors && result.errors.length) || !result.data) {\n        self.submitFailed()\n        throw reportError(\n          new VError('Submit graphql errors: %j', result.errors),\n        )\n      }\n\n      const submitResult: GSubmitOrder.FinishOrder = result.data.finishOrder\n      if (submitResult.userErrors && submitResult.userErrors.length) {\n        self.submitFailed(submitResult.userErrors)\n        throw reportError(\n          new VError('Order user errors: %j', submitResult.userErrors),\n        )\n      }\n\n      if (formValues.payment === PaymentGateEnum.Cash) {\n        self.submitFinished()\n        return\n      }\n\n      if (!submitResult.gopayUrl) {\n        self.submitFailed()\n        throw reportError(new Error('GoPay url missing from response'))\n      }\n\n      await executeGoPayPayment(submitResult.gopayUrl)\n\n      self.goPayStatusCheck(true)\n      const paymentStatus = await self.queryPaymentStatus()\n      self.goPayStatusCheck(false)\n\n      if (paymentStatus && paymentStatus.isSuccess) {\n        self.submitFinished()\n      } else {\n        self.submitFailed(\n          (paymentStatus && paymentStatus.userErrors) || undefined,\n        )\n        throw reportError(new VError('GoPay payment was not successful'))\n      }\n    },\n  }))\n  .actions(self => ({\n    checkPaymentStatus() {\n      const parsedUrl = new window.URL(window.location.href)\n      // the orderId will come in URL when GoPay payment was handled by redirect\n      const orderId = parsedUrl.searchParams.get('orderId')\n      if (!orderId) {\n        return\n      }\n      when(\n        () => self.root.auth.isValid,\n        async () => {\n          // delay displaying status checking modal\n          const checkDelay = setTimeout(() => self.goPayStatusCheck(true), 500)\n          const paymentStatus = await self.queryPaymentStatus(orderId)\n\n          clearTimeout(checkDelay)\n          self.goPayStatusCheck(false)\n\n          if (paymentStatus && paymentStatus.isSuccess) {\n            self.orderPaid(orderId)\n            parsedUrl.search = ''\n            parsedUrl.pathname = '/finish'\n            location.replace(parsedUrl.toString())\n          } else {\n            const phone = self.root.business.branch!.phone\n            self.submitFailed([\n              i18n.t`We were unable to verify status of your payment. Please contact operator using number ${phone}`,\n            ])\n            return\n          }\n        },\n      )\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import scriptjs from 'scriptjs'\n\nimport { logOrder } from './logger'\n\nconst embedScript = 'https://gate.gopay.cz/gp-gw/js/embed.js'\nconst embedScriptSandbox = 'https://gw.sandbox.gopay.com/gp-gw/js/embed.js'\n\ninterface ICheckoutResult {\n  url: string\n  id: number\n}\n\nexport async function executeGoPayPayment(url: string) {\n  logOrder('GoPay init', url)\n  await loadScript(url)\n  return checkout(getOptions(url))\n}\n\nfunction getOptions(url: string) {\n  // const isSafari = /^((?!chrome|android|mobile).)*safari/i.test(\n  //   navigator.userAgent,\n  // )\n  // logOrder('Browser is desktop Safari', isSafari)\n  return { gatewayUrl: url, inline: true }\n}\n\nfunction loadScript(url: string) {\n  const scriptUrl = url.includes('gw.sandbox.gopay.com')\n    ? embedScriptSandbox\n    : embedScript\n  logOrder('GoPay script url', scriptUrl)\n  return new Promise(resolve => {\n    scriptjs(scriptUrl, resolve)\n  })\n}\n\nfunction checkout(options: object): Promise<number> {\n  return new Promise(resolve => {\n    logOrder('GoPay checkout')\n    // @ts-ignore\n    _gopay.checkout(options, function(result: ICheckoutResult) {\n      logOrder('GoPay result', result)\n      resolve(result.id)\n    })\n  })\n}\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Mutation, MutationProps, MutationResult } from 'react-apollo'\n\nexport function buildMutation<TData, TVariables>(mutation: DocumentNode) {\n  interface IProps\n    extends Omit<MutationProps<TData, TVariables>, 'mutation' | 'children'> {\n    render(data: MutationResult<TData>): ReactNode\n  }\n  const GMutation: React.SFC<IProps> = () => {\n    const { render, ...props } = this.props\n    return (\n      <Mutation mutation={mutation} {...props}>\n        {render}\n      </Mutation>\n    )\n  }\n  return GMutation\n}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    rememberForm: types.maybeNull(types.boolean),\n  })\n  .volatile(self => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n  }))\n  .actions(self => ({\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n  }))\n  .views(self => ({\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import { Observer } from 'mobx-react'\nimport React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = false }) => {\n  const root = useRoot()\n  if (observe === true) {\n    return <Observer>{() => render(root)}</Observer>\n  }\n  return render(root)\n}\n\nexport const RootProvider = rootContext.Provider\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.SFC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport * as detector from 'locales-detector'\nimport React, { useState } from 'react'\n\nimport Pacman from './common/Pacman'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const [isReady, setReady] = useState(false)\n  const [language] = useState(detectLanguage)\n\n  useAsyncEffect(async () => {\n    await changeLanguage(language)\n    setReady(true)\n  })\n\n  if (isReady === false) {\n    return <Pacman />\n  }\n\n  return (\n    <I18nProvider language={language} i18n={i18n}>\n      {children}\n    </I18nProvider>\n  )\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.UrlDetector('lang'), new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages: ReadonlyArray<string> = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport RedBox from 'redbox-react'\nimport { VError } from 'verror'\n\nimport Pacman from '../common/Pacman'\nimport { logError } from '../helpers/logger'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n  }\n  const GQuery: React.SFC<IProps> = ({\n    render,\n    renderFragment,\n    renderLoading = true,\n    renderError = true,\n    children,\n    ...props\n  }) => (\n    <Query query={query} {...props}>\n      {result => {\n        if (result.loading || !result.data) {\n          if (typeof renderLoading === 'function') {\n            return renderLoading(result)\n          } else if (renderLoading === true) {\n            return <Pacman />\n          }\n        }\n        if (result.error) {\n          reportError(result.error)\n          logError(result.error)\n          if (typeof renderError === 'function') {\n            return renderError(result)\n          } else if (renderError === true) {\n            if (process.env.NODE_ENV === 'production') {\n              throw new VError(result.error, 'Query error')\n            }\n            return <RedBox error={result.error} />\n          } else {\n            return null\n          }\n        }\n        if (result.data) {\n          if (renderFragment) {\n            return <>{renderFragment(result.data, result)}</>\n          }\n          if (render) {\n            return render(result.data, result)\n          }\n        }\n        return children || null\n      }}\n    </Query>\n  )\n\n  return GQuery\n}\n","export interface InputOrderIndex {\n  readonly companyBranches?: ReadonlyArray<string> | null\n\n  readonly user?: string | null\n\n  readonly orderStatesAND?: ReadonlyArray<OrderStateEnum> | null\n\n  readonly orderStatesOR?: ReadonlyArray<OrderStateEnum> | null\n\n  readonly orderStateCategoriesOR?: ReadonlyArray<OrderStateCategoryEnum> | null\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum | null\n\n  readonly currency?: CurrencyEnum | null\n\n  readonly location?: InputLocationIndex | null\n\n  readonly stateChangeSince?: DateTime | null\n\n  readonly includeOldFinished?: boolean | null\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: number | null\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: string | null\n\n  readonly phone?: string | null\n\n  readonly firstname?: string | null\n\n  readonly lastname?: string | null\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: OrderRecipeStateEnum | null\n\n  readonly parent?: string | null\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n\n  readonly associatedRecipes?: ReadonlyArray<string> | null\n\n  readonly amount?: number | null\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: string | null\n\n  readonly recipe?: string | null\n\n  readonly orderRecipeState?: string | null\n\n  readonly parent?: string | null\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: string | null\n\n  readonly brand?: string | null\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: DateTime\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly warePriceType?: WarePriceTypeEnum | null\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly orderRecipes?: ReadonlyArray<InputOrderRecipeCreates> | null\n\n  readonly customer?: InputCustomerCreate | null\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n\n  readonly associatedRecipes?: ReadonlyArray<string> | null\n\n  readonly amount?: number | null\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: string | null\n\n  readonly lastName?: string | null\n\n  readonly emails?: ReadonlyArray<InputEmailCreate> | null\n\n  readonly phones?: ReadonlyArray<InputPhoneCreate> | null\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: string | null\n\n  readonly default?: boolean | null\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: string | null\n\n  readonly default?: boolean | null\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly language?: LanguageEnum | null\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly notification?: InputNotificationCreate | null\n\n  readonly note?: string | null\n\n  readonly deliverAt?: DateTime | null\n\n  readonly location?: InputLocationCreate | null\n\n  readonly callEventId?: string | null\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: string | null\n\n  readonly chrome?: { [key: string]: string } | null\n\n  readonly firebase?: { [key: string]: string } | null\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: number | null\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: CurrencyEnum | null\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: InputCustomerCreate | null\n  /** payment method used to finalize order */\n  readonly paymentMethod?: PaymentTypeEnum | null\n  /** payment gate used to finalize order */\n  readonly paymentGate?: PaymentGateEnum | null\n\n  readonly deliverAt?: DateTime | null\n\n  readonly note?: string | null\n\n  readonly confirmedAgreements?: ReadonlyArray<string> | null\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly language?: LanguageEnum | null\n\n  readonly customer?: InputCustomerCreate | null\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly notification?: InputNotificationCreate | null\n\n  readonly note?: string | null\n\n  readonly deliverAt?: DateTime | null\n\n  readonly location?: InputLocationCreate | null\n\n  readonly warePriceType?: WarePriceTypeEnum | null\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: string | null\n\n  readonly dateFrom?: Date | null\n\n  readonly timeFrom?: Time | null\n\n  readonly dateTo?: Date | null\n\n  readonly timeTo?: Time | null\n\n  readonly available?: boolean | null\n\n  readonly periodic?: boolean | null\n\n  readonly weekDay?: WeekDayEnum | null\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: string | null\n\n  readonly dateFrom?: Date | null\n\n  readonly timeFrom?: Time | null\n\n  readonly dateTo?: Date | null\n\n  readonly timeTo?: Time | null\n\n  readonly available?: boolean | null\n\n  readonly periodic?: boolean | null\n\n  readonly weekDay?: WeekDayEnum | null\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: Time\n\n  readonly closeAt: Time\n\n  readonly smsLabel?: InputLabelCreate | null\n\n  readonly webLabel?: InputLabelCreate | null\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Time | null\n\n  readonly closeAt?: Time | null\n\n  readonly specificDate: Date\n\n  readonly closed?: boolean | null\n\n  readonly smsLabel?: InputLabelCreate | null\n\n  readonly webLabel?: InputLabelCreate | null\n\n  readonly closedNote?: string | null\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum> | null\n\n  readonly name: string\n\n  readonly enabled?: boolean | null\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: ReadonlyArray<InputLabelTranslation> | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: string | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: string | null\n\n  readonly internalNote?: string | null\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean | null\n\n  readonly ingredients?: ReadonlyArray<InputRecipeIngredient> | null\n\n  readonly wareCategories?: ReadonlyArray<string> | null\n\n  readonly sideDishCategories?: ReadonlyArray<string> | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n\n  readonly video?: string | null\n\n  readonly code?: string | null\n\n  readonly ware?: string | null\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: ReadonlyArray<InputRecipeRelationCreate> | null\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: string | null\n\n  readonly nameLabel?: string | null\n\n  readonly descriptionLabel?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly internalNote?: string | null\n\n  readonly video?: string | null\n\n  readonly code?: string | null\n\n  readonly ingredients?: ReadonlyArray<InputRecipeIngredient> | null\n\n  readonly wareCategories?: ReadonlyArray<string> | null\n\n  readonly sideDishCategories?: ReadonlyArray<string> | null\n\n  readonly prices?: ReadonlyArray<InputRecipePriceCreate> | null\n\n  readonly associatedRecipes?: ReadonlyArray<InputRecipeRelationCreate> | null\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: DateTime\n\n  readonly endAt: DateTime\n\n  readonly capacity?: number | null\n\n  readonly placeCode: string\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: string | null\n\n  readonly quantity?: number | null\n\n  readonly allergens?: ReadonlyArray<AllergenEnum> | null\n\n  readonly note?: string | null\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: number | null\n\n  readonly label?: string | null\n\n  readonly code?: string | null\n\n  readonly plu?: string | null\n\n  readonly wareUnit?: WareUnitEnum | null\n\n  readonly allergens?: ReadonlyArray<AllergenEnum> | null\n\n  readonly note?: string | null\n\n  readonly allowNegative?: FieldStateEnum | null\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: LanguageEnum | null\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: string | null\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: string | null\n\n  readonly wareRequirement?: WareRequirementEnum | null\n\n  readonly enabled?: boolean | null\n\n  readonly public?: boolean | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n\n  readonly maxRecipesCount?: number | null\n\n  readonly recipes?: ReadonlyArray<string> | null\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: string | null\n\n  readonly pictogram?: string | null\n\n  readonly nameLabel?: string | null\n\n  readonly internalNoteLabel?: string | null\n\n  readonly wareRequirement?: WareRequirementEnum | null\n\n  readonly wareCategoryType?: WareCategoryTypeEnum | null\n\n  readonly enabled?: boolean | null\n\n  readonly public?: boolean | null\n\n  readonly maxRecipesCount?: number | null\n\n  readonly recipes?: ReadonlyArray<string> | null\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: string | null\n\n  readonly internalCode?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n}\n\nexport interface InputWareUpdate {\n  readonly code?: string | null\n\n  readonly internalCode?: string | null\n\n  readonly companyBranch?: string | null\n\n  readonly nameLabel?: InputLabelUpdate | null\n\n  readonly descriptionLabel?: InputLabelUpdate | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: string | null\n\n  readonly zoneType?: ZoneTypeEnum | null\n\n  readonly zoneColor?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly geoPolygon?: ReadonlyArray<InputGeoPointCreate> | null\n\n  readonly availability?: InputAvailabilityCreate | null\n\n  readonly priceRangeRules?: ReadonlyArray<PriceRangeRuleCreate> | null\n\n  readonly minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: string | null\n\n  readonly name?: string | null\n\n  readonly zoneColor?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly geoPolygon?: ReadonlyArray<InputGeoPointCreate> | null\n\n  readonly availability?: InputAvailabilityUpdate | null\n\n  readonly priceRangeRules?: ReadonlyArray<PriceRangeRuleCreate> | null\n\n  readonly minimalOrderPrice?: InputCurrencyCreate | null\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = any\n\n/** Time without date (HH:MM:SS) */\nexport type Time = any\n\n/** Date in format iso 8601 format */\nexport type DateTime = any\n\n/** Data in json format */\nexport type Json = { [key: string]: string }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport namespace GBusinessCodeLookup {\n  export type Variables = {\n    readonly code?: string | null\n    readonly url?: string | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly lookup: Lookup\n  }\n\n  export type Lookup = {\n    readonly __typename?: 'CompanyBrandLookUp'\n\n    readonly branch: Branch | null\n\n    readonly isBrand: boolean\n\n    readonly isMobileApp: boolean\n\n    readonly knownBasePath: string\n\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Branch = GCompanyBranch.Fragment\n}\n\nexport namespace GResolveLocation {\n  export type Variables = {\n    readonly brandId?: string | null\n    readonly branchId?: string | null\n    readonly address?: string | null\n    readonly latitude?: number | null\n    readonly longitude?: number | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly resolveLocation: ResolveLocation\n  }\n\n  export type ResolveLocation = GLocationResolution.Fragment\n}\n\nexport namespace GOrderCartForRecipe {\n  export type Variables = {\n    readonly recipeId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = GCartRecipe.Fragment\n}\n\nexport namespace GOrderCartForItem {\n  export type Variables = {\n    readonly itemId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly item: Item\n  }\n\n  export type Item = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  }\n\n  export type Recipe = GCartRecipe.Fragment\n\n  export type SideDishes = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: _Recipe\n  }\n\n  export type _Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n  }\n}\n\nexport namespace GCreatePickupOrder {\n  export type Variables = {\n    readonly branchId: string\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly order: Order\n  }\n\n  export type Order = GCreateOrder.Fragment\n}\n\nexport namespace GCreateDeliveryOrder {\n  export type Variables = {\n    readonly brandId?: string | null\n    readonly branchId?: string | null\n    readonly gps: InputGeoPointCreate\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly order: Order\n  }\n\n  export type Order = GCreateOrder.Fragment\n}\n\nexport namespace GAddToOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly recipeId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createOrderRecipe: CreateOrderRecipe\n  }\n\n  export type CreateOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GAddToOrderMobile {\n  export type Variables = {\n    readonly orderId: string\n    readonly recipeId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createOrderRecipe: CreateOrderRecipe\n  }\n\n  export type CreateOrderRecipe = GOrderMobile.Fragment\n}\n\nexport namespace GChangeOrderItem {\n  export type Variables = {\n    readonly orderId: string\n    readonly itemId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateOrderRecipe: UpdateOrderRecipe\n  }\n\n  export type UpdateOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GRemoveOrderItem {\n  export type Variables = {\n    readonly itemId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyOrderRecipe: DestroyOrderRecipe\n  }\n\n  export type DestroyOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GSubmitOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly customer?: InputCustomerCreate | null\n    readonly note?: string | null\n    readonly paymentGate: PaymentGateEnum\n    readonly deliverAt: DateTime\n    readonly agreements?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly finishOrder: FinishOrder\n  }\n\n  export type FinishOrder = {\n    readonly __typename?: 'FinishedOrder'\n\n    readonly userErrors: ReadonlyArray<string>\n\n    readonly gopayUrl: string | null\n  }\n}\n\nexport namespace GOrderPaymentStatus {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly status: Status\n  }\n\n  export type Status = {\n    readonly __typename?: 'OrderOnlinePaymentStatus'\n\n    readonly isSuccess: boolean\n\n    readonly userErrors: ReadonlyArray<string>\n  }\n}\n\nexport namespace GVamStatus {\n  export type Variables = {\n    readonly input: InputVamStatus\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly vamStatus: ReadonlyArray<VamStatus>\n  }\n\n  export type VamStatus = {\n    readonly __typename?: 'VAMAgreement'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly description: string\n\n    readonly isConfirmed: boolean\n\n    readonly isMandatory: boolean\n  }\n}\n\nexport namespace GCompanyBranchStyle {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly styles: Styles\n  }\n\n  export type Styles = {\n    readonly __typename?: 'GraphicStyle'\n\n    readonly active: string\n\n    readonly main: string\n\n    readonly mainSecondary: string\n\n    readonly storeLogo: string\n\n    readonly storeLogoMobile: string\n\n    readonly backgroundCart: string\n  }\n}\n\nexport namespace GCartView {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly deliveryType: DeliveryType | null\n  } & GOrder.Fragment\n\n  export type DeliveryType = {\n    readonly __typename?: 'DeliveryType'\n\n    readonly enum: DeliveryTypeEnum\n  }\n}\n\nexport namespace GFinishView {\n  export type Variables = {\n    readonly orderId: string\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n\n    readonly companyBranch: CompanyBranch\n\n    readonly androidApp: AndroidApp | null\n\n    readonly iosApp: IosApp | null\n  }\n\n  export type Order = GFinishViewOrder.Fragment\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly phone: string\n\n    readonly company: Company\n  }\n\n  export type Company = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n  }\n\n  export type AndroidApp = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly url: string\n  }\n\n  export type IosApp = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly url: string\n  }\n}\n\nexport namespace GFoodMenu {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly wareCategories: ReadonlyArray<WareCategories>\n  }\n\n  export type WareCategories = {\n    readonly __typename?: 'WareCategory'\n\n    readonly recipes: ReadonlyArray<Recipes>\n  } & GFoodMenuCategory.Fragment\n\n  export type Recipes = GFoodMenuRecipe.Fragment\n}\n\nexport namespace GFoodMenuCartPresence {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  } & GCartPresence.Fragment\n}\n\nexport namespace GPickupMapBrand {\n  export type Variables = {\n    readonly brandId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branches: ReadonlyArray<Branches>\n  }\n\n  export type Branches = GPickupBranch.Fragment\n}\n\nexport namespace GPickupMapBranch {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n  }\n\n  export type Branch = GPickupBranch.Fragment\n}\n\nexport namespace GMobileCart {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = GOrderMobile.Fragment\n}\n\nexport namespace GMobileShopStatus {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n  }\n\n  export type Branch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  } & GCompanyBranchStatus.Fragment\n}\n\nexport namespace GMobileShopIntro {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly headerText: string | null\n  }\n}\n\nexport namespace GSmartBanner {\n  export type Variables = {\n    readonly branchId: string\n    readonly platform: MobilePlatformEnum\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly app: App | null\n  }\n\n  export type App = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly title: string\n\n    readonly url: string\n\n    readonly icon: string\n  }\n}\n\nexport namespace GOrderForm {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly countWares: number\n  }\n}\n\nexport namespace GOrderPromoCodes {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace MAddOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly code: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderPromoCode: AddOrderPromoCode\n  }\n\n  export type AddOrderPromoCode = {\n    readonly __typename?: 'OrderWithErrors'\n\n    readonly userErrors: ReadonlyArray<string>\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace MRemoveOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly codeId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly removeOrderPromoCode: RemoveOrderPromoCode\n  }\n\n  export type RemoveOrderPromoCode = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace GShopHeader {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n  }\n\n  export type Branch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly phone: string\n\n    readonly homepageUrl: string | null\n\n    readonly headerText: string | null\n\n    readonly address: Address\n  } & GCompanyBranchStatus.Fragment\n\n  export type Address = GAddress.Fragment\n}\n\nexport namespace GJsonAddress {\n  export type Fragment = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly street: string | null\n\n    readonly houseNumber: string | null\n\n    readonly city: string | null\n  }\n}\n\nexport namespace GAddress {\n  export type Fragment = {\n    readonly __typename?: 'Address'\n\n    readonly id: string\n\n    readonly location: Location | null\n  }\n\n  export type Location = GJsonAddress.Fragment\n}\n\nexport namespace GGeoPoint {\n  export type Fragment = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GPrice {\n  export type Fragment = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n\n    readonly formattedValue: string\n  }\n}\n\nexport namespace GRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly sideDishCount: number\n  }\n}\n\nexport namespace GCartItem {\n  export type Fragment = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly automatic: boolean\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = GRecipe.Fragment\n}\n\nexport namespace GCompanyBranchStatus {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly isOpen: boolean\n\n    readonly willOpenAt: DateTime | null\n\n    readonly willCloseAt: DateTime | null\n\n    readonly businessHours: ReadonlyArray<BusinessHours>\n  }\n\n  export type BusinessHours = {\n    readonly __typename?: 'BusinessHour'\n\n    readonly id: string\n\n    readonly openAt: Time\n\n    readonly closeAt: Time\n\n    readonly closed: boolean\n\n    readonly closedNote: string | null\n  }\n}\n\nexport namespace GPromoCode {\n  export type Fragment = {\n    readonly __typename?: 'PromoCode'\n\n    readonly id: string\n\n    readonly code: string\n  }\n}\n\nexport namespace GCompanyBranch {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly brand: Brand\n\n    readonly company: Company\n\n    readonly address: Address\n\n    readonly phone: string\n  }\n\n  export type Brand = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly code: string\n  }\n\n  export type Company = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n  }\n\n  export type Address = {\n    readonly __typename?: 'Address'\n\n    readonly country: Country | null\n  }\n\n  export type Country = {\n    readonly __typename?: 'Country'\n\n    readonly phonePrefix: string\n  }\n}\n\nexport namespace GLocationResolution {\n  export type Fragment = {\n    readonly __typename?: 'AddressResolvedLocation'\n\n    readonly finalAddress: FinalAddress | null\n\n    readonly isResolved: boolean\n\n    readonly isValidAddress: boolean\n\n    readonly inDeliveryLocation: boolean\n\n    readonly gpsCoordinates: GpsCoordinates | null\n\n    readonly companyBranch: CompanyBranch | null\n  }\n\n  export type FinalAddress = GJsonAddress.Fragment\n\n  export type GpsCoordinates = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly isOpen: boolean\n  }\n}\n\nexport namespace GCartRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: string | null\n\n    readonly categories: ReadonlyArray<Categories>\n  }\n\n  export type Categories = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly minCount: number\n\n    readonly maxCount: number\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  }\n\n  export type SideDishes = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly price: Price\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GCreateOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly countWares: number\n\n    readonly items: ReadonlyArray<Items>\n\n    readonly coverPrice: CoverPrice\n\n    readonly transportFee: TransportFee\n\n    readonly discounts: ReadonlyArray<Discounts>\n\n    readonly totalDiscount: TotalDiscount\n\n    readonly totalSum: TotalSum\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly price: Price\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  } & GCartItem.Fragment\n\n  export type Price = GPrice.Fragment\n\n  export type SideDishes = GCartItem.Fragment\n\n  export type CoverPrice = GPrice.Fragment\n\n  export type TransportFee = GPrice.Fragment\n\n  export type Discounts = {\n    readonly __typename?: 'PriceWithDescription'\n\n    readonly code: string\n\n    readonly description: string\n\n    readonly price: _Price\n  }\n\n  export type _Price = GPrice.Fragment\n\n  export type TotalDiscount = GPrice.Fragment\n\n  export type TotalSum = GPrice.Fragment\n}\n\nexport namespace GFinishViewOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly items: ReadonlyArray<Items>\n\n    readonly totalSum: TotalSum\n\n    readonly orderPayments: ReadonlyArray<OrderPayments>\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  } & GCartItem.Fragment\n\n  export type SideDishes = GCartItem.Fragment\n\n  export type TotalSum = GPrice.Fragment\n\n  export type OrderPayments = {\n    readonly __typename?: 'OrderPaymentMethod'\n\n    readonly paymentMethod: PaymentMethod\n  }\n\n  export type PaymentMethod = {\n    readonly __typename?: 'PaymentMethod'\n\n    readonly paymentType: PaymentType\n  }\n\n  export type PaymentType = {\n    readonly __typename?: 'PaymentType'\n\n    readonly enum: PaymentTypeEnum\n  }\n}\n\nexport namespace GFoodMenuCategory {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly pictogram: string | null\n  }\n}\n\nexport namespace GFoodMenuRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly image: string | null\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: string | null\n\n    readonly price: Price\n\n    readonly sideDishCount: number\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GCartPresence {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly items: ReadonlyArray<Items>\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n  }\n}\n\nexport namespace GPickupBranch {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly gps: Gps\n\n    readonly address: Address\n\n    readonly pickupEnabled: boolean\n  } & GCompanyBranchStatus.Fragment\n\n  export type Gps = GGeoPoint.Fragment\n\n  export type Address = GAddress.Fragment\n}\n\nexport namespace GOrderMobile {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly totalSum: TotalSum\n\n    readonly countWares: number\n  } & GCartPresence.Fragment\n\n  export type TotalSum = GPrice.Fragment\n}\n","import * as RM from 'ramda'\n\nexport { RM }\n","import { buildMutation } from './buildMutation'\nimport { buildQuery } from './buildQuery'\n\nexport { buildQuery, buildMutation }\n"],"sourceRoot":""}