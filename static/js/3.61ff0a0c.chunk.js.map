{"version":3,"sources":["segments/finish/FinishView.tsx","segments/map/views/MapView.tsx","segments/map/OrderMap.tsx","segments/map/PickupMap.tsx","segments/map/PickupMapBranch.tsx","segments/shop/ShopHeaderView.tsx","segments/shop/ShopHeader.tsx","segments/shop/OrderAddress.tsx","segments/shop/ShopCloseAlert.tsx","segments/shop/ShopIntro.tsx","segments/shop/ShopLogo.tsx","segments/shop/ShopOpeningHours.tsx","segments/shop/Sticker.tsx","segments/shop/ShopHeader.graphql.ts","segments/shop/ShopOverview.tsx","segments/orderForm/OrderFormView.tsx","segments/orderForm/OrderForm.tsx","segments/orderForm/OrderPaymentMethod.tsx","segments/orderForm/OrderPaymentButton.tsx","app/DesktopApp.tsx"],"names":["__webpack_require__","_react","_reactstrap","_ColStyle","_FinishViewFooter","_FinishViewLoader","_FinishViewOrder","_FinishViewSupport","default","createElement","Row","className","ColStyle","FinishViewLoader","render","result","Fragment","FinishViewOrder","order","FinishViewSupport","branch","companyBranch","FinishViewFooter","finish","_hooks","_OrderMethod","_OrderMap","history","useRouterContext","OrderMethod","OrderMap","onConfirm","push","_mobxReactLite","_interopRequireWildcard","_BaseMap","_WithRoot","_types","_DeliveryMap","_PickupMap","mapByOrderMethod","[object Object]","DeliveryTypeEnum","Messenger","createFactory","DeliveryMap","Pickup","PickupMap","map","useRoot","useObserver","BaseMap","model","orderMethod","_mobx","_reactGoogleMaps","_gps","_ramda","_MapPanning","_PickupMap2","_PickupMapBranch","business","activeBranch","setActiveBranch","useState","useDisposable","when","branchId","useEffect","prefetchFoodMenu","onConfirmPickup","useCallback","__awaiter","setBranch","createPickupOrder","renderSite","Marker","key","id","position","gpsToLatLng","gps","onClick","InfoWindow","onCloseClick","defaultOptions","maxWidth","PickupMapBranch","isBrand","QueryPickupMapBrand","variables","brandId","renderLoading","branches","find","RM","propEq","MapPanning","QueryPickupMapBranch","_react2","_interopRequireDefault","_styledComponents","_Buttons","_ShopAddress","_ShopStatus","_i18n","PickupMapHeaderStyled","div","withConfig","displayName","theme","primary","tertiaryText","name","ShopAddress","address","ShopStatus","status","opts","PrimaryButton","color","data-testid","disabled","pickupEnabled","decision","openingIn","closingIn","Trans","values","i18n","_","toLocaleUpperCase","getButtonText","_ShopHeader","_ShopHeader2","ShopHeaderView","props","WithRoot","observe","root","QueryShopHeader","skip","isValid","loading","ShopHeader","isLoading","_reactRouter","_OrderAddress","_ShopCloseAlert","_ShopClosingTimeModal","_ShopHeaderIcons","_ShopIntro","_ShopLogo","_ShopOpeningHours","_Sticker","ShopHeaderStyled","ShopHeaderInfoStyled","ShopHeaderIcons","ShopLogo","url","homepageUrl","Route","exact","path","Sticker","ShopIntro","ShopClosingTimeModal","success","OrderAddress","ShopOpeningHours","ShopCloseAlert","location","now","Alert","ShopIntroStyled","headerText","_reactRouterDom","_BackgroundThemed","LogoLink","children","href","Link","to","LogoContainerStyled","BackgroundThemed","imageName","size","_ShopStatusDisplay","ContainerStyled","OpeningHoursStyled","StatusDisplayPosition","span","businessHours","businessHour","closed","closedNote","openAt","closeAt","ShopStatusDisplay","deliveryTime","defaultDeliveryTime","pickupTime","defaultPickupTime","_classnames","StickerThemed","IconStyled","order-method-unselected","order-method-selected","_graphqlTag","_graph","_fragments","ShopHeaderQuery","AddressFragment","CompanyBranchStatusFragment","buildQuery","_CartView","_FoodMenuView","_OrderFormStorageNotice","_OrderFormView","ColStyleLeft","FoodMenuView","ColStyleRight","CartView","OrderFormView","OrderFormStorageNotice","_WithOrder","_OrderErrorModal","_OrderForm","_OrderFormView2","_OrderGoPayModal","_OrderTimePicker","WithOrder","orderModel","QueryOrderForm","orderId","countWares","OrderForm","OrderGoPayModal","OrderErrorModal","OrderTimePicker","_OrderAgreements","_OrderFormInputs","_OrderFormSetup","_OrderPaymentMethod","_OrderSubmitLine","OrderFormSetup","form","OrderFormInputs","OrderPaymentMethod","OrderAgreements","OrderSubmitLine","submitForm","canSubmit","isVamInitialized","_OrderPaymentButton","OrderPaymentButton","method","PaymentGateEnum","Gopay","Cash","_reactForm","Checkmark","show","_a","__rest","Field","field","fieldApi","SelectButtonThemed","_extends","selected","value","setValue","_FinishView","_MapView","_ShopHeaderView","_ShopOverview","Container","fluid","component","MapView","ShopOverview","FinishView"],"mappings":"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","file":"static/js/3.61ff0a0c.chunk.js","sourcesContent":["import './FinishView.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../common/ColStyle'\n\nimport { FinishViewFooter } from './FinishViewFooter'\nimport { FinishViewLoader } from './FinishViewLoader'\nimport { FinishViewOrder } from './FinishViewOrder'\nimport { FinishViewSupport } from './FinishViewSupport'\n\ninterface IProps {}\n\nexport const FinishView: React.SFC<IProps> = ({}) => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyle>\n      <div className=\"finish__view\">\n        <FinishViewLoader\n          render={result => (\n            <>\n              <FinishViewOrder order={result.order} />\n              <FinishViewSupport branch={result.companyBranch} />\n              <FinishViewFooter finish={result} />\n            </>\n          )}\n        />\n      </div>\n    </ColStyle>\n  </Row>\n)\n","import './MapView.css'\n\nimport { useRouterContext } from '@speedlo/hooks'\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../../common/ColStyle'\nimport { OrderMethod } from '../../destination/OrderMethod'\nimport { OrderMap } from '../OrderMap'\n\nexport const MapView = () => {\n  const { history } = useRouterContext()\n  return (\n    <Row className=\"justify-content-md-center\">\n      <ColStyle>\n        <div className=\"map__view\">\n          <div className=\"map__view__header\">\n            <OrderMethod />\n          </div>\n          <OrderMap onConfirm={() => history.push(`/order`)} />\n        </div>\n      </ColStyle>\n    </Row>\n  )\n}\n","import { useObserver } from 'mobx-react-lite'\nimport React, { createFactory } from 'react'\n\nimport { BaseMap } from '../../common/BaseMap'\nimport { useRoot } from '../../common/WithRoot'\nimport { DeliveryTypeEnum } from '../../graph/types'\nimport { DeliveryMap } from './DeliveryMap'\nimport { PickupMap } from './PickupMap'\n\ninterface IProps {\n  onConfirm(): void\n}\n\nconst mapByOrderMethod = {\n  [DeliveryTypeEnum.Messenger]: createFactory<IProps>(DeliveryMap),\n  [DeliveryTypeEnum.Pickup]: createFactory<IProps>(PickupMap),\n}\n\nexport const OrderMap: React.FC<IProps> = ({ onConfirm }) => {\n  const { order, map } = useRoot()\n  return useObserver(() => (\n    <BaseMap model={map}>\n      {mapByOrderMethod[order.orderMethod]({ onConfirm })}\n    </BaseMap>\n  ))\n}\n","import './PickupMap.css'\n\nimport { when } from 'mobx'\nimport { useDisposable, useObserver } from 'mobx-react-lite'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { InfoWindow, Marker } from 'react-google-maps'\n\nimport { useRoot } from '../../common/WithRoot'\nimport { GPickupBranch } from '../../graph/types'\nimport { gpsToLatLng } from '../../helpers/gps'\nimport { RM } from '../../helpers/ramda'\nimport { MapPanning } from './atoms/MapPanning'\nimport { QueryPickupMapBranch, QueryPickupMapBrand } from './PickupMap.graphql'\nimport { PickupMapBranch } from './PickupMapBranch'\n\ninterface IProps {\n  onConfirm(): void\n}\n\nexport const PickupMap: React.FC<IProps> = ({ onConfirm }) => {\n  const { order, business, map } = useRoot()\n  const [activeBranch, setActiveBranch] = useState<MaybeID>(null)\n\n  useDisposable(() =>\n    when(\n      () => business.branchId !== null && activeBranch === null,\n      () => {\n        setActiveBranch(business.branchId)\n      },\n    ),\n  )\n\n  useEffect(\n    () => {\n      if (activeBranch) {\n        order.prefetchFoodMenu(activeBranch)\n      }\n    },\n    [activeBranch],\n  )\n\n  const onConfirmPickup = useCallback(\n    async (branchId: ID) => {\n      // it's necessary to set asap so correct data are displayed further\n      order.setBranch(branchId)\n      await order.createPickupOrder(branchId)\n      onConfirm()\n    },\n    [onConfirm],\n  )\n\n  const renderSite = (branch: GPickupBranch.Fragment) => (\n    <Marker\n      key={branch.id}\n      position={gpsToLatLng(branch.gps)}\n      onClick={() => setActiveBranch(branch.id)}\n    >\n      {activeBranch === branch.id ? (\n        <InfoWindow\n          onCloseClick={() => setActiveBranch(null)}\n          defaultOptions={{ maxWidth: 200 }}\n        >\n          <PickupMapBranch\n            branch={branch}\n            onConfirm={() => {\n              onConfirmPickup(branch.id)\n            }}\n          />\n        </InfoWindow>\n      ) : null}\n    </Marker>\n  )\n\n  return useObserver(() => {\n    if (business.isBrand) {\n      return (\n        <QueryPickupMapBrand\n          variables={{ brandId: business.brandId! }}\n          renderLoading={false}\n          render={({ branches }) => {\n            const branch =\n              branches && branches.find(RM.propEq('id', business.branchId))\n            return (\n              <>\n                <MapPanning map={map} gps={branch && branch.gps} />\n                {branches && branches.map(renderSite)}\n              </>\n            )\n          }}\n        />\n      )\n    }\n    return (\n      <QueryPickupMapBranch\n        variables={{ branchId: business.branchId! }}\n        renderLoading={false}\n        render={({ branch }) => (\n          <>\n            <MapPanning map={map} gps={branch && branch.gps} />\n            {branch && renderSite(branch)}\n          </>\n        )}\n      />\n    )\n  })\n}\n","import { Plural, Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { PrimaryButton } from '../../common/Buttons'\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { IShopStatusRender, ShopStatus } from '../../common/ShopStatus'\nimport { GPickupBranch } from '../../graph/types'\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  branch: GPickupBranch.Fragment\n  onConfirm(): void\n}\n\nconst PickupMapHeaderStyled = styled.div`\n  background-color: ${({ theme }) => theme.primary};\n  color: ${({ theme }) => theme.tertiaryText};\n  text-align: center;\n  padding: 0.4rem 0.2rem 0.2rem 0.2rem;\n  height: 2rem;\n  vertical-align: middle;\n`\n\nexport const PickupMapBranch: React.SFC<IProps> = ({ branch, onConfirm }) => (\n  <div className=\"pickup__map\">\n    <PickupMapHeaderStyled className=\"pickup__map__header\">\n      {branch.name}\n    </PickupMapHeaderStyled>\n    <div className=\"pickup__map__info\">\n      <ShopAddress address={branch.address} />\n    </div>\n    <ShopStatus\n      status={branch}\n      render={opts => (\n        <PrimaryButton\n          color=\"primary\"\n          data-testid=\"submitPickupBranch\"\n          disabled={!branch.pickupEnabled}\n          onClick={onConfirm}\n        >\n          {branch.pickupEnabled ? (\n            getButtonText(opts)\n          ) : (\n            <Trans>Delivery only</Trans>\n          )}\n        </PrimaryButton>\n      )}\n    />\n  </div>\n)\n\nfunction getButtonText({ decision, openingIn, closingIn }: IShopStatusRender) {\n  switch (decision) {\n    case 'Closed':\n      return <Trans>Closed</Trans>\n    case 'ClosingSoon':\n      return (\n        <Plural\n          value={closingIn}\n          one=\"Closing in 1 minute\"\n          other=\"Closing in # minutes\"\n        />\n      )\n    case 'OpeningSoon':\n      return (\n        <Plural\n          value={openingIn}\n          one=\"Opening in 1 minute\"\n          other=\"Opening in # minutes\"\n        />\n      )\n    default:\n      return i18n.t`Pickup here`.toLocaleUpperCase()\n  }\n}\n","import React from 'react'\n\nimport { WithRoot } from '../../common/WithRoot'\n\nimport { ShopHeader } from './ShopHeader'\nimport { QueryShopHeader } from './ShopHeader.graphql'\n\ninterface IProps {}\n\nexport const ShopHeaderView: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={root => (\n      <QueryShopHeader\n        // need to use branchId from order first as it reflects branch for which\n        // order is being made and it might have different eg. business hours\n        // then the one obtained through business code\n        variables={{ branchId: root.order.branchId || root.business.branchId! }}\n        skip={!root.business.isValid}\n        renderLoading={false}\n        render={({ branch }, { loading }) => (\n          <ShopHeader branch={branch} isLoading={loading} />\n        )}\n      />\n    )}\n  />\n)\n\nexport default ShopHeaderView\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Route } from 'react-router'\nimport { Row } from 'reactstrap'\nimport styled from 'styled-components'\n\nimport { ColStyle } from '../../common/ColStyle'\nimport { GShopHeader } from '../../graph/types'\nimport { OrderAddress } from './OrderAddress'\nimport { ShopCloseAlert } from './ShopCloseAlert'\nimport { ShopClosingTimeModal } from './ShopClosingTimeModal'\nimport { ShopHeaderIcons } from './ShopHeaderIcons'\nimport { ShopIntro } from './ShopIntro'\nimport { ShopLogo } from './ShopLogo'\nimport { ShopOpeningHours } from './ShopOpeningHours'\nimport { Sticker } from './Sticker'\n\ninterface IProps {\n  branch?: GShopHeader.Branch\n  isLoading: boolean\n}\n\nconst ShopHeaderStyled = styled.div`\n  display: flex;\n  min-height: 200px;\n`\n\nconst ShopHeaderInfoStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nexport const ShopHeader: React.SFC<IProps> = ({ branch, isLoading }) => (\n  <div>\n    <Row className=\"justify-content-md-center\">\n      <ShopHeaderIcons />\n    </Row>\n\n    <Row className=\"row-white justify-content-md-center\">\n      <ColStyle>\n        <ShopHeaderStyled data-testid=\"shopHeader\">\n          {isLoading || !branch ? null : (\n            <>\n              <ShopLogo url={(branch && branch.homepageUrl) || ''} />\n\n              <ShopHeaderInfoStyled>\n                <Route\n                  exact={true}\n                  path=\"/\"\n                  render={() => (\n                    <>\n                      <Sticker>\n                        <Trans>Choose your delivery option below</Trans>\n                      </Sticker>\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/order\"\n                  render={() => (\n                    <>\n                      <ShopClosingTimeModal status={branch} />\n                      <Sticker success={true}>\n                        <OrderAddress address={branch && branch.address} />\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/finish\"\n                  render={() => (\n                    <>\n                      <Sticker success={true}>\n                        <Trans>Order was send</Trans>\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n              </ShopHeaderInfoStyled>\n              <ShopCloseAlert status={branch} />\n            </>\n          )}\n        </ShopHeaderStyled>\n      </ColStyle>\n    </Row>\n  </div>\n)\n","import React from 'react'\n\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { WithRoot } from '../../common/WithRoot'\nimport { DeliveryTypeEnum, GShopHeader } from '../../graph/types'\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  address?: GShopHeader.Address\n}\n\nexport const OrderAddress: React.SFC<IProps> = ({ address }) => (\n  <WithRoot\n    render={root => {\n      switch (root.order.orderMethod) {\n        case DeliveryTypeEnum.Messenger:\n          return (\n            <span>\n              {i18n.t`Order to address`}: <b>{root.location.address}</b>\n            </span>\n          )\n        case DeliveryTypeEnum.Pickup:\n          return (\n            <span>\n              {i18n.t`Pickup at address`}:{' '}\n              <b>\n                <ShopAddress address={address} />\n              </b>\n            </span>\n          )\n        default:\n          return null\n      }\n    }}\n  />\n)\n","import './ShopCloseAlert.css'\n\nimport { Plural, Trans } from '@lingui/react'\nimport React from 'react'\nimport { Alert } from 'reactstrap'\n\nimport { ShopStatus } from '../../common/ShopStatus'\nimport { GCompanyBranchStatus } from '../../graph/types'\n\ninterface IProps {\n  status?: GCompanyBranchStatus.Fragment\n  now?: Date\n}\n\nexport const ShopCloseAlert: React.SFC<IProps> = ({ status, now }) => {\n  return status ? (\n    <ShopStatus\n      now={now}\n      status={status}\n      render={({ decision, closingIn }) => {\n        if (decision === 'ClosingSoon') {\n          return (\n            <Alert className=\"shop__header__alert\">\n              <Trans>\n                Beware! We are\n                <Plural\n                  value={closingIn}\n                  one=\"closing in 1 minute\"\n                  other=\"closing in # minutes\"\n                />\n                . Finish your order quickly.\n              </Trans>\n            </Alert>\n          )\n        }\n        return null\n      }}\n    />\n  ) : null\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GShopHeader } from '../../graph/types'\n\ninterface IProps {\n  branch?: Maybe<GShopHeader.Branch>\n}\n\nconst ShopIntroStyled = styled.div`\n  margin: 0.8rem 1rem 1rem 1.3rem;\n`\n\nexport const ShopIntro: React.SFC<IProps> = ({ branch }) => (\n  <ShopIntroStyled data-testid=\"headerText\">\n    {branch ? branch.headerText : ''}\n  </ShopIntroStyled>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { BackgroundThemed } from '../../common/BackgroundThemed'\n\ninterface IProps {\n  url: string\n}\n\nconst LogoLink: React.SFC<IProps> = ({ url, children }) =>\n  url ? <a href={url}>{children}</a> : <Link to=\"/\">{children}</Link>\n\nconst LogoContainerStyled = styled.div`\n  height: 200px;\n  width: 400px;\n  flex: 0 0 400px;\n  & .shop__header__logo {\n    height: 100%;\n  }\n`\n\nexport const ShopLogo: React.SFC<IProps> = props => (\n  <LogoContainerStyled>\n    <LogoLink {...props}>\n      <BackgroundThemed\n        className=\"shop__header__logo\"\n        imageName=\"storeLogo\"\n        size=\"cover\"\n      />\n    </LogoLink>\n  </LogoContainerStyled>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GShopHeader } from '../../graph/types'\nimport { i18n } from '../../i18n'\nimport { ShopStatusDisplay } from './ShopStatusDisplay'\n\ninterface IProps {\n  branch: GShopHeader.Branch\n}\n\nconst ContainerStyled = styled.div`\n  margin: 0.4rem 0 0 0.1rem;\n`\n\nconst OpeningHoursStyled = styled.div`\n  margin: -0.2rem 0 0 1.35rem;\n  display: inline-block;\n  vertical-align: middle;\n`\n\nconst StatusDisplayPosition = styled.span`\n  padding-left: 2rem;\n`\n\nexport const ShopOpeningHours: React.SFC<IProps> = ({ branch }) => (\n  <ContainerStyled>\n    <span className=\"flaticon-clock\" />\n    {branch &&\n      branch.businessHours.map(businessHour => (\n        <OpeningHoursStyled data-testid=\"openingHours\" key={businessHour.id}>\n          {businessHour.closed\n            ? businessHour.closedNote || i18n.t`Closed`\n            : `${businessHour.openAt} - ${businessHour.closeAt}`}\n        </OpeningHoursStyled>\n      ))}\n    <StatusDisplayPosition>\n      <ShopStatusDisplay\n        status={branch}\n        deliveryTime={branch.defaultDeliveryTime}\n        pickupTime={branch.defaultPickupTime}\n      />\n    </StatusDisplayPosition>\n  </ContainerStyled>\n)\n","import classNames from 'classnames'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst StickerThemed = styled.div`\n  background: ${({ theme }) => theme.primary};\n  color: white;\n  margin-top: 1rem;\n  padding: 0;\n  border-radius: 0 0.7rem 0.7rem 0;\n  white-space: nowrap;\n  flex: none;\n\n  & p {\n    display: inline-block;\n    margin: 0.6rem 1rem 0 0;\n    vertical-align: top;\n    white-space: nowrap;\n  }\n`\n\nconst IconStyled = styled.span`\n  margin: 0.5rem 1rem 0 0.1rem;\n  &:before,:after {\n  font-size: 1.8rem;\n  margin: 0 0 0 1rem;\n  }\n}\n`\n\ninterface IProps {\n  success?: boolean\n}\n\nexport const Sticker: React.SFC<IProps> = ({ success = false, children }) => (\n  <StickerThemed\n    className={classNames('right__sticker', {\n      'order-method-unselected': !success,\n      'order-method-selected': success,\n    })}\n  >\n    <IconStyled className=\"flaticon-transport\" />\n    <p>{children}</p>\n  </StickerThemed>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport {\n  AddressFragment,\n  CompanyBranchStatusFragment,\n} from '../../graph/fragments.graphql'\nimport { GShopHeader } from '../../graph/types'\n\nexport const ShopHeaderQuery = gql`\n  query GShopHeader($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      name\n      phone\n      homepageUrl\n      headerText\n      defaultDeliveryTime\n      defaultPickupTime\n      address {\n        ...GAddress\n      }\n      ...GCompanyBranchStatus\n    }\n  }\n  ${AddressFragment}\n  ${CompanyBranchStatusFragment}\n`\n\nexport const QueryShopHeader = buildQuery<\n  GShopHeader.Query,\n  GShopHeader.Variables\n>(ShopHeaderQuery)\n","import './ShopOverview.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport BackgroundThemed from '../../common/BackgroundThemed'\nimport { ColStyleLeft, ColStyleRight } from '../../common/ColStyle'\nimport { i18n } from '../../i18n'\nimport { CartView } from '../cart/CartView'\nimport { FoodMenuView } from '../foodMenu/FoodMenuView'\nimport { OrderFormStorageNotice } from '../orderForm/OrderFormStorageNotice'\nimport { OrderFormView } from '../orderForm/OrderFormView'\n\nexport const ShopOverview = () => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyleLeft>\n      <div className=\"shop__overview__column\">\n        <FoodMenuView />\n      </div>\n    </ColStyleLeft>\n\n    <ColStyleRight>\n      <div className=\"shop__overview__column cart__column\">\n        <div className=\"cart__column__header\">\n          <span className=\"flaticon-cart cart__column__header__icon\" />\n          <h4>{i18n.t`Your order`}</h4>\n        </div>\n\n        <BackgroundThemed\n          className=\"cart__column__cart\"\n          imageName=\"backgroundCart\"\n        >\n          <CartView />\n        </BackgroundThemed>\n\n        <OrderFormView />\n      </div>\n    </ColStyleRight>\n    <OrderFormStorageNotice />\n  </Row>\n)\n","import './OrderFormView.css'\n\nimport React from 'react'\n\nimport { WithOrder } from '../../common/WithOrder'\nimport { OrderErrorModal } from './OrderErrorModal'\nimport { OrderForm } from './OrderForm'\nimport { QueryOrderForm } from './OrderFormView.graphql'\nimport { OrderGoPayModal } from './OrderGoPayModal'\nimport { OrderTimePicker } from './OrderTimePicker'\n\nexport const OrderFormView: React.SFC = () => (\n  <WithOrder\n    render={orderModel => (\n      <>\n        <QueryOrderForm\n          variables={{ orderId: orderModel.orderId! }}\n          renderLoading={false}\n          render={({ order }) => {\n            return !order || order.countWares === 0 ? null : (\n              <OrderForm order={orderModel} />\n            )\n          }}\n        />\n        <OrderGoPayModal order={orderModel} />\n        <OrderErrorModal />\n        <OrderTimePicker />\n      </>\n    )}\n  />\n)\n","import React from 'react'\n\nimport { TOrderModel } from '../../models/OrderModel'\nimport { OrderAgreements } from './OrderAgreements'\nimport { OrderFormInputs } from './OrderFormInputs'\nimport { OrderFormSetup } from './OrderFormSetup'\nimport { OrderPaymentMethod } from './OrderPaymentMethod'\nimport { OrderSubmitLine } from './OrderSubmitLine'\n\ninterface IProps {\n  order: TOrderModel\n}\n\nexport const OrderForm: React.SFC<IProps> = ({ order }) => (\n  <OrderFormSetup\n    order={order}\n    render={form => (\n      <div className=\"order__form\">\n        <div className=\"order__form__inner\">\n          <OrderFormInputs />\n          <OrderPaymentMethod />\n          <OrderAgreements />\n        </div>\n        <OrderSubmitLine\n          onClick={form.submitForm}\n          canSubmit={order.isVamInitialized}\n        />\n      </div>\n    )}\n  />\n)\n","import './OrderPaymentMethod.css'\n\nimport React from 'react'\n\nimport { PaymentGateEnum } from '../../graph/types'\nimport { i18n } from '../../i18n'\nimport { OrderPaymentButton } from './OrderPaymentButton'\n\nexport const OrderPaymentMethod: React.SFC = () => (\n  <div className=\"order__payment__method\">\n    <OrderPaymentButton\n      method={PaymentGateEnum.Gopay}\n      data-testid=\"orderPaymentMethod__GoPay\"\n    >\n      {i18n.t`Pay by card`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n    <OrderPaymentButton\n      method={PaymentGateEnum.Cash}\n      data-testid=\"orderPaymentMethod__Cash\"\n    >\n      {i18n.t`Pay by cash`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n  </div>\n)\n","import React from 'react'\nimport { Field } from 'react-form'\n\nimport { SelectButtonThemed } from '../../common/Buttons'\nimport { PaymentGateEnum } from '../../graph/types'\n\nexport interface IPaymentButtonProps {\n  method: PaymentGateEnum\n  disabled?: boolean\n}\n\nexport const OrderPaymentButton: React.SFC<IPaymentButtonProps> = ({\n  children,\n  disabled,\n  method,\n  ...props\n}) => (\n  <Field\n    field=\"payment\"\n    render={fieldApi => (\n      <SelectButtonThemed\n        disabled={disabled}\n        selected={fieldApi.value === method}\n        onClick={() => {\n          fieldApi.setValue(method)\n        }}\n        {...props}\n      >\n        <Checkmark show={fieldApi.value === method} />\n        {children}\n      </SelectButtonThemed>\n    )}\n  />\n)\n\nfunction Checkmark({ show }: { show: boolean }) {\n  return show ? (\n    <span className=\"flaticon-mark order__payment__method__button__checked\" />\n  ) : (\n    <div className=\"order__payment__method__button__unchecked\" />\n  )\n}\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { Container } from 'reactstrap'\n\nimport { FinishView } from '../segments/finish/FinishView'\nimport { MapView } from '../segments/map/views/MapView'\nimport { ShopHeaderView } from '../segments/shop/ShopHeaderView'\nimport { ShopOverview } from '../segments/shop/ShopOverview'\n\nconst DesktopApp = () => (\n  <Container fluid={true}>\n    <Route path=\"/\" component={ShopHeaderView} />\n    <Route exact={true} path=\"/\" component={MapView} />\n    <Route path=\"/order\" component={ShopOverview} />\n    <Route path=\"/finish\" component={FinishView} />\n  </Container>\n)\n\nexport default DesktopApp\n"],"sourceRoot":""}