{"version":3,"sources":["common/Responsive.tsx","graph/types.ts","helpers/ramda.ts","graph/index.ts","helpers/gps.ts","segments/cart/CartView.graphql.ts","segments/foodMenu/FoodMenuView.graphql.ts","segments/mobile/MobileCart.graphql.ts","helpers/logger.ts","common/Buttons.tsx","models/BaseModel.ts","segments/map/PickupMap.graphql.ts","models/OrderModel.graphql.ts","index.tsx","app/App.tsx","graph/fragments.graphql.ts","helpers/sentry.ts","common/ErrorContainer.tsx","common/PageTitle.tsx","app/ResetPersistenceButton.tsx","common/RouteButton.tsx","app/Router.tsx","config.ts","common/ThemeSwitchProvider.tsx","createClient.ts","graph/errorHandler.ts","helpers/offline.ts","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","models/RootModel.ts","helpers/persistModel.ts","models/AuthModel.ts","models/BusinessModel.ts","models/BannerModel.ts","models/BusinessModel.graphql.ts","models/ThemeModel.ts","models/ThemeModel.graphql.ts","models/ConfigModel.ts","models/LocationModel.ts","common/WithRoot.tsx","helpers/formats.ts","models/LocationModel.graphql.ts","models/MapModel.ts","models/OrderModel.ts","helpers/gopay.ts","graph/buildMutation.tsx","models/UserModel.ts","common/Pacman.tsx","i18n.tsx","graph/buildQuery.tsx"],"names":["_react","_interopRequireDefault","__webpack_require__","_reactResponsive","_styledComponents","Desktop","props","default","createElement","_extends","minWidth","Mobile","maxAspectRatio","maxWidth","screen","minAspectRatio","children","mobile","desktop","Fragment","className","args","css","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","LanguageEnum","ShiftUserStateEnum","DeviceStateEnum","DeviceTypeEnum","WareUnitEnum","PaymentGateEnum","PaymentTypeEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","OrderOriginEnum","ZoneTypeEnum","OrderStateEnum","DeliveryTypeEnum","OrderBillingTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","SubscriptionActionType","SettingTypeEnum","exports","RM","_interopRequireWildcard","_buildMutation","_buildQuery","gps","lat","Number","latitude","lng","longitude","latLng","_graphqlTag","_graph","_fragments","OrderFragment","CartItemFragment","PriceFragment","CartViewQuery","QueryCartView","buildQuery","FoodMenuQuery","CartPresenceFragment","FoodMenuCartPresenceQuery","QueryFoodMenuCartPresence","QueryFoodMenu","_FoodMenuView","OrderMobileFragment","MobileCartQuery","QueryMobileCart","_debug","logMain","logMap","logDebug","logGraph","logError","logAuth","logRouting","logPersist","logOrder","logSentry","logLang","_reactstrap","_Responsive","_RouteButton","PrimaryButton","Button","withConfig","displayName","themeProp","SecondaryButton","PrimaryRoutedButton","RouteButton","MobileHeaderButton","_a","isConfirm","theme","__rest","primary","SelectButtonThemed","selected","mediaDesktop","tertiary","unselected","mediaMobile","tertiaryText","unselectedText","tertiaryHover","unselectedHover","name","_mobxStateTree","BaseModel","types","model","views","self","log","getPath","trim","getType","env","getEnv","client","root","getRoot","PickupBranchFragment","CompanyBranchStatusFragment","GeoPointFragment","AddressFragment","PickupMapBrandQuery","PickupMapBranchQuery","QueryPickupMapBrand","QueryPickupMapBranch","_CartView","_MobileCart","CartRecipeFragment","OrderCartForRecipeQuery","OrderCartForItemQuery","CreateOrderFragment","CreatePickupOrderMutation","CreateDeliveryOrderMutation","AddToOrderMutation","AddToOrderMobileMutation","ChangeOrderItemMutation","RemoveOrderItemMutation","SubmitOrderMutation","OrderPaymentStatusQuery","VamStatusQuery","_tools","_reactApollo","_reactApolloHooks","_reactDom","_App","_Router","_Pacman","_ThemeSwitchProvider","_WithRoot","_createClient","_sentry","_i18n","_RootModel","createApolloClient","createRootModel","Main","Suspense","fallback","RootProvider","value","ApolloProvider","I18nManager","Router","installSentry","render","document","getElementById","serviceWorker","register","onUpdate","sw","setTimeout","window","confirm","i18n","_","postMessage","navigator","addEventListener","event","data","location","reload","_react2","_ErrorContainer","_PageTitle","_ResetPersistenceButton","LandscapeMessage","div","DesktopApp","lazy","Promise","all","e","then","t","bind","MobileApp","ErrorContainer","prod","PageTitle","MobileLandscape","Trans","id","ResetPersistenceButton","JsonAddressFragment","RecipeFragment","PromoCodeFragment","_ravenJs","_verror","_config","_logger","_ramda","cb","sentryDSN","appConfig","config","environment","install","context","userId","token","setUserContext","isGuest","setExtraContext","error","info","isSetup","captureException","extra","showReportDialog","errors","captureBreadcrumb","category","level","message","Object","assign","forEach","err","Error","userErrors","filter","propEq","length","lastEventId","title","head","meta","VError","cause","ErrorBoundaryContainer","ProductionErrorBoundary","dispatchErrorReporting","reportRenderingError","DeveloperErrorBoundary","_reactDocumentTitle","WithRoot","observe","business","isValid","branch","brand","pageTitleSuffix","useRoot","_reactRouterDom","to","replace","buttonProps","Link","_mobxReactLite","useObserver","BrowserRouter","basename","routerBasePath","key","fallbackLanguage","supportedLanguages","endpoint","persistenceKey","NODE_ENV","PUBLIC_URL","REACT_APP_LOCAL_ENDPOINT","REACT_APP_STAGE","REACT_APP_LOCAL_KEY","redirectOnFail","loaded","ThemeProvider","cache","_apolloCacheInmemory","InMemoryCache","dataIdFromObject","o","__typename","loggingLink","_apolloLinkLog","enabled","httpLink","_apolloLinkBatchHttp","BatchHttpLink","uri","credentials","retryLink","_apolloLinkRetry","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","_operation","offlineLink","_apolloLinkQueue","_mobx","autorun","_offline","isNetworkOnline","open","close","createOfflineLink","errorLink","_errorHandler","createErrorLink","link","_apolloLink","ApolloLink","from","_apolloClient","ApolloClient","_apolloLinkError","errorHandler","graphQLErrors","networkError","operation","reportFailingQuery","query","operationName","variables","map","locations","path","onError","isOnline","change","oldValue","newValue","observable","box","onLine","set","get","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","webpackAsyncContext","req","ids","resolve","code","keys","module","RootModel","create","fetch","geolocation","init","_persistModel","_AuthModel","_BaseModel","_BusinessModel","_ConfigModel","_LocationModel","_MapModel","_OrderModel","_UserModel","named","auth","optional","AuthModel","BusinessModel","ConfigModel","MapModel","order","OrderModel","LocationModel","user","UserModel","persistedModels","actions","initialSnapshot","[object Object]","getSnapshot","snapshot","applySnapshot","__awaiter","attachAuthLinkToClient","persistModel","queryBusiness","checkPaymentStatus","modelName","stateKey","writeState","_localforage","setItem","state","getItem","removeItem","onSnapshot","_apolloLinkContext","maybeNull","string","getClientHeaders","Authorization","identifyGuest","fetching","authLink","setContext","fetchToken","authenticate","String","headers","concat","preProcessSnapshot","url","Accept","response","json","_types","_BannerModel","_ThemeModel","ThemeModel","banners","BannerModel","volatile","isBrand","isMobileApp","country","orderOrigin","Web","branchId","companyId","company","brandId","requestedCode","REACT_APP_BUSINESS_CODE","URL","href","searchParams","codeParam","lookup","knownBasePath","address","orderCancel","BranchLookupQuery","updateFromLookup","stylesQuery","queryStyles","setSentryContext","has","_dateFns","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","differenceInDays","Boolean","CompanyBranchFragment","_color","storeLogo","storeLogoMobile","backgroundCart","secondary","secondaryHover","styles","active","main","calcHoverColor","mainSecondary","CompanyBranchStyleQuery","applyStyle","companyBranch","inputColor","lighten","hsl","orderItemsMax","_formats","_gps","number","searchValue","isOpen","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","geolocationPoint","isResolving","isGeolocationAvailable","hasLocation","undefined","hasAddress","isDeliveryAddress","hasFinishedSearch","geoPoint","this","resolutionTarget","gpsToLatLng","result","finalAddress","formatAddress","isValidAddress","setLocation","gpsCoordinates","resolver","vars","setIsResolving","ResolveLocationQuery","setResolutionResult","resolveLocation","clearAddress","userLocation","point","getCurrentPosition","coords","accuracy","useGeolocationResult","disableGeolocation","alert","enableHighAccuracy","maximumAge","_mobxReact","rootContext","createContext","useContext","Observer","Provider","street","houseNumber","city","LocationResolutionFragment","GPSCzechia","zoom","mapRef","clickPoint","isReady","center","ref","getZoom","getCenter","radiusMeters","panTo","ev","latLngToGps","_gopay","_PickupMap","orderId","orderMethod","Messenger","payment","Gopay","firstname","lastname","email","phone","phonePrefix","note","isSubmitting","isGoPayChecking","submitErrors","agreements","lastActiveRecipeId","isVamInitialized","hasOrder","fragmentOrderId","usingDeliveryOrderMethod","usingPickupOrderMethod","Pickup","hasErrors","defaultPhonePrefix","getSubmitVariables","formValues","customer","firstName","lastName","emails","phones","paymentGate","deliverAt","addHours","toISOString","prop","method","checking","Array","isArray","recipeId","fetchPolicy","status","values","shouldRememberForm","mutate","mutation","orderCreated","initVam","sideDishes","current","readFragment","fragment","fragmentName","recipe","optimisticResponse","createOrderRecipe","countWares","items","price","formattedValue","automatic","itemId","destroyOrderRecipe","item","input","useAgreements","vamStatus","reportError","vamFailed","submitOrder","rememberFormValues","refetchQueries","submitFailed","submitResult","finishOrder","Cash","submitFinished","gopayUrl","executeGoPayPayment","goPayStatusCheck","paymentStatus","queryPaymentStatus","isSuccess","parsedUrl","when","checkDelay","clearTimeout","orderPaid","search","pathname","toString","scriptUrl","includes","embedScriptSandbox","embedScript","_scriptjs","loadScript","options","gatewayUrl","inline","getOptions","checkout","Mutation","rememberForm","boolean","closingTimeAlertHidden","orderLimitAlertHidden","_reactSpinkit","noMargin","style","display","alignSelf","justifyContent","data-testid","marginTop","_core","_hooks","detector","setupI18n","changeLanguage","lang","catalog","load","loadCatalog","activate","detectLanguage","languages","LocaleResolver","UrlDetector","NavigatorDetector","LanguageOnlyTransformer","getLocales","join","find","loc","setReady","useState","language","useAsyncEffect","I18nProvider","renderFragment","renderLoading","renderError","Query","loading"],"mappings":"iOAAA,IAAAA,EAAAC,EAAAC,EAAA,IACAC,EAAAF,EAAAC,EAAA,MACAE,EAAAF,EAAA,sQAEO,MAAMG,EAAUC,GAASN,EAAAO,QAAAC,cAACL,EAAAI,QAADE,EAAA,GAAqBH,EAArB,CAA4BI,SAAU,mBAC/D,MAAMC,EAASL,GACpBN,EAAAO,QAAAC,cAACL,EAAAI,QAADE,EAAA,GAAqBH,EAArB,CAA4BM,eAAe,OAAOC,SAAU,oCAE/BP,IAC7BN,EAAAO,QAAAC,cAACL,EAAAI,QAADE,EAAA,GACMH,EADN,CAEEQ,QAAQ,EACRC,eAAe,OACfF,SAAU,qBASyC,GACrDG,WACAC,SACAC,aAEAlB,EAAAO,QAAAC,cAAAR,EAAAO,QAAAY,SAAA,KACEnB,EAAAO,QAAAC,cAACH,EAAD,CAASe,UAAWF,EAASF,SAAUA,IACvChB,EAAAO,QAAAC,cAACG,EAAD,CAAQS,UAAWH,EAAQD,SAAUA,qBAIb,KAAIK,IAASjB,EAAAkB;uBAClB;;OAEjB,EAAAlB,EAAAkB,QAAOD;;iBAIc,KAAIA,IAASjB,EAAAkB;uBACjB,IAAM;;OAEvB,EAAAlB,EAAAkB,QAAOD;;qCCulBb,IAAYE,EAMAC,EAMAC,EAOAC,EAKAC,EAiBAC,EAUAC,EAiBAC,EAKAC,EAIAC,EAMAC,EAMAC,EAOAC,EAOAC,EAMAC,EAOAC,EAOAC,EAMAC,EAOAC,EAOAC,EAKAC,EAkBAC,EAMAC,EAyCAC,EAOAC,EAQAC,EAQAC,EAQAC,EAOAC,moBA3PZ,SAAY5B,GACVA,EAAA,gBACAA,EAAA,sBACAA,EAAA,cAHF,CAAYA,IAAe6B,EAAA7B,gBAAfA,EAAe,yBAM3B,SAAYC,GACVA,EAAA,oBACAA,EAAA,oBACAA,EAAA,2BAHF,CAAYA,IAAe4B,EAAA5B,gBAAfA,EAAe,sBAM3B,SAAYC,GACVA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UAJF,CAAYA,IAAY2B,EAAA3B,aAAZA,EAAY,sCAOxB,SAAYC,GACVA,EAAA,kBACAA,EAAA,mBAFF,CAAYA,IAA4B0B,EAAA1B,6BAA5BA,EAA4B,gCAKxC,SAAYC,GACVA,EAAA,kBACAA,EAAA,4BACAA,EAAA,0BACAA,EAAA,oBACAA,EAAA,gBACAA,EAAA,YACAA,EAAA,wBACAA,EAAA,uBACAA,EAAA,sBACAA,EAAA,eACAA,EAAA,oBACAA,EAAA,kCACAA,EAAA,iBACAA,EAAA,cAdF,CAAYA,IAAsByB,EAAAzB,uBAAtBA,EAAsB,qBAiBlC,SAAYC,GACVA,EAAA,gBACAA,EAAA,kBACAA,EAAA,sBACAA,EAAA,oBACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,gBAPF,CAAYA,IAAWwB,EAAAxB,YAAXA,EAAW,sBAUvB,SAAYC,GACVA,EAAA,0CACAA,EAAA,sBACAA,EAAA,UACAA,EAAA,YACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,YACAA,EAAA,UACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,sBACAA,EAAA,cACAA,EAAA,oBAdF,CAAYA,IAAYuB,EAAAvB,aAAZA,EAAY,2BAiBxB,SAAYC,GACVA,EAAA,oBACAA,EAAA,kBAFF,CAAYA,IAAiBsB,EAAAtB,kBAAjBA,EAAiB,8BAK7B,SAAYC,GACVA,EAAA,YADF,CAAYA,IAAoBqB,EAAArB,qBAApBA,EAAoB,wBAIhC,SAAYC,GACVA,EAAA,kBACAA,EAAA,kBACAA,EAAA,oBAHF,CAAYA,IAAcoB,EAAApB,eAAdA,EAAc,sBAM1B,SAAYC,GACVA,EAAA,QACAA,EAAA,QACAA,EAAA,QAHF,CAAYA,IAAYmB,EAAAnB,aAAZA,EAAY,4BAMxB,SAAYC,GACVA,EAAA,oBACAA,EAAA,oBACAA,EAAA,0CACAA,EAAA,wBAJF,CAAYA,IAAkBkB,EAAAlB,mBAAlBA,EAAkB,yBAO9B,SAAYC,GACVA,EAAA,kBACAA,EAAA,gBACAA,EAAA,YACAA,EAAA,YAJF,CAAYA,IAAeiB,EAAAjB,gBAAfA,EAAe,wBAO3B,SAAYC,GACVA,EAAA,UACAA,EAAA,cACAA,EAAA,YAHF,CAAYA,IAAcgB,EAAAhB,eAAdA,EAAc,sBAM1B,SAAYC,GACVA,EAAA,oBACAA,EAAA,YACAA,EAAA,cACAA,EAAA,cAJF,CAAYA,IAAYe,EAAAf,aAAZA,EAAY,yBAOxB,SAAYC,GACVA,EAAA,cACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,YAJF,CAAYA,IAAec,EAAAd,gBAAfA,EAAe,yBAO3B,SAAYC,GACVA,EAAA,YACAA,EAAA,gBACAA,EAAA,kBAHF,CAAYA,IAAea,EAAAb,gBAAfA,EAAe,8BAM3B,SAAYC,GACVA,EAAA,YACAA,EAAA,qBACAA,EAAA,cACAA,EAAA,cAJF,CAAYA,IAAoBY,EAAAZ,qBAApBA,EAAoB,6BAOhC,SAAYC,GACVA,EAAA,mBACAA,EAAA,oBACAA,EAAA,iBACAA,EAAA,sBAJF,CAAYA,IAAmBW,EAAAX,oBAAnBA,EAAmB,4BAO/B,SAAYC,GACVA,EAAA,kBACAA,EAAA,UAFF,CAAYA,IAAkBU,EAAAV,mBAAlBA,EAAkB,yBAK9B,SAAYC,GACVA,EAAA,UACAA,EAAA,uBACAA,EAAA,6BACAA,EAAA,qBACAA,EAAA,cACAA,EAAA,YACAA,EAAA,cACAA,EAAA,yBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,8CACAA,EAAA,2DACAA,EAAA,8CACAA,EAAA,yBAfF,CAAYA,IAAeS,EAAAT,gBAAfA,EAAe,sBAkB3B,SAAYC,GACVA,EAAA,YACAA,EAAA,cACAA,EAAA,gBAHF,CAAYA,IAAYQ,EAAAR,aAAZA,EAAY,wBAMxB,SAAYC,GACVA,EAAA,iBACAA,EAAA,oBACAA,EAAA,yBACAA,EAAA,oBACAA,EAAA,0BACAA,EAAA,yCACAA,EAAA,gBACAA,EAAA,YACAA,EAAA,8BACAA,EAAA,gBACAA,EAAA,8BACAA,EAAA,qCACAA,EAAA,UACAA,EAAA,gBACAA,EAAA,sBACAA,EAAA,6BACAA,EAAA,cACAA,EAAA,oBACAA,EAAA,kCACAA,EAAA,uBACAA,EAAA,YACAA,EAAA,kCACAA,EAAA,eACAA,EAAA,4BACAA,EAAA,YACAA,EAAA,sBACAA,EAAA,cACAA,EAAA,oBACAA,EAAA,0CACAA,EAAA,2CACAA,EAAA,mCACAA,EAAA,4BACAA,EAAA,oBACAA,EAAA,6BACAA,EAAA,iCACAA,EAAA,yBACAA,EAAA,2BACAA,EAAA,8CAtCF,CAAYA,IAAcO,EAAAP,eAAdA,EAAc,0BAyC1B,SAAYC,GACVA,EAAA,gBACAA,EAAA,sBACAA,EAAA,YACAA,EAAA,YAJF,CAAYA,IAAgBM,EAAAN,iBAAhBA,EAAgB,8BAO5B,SAAYC,GACVA,EAAA,qBACAA,EAAA,wBACAA,EAAA,UACAA,EAAA,6BACAA,EAAA,sBALF,CAAYA,IAAoBK,EAAAL,qBAApBA,EAAoB,8BAQhC,SAAYC,GACVA,EAAA,cACAA,EAAA,sBACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,sBALF,CAAYA,IAAoBI,EAAAJ,qBAApBA,EAAoB,8BAQhC,SAAYC,GACVA,EAAA,kBACAA,EAAA,kBACAA,EAAA,YACAA,EAAA,oBACAA,EAAA,sBALF,CAAYA,IAAoBG,EAAAH,qBAApBA,EAAoB,gCAQhC,SAAYC,GACVA,EAAA,gBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,gBAJF,CAAYA,IAAsBE,EAAAF,uBAAtBA,EAAsB,yBAOlC,SAAYC,GACVA,EAAA,4BACAA,EAAA,wCACAA,EAAA,cACAA,EAAA,UACAA,EAAA,kBACAA,EAAA,kBANF,CAAYA,IAAeC,EAAAD,gBAAfA,EAAe,oGC73B3B,IAAAE,ySAAAC,CAAApD,EAAA,0RCAA,IAAAqD,EAAArD,EAAA,KACAsD,EAAAtD,EAAA,wICG4BuD,KAAD,CACzBC,IAAKC,OAAOF,EAAIG,UAChBC,IAAKF,OAAOF,EAAIK,4BAGUC,KAAD,CACzBH,SAAUD,OAAOI,EAAOL,OACxBI,UAAWH,OAAOI,EAAOF,oJCX3B,MAAAG,KAAA9D,EAAA,iCAEA+D,EAAA/D,EAAA,KACAgE,EAAAhE,EAAA,IAGO,MAAMiE,EAAgBH,EAAAzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCzB2D,EAAAE;IACAF,EAAAG;oBAGG,MAAMC,EAAgBN,EAAAzD;;;;;;;;;IASzB4D;oBAGG,MAAMI,GAAgB,EAAAN,EAAAO,YAC3BF,8NCxDF,MAAAN,KAAA9D,EAAA,iCAEAsD,EAAAtD,EAAA,IACAgE,EAAAhE,EAAA,IAGO,MAAMuE,EAAgBT,EAAAzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BzB2D,EAAAG;oBAGG,MAAMK,EAAuBV,EAAAzD;;;;;;;;;2BAW7B,MAAMoE,EAA4BX,EAAAzD;;;;;;;IAOrCmE;gCAGG,MAAME,GAA4B,EAAApB,EAAAgB,YAGvCG,iCAEK,MAAME,GAAgB,EAAArB,EAAAgB,YAC3BC,yKCnEF,MAAAT,KAAA9D,EAAA,iCAEA+D,EAAA/D,EAAA,KACAgE,EAAAhE,EAAA,IAEA4E,EAAA5E,EAAA,KAEO,MAAM6E,EAAsBf,EAAAzD;;;;;;;;;IAS/B2D,EAAAG;IACAS,EAAAJ;0BAGG,MAAMM,EAAkBhB,EAAAzD;;;;;;IAM3BwE;sBAGG,MAAME,GAAkB,EAAAhB,EAAAO,YAG7BQ,yOChCF,MAAAE,KAAAhF,EAAA,iCAEO,MAAMiF,GAAU,EAAAD,EAAA3E,SAAM,uBACtB,MAAM6E,GAAS,EAAAF,EAAA3E,SAAM,sBACrB,MAAM8E,GAAW,EAAAH,EAAA3E,SAAM,0BACvB,MAAM+E,GAAW,EAAAJ,EAAA3E,SAAM,0BACvB,MAAMgF,GAAW,EAAAL,EAAA3E,SAAM,0BACvB,MAAMiF,GAAU,EAAAN,EAAA3E,SAAM,wBACtB,MAAMkF,GAAa,EAAAP,EAAA3E,SAAM,8BACzB,MAAMmF,GAAa,EAAAR,EAAA3E,SAAM,8BACzB,MAAMoF,GAAW,EAAAT,EAAA3E,SAAM,0BACvB,MAAMqF,GAAY,EAAAV,EAAA3E,SAAM,4BACxB,MAAMsF,GAAU,EAAAX,EAAA3E,SAAM,oNCZ7B,MAAAP,KAAAE,EAAA,gCACA4F,EAAA5F,EAAA,IACAE,ySAAAkD,CAAApD,EAAA,KAEA6F,EAAA7F,EAAA,KAEA8F,EAAA9F,EAAA,kSAEO,MAAM+F,GAAgB,EAAA7F,EAAAG,SAAOuF,EAAAI,QAAOC,WAAA,CAAAC,YAAA;sBACrBC,EAAU;kBACdA,EAAU;;wBAEJA,EAAU;oBACdA,EAAU;;;;;oBAO9BJ,EAAcG,YAAc,gBAErB,MAAME,GAAkB,EAAAlG,EAAAG,SAAOuF,EAAAI,QAAOC,WAAA,CAAAC,YAAA;sBACvBC,EAAU;kBACdA,EAAU;;wBAEJA,EAAU;oBACdA,EAAU;;sBAI9BC,EAAgBF,YAAc,kBAEvB,MAAMG,GAAsB,EAAAnG,EAAAG,SAAOyF,EAAAQ,aAAYL,WAAA,CAAAC,YAAA;sBAChCC,EAAU;kBACdA,EAAU;;wBAEJA,EAAU;oBACdA,EAAU;;0BAI9BE,EAAoBH,YAAc,sBAO3B,MAAMK,GAAqB,EAAArG,EAAAG,SAC/BmG,QAAAC,UAAEA,EAAFC,MAAaA,GAAKF,EAAEpG,EAAAuG,EAAAH,EAAA,uBAAkD,OACrE1G,EAAAO,QAAAC,cAACsF,EAAAI,OAAW5F,KAEf6F,WAAA,CAAAC,YAAA;sBACqB,EAAGO,YAAWC,WAChCD,EAAYC,EAAME,QAAU;WACrB,EAAGH,YAAWC,WAAaD,EAAY,QAAUC,EAAME;yBAGlEL,EAAmBL,YAAc,qBAO1B,MAAMW,GAAqB,EAAA3G,EAAAG,SAC/BmG,QAAAM,SAAEA,EAAFJ,MAAYA,GAAKF,EAAEpG,EAAAuG,EAAAH,EAAA,sBAAkD,OACpE1G,EAAAO,QAAAC,cAACsF,EAAAI,OAAW5F,KAEf6F,WAAA,CAAAC,YAAA;IACG,EAAGQ,QAAOI,cAAoC5G,EAAAkB;MAC5CyE,EAAAkB;0BACoBD,EAAWJ,EAAMM,SAAWN,EAAMO;;MAEtDpB,EAAAqB;wBACkBJ,EAAWJ,EAAMM,SAAW;oBAChCF,EAAWJ,EAAMM,SAAWN,EAAMO;aACzCH,EAAWJ,EAAMS,aAAeT,EAAMU;;;0BAI3CN,EAAWJ,EAAMW,cAAgBX,EAAMY;sBAEzBR,EAAWJ,EAAMW,cAAgBX,EAAMY;eAC9CR,EAAWJ,EAAMS,aAAeT,EAAMU;;;EAOrD,SAASjB,EAAUoB,GACjB,MAAO,EAAGb,WAAqCA,EAAOa,0BAHxDV,EAAmBX,YAAc,0HC1FjC,MAAAlB,KAAAhF,EAAA,iCACAwH,EAAAxH,EAAA,IAIO,MAAMyH,EAAYD,EAAAE,MAAMC,QAAQC,MAAMC,IAAI,CAC/CC,UACE,MAAMP,GAAO,EAAAC,EAAAO,SAAQF,GAAMG,SAAU,EAAAR,EAAAS,SAAQJ,GAAMN,KACnD,OAAO,EAAAvC,EAAA3E,sBAAmBkH,MAE5BW,UACE,OAAO,EAAAV,EAAAW,QAAyBN,IAElCO,aACE,MAAMA,OAAEA,IAAW,EAAAZ,EAAAW,QAAyBN,GAC5C,OAAOO,GAETC,WACE,OAAO,EAAAb,EAAAc,SAAoBT,yMClB/B,MAAA/D,KAAA9D,EAAA,iCAEAsD,EAAAtD,EAAA,IACAgE,EAAAhE,EAAA,IAOA,MAAMuI,EAAuBzE,EAAAzD;;;;;;;;;;;;;IAazB2D,EAAAwE;IACAxE,EAAAyE;IACAzE,EAAA0E;EAGSC,EAAsB7E,EAAAzD;;;;;;IAM/BkI;0BAGG,MAAMK,EAAuB9E,EAAAzD;;;;;;IAMhCkI;2BAGG,MAAMM,GAAsB,EAAAvF,EAAAgB,YAGjCqE,2BAEK,MAAMG,GAAuB,EAAAxF,EAAAgB,YAGlCsE,uYCtDF,MAAA9E,KAAA9D,EAAA,iCAEAgE,EAAAhE,EAAA,IACA+I,EAAA/I,EAAA,KACAgJ,EAAAhJ,EAAA,KAEA,MAAMiJ,EAAqBnF,EAAAzD;;;;;;;;;;;;;;;;;;;IAmBvB2D,EAAAG;EAGS+E,EAA0BpF,EAAAzD;;;;;;IAMnC4I;8BAGG,MAAME,EAAwBrF,EAAAzD;;;;;;;;;;;;;;;IAejC4I;4BAGJ,MAAMG,EAAsBtF,EAAAzD;;;;;;;EASfgJ,EAA4BvF,EAAAzD;;;;;;;;IAQrC+I;gCAGG,MAAME,EAA8BxF,EAAAzD;;;;;;;;;;;;;;;;;;IAkBvC+I;kCAGG,MAAMG,EAAqBzF,EAAAzD;;;;;;;;;;;;IAY9B0I,EAAA9E;yBAGG,MAAMuF,EAA2B1F,EAAAzD;;;;;;;;;;;;;;;;IAgBpC2I,EAAAnE;+BAGG,MAAM4E,EAA0B3F,EAAAzD;;;;;;;;;IASnC0I,EAAA9E;8BAGG,MAAMyF,EAA0B5F,EAAAzD;;;;;;IAMnC0I,EAAA9E;8BAGG,MAAM0F,EAAsB7F,EAAAzD;;;;;;;;;;;;;;;;;;;;;;;0BAyB5B,MAAMuJ,EAA0B9F,EAAAzD;;;;;;;8BAShC,MAAMwJ,EAAiB/F,EAAAzD;;;;;;;;;;6FCzL9B,IAAAyJ,EAAA9J,EAAA,KACAF,EAAAC,EAAAC,EAAA,IACA+J,EAAA/J,EAAA,IACAgK,EAAAhK,EAAA,KACAiK,EAAAlK,EAAAC,EAAA,IAEAkK,EAAAnK,EAAAC,EAAA,MACAmK,EAAAnK,EAAA,KACAoK,EAAArK,EAAAC,EAAA,KACAqK,EAAAtK,EAAAC,EAAA,MACAsK,EAAAtK,EAAA,IACAuK,EAAAvK,EAAA,KACAwK,EAAAxK,EAAA,IACAyK,EAAAzK,EAAA,IACA0K,EAAA1K,EAAA,wDAEA,MAAMoI,GAAS,EAAAmC,EAAAI,sBACTtC,GAAO,EAAAqC,EAAAE,iBAAgBxC,GAEvByC,EAAO,IACX/K,EAAAO,QAAAC,cAACR,EAAAO,QAAMyK,SAAP,CAAgBC,SAAUjL,EAAAO,QAAAC,cAAC8J,EAAA/J,QAAD,OACxBP,EAAAO,QAAAC,cAACgK,EAAAU,aAAD,CAAcC,MAAO5C,GACnBvI,EAAAO,QAAAC,cAACyJ,EAAAmB,eAAD,CAAgB9C,OAAQA,GACtBtI,EAAAO,QAAAC,cAAC0J,EAAAkB,eAAD,CAAqB9C,OAAQA,GAC3BtI,EAAAO,QAAAC,cAACmK,EAAAU,YAAD,KACErL,EAAAO,QAAAC,cAAC6J,EAAAiB,OAAD,KACEtL,EAAAO,QAAAC,cAAC+J,EAAAhK,QAAD,KACEP,EAAAO,QAAAC,cAAC4J,EAAA7J,QAAD,cAUhB,EAAAmK,EAAAa,eAAc,KACZpB,EAAA5J,QAASiL,OAAOxL,EAAAO,QAAAC,cAACuK,EAAD,MAAUU,SAASC,eAAe,WAGpD1B,EAAA2B,cAAcC,SAAS,CACrBC,SAAWC,IACTC,WAAW,KAEPC,OAAOC,QACLtB,EAAAuB,KAAAC,EAAA,oFAGFL,EAAGM,YAAY,iBAEhB,QAIHC,UAAUV,eACZU,UAAUV,cAAcW,iBAAiB,UAAWC,IAC/B,mBAAfA,EAAMC,MACRC,SAASC,+GC1DfxM,EAAA,KAEA,IAAAF,EAAAE,EAAA,IACAyM,EAAA1M,EAAAC,EAAA,IACAE,EAAAH,EAAAC,EAAA,KAEA0M,EAAA1M,EAAA,KACA2M,EAAA3M,EAAA,KACA6F,EAAA7F,EAAA,KACA4M,EAAA5M,EAAA,wDAEA,MAAM6M,EAAmB3M,EAAAG,QAAOyM,IAAG7G,WAAA,CAAAC,YAAA;;;;EAM7B6G,EAAaN,EAAApM,QAAM2M,KAAK,IAAMC,QAAAC,IAAA,CAAAlN,EAAAmN,EAAA,GAAAnN,EAAAmN,EAAA,GAAAnN,EAAAmN,EAAA,KAAAC,KAAApN,EAAAqN,EAAAC,KAAA,cAC9BC,EAAYd,EAAApM,QAAM2M,KAAK,IAAMC,QAAAC,IAAA,CAAAlN,EAAAmN,EAAA,GAAAnN,EAAAmN,EAAA,IAAAnN,EAAAmN,EAAA,GAAAnN,EAAAmN,EAAA,KAAAC,KAAApN,EAAAqN,EAAAC,KAAA,oBAEvB,IACVb,EAAApM,QAAAC,cAACoM,EAAAc,eAAD,CAAgBC,MAAM,GACpBhB,EAAApM,QAAAC,cAACqM,EAAAe,UAAD,MACAjB,EAAApM,QAAAC,cAACuF,EAAA1F,QAAD,KACEsM,EAAApM,QAAAC,cAACyM,EAAD,OAEFN,EAAApM,QAAAC,cAACuF,EAAApF,OAAD,KACEgM,EAAApM,QAAAC,cAACiN,EAAD,OAEFd,EAAApM,QAAAC,cAACuF,EAAA8H,gBAAD,KACElB,EAAApM,QAAAC,cAACuM,EAAD,KACEJ,EAAApM,QAAAC,cAACR,EAAA8N,MAAD,CAAAC,GAAA,uGAMJpB,EAAApM,QAAAC,cAACsM,EAAAkB,uBAAD,mSCrCJ,MAAAhK,KAAA9D,EAAA,iCAEO,MAAM+N,EAAsBjK,EAAAzD;;;;;;;0BAS5B,MAAMqI,EAAkB5E,EAAAzD;;;;;;;IAO3B0N;sBAGG,MAAMtF,EAAmB3E,EAAAzD;;;;;uBAOzB,MAAM8D,EAAgBL,EAAAzD;;;;;oBAOtB,MAAM2N,EAAiBlK,EAAAzD;;;;;;qBAQvB,MAAM6D,EAAmBJ,EAAAzD;;;;;;;;IAQ5B2N;uBAGG,MAAMxF,EAA8B1E,EAAAzD;;;;;;;;;;;;;kCAepC,MAAM4N,EAAoBnK,EAAAzD;;;;;8NCpEjC,MAAA6N,KAAAlO,EAAA,kCAEAmO,EAAAnO,EAAA,IAEAoO,EAAApO,EAAA,IACAqO,EAAArO,EAAA,IACAsO,EAAAtO,EAAA,qBAE6BuO,KAC3B,MAAMC,UAAEA,GAAcJ,EAAAK,UAClBD,IACF,EAAAH,EAAA3I,WAAU,sBAAuB8I,GACjCN,EAAA7N,QAAMqO,OAAOF,EAAW,CACtBG,YAAa,SACZC,UACHV,EAAA7N,QAAMwO,QAAQN,IAEdA,sBAIyB,EAACO,EAAgBC,KAC5Cb,EAAA7N,QAAM2O,eAAe,CACnBC,SAAS,EACTH,SACAC,+BAI6BF,KAC/BX,EAAA7N,QAAM6O,gBAAgBL,4BAGY,EAACM,EAAcC,KAC7ClB,EAAA7N,QAAMgP,YACRnB,EAAA7N,QAAMiP,iBAAiBH,EAAO,CAC5BI,MAAOH,IAETlB,EAAA7N,QAAMmP,2CAIwB,EAChCC,EACAnD,KAEA4B,EAAA7N,QAAMqP,kBAAkB,CACtBC,SAAU,UACVC,MAAO,QACPC,QAAS,QACTvD,KAAIwD,OAAAC,OAAA,GACCzD,EAAI,CACPmD,aAGJA,EAAOO,QAAQC,IACb/B,EAAA7N,QAAMiP,iBAAiB,IAAIY,MAAMD,EAAIJ,SAAU,CAAEN,MAAOU,MAE1D,MAAME,EAAaV,EAAOW,OAAO9B,EAAAnL,GAAGkN,OAAO,cAAc,IACrDF,EAAWG,QAAUpC,EAAA7N,QAAMkQ,eAC7BrC,EAAA7N,QAAMmP,iBAAiB,CACrBgB,MAAOlC,EAAAnL,GAAGsN,KAAKN,GAAaN,0BAKP,EAACV,EAAcuB,EAAe,MACvD,IAAInB,EAAQ,GASZ,OARIJ,aAAiBhB,EAAAwC,SACnBpB,EAAKO,OAAAC,OAAA,CACHa,MAAOzC,EAAAwC,OAAOC,MAAMzB,IACjBhB,EAAAwC,OAAOvB,KAAKD,GACZuB,IAGPxC,EAAA7N,QAAMiP,iBAAiBH,EAAO,CAAEI,UACzBJ,+GC7ET,MAAArP,KAAAE,EAAA,gCAEAwK,EAAAxK,EAAA,qBAMiD,GAC/Cc,WACA2M,QAAO,MAEP,IAAIoD,EAEJ,OAAIpD,GACFoD,EAAyB7Q,EAAQ,KAC9B8Q,wBAEDhR,EAAAO,QAAAC,cAACuQ,EAAD,CACEE,uBAAwB,EAAG5B,QAAOC,YAChC,EAAA5E,EAAAwG,sBAAqB7B,EAAOC,KAG7BtO,KAIL+P,EAAyB7Q,EAAQ,KAAqBiR,uBAC/CnR,EAAAO,QAAAC,cAACuQ,EAAD,KAAyB/P,oJC5BpC,IAAAhB,EAAAC,EAAAC,EAAA,IACAkR,EAAAnR,EAAAC,EAAA,MAEAoO,EAAApO,EAAA,IACAsK,EAAAtK,EAAA,mEAI4CI,IAC1CN,EAAAO,QAAAC,cAACgK,EAAA6G,SAAD,CACEC,SAAS,EACT9F,OAAQjD,GACFA,EAAKgJ,SAASC,QAEdxR,EAAAO,QAAAC,cAAC4Q,EAAA7Q,QAAD,CACEmQ,SAAUnI,EAAKgJ,SAASE,OAAQC,MAAMjK,UACpC6G,EAAAK,UAAUgD,oBAKX3R,EAAAO,QAAAC,cAAC4Q,EAAA7Q,QAAD,CAAemQ,MAAOpC,EAAAK,UAAUgD,2ICrB7CzR,EAAA,kBAEAA,EAAA,KAFA,MAGAsK,EAAAtK,EAAA,6BAIwDI,MACzC,EAAAkK,EAAAoH,WAEX,OAAO,+GCTX,MAAA5R,KAAAE,EAAA,gCACA2R,EAAA3R,EAAA,KACA4F,EAAA5F,EAAA,+SAO+CwG,SAAAoL,GAC7CA,EAD6CC,QAE7CA,EAF6C/Q,SAG7CA,GAAQ0F,EACRsL,EAAAnL,EAAAH,EAAA,6BACI,OACJ1G,EAAAO,QAAAC,cAACqR,EAAAI,KAAD,CAAMH,GAAIA,EAAIC,QAASA,GACrB/R,EAAAO,QAAAC,cAACsF,EAAAI,OAAW8L,EAAchR,yGCjB9B,MAAAkR,EAAAhS,EAAA,KACAF,KAAAE,EAAA,gCACA2R,EAAA3R,EAAA,KAEAsK,EAAAtK,EAAA,aAEgC,GAAGc,eACjC,MAAMuQ,SAAEA,IAAa,EAAA/G,EAAAoH,WACrB,OAAO,EAAAM,EAAAC,aAAY,IACjBZ,EAASC,QACPxR,EAAAO,QAAAC,cAACqR,EAAAO,cAAD,CACEC,SAAUd,EAASe,eACnBC,IAAKhB,EAASe,gBAEbtR,GAED,6GChBD,MAAM2N,EAAY,CACvB6D,iBAAkB,KAClBC,mBAAoB,CAAC,KAAM,KAAM,KAAM,KAAM,MAC7CC,SAAU,6CACVC,eAAgB3C,OAAA,CAAA4C,SAAA,aAAAC,WAAA,GAAAC,yBAAA,6CAAAC,gBAAA,SAAYC,qBAAuB,eACnDC,eAAgB,wBAChBvE,UAAW,KACXiD,gBAAiB,uBAajB3B,OAAOC,OAAOtB,EAAW,CACvB+D,SAAU,mCACVC,eAAgB,cAChBjE,UAAW,6DACXiD,gBAAiB,kHCxBrB,IAAAO,EAAAhS,EAAA,KACAF,EAAAC,EAAAC,EAAA,IACAE,EAAAF,EAAA,IAEAoK,EAAArK,EAAAC,EAAA,KACAsK,EAAAtK,EAAA,6DAEsC,EAAGc,eACvC,MAAMuQ,SAAEA,IAAa,EAAA/G,EAAAoH,WACrB,OAAO,EAAAM,EAAAC,aAAY,IACjBZ,EAAS3K,MAAMsM,OACblT,EAAAO,QAAAC,cAACJ,EAAA+S,cAAD,CAAevM,MAAO2K,EAAS3K,OAC5B5F,GAGHhB,EAAAO,QAAAC,cAAC8J,EAAA/J,QAAD,4HCCA,WACJ,MAAM6S,EAAQ,IAAIC,EAAAC,cAAc,CAC9BC,iBAAmBC,GACG,MAAhBA,EAAEC,YAA8B,MAARD,EAAEzF,MAClByF,EAAEC,cAAcD,EAAEzF,KAEvB,OAIL2F,GAyBC,EAAAC,EAAApT,SAAc,CACnBqT,SAAS,IAzBLC,EAiBC,IAAIC,EAAAC,cAAc,CACvBC,OAAQ1F,EAAAK,UAAU+D,mBAClBuB,YAAa,gBAlBTC,EA6BC,IAAIC,EAAAC,UAAU,CACnBC,MAAO,CACLC,QAAS,IACTC,IAAKC,IACLC,QAAQ,GAEVC,SAAU,CACRH,IAAK,EACLI,QAAS,CAACtF,EAAOuF,MAAiBvF,KApChCwF,EAyCR,WACE,MAAMA,EAAc,IAAIC,EAAAvU,QAUxB,OATA,EAAAwU,EAAAC,SAAQ,MACF,EAAAC,EAAAC,qBACF,EAAA3G,EAAAjJ,UAAS,oBACTuP,EAAYM,UAEZ,EAAA5G,EAAAjJ,UAAS,qBACTuP,EAAYO,WAGTP,EApDaQ,GACdC,GAAY,EAAAC,EAAAC,mBAEZC,EAAOC,EAAAC,WAAWC,KAAK,CAC3BlC,EACAQ,EACAW,EACAS,EACAzB,IAGF,OAAO,IAAIgC,EAAAC,aAAa,CAAEL,OAAMrC,WAxClC,IAAAC,EAAAnT,EAAA,KACA2V,EAAA3V,EAAA,KACAwV,EAAAxV,EAAA,GACA4T,EAAA5T,EAAA,KACAyT,EAAA1T,EAAAC,EAAA,MACA4U,EAAA7U,EAAAC,EAAA,MACAiU,EAAAjU,EAAA,KACA6U,EAAA7U,EAAA,GAEAoO,EAAApO,EAAA,IACAqV,EAAArV,EAAA,KACAqO,EAAArO,EAAA,IACA+U,EAAA/U,EAAA,oLCZA,MAAA6V,EAAA7V,EAAA,KACAgF,KAAAhF,EAAA,iCAEAwK,EAAAxK,EAAA,IAEA,MAAM8H,GAAM,EAAA9C,EAAA3E,SAAM,eAELyV,EAAe,EAC1BC,gBACAC,eACAC,gBAEIF,KACF,EAAAvL,EAAA0L,oBAAmBH,EAAe,CAChCI,MAAOF,EAAUG,cACjBC,UAAWJ,EAAUI,YAEvBN,EAAcO,IAAI,EAAGzG,UAAS0G,YAAWC,UACvC1O,+BAC+B+H,gBAAsB0G,YAAoBC,OAIzER,GACFlO,sBAAwBkO,yCAIG,MAAM,EAAAH,EAAAY,SAAQX,yGClBvC,SAA0BvH,GAC9B,OAAOmI,EAAStF,QAAQuF,KACE,IAApBA,EAAOC,WAA0C,IAApBD,EAAOE,UACtCtI,mDAXN,MAAMmI,EAFN1W,EAAA,GAEiB8W,WAAWC,IAAI5K,UAAU6K,QAE1ClL,OAAOM,iBAAiB,UAAW,IAAMsK,EAASO,KAAI,IACtDnL,OAAOM,iBAAiB,SAAU,IAAMsK,EAASO,KAAI,sBAEtB,KAAMP,EAASQ,0BACd,MAAOR,EAASQ,4BCRhD,IAAAZ,EAAA,CACAa,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,uBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,GAEAC,mBAAA,CACA,IACA,KAGA,SAAAC,EAAAC,GACA,IAAAC,EAAArB,EAAAoB,GACA,OAAAC,EAOA3X,EAAAmN,EAAAwK,EAAA,IAAAvK,KAAA,WACA,IAAAS,EAAA8J,EAAA,GACA,OAAA3X,EAAAqN,EAAAQ,EAAA,KARAZ,QAAA2K,UAAAxK,KAAA,WACA,IAAAD,EAAA,IAAA+C,MAAA,uBAAAwH,EAAA,KAEA,MADAvK,EAAA0K,KAAA,mBACA1K,IAQAsK,EAAAK,KAAA,WACA,OAAAhI,OAAAgI,KAAAxB,IAEAmB,EAAA5J,GAAA,IACAkK,EAAA7U,QAAAuU,uGC2BM,SAA0BrP,GAC9B,MAAMC,EAAO2P,EAAUC,OAAO,GAAI,CAChC7P,SACA8P,MAAOpM,OAAOoM,MACdC,YAAahM,UAAUgM,cAGzB,OADA9P,EAAK+P,OACE/P,sBA9ET,IAAAb,EAAAxH,EAAA,IASAqO,EAAArO,EAAA,IACAqY,EAAArY,EAAA,KACAsY,EAAAtY,EAAA,KACAuY,EAAAvY,EAAA,IACAwY,EAAAxY,EAAA,KACAyY,EAAAzY,EAAA,KACA0Y,EAAA1Y,EAAA,KACA2Y,EAAA3Y,EAAA,KACA4Y,EAAA5Y,EAAA,KACA6Y,EAAA7Y,EAAA,miBAEO,MAAMgY,EAAYO,EAAA9Q,UAAUqR,MAAM,QACtC1Y,MAAM,CACL2Y,KAAMvR,EAAAE,MAAMsR,SAASV,EAAAW,UAAW,IAChC5H,SAAU7J,EAAAE,MAAMsR,SAASR,EAAAU,cAAe,IACxCxK,OAAQlH,EAAAE,MAAMsR,SAASP,EAAAU,YAAa,IACpC7C,IAAK9O,EAAAE,MAAMsR,SAASL,EAAAS,SAAU,IAC9BC,MAAO7R,EAAAE,MAAMsR,SAASJ,EAAAU,WAAY,IAClC/M,SAAU/E,EAAAE,MAAMsR,SAASN,EAAAa,cAAe,IACxCC,KAAMhS,EAAAE,MAAMsR,SAASH,EAAAY,UAAW,MAEjC7R,MAAMC,IAAI,CACT6R,sBACE,MAAO,CACL7R,EAAKkR,KACLlR,EAAK2R,KACL3R,EAAKwJ,SACLxJ,EAAK0E,SACL1E,EAAKwR,MACLxR,EAAKyO,SAIVqD,QAAQ9R,IACP,IAAI+R,EACJ,MAAO,CACLC,cACE,MAAMrT,GAAA,EAAAgB,EAAAsS,aAAAjS,IAAAwJ,SAAEA,EAAFiF,IAAYA,GAAG9P,EAAEuT,EAAApT,EAAAH,EAAA,oBACvBoT,EAAkBG,GAEpBF,SACE,EAAAxL,EAAAlJ,UAASyU,IACT,EAAApS,EAAAwS,eAAcnS,EAAM+R,IAEtBxB,KAAM,IAAW6B,OAAA,4BACfpS,EAAKkR,KAAKmB,+BACJjN,QAAQC,IAAIrF,EAAK6R,gBAAgBpD,IAAI+B,EAAA8B,qBACrClN,QAAQC,IAAI,CAChBrF,EAAKwJ,SAAS+I,gBACdvS,EAAKwR,MAAMgB,uBAEbT,EAAgBvI,UAAW,EAAA7J,EAAAsS,aAAYjS,EAAKwJ,+HC9C9C,SAA6B1J,2CACjC,MAAM2S,GAAY,EAAA9S,EAAAS,SAAQN,GAAOJ,KAC3BgT,KAAc9H,KAAkB6H,IAEhCE,EAAaT,GAAYU,EAAApa,QAAYqa,QAAQH,EAAUR,GAE7D,IACE,MAAMY,QAAcF,EAAApa,QAAYua,QAAQL,GAC1B,OAAVI,IACF,EAAAnT,EAAAwS,eAAcrS,EAAOgT,IACrB,EAAAtM,EAAA7I,YAAW,oBAAqB+U,WAE1BC,GAAW,EAAAhT,EAAAsS,aAAYnS,KAC7B,EAAA0G,EAAA7I,YAAW,uBAAwB+U,IAErC,MAAOtK,IACP,EAAA5B,EAAA7I,YAAW,qBAAsByK,GACjCwK,EAAApa,QAAYwa,WAAWN,IAGzB,EAAA/S,EAAAsT,YAAWnT,EAAO6S,MAlCpB,MAAAC,KAAAza,EAAA,kCACAwH,EAAAxH,EAAA,IAQAoO,EAAApO,EAAA,IACAqO,EAAArO,EAAA,6QAEA,MAAMyS,eAAEA,GAAmBrE,EAAAK,gHCZ3B,IAAAsM,EAAA/a,EAAA,KACAwH,EAAAxH,EAAA,IAEAoO,EAAApO,EAAA,IACAqO,EAAArO,EAAA,IACAwK,EAAAxK,EAAA,IACAuY,EAAAvY,EAAA,yQAEO,MAAMiZ,EAAYV,EAAA9Q,UAAUqR,MAAM,QACtC1Y,MAAM,CACL2O,MAAOvH,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QAC7BnM,OAAQtH,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,UAE/BrT,MAAMC,IAAI,CACTyJ,cACE,OAAsB,OAAfzJ,EAAKkH,OAEdmM,iBAAgB,KACP,CACLC,wBAAyBtT,EAAKkH,aAInC4K,QAAQ9R,IAAI,CACXgS,aAAa9K,EAAeD,GAC1BjH,EAAKkH,MAAQA,EACblH,EAAKiH,OAASA,GACd,EAAAtE,EAAA4Q,eAActM,EAAQC,OAGzB4K,QAAQ9R,IACP,IAAIwT,EAEJ,MAUMC,GAAW,EAAAP,EAAAQ,YAAW,IAAWtB,OAAA,4BAIrC,OAHKpS,EAAKkH,aAXE,KAAWkL,OAAA,4BACvB,IAAKoB,EAAU,CACbA,EAAWG,IACX,MAAMzM,MAAEA,EAAFD,OAASA,SAAiBuM,EAChCxT,EAAK4T,aAAa1M,EAAO2M,OAAO5M,IAChCuM,EAAW,KAEb,OAAOA,IAKCnD,IAED,CAAEyD,QAAS9T,EAAKqT,uBAGzB,MAAO,CACLrB,yBACEhS,EAAKO,OAAOmN,KAAO+F,EAASM,OAAO/T,EAAKO,OAAOmN,UAIpDsG,mBAAmB9B,IACdA,EAASjL,QAAUiL,EAAShL,QAC9B,EAAAvE,EAAA4Q,eAAcrB,EAASjL,OAAQiL,EAAShL,OAEnCgL,IAGX,SAASyB,IACP,MAAMhJ,SAAEA,GAAapE,EAAAK,UACrB,IAAK+D,EACH,MAAM,IAAItC,MAAM,uCAElB,EAAA7B,EAAA/I,SAAQ,6BACR,MAAMwW,KAAStJ,2BAOf,OADA,EAAAnE,EAAA/I,SAAQ,mBACD4S,MAAM4D,EANG,CACdH,QAAS,CACPI,OAAQ,sBAIe3O,KAAK4O,GAAYA,EAASC,gIC5EvD,IAAAzU,EAAAxH,EAAA,IAEAoO,EAAApO,EAAA,IACAkc,EAAAlc,EAAA,KAKAqO,EAAArO,EAAA,IACAwK,EAAAxK,EAAA,IACAmc,EAAAnc,EAAA,KACAuY,EAAAvY,EAAA,IACAwY,EAAAxY,EAAA,KACAoc,EAAApc,EAAA,0QAaO,MAAMkZ,EAAgBX,EAAA9Q,UAAUqR,MAAM,YAC1C1Y,MAAM,CACLyX,KAAMrQ,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QAC5BvU,MAAOc,EAAAE,MAAMsR,SAASoD,EAAAC,WAAY,IAClCC,QAAS9U,EAAAE,MAAM4O,IAAI6F,EAAAI,eAEpBC,SAAyB,MACxBC,SAAS,EACTC,aAAa,EACbnL,OAAQ,KACRoL,QAAS,KACTC,YAAaV,EAAAzZ,gBAAgBoa,IAC7BzK,eAAgB,MAEjBxK,MAAMC,IAAI,CACTiV,eACE,OAAOjV,EAAK0J,QAAU1J,EAAK0J,OAAO1D,IAEpCkP,gBACE,OAAOlV,EAAK0J,QAAU1J,EAAK0J,OAAOyL,QAAQnP,IAE5CoP,cACE,OAAOpV,EAAK0J,QAAU1J,EAAK0J,OAAOC,MAAM3D,IAE1CyD,cACE,OAAuB,OAAhBzJ,EAAK0J,QAEd2L,oBAEE,IAAIrF,EAAO/H,OAAA,CAAA4C,SAAA,aAAAC,WAAA,GAAAC,yBAAA,6CAAAC,gBAAA,SAAYsK,yBAA2B,KAClD,IAAKtF,EAAM,CAITA,EAgGY,IAAI/L,OAAOsR,IAAItR,OAAOS,SAAS8Q,MAChCC,aAAapG,IAAIqG,IAAc,MAjGxB1V,EAAKgQ,KAEzB,OAAOA,MAGV8B,QAAQ9R,IAAI,CACXgS,iBAAiB2D,GACf,MAAMf,QACJA,EADIC,YAEJA,EAFIe,cAGJA,EAHIb,YAIJA,EAJIrL,OAKJA,GACEiM,EAECjM,IAIL1J,EAAK4U,QAAUA,EACf5U,EAAK6U,YAAcA,EACnB7U,EAAK0J,OAASA,EACd1J,EAAK8U,QAAUpL,EAAOmM,QAAQf,SAAW,KACzC9U,EAAKuK,eAAiBqL,EACtB5V,EAAK+U,YAAcA,EAEfrL,EAAO1D,KAAOhG,EAAKQ,KAAKgR,MAAMyD,UAChCjV,EAAKQ,KAAKgR,MAAMsE,cAQhB9V,EAAKgQ,KAAO,OAGhBgC,eAAetI,GACb1J,EAAK0J,OAASA,MAGjBoI,QAAQ9R,IAAI,CACXuS,cAAe,IAAWH,OAAA,4BACxB,MAAM3N,KAAEA,SAAezE,EAAKO,OAAO+N,MAAiC,CAClEA,MAAOqC,EAAAoF,kBACPvH,UAAW,CACTwB,KAAMhQ,EAAKqV,cACXpB,IAAKhQ,OAAOS,SAAS8Q,QAIzB,KAAM/Q,GAAQA,EAAKkR,QAAUlR,EAAKkR,OAAOjM,QAGvC,OAFA,EAAAlD,EAAApJ,SAAQ,kCAAmC4C,EAAKqV,oBAiDpDpR,OAAOS,SAASsF,QAAQzD,EAAAK,UAAUsE,gBA1ChC,GAFAlL,EAAKgW,iBAAiBvR,EAAKkR,QAEvB3V,EAAKiV,SAAU,CACjB,MAAMgB,EAAcjW,EAAKnB,MAAMqX,YAAYlW,EAAKiV,UAE3CjV,EAAKnB,MAAMsM,eACR8K,IAIV,EAAAtT,EAAAwT,kBAAiB,CACfd,cAAerV,EAAKqV,cACpBJ,SAAUjV,EAAKiV,SACfG,QAASpV,EAAKoV,QACdF,UAAWlV,EAAKkV,UAChBN,QAAS5U,EAAK4U,WAGhB,EAAApO,EAAApJ,SACE,0DACA4C,EAAKiV,SACLjV,EAAKoV,QACLpV,EAAKkV,UACLlV,EAAK4U,WAGT5C,+BACE,MAAMiD,EAAWjV,EAAKiV,SAItB,OAHKjV,EAAKyU,QAAQ2B,IAAInB,IACpBjV,EAAKyU,QAAQrF,IAAI6F,EAAU,CAAEA,SAAUA,IAElCjV,EAAKyU,QAAQpF,IAAI4F,yBAI9B,MAAMS,EAAY,8GCzJlB,IAAAW,EAAAle,EAAA,KACAwH,EAAAxH,EAAA,IAEAuY,EAAAvY,EAAA,IAEA,MAGauc,EAAchE,EAAA9Q,UAAUqR,MAAM,UACxC1Y,MAAM,CACL0c,SAAUtV,EAAAE,MAAMyW,WAChBC,SAAU5W,EAAAE,MAAM2W,MAAM7W,EAAAE,MAAM4W,MAC5BC,YAAa/W,EAAAE,MAAM2W,MAAM7W,EAAAE,MAAM4W,QAEhC1W,MAAMC,IAAI,CACT2W,sBACE,OAAI3W,EAAKQ,KAAKgJ,SAASqL,iBAIrB7U,EAAKuW,WACL,EAAAF,EAAAO,kBAAiB,IAAIH,KAAQzW,EAAKuW,UAhBvB,SAqBXvW,EAAK0W,cACL,EAAAL,EAAAO,kBAAiB,IAAIH,KAAQzW,EAAK0W,aArBrB,MA0BPG,QAAQ7W,EAAKuW,UAAYvW,EAAK0W,mBAGzC5E,QAAQ9R,IAAI,CACXgS,kBACEhS,EAAK0W,YAAc,IAAID,MAEzBzE,eACEhS,EAAKuW,SAAW,IAAIE,+JCxC1B,MAAAxa,KAAA9D,EAAA,iCAEO,MAAM2e,EAAwB7a,EAAAzD;;;;;;;;;;;;;;;;;;;4BAqB9B,MAAMud,EAAoB9Z,EAAAzD;;;;;;;;;;;;IAY7Bse;+HCnCJ,MAAAC,KAAA5e,EAAA,kCACAwH,EAAAxH,EAAA,IAGAuY,EAAAvY,EAAA,IACAoc,EAAApc,EAAA,8QAGA,MAIaqc,EAAa9D,EAAA9Q,UAAUqR,MAAM,SACvC1Y,MAAM,CACLye,UAAWrX,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QACjC6D,gBAAiBtX,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QACvC8D,eAAgBvX,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QACtCrU,QAASY,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QAC/B+D,UAAWxX,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QACjCgE,eAAgBzX,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QACtCjU,SAAUQ,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QAChC5T,cAAeG,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QACrC9T,aAAc,QACdF,WAAY,UACZK,gBAAiB,UACjBF,eAAgB,UAChB4L,QAAQ,IAET2G,QAAQ9R,IAAI,CACXgS,WAAWqF,GACTpP,OAAOC,OAAOlI,EAAM,CAClBjB,QAASsY,EAAOC,OAASD,EAAOC,OAvBjB,UAwBfH,UAAWE,EAAOE,KAAOF,EAAOE,KAvBf,UAwBjBH,eAAgBI,EACdH,EAAOE,KAAOF,EAAOE,KAzBN,WA2BjBpY,SAAUkY,EAAOI,cAAgBJ,EAAOI,cA1BxB,UA2BhBjY,cAAegY,EACbH,EAAOI,cAAgBJ,EAAOI,cA5BhB,WA8BhBnY,aAAc,QACdF,WAAY,UACZK,gBAAiB,UACjBF,eAAgB,UAChByX,UAAWK,EAAOL,UAClBC,gBAAiBI,EAAOJ,gBACxBC,eAAgBG,EAAOH,iBAEzBlX,EAAKmL,QAAS,MAGjB2G,QAAQ9R,IAAI,CACXkW,YAAoBjB,GAAgB7C,OAAA,4BAClC,MAAM3N,KAAEA,SAAezE,EAAKO,OAAO+N,MAGjC,CACAA,MAAOiG,EAAAmD,wBACPlJ,UAAW,CAAEyG,cAEfjV,EAAK2X,WAAWlT,EAAKmT,cAAcP,aAIzC,SAASG,EAAeK,GACtB,OAAO,EAAAd,EAAAve,SAAMqf,GACVC,QAAQ,IACRC,MACA3E,0DCpEL,wFAEO,MAAMsE,MAFbvf,EAAA,kCAEuCK;;;;;;;;;;;;;;sICAhC,MAAM8Y,EAFbnZ,EAAA,IAE2ByH,UAAUqR,MAAM,UAAU1Y,MAAM,CACzDyf,cAAe,+HCHjB,IAAArY,EAAAxH,EAAA,IACAmO,EAAAnO,EAAA,IAGA8f,EAAA9f,EAAA,KACA+f,EAAA/f,EAAA,KACAyK,EAAAzK,EAAA,IACAuY,EAAAvY,EAAA,IACA0Y,EAAA1Y,EAAA,0QAaO,MAAMuZ,EAAgBhB,EAAA9Q,UAAUqR,MAAM,YAC1C1Y,MAAM,CACLsD,SAAU8D,EAAAE,MAAM2W,MAAM7W,EAAAE,MAAMsY,QAC5Bpc,UAAW4D,EAAAE,MAAM2W,MAAM7W,EAAAE,MAAMsY,QAC7BC,YAAazY,EAAAE,MAAM2W,MAAM7W,EAAAE,MAAMuT,QAC/ByC,QAASlW,EAAAE,MAAM2W,MAAM7W,EAAAE,MAAMuT,UAE5BuB,SAAyB3U,IAAI,CAC5BiV,SAAU,KACVoD,QAAQ,EACRC,YAAY,EACZC,iBAAiB,EACjBC,oBAAoB,EACpBC,qBAAqB,EACrBC,iBAAkB,KAClBC,aAAa,KAEd5Y,MAAMC,IAAI,CACT4Y,6BACE,OAAO/B,QAAQ7W,EAAKK,IAAIiQ,cAAgBtQ,EAAKyY,sBAE/CI,kBACE,YAAyBC,IAAlB9Y,EAAKnE,eAA6Cid,IAAnB9Y,EAAKjE,WAE7Cgd,iBACE,OAAOlC,QAAQ7W,EAAK6V,UAEtBmD,wBACE,OAAOhZ,EAAKsY,YAActY,EAAKuY,iBAAmBvY,EAAKwY,oBAEzDS,wBACE,OACIjZ,EAAKoY,aAAepY,EAAKoY,YAAY3P,OAAS,GAAMzI,EAAK6V,WAC1D7V,EAAK2Y,aAGVO,eACE,OAAIC,KAAKN,YACA,CACLhd,SAAUmE,EAAKnE,SACfE,UAAWiE,EAAKjE,WAGb,MAETqd,uBACE,MAAM5P,SAAEA,GAAaxJ,EAAKQ,KAC1B,OAAIgJ,EAASoL,QACJ,CACLQ,QAAS5L,EAAS4L,SAGf,CACLH,SAAUzL,EAASyL,WAGvBjZ,aACE,OAAImd,KAAKD,UACA,EAAAhB,EAAAmB,aAAYF,KAAKD,UAEnB,SAGVpH,QAAQ9R,IAAI,CACXgS,aAAYnW,SAAEA,EAAFE,UAAYA,IACtBiE,EAAKnE,SAAWA,EAChBmE,EAAKjE,UAAYA,MAGpB+V,QAAQ9R,IAAI,CACXgS,oBAAoBsH,GAClB,MAAQC,aAAc1D,GAAYyD,EAC9BzD,IACF7V,EAAK6V,SAAU,EAAAoC,EAAAuB,eAAc3D,IAE/B7V,EAAKiV,SAAWqE,EAAO1B,cAAgB0B,EAAO1B,cAAc5R,GAAK,KACjEhG,EAAKsY,WAAagB,EAAOhB,WACzBtY,EAAKuY,gBAAkBe,EAAOG,eAC9BzZ,EAAKwY,mBAAqBc,EAAOd,mBAC7Bc,EAAOhB,YACTtY,EAAK0Z,YAAYJ,EAAOK,gBACxB3Z,EAAKC,IAAI,iBAAkBD,EAAK6V,UAEhC7V,EAAKC,IAAI,iBAGb+R,iBAAiBzZ,GACf0P,OAAOC,OAAOlI,EAAMzH,IAEtByZ,qBACEhS,EAAKyY,qBAAsB,GAE7BzG,eACEhS,EAAK6V,QAAU,IAEjB7D,eAAec,GACb9S,EAAK2Y,YAAc7F,MAGtBhB,QAAQ9R,IACP,MAAM4Z,EAAkBC,GAA8CzH,OAAA,4BACpEpS,EAAK8Z,gBAAe,GAEpB,MAAMtL,EAASvG,OAAAC,OAAA,GACVlI,EAAKoZ,iBACLS,IAECpV,KAAEA,SAAezE,EAAKO,OAAO+N,MAA8B,CAC/DA,MAAOuC,EAAAkJ,qBACPvL,cAEW,OAAT/J,GACFzE,EAAKga,oBAAoBvV,EAAKwV,iBAEhCja,EAAK8Z,gBAAe,KAEtB,MAAO,CACL9H,uBACMhS,EAAK6Y,cACP7Y,EAAKC,IACH,yCACAD,EAAKnE,SACLmE,EAAKjE,WAEP6d,EAAS,CAAE/d,SAAUmE,EAAKnE,SAAUE,UAAWiE,EAAKjE,cAGxDiW,gBAAgB6D,GACd7V,EAAKoY,YAAcvC,EACH,KAAZA,EACF7V,EAAKka,gBAELla,EAAKC,IAAI,6BAA8B4V,GACvC+D,EAAS,CAAE/D,cAGf7D,iBAAiBmI,GACfna,EAAKC,IAAI,yBAA0Bka,GACnCna,EAAKnE,SAAWse,EAAate,SAC7BmE,EAAKjE,UAAYoe,EAAape,UAC9B6d,EAASO,IAEXnI,qBAAqBoI,GACnBpa,EAAK0Y,iBAAmB0B,GAE1BpI,qBACEhS,EAAKC,IAAI,kBACTD,EAAKK,IAAIiQ,YAAY+J,mBACnB,EAAGC,aACD,MAAMze,SAAEA,EAAFE,UAAYA,GAAcue,EAChCta,EAAKC,IACH,wCACAqa,EAAOze,SACPye,EAAOve,UACPue,EAAOC,UAETpB,KAAKqB,qBAAqB,CAAE3e,WAAUE,eAExCqM,IACEpI,EAAKC,IAAI,IAAIqG,EAAAwC,OAAO,qBAAsBV,IAC1CpI,EAAKya,qBACLxW,OAAOyW,MAAM9X,EAAAuB,KAAAC,EAAA,gDAEf,CACEuW,oBAAoB,EACpBC,WAAY,uKC1LxB,IAAAC,EAAA1iB,EAAA,KACAF,ySAAAsD,CAAApD,EAAA,IAIO,MAAM2iB,EAAc7iB,EAAAO,QAAMuiB,mBAC/BjC,mBAQK,MAAMjP,EAAU,KACrB,MAAMrJ,GAAO,EAAAvI,EAAA+iB,YAAWF,GACxB,IAAKta,EACH,MAAM,IAAI6H,MAAM,oCAElB,OAAO7H,0BAGiC,GAAGiD,SAAQ8F,WAAU,MAC7D,MAAM/I,EAAOqJ,IACb,OAAgB,IAAZN,EACKtR,EAAAO,QAAAC,cAACoiB,EAAAI,SAAD,KAAW,IAAMxX,EAAOjD,IAE1BiD,EAAOjD,KAGT,MAAM2C,EAAe2X,EAAYI,oJC5BVrF,IACvBA,EAAQsF,OAMRtF,EAAQuF,eAGHvF,EAAQsF,UAAUtF,EAAQuF,gBAAgBvF,EAAQwF,UAFhDxF,EAAQsF,WAAWtF,EAAQwF,OANjCxF,EAAQwF,QACAxF,EAAQwF,QAAQxF,EAAQuF,iBAE1BvF,EAAQ/C,0HCPtB,MAAA7W,KAAA9D,EAAA,iCAEAgE,EAAAhE,EAAA,IAEA,MAAMmjB,EAA6Brf,EAAAzD;;;;;;;;;;;;;;;;;IAiB/B2D,EAAA+J;EAGS6T,EAAuB9d,EAAAzD;;;;;;;;;;;;;;;;;;IAkBhC8iB;6IC1CJ,IAAA3b,EAAAxH,EAAA,IAGA+f,EAAA/f,EAAA,KACAuY,EAAAvY,EAAA,IAOO,MAAMojB,EAAa,CACxB1f,SAAU,WACVE,UAAW,2BAGN,MAAMwV,EAAWb,EAAA9Q,UAAUqR,MAAM,OACrC1Y,MAAM,CACLijB,KAAM7b,EAAAE,MAAMsR,SAASxR,EAAAE,MAAMsY,OAAQ,IACnCtc,SAAU8D,EAAAE,MAAMsR,SAASxR,EAAAE,MAAMsY,OAAQoD,EAAW1f,UAClDE,UAAW4D,EAAAE,MAAMsR,SAASxR,EAAAE,MAAMsY,OAAQoD,EAAWxf,aAEpD4Y,SAAyB3U,IAAI,CAC5Byb,OAAQ,KACRC,WAAY,QAEb3b,MAAMC,IAAI,CACT2b,cACE,OAAuB,OAAhB3b,EAAKyb,QAEdG,aACE,OAAO,EAAA1D,EAAAmB,aAAYrZ,OAGtB8R,QAAQ9R,IAAI,CACXgS,UAAU6J,GACR7b,EAAKyb,OAASI,GAEhB7J,aACMhS,EAAKyb,SACPzb,EAAKwb,KAAOxb,EAAKyb,OAAOK,YAG5B9J,iBACE,GAAIhS,EAAKyb,OAAQ,CACf,MAAMG,EAAS5b,EAAKyb,OAAOM,YAC3B/b,EAAKnE,SAAW+f,EAAOjgB,MACvBqE,EAAKjE,UAAY6f,EAAO9f,QAG5BkW,cAActW,EAAesgB,EAAuB,KAC9Chc,EAAKyb,QAgBPzb,EAAKyb,OAAOQ,OAAM,EAAA/D,EAAAmB,aAAY3d,KAGlCsW,QAAQkK,GACNlc,EAAK0b,YAAa,EAAAxD,EAAAiE,aAAYD,EAAGlgB,SAEnCgW,kBACEhS,EAAK0b,WAAa,6HC1ExB,IAAArF,EAAAle,EAAA,KACA6U,EAAA7U,EAAA,GACAwH,EAAAxH,EAAA,IAEAmO,EAAAnO,EAAA,IAEAgE,EAAAhE,EAAA,IACAkc,EAAAlc,EAAA,KAgBAikB,EAAAjkB,EAAA,KACAqO,EAAArO,EAAA,IACAsO,EAAAtO,EAAA,KACAwK,EAAAxK,EAAA,IACAyK,EAAAzK,EAAA,IACA+I,EAAA/I,EAAA,KACA4E,EAAA5E,EAAA,KACAkkB,EAAAlkB,EAAA,KAIAgJ,EAAAhJ,EAAA,KAEAuY,EAAAvY,EAAA,IACA4Y,EAAA5Y,EAAA,0QAwBO,MAAMsZ,EAAaf,EAAA9Q,UAAUqR,MAAM,SACvC1Y,MAAM,CACL0c,SAAUtV,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QAChCkJ,QAAS3c,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMuT,QAC/BmJ,YAAalI,EAAAtZ,iBAAiByhB,UAC9BC,QAASpI,EAAA9Z,gBAAgBmiB,MACzBC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,YAAa,GACbC,KAAM,KAEPrI,SAAyB3U,IAAI,CAC5Bid,cAAc,EACdC,iBAAiB,EACjBC,aAAc,KACdC,WAAY,GACZC,mBAAoB,KACpBC,kBAAkB,KAEnBvd,MAAMC,IAAI,CACTud,eACE,OAAwB,OAAjBvd,EAAKsc,SAEdkB,sBACE,eAAgBxd,EAAKsc,WAEvBmB,+BACE,OAAOzd,EAAKuc,cAAgBlI,EAAAtZ,iBAAiByhB,WAE/CkB,6BACE,OAAO1d,EAAKuc,cAAgBlI,EAAAtZ,iBAAiB4iB,QAE/CC,gBACE,OAAO/G,QAAQ7W,EAAKmd,cAAgBnd,EAAKmd,aAAa1U,OAAS,IAEjEoV,yBACE,OAAI7d,EAAKQ,KAAKgJ,SAASC,SAAWzJ,EAAKQ,KAAKgJ,SAASsL,QAC5C9U,EAAKQ,KAAKgJ,SAASsL,QAAQiI,YAE7B,KAETe,mBAAmBC,IACV,CACLzB,QAAStc,EAAKsc,QACd0B,SAAU,CACRC,UAAWF,EAAWpB,UACtBuB,SAAUH,EAAWnB,SACrBuB,OAAQ,CAAC,CAAEtB,MAAOkB,EAAWlB,QAC7BuB,OAAQ,CAAC,CAAEtB,SAAUiB,EAAWhB,cAAcgB,EAAWjB,WAE3DE,KAAMe,EAAWf,KACjBqB,YAAaN,EAAWtB,QACxB6B,WAAW,EAAAjI,EAAAkI,UAAS,IAAI9H,KAAQ,GAAG+H,cACnCpB,WAAYW,EAAWX,WACpB7U,OAAO9B,EAAAnL,GAAGkN,OAAO,eAAe,IAChCiG,IAAIhI,EAAAnL,GAAGmjB,KAAK,YAIpB3M,QAAQ9R,IAAI,CACXgS,eAAe0M,GACb1e,EAAKuc,YAAcmC,GAErB1M,UAAUiD,GACRjV,EAAKiV,SAAWA,GAElBjD,aAAasH,GACXtZ,EAAKsc,QAAUhD,EAAOtT,GACtBhG,EAAKiV,SAAWqE,EAAO1B,cAAc5R,IACrC,EAAAQ,EAAApJ,SAAQ,iCAAkC4C,EAAKsc,QAAStc,EAAKiV,WAE/DjD,UAAUsK,GACJtc,EAAKsc,UAAYA,IACnBtc,EAAKsc,QAAUA,GACf,EAAA9V,EAAApJ,SAAQ,8DAGZ4U,eACMhS,EAAKiV,UAAYjV,EAAKsc,WACxB,EAAA9V,EAAApJ,SACE,oCACA4C,EAAKQ,KAAKgR,MAAM8K,QAChBtc,EAAKQ,KAAKgR,MAAMyD,UAGpBjV,EAAKsc,QAAU,KACftc,EAAKiV,SAAW,MAElBjD,iBACEhS,EAAKid,cAAe,GAEtBjL,aAAapK,GACX5H,EAAKid,cAAe,EACpBjd,EAAKmd,aAAevV,GAAU,CAC5BhF,EAAAuB,KAAAC,EAAA,yDAGJ4N,YACEhS,EAAKmd,aAAe,CAClBva,EAAAuB,KAAAC,EAAA,6JAEFpE,EAAKsd,kBAAmB,GAE1BtL,cACEhS,EAAKmd,aAAe,MAEtBnL,iBAAiB2M,GACf3e,EAAKkd,gBAAkByB,GAEzB3M,cAAcoL,GACRwB,MAAMC,QAAQzB,KAChBpd,EAAKod,WAAaA,GAEpBpd,EAAKsd,kBAAmB,GAE1BtL,gBAAgB8M,GACd9e,EAAKqd,mBAAqByB,GAEtB9M,mBACJsK,EAActc,EAAKsc,iDAEnB,MAAM9N,EAA2C,CAC/C8N,WAEF,IAME,aALqBtc,EAAKO,OAAO+N,MAAiC,CAChEyQ,YAAa,WACbzQ,MAAOyC,EAAAhP,wBACPyM,eAEY/J,KAAKua,OACnB,MAAO5W,GAEP,OADA,EAAA5B,EAAA5I,UAAS,iDAAkD0e,GACpD,SAGXtK,mBAAmBiN,GACbjf,EAAKQ,KAAKmR,KAAKuN,oBACjBlf,EAAK2c,UAAYsC,EAAOtC,UACxB3c,EAAK4c,SAAWqC,EAAOrC,SACvB5c,EAAK6c,MAAQoC,EAAOpC,MACpB7c,EAAK8c,MAAQmC,EAAOnC,MACpB9c,EAAK+c,YAAckC,EAAOlC,YAC1B/c,EAAKgd,KAAOiC,EAAOjC,OAEnBhd,EAAK2c,UAAY,GACjB3c,EAAK4c,SAAW,GAChB5c,EAAK6c,MAAQ,GACb7c,EAAK8c,MAAQ,GACb9c,EAAK+c,YAAc,GACnB/c,EAAKgd,KAAO,QAIjBlL,QAAQ9R,IAAI,CACLgS,8DACJ,MAAMxI,SAAEA,EAAF9E,SAAYA,GAAa1E,EAAKQ,KACpC,IAAKkE,EAASwU,SACZ,OAAO,KAET,MAAM1K,EAA4C,CAChD9S,IAAKgJ,EAASwU,SACdnE,YAAavL,EAASuL,YACtBK,QAAS5L,EAASoL,QAAUpL,EAAS4L,aAAU0D,EAC/C7D,SAAUzL,EAASoL,aAAUkE,EAAYtP,EAASyL,WAE9CxQ,KAAEA,SAAezE,EAAKO,OAAO4e,OAAO,CACxCJ,YAAa,WACbK,SAAUrO,EAAAtP,4BACV+M,eAEIgD,MAAEA,GAAU/M,EAIlB,OAHAzE,EAAKqf,aAAa7N,GAElBxR,EAAKsf,UACEtf,EAAKsc,WAERtK,kBAAkBiD,2CACtB,MAAMzL,SAAEA,GAAaxJ,EAAKQ,KACpBgO,EAA0C,CAC9CyG,WACAF,YAAavL,EAASuL,cAElBtQ,KAAEA,SAAezE,EAAKO,OAAO4e,OAAO,CACxCJ,YAAa,WACbK,SAAUrO,EAAAvP,0BACVgN,eAEIgD,MAAEA,GAAU/M,EAIlB,OAHAzE,EAAKqf,aAAa7N,GAElBxR,EAAKsf,UACEtf,EAAKsc,WAEdtK,iBACE,MAAMxI,SAAEA,GAAaxJ,EAAKQ,KACtBgJ,EAASoL,QACX5U,EAAKO,OAAO+N,MAAM,CAChBA,MAAO+N,EAAAvb,oBACP0N,UAAW,CAAE4G,QAAS5L,EAAS4L,WAGjCpV,EAAKO,OAAO+N,MAAM,CAChBA,MAAO+N,EAAAtb,qBACPyN,UAAW,CAAEyG,SAAUzL,EAASyL,aAItCjD,iBAAiBiD,GACXA,GACFjV,EAAKO,OAAO+N,MAAM,CAAEA,MAAOvR,EAAAL,cAAe8R,UAAW,CAAEyG,eAG3DjD,aAAa8M,GACX9e,EAAKO,OAAO+N,MAAM,CAChBA,MAAOyC,EAAA1P,wBACPmN,UAAW,CAAEsQ,eAGX9M,cAAc8M,EAAcS,EAAwB,4CACxD,MAAM/Q,EAAmC,CACvC8N,QAAStc,EAAKsc,QACdwC,WACAS,cAEIC,EAAUxf,EAAKO,OAAOkf,aAA8B,CACxDzZ,GAAIhG,EAAKwd,gBACTkC,SAAUxe,EAAA9E,cACVujB,aAAc,WAEVC,EAAS5f,EAAKO,OAAOkf,aAA+B,CACxDzZ,aAAc8Y,IACdY,SAAUvjB,EAAAgK,iBAEN0Z,EAAqB,CACzBnU,WAAY,WACZoU,kBAAiB7X,OAAAC,OAAA,GACZsX,EAAO,CACVO,WAAYP,EAAUA,EAAQO,WAAa,EAAI,EAC/CC,MAAO,IACDR,EAAUA,EAAQQ,MAAQ,GAC9B,CACEtU,WAAY,cACZ1F,GAAI,KACJia,MAAO,CACLvU,WAAY,iBACZtI,MAAO,EACP8c,eAAgB,OAElBN,OAAM3X,OAAAC,OAAA,GAAO0X,EAAM,CAAEL,WAAY,KACjCA,WAAY,GACZY,WAAW,aAKbngB,EAAKO,OAAO4e,OAAO,CACvBC,SAAUrO,EAAArP,mBACV8M,YACAqR,0BAGE7N,oBAAoB8M,EAAcS,EAAwB,4CAC9D,MAAM/Q,EAAmC,CACvC8N,QAAStc,EAAKsc,QACdwC,WACAS,cAEIC,EAAUxf,EAAKO,OAAOkf,aAAoC,CAC9DzZ,GAAIhG,EAAKwd,gBACTkC,SAAUve,EAAAnE,oBACV2iB,aAAc,iBAEVE,EAAqB,CACzBnU,WAAY,WACZoU,kBAAiB7X,OAAAC,OAAA,GACZsX,EAAO,CACVO,WAAYP,EAAUA,EAAQO,WAAa,EAAI,EAC/CC,MAAO,IACDR,EAAUA,EAAQQ,MAAQ,GAC9B,CACEtU,WAAY,cACZ1F,GAAI,KACJ4Z,OAAQ,CAAElU,WAAY,SAAU1F,GAAI8Y,GACpCqB,WAAW,aAKbngB,EAAKO,OAAO4e,OAAO,CACvBC,SAAUrO,EAAApP,yBACV6M,YACAqR,0BAGE7N,WAAWoO,EAAYb,EAAwB,4CACnD,MAAM/Q,EAAwC,CAC5C8N,QAAStc,EAAKsc,QACd8D,SACAb,oBAEIvf,EAAKO,OAAO4e,OAAO,CAAEC,SAAUrO,EAAAnP,wBAAyB4M,iBAEhEwD,mBAAmBoO,GACjB,MAAM5R,EAAwC,CAC5C4R,UAEIZ,EAAUxf,EAAKO,OAAOkf,aAA8B,CACxDC,SAAUxe,EAAA9E,cACVujB,aAAc,SACd3Z,GAAIhG,EAAKwd,kBAEXxd,EAAKO,OAAO4e,OAAO,CACjBC,SAAUrO,EAAAlP,wBACV2M,YACAqR,mBAAoB,CAClBnU,WAAY,WACZ2U,mBAAkBpY,OAAAC,OAAA,GACbsX,EAAO,CACVO,WAAYP,EAAUA,EAAQO,WAAa,EAAI,EAC/CC,MAAOR,EACHA,EAAQQ,MAAMzX,OAAO+X,GAAQA,EAAKta,KAAOoa,GACzC,SAKNpO,kDACJ,MAAMxD,EAAkC,CACtC+R,MAAO,CACLjE,QAAStc,EAAKsc,QACdO,MAAO7c,EAAK6c,MACZF,UAAW3c,EAAK2c,UAChBC,SAAU5c,EAAK4c,SACfE,MAAO9c,EAAK8c,QAGhB,IACE,MAAMxD,QAAetZ,EAAKO,OAAO+N,MAAwB,CACvDA,MAAOyC,EAAA/O,eACPwM,cAEE8K,EAAO7U,MACTzE,EAAKwgB,cAAclH,EAAO7U,KAAKgc,WAEjC,MAAOrY,IACP,EAAAzF,EAAA+d,aAAYtY,EAAK,CAAEoG,cACnBxO,EAAK2gB,gBAGH3O,UAAU+L,2CACd,MAAMjB,KAAWiB,EAAWhB,YAAY5c,SAAS4d,EAAWjB,MAAM3c,SAI5DqO,EAAkC,CACtC+R,MAAO,CACL1D,MALUkB,EAAWlB,MAAM1c,OAM3B2c,QACAH,UANcoB,EAAWpB,UAAUxc,OAOnCyc,SANamB,EAAWnB,SAASzc,OAOjCmc,QAAStc,EAAKsc,UAGlB,IACE,MAAMhD,QAAetZ,EAAKO,OAAO+N,MAAwB,CACvDA,MAAOyC,EAAA/O,eACPwM,cAEE8K,EAAO7U,MACTzE,EAAKwgB,cAAclH,EAAO7U,KAAKgc,WAEjC,MAAOrY,IACP,EAAAzF,EAAA+d,aAAYtY,EAAK,CAAEoG,cACnBxO,EAAK2gB,gBAGTC,YAAoB7C,GAA+B3L,OAAA,4BAEjD,IAAIkH,EADJtZ,EAAKid,cAAe,EAGpBjd,EAAK6gB,mBAAmB9C,GAExB,IACEzE,QAAetZ,EAAKO,OAAO4e,OAAO,CAChCJ,YAAa,WACbK,SAAUrO,EAAAjP,oBACV0M,UAAWxO,EAAK8d,mBAAmBC,GACnC+C,eAAgB,CAAC,YAAa,iBAEhC,MAAO1Y,GAEP,MADApI,EAAK+gB,gBACC,EAAApe,EAAA+d,aAAY,IAAIpa,EAAAwC,OAAO,4BAA6BV,IAG5D,GAAKkR,EAAO1R,QAAU0R,EAAO1R,OAAOa,SAAY6Q,EAAO7U,KAErD,MADAzE,EAAK+gB,gBACC,EAAApe,EAAA+d,aACJ,IAAIpa,EAAAwC,OAAO,4BAA6BwQ,EAAO1R,SAInD,MAAMoZ,EAAyC1H,EAAO7U,KAAKwc,YAC3D,GAAID,EAAa1Y,YAAc0Y,EAAa1Y,WAAWG,OAErD,MADAzI,EAAK+gB,aAAaC,EAAa1Y,aACzB,EAAA3F,EAAA+d,aACJ,IAAIpa,EAAAwC,OAAO,wBAAyBkY,EAAa1Y,aAIrD,GAAIyV,EAAWtB,UAAYpI,EAAA9Z,gBAAgB2mB,KAEzC,YADAlhB,EAAKmhB,iBAIP,IAAKH,EAAaI,SAEhB,MADAphB,EAAK+gB,gBACC,EAAApe,EAAA+d,aAAY,IAAIrY,MAAM,0CAGxB,EAAA+T,EAAAiF,qBAAoBL,EAAaI,UAEvCphB,EAAKshB,kBAAiB,GACtB,MAAMC,QAAsBvhB,EAAKwhB,qBAGjC,GAFAxhB,EAAKshB,kBAAiB,IAElBC,IAAiBA,EAAcE,UAMjC,MAHAzhB,EAAK+gB,aACFQ,GAAiBA,EAAcjZ,iBAAewQ,IAE3C,EAAAnW,EAAA+d,aAAY,IAAIpa,EAAAwC,OAAO,qCAL7B9I,EAAKmhB,sBASVrP,QAAQ9R,IAAI,CACXgS,qBACE,MAAM0P,EAAY,IAAIzd,OAAOsR,IAAItR,OAAOS,SAAS8Q,MAE3C8G,EAAUoF,EAAUjM,aAAapG,IAAI,WACtCiN,IAGL,EAAAtP,EAAA2U,MACE,IAAM3hB,EAAKQ,KAAK0Q,KAAKzH,QACrB,IAAW2I,EAAA+G,UAAA,qBAET,MAAMyI,EAAa5d,WAAW,IAAMhE,EAAKshB,kBAAiB,GAAO,KAC3DC,QAAsBvhB,EAAKwhB,mBAAmBlF,GAKpD,GAHAuF,aAAaD,GACb5hB,EAAKshB,kBAAiB,GAElBC,GAAiBA,EAAcE,UACjCzhB,EAAK8hB,UAAUxF,GACfoF,EAAUK,OAAS,GACnBL,EAAUM,SAAW,UACrBtd,SAASsF,QAAQ0X,EAAUO,gBAJ7B,CAME,MAAMnF,EAAQ9c,EAAKQ,KAAKgJ,SAASE,OAAQoT,MACzC9c,EAAK+gB,aAAa,CAChBne,EAAAuB,KAAAC,EAAA,iGAA+F0Y,4ICjgBvG,SAAoC7I,2CAGxC,OAFA,EAAAzN,EAAA5I,UAAS,aAAcqW,SAazB,SAAoBA,GAClB,MAAMiO,EAAYjO,EAAIkO,SAAS,wBAC3BC,EACAC,EAEJ,OADA,EAAA7b,EAAA5I,UAAS,mBAAoBskB,GACtB,IAAI9c,QAAQ2K,KACjB,EAAAuS,EAAA9pB,SAAS0pB,EAAWnS,KAlBhBwS,CAAWtO,GAsBDuO,EAlBlB,SAAoBvO,GAKlB,MAAO,CAAEwO,WAAYxO,EAAKyO,QAAQ,GARlBC,CAAW1O,GAsBpB,IAAI7O,QAAQ2K,KACjB,EAAAvJ,EAAA5I,UAAS,kBAETwe,OAAOwG,SAASJ,EAAS,SAASlJ,IAChC,EAAA9S,EAAA5I,UAAS,eAAgB0b,GACzBvJ,EAAQuJ,EAAOtT,QANrB,IAAkBwc,KApClB,MAAAF,KAAAnqB,EAAA,kCAEAqO,EAAArO,EAAA,6QAEA,MAAMkqB,EAAc,0CACdD,EAAqB,oJCDrB,SAA2ChD,GAa/C,MARqC,KACnC,MAAMzgB,EAAAwa,KAAA5gB,OAAAkL,OAAEA,GAAM9E,EAAEpG,EAAAuG,EAAAH,EAAA,YAChB,OACE1G,EAAAO,QAAAC,cAACyJ,EAAA2gB,SAADnqB,EAAA,CAAU0mB,SAAUA,GAAc7mB,GAC/BkL,KAZT,MAAAxL,KAAAE,EAAA,gCACA+J,EAAA/J,EAAA,slBCFA,IAAAwH,EAAAxH,EAAA,IAIO,MAAMyZ,EAFbzZ,EAAA,IAEyByH,UAAUqR,MAAM,QACtC1Y,MAAM,CACLuqB,aAAcnjB,EAAAE,MAAMsT,UAAUxT,EAAAE,MAAMkjB,WAErCpO,SAAS3U,IAAI,CACZgjB,wBAAwB,EACxBC,uBAAuB,KAExBnR,QAAQ9R,IAAI,CACXgS,kBACEhS,EAAKgjB,wBAAyB,GAEhChR,kBACEhS,EAAKgjB,wBAAyB,GAEhChR,iBACEhS,EAAKijB,uBAAwB,GAE/BjR,iBACEhS,EAAKijB,uBAAwB,GAE/BjR,qBACEhS,EAAK8iB,cAAe,GAEtB9Q,oBACEhS,EAAK8iB,cAAe,MAGvB/iB,MAAMC,IAAI,CACTkf,yBACE,OAA6B,IAAtBlf,EAAK8iB,kIClClB,IAAA7qB,EAAAC,EAAAC,EAAA,IACA+qB,EAAAhrB,EAAAC,EAAA,+DAMkC,EAAGgrB,YAAW,KAC9ClrB,EAAAO,QAAAC,cAAA,OACE2qB,MAAO,CACLC,QAAS,OACTC,UAAW,SACXC,eAAgB,UAElBC,cAAY,UAEZvrB,EAAAO,QAAAC,cAACyqB,EAAA1qB,QAAD,CAASkH,KAAK,SAAS0jB,MAAOD,EAAW,GAAK,CAAEM,UAAW,2KChB/D,MAAAC,EAAAvrB,EAAA,KACAF,EAAAE,EAAA,IACAwrB,EAAAxrB,EAAA,KACAyrB,EAAAroB,EAAApD,EAAA,MACAyM,EAAArJ,EAAApD,EAAA,IAEAoK,KAAApK,EAAA,iCACAoO,EAAApO,EAAA,IACAqO,EAAArO,EAAA,sjBAEO,MAAMgM,GAAO,EAAAuf,EAAAG,sBAsBd,SAAgBC,EAAeC,2CACnC,OAAKxd,EAAAK,UAAU8D,mBAAmByX,SAAS4B,UAuB7C,SAA2BA,2CACzB,IAAIC,EASFA,QAAgB7rB,EAAA,IAAAA,MAEF4rB,iBAGhB5f,EAAK8f,KAAK,CAAEjS,CAAC+R,GAAOC,KACpB,EAAAxd,EAAA1I,SAAQ,oBAAqBimB,KAnCvBG,CAAYH,GAClB5f,EAAKggB,SAASJ,IACd,EAAAvd,EAAA1I,SAAQ,gBAAiBimB,IAClB,KANL,EAAAvd,EAAA1I,SAAQ,iCACD,KAQL,SAAUsmB,IACd,MAIMC,EAJW,IAAIT,EAASU,eAC5B,CAAC,IAAIV,EAASW,YAAY,QAAS,IAAIX,EAASY,mBAChD,CAAC,IAAIZ,EAASa,0BAEkCC,aAKlD,OAJA,EAAAle,EAAA1I,SAAQ,wBAAyBumB,EAAUM,KAAK,OAC9BN,EAAUO,KAAKC,GAC/Bte,EAAAK,UAAU8D,mBAAmByX,SAAS0C,KAEpBte,EAAAK,UAAU6D,+BAzCK,GAAGxR,eACtC,MAAO0iB,EAASmJ,IAAY,EAAAlgB,EAAAmgB,WAAS,IAC9BC,IAAY,EAAApgB,EAAAmgB,UAASX,GAO5B,OALA,EAAAT,EAAAsB,gBAAe,IAAW7S,OAAA,kCAClB0R,EAAekB,GACrBF,GAAS,OAGK,IAAZnJ,EACK/W,EAAApM,QAAAC,cAAC8J,EAAA/J,QAAD,MAIPoM,EAAApM,QAAAC,cAACR,EAAAitB,aAAD,CAAcF,SAAUA,EAAU7gB,KAAMA,GACrClL,oGCjBD,SAAwCqV,GAsD5C,OA5CmC3P,QAAA8E,OACjCA,EADiC0hB,eAEjCA,EAFiCC,cAGjCA,GAAgB,EAHiBC,YAIjCA,GAAc,EAJmBpsB,SAKjCA,GAAQ0F,EACRpG,EAAAuG,EAAAH,EAAA,sEACI,OACJ1G,EAAAO,QAAAC,cAACyJ,EAAAojB,MAAD5sB,EAAA,CAAO4V,MAAOA,GAAW/V,GACtB+gB,IACC,GAAIA,EAAOiM,UAAYjM,EAAO7U,KAAM,CAClC,GAA6B,oBAAlB2gB,EACT,OAAOA,EAAc9L,GAChB,IAAsB,IAAlB8L,EACT,OAAOntB,EAAAO,QAAAC,cAAC8J,EAAA/J,QAAD,MAGX,GAAI8gB,EAAOhS,MAAO,CAGhB,IAFA,EAAA3E,EAAA+d,aAAYpH,EAAOhS,QACnB,EAAAd,EAAAhJ,UAAS8b,EAAOhS,OACW,oBAAhB+d,EACT,OAAOA,EAAY/L,GACd,IAAoB,IAAhB+L,EAEP,MAAM,IAAI/e,EAAAwC,OAAOwQ,EAAOhS,MAAO,eAIjC,OAAO,KAGX,GAAIgS,EAAO7U,KAAM,CACf,GAAI0gB,EACF,OAAOltB,EAAAO,QAAAC,cAAAR,EAAAO,QAAAY,SAAA,KAAG+rB,EAAe7L,EAAO7U,KAAM6U,IAExC,GAAI7V,EACF,OAAOA,EAAO6V,EAAO7U,KAAM6U,GAG/B,OAAOrgB,GAAY,SA1D3B,IAAAhB,EAAAC,EAAAC,EAAA,IACA+J,EAAA/J,EAAA,IAEAmO,GADApO,EAAAC,EAAA,MACAA,EAAA,KAEAoK,EAAArK,EAAAC,EAAA,KACAqO,EAAArO,EAAA,IACAwK,EAAAxK,EAAA","file":"static/js/main.8a4bb963.chunk.js","sourcesContent":["import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components'\n\nexport const Desktop = props => <ReactResponsive {...props} minWidth={768} />\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxAspectRatio=\"14/9\" maxWidth={767} />\n)\nexport const MobileLandscape = props => (\n  <ReactResponsive\n    {...props}\n    screen={true}\n    minAspectRatio=\"14/9\"\n    maxWidth={767}\n  />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.SFC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${768 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${767 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n","export interface InputOrderIndex {\n  readonly companyBranches?: ReadonlyArray<string> | null\n\n  readonly user?: string | null\n\n  readonly orderStatesAND?: ReadonlyArray<OrderStateEnum> | null\n\n  readonly orderStatesOR?: ReadonlyArray<OrderStateEnum> | null\n\n  readonly orderStateCategoriesOR?: ReadonlyArray<OrderStateCategoryEnum> | null\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum | null\n\n  readonly currency?: CurrencyEnum | null\n\n  readonly location?: InputLocationIndex | null\n\n  readonly stateChangeSince?: string | null\n\n  readonly includeOldFinished?: boolean | null\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: number | null\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: string | null\n\n  readonly phone?: string | null\n\n  readonly firstname?: string | null\n\n  readonly lastname?: string | null\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: OrderRecipeStateEnum | null\n\n  readonly parent?: string | null\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n\n  readonly associatedRecipes?: ReadonlyArray<string> | null\n\n  readonly amount?: number | null\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: string | null\n\n  readonly recipe?: string | null\n\n  readonly orderRecipeState?: string | null\n\n  readonly parent?: string | null\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: string | null\n\n  readonly brand?: string | null\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly warePriceType?: WarePriceTypeEnum | null\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly orderRecipes?: ReadonlyArray<InputOrderRecipeCreates> | null\n\n  readonly customer?: InputCustomerCreate | null\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n\n  readonly associatedRecipes?: ReadonlyArray<string> | null\n\n  readonly amount?: number | null\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: string | null\n\n  readonly lastName?: string | null\n\n  readonly emails?: ReadonlyArray<InputEmailCreate> | null\n\n  readonly phones?: ReadonlyArray<InputPhoneCreate> | null\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: string | null\n\n  readonly default?: boolean | null\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: string | null\n\n  readonly default?: boolean | null\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly language?: LanguageEnum | null\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly notification?: InputNotificationCreate | null\n\n  readonly note?: string | null\n\n  readonly deliverAt?: string | null\n\n  readonly location?: InputLocationCreate | null\n\n  readonly callEventId?: string | null\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: string | null\n\n  readonly chrome?: { [key: string]: string | number } | null\n\n  readonly firebase?: { [key: string]: string | number } | null\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: number | null\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: CurrencyEnum | null\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: InputCustomerCreate | null\n  /** payment method used to finalize order */\n  readonly paymentMethod?: PaymentTypeEnum | null\n  /** payment gate used to finalize order */\n  readonly paymentGate?: PaymentGateEnum | null\n\n  readonly deliverAt?: string | null\n\n  readonly note?: string | null\n\n  readonly confirmedAgreements?: ReadonlyArray<string> | null\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly language?: LanguageEnum | null\n\n  readonly customer?: InputCustomerCreate | null\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly notification?: InputNotificationCreate | null\n\n  readonly note?: string | null\n\n  readonly deliverAt?: string | null\n\n  readonly location?: InputLocationCreate | null\n\n  readonly warePriceType?: WarePriceTypeEnum | null\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: string | null\n\n  readonly dateFrom?: string | null\n\n  readonly timeFrom?: string | null\n\n  readonly dateTo?: string | null\n\n  readonly timeTo?: string | null\n\n  readonly available?: boolean | null\n\n  readonly periodic?: boolean | null\n\n  readonly weekDay?: WeekDayEnum | null\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: string | null\n\n  readonly dateFrom?: string | null\n\n  readonly timeFrom?: string | null\n\n  readonly dateTo?: string | null\n\n  readonly timeTo?: string | null\n\n  readonly available?: boolean | null\n\n  readonly periodic?: boolean | null\n\n  readonly weekDay?: WeekDayEnum | null\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: InputLabelCreate | null\n\n  readonly webLabel?: InputLabelCreate | null\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: string | null\n\n  readonly closeAt?: string | null\n\n  readonly specificDate: string\n\n  readonly closed?: boolean | null\n\n  readonly smsLabel?: InputLabelCreate | null\n\n  readonly webLabel?: InputLabelCreate | null\n\n  readonly closedNote?: string | null\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum> | null\n\n  readonly name: string\n\n  readonly enabled?: boolean | null\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: ReadonlyArray<InputLabelTranslation> | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: string | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: string | null\n\n  readonly internalNote?: string | null\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean | null\n\n  readonly ingredients?: ReadonlyArray<InputRecipeIngredient> | null\n\n  readonly wareCategories?: ReadonlyArray<string> | null\n\n  readonly sideDishCategories?: ReadonlyArray<string> | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n\n  readonly video?: string | null\n\n  readonly code?: string | null\n\n  readonly ware?: string | null\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: ReadonlyArray<InputRecipeRelationCreate> | null\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: string | null\n\n  readonly nameLabel?: string | null\n\n  readonly descriptionLabel?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly internalNote?: string | null\n\n  readonly video?: string | null\n\n  readonly code?: string | null\n\n  readonly ingredients?: ReadonlyArray<InputRecipeIngredient> | null\n\n  readonly wareCategories?: ReadonlyArray<string> | null\n\n  readonly sideDishCategories?: ReadonlyArray<string> | null\n\n  readonly prices?: ReadonlyArray<InputRecipePriceCreate> | null\n\n  readonly associatedRecipes?: ReadonlyArray<InputRecipeRelationCreate> | null\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number | null\n\n  readonly placeCode: string\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: string | null\n\n  readonly quantity?: number | null\n\n  readonly allergens?: ReadonlyArray<AllergenEnum> | null\n\n  readonly note?: string | null\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: number | null\n\n  readonly label?: string | null\n\n  readonly code?: string | null\n\n  readonly plu?: string | null\n\n  readonly wareUnit?: WareUnitEnum | null\n\n  readonly allergens?: ReadonlyArray<AllergenEnum> | null\n\n  readonly note?: string | null\n\n  readonly allowNegative?: FieldStateEnum | null\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: LanguageEnum | null\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: string | null\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: string | null\n\n  readonly wareRequirement?: WareRequirementEnum | null\n\n  readonly enabled?: boolean | null\n\n  readonly public?: boolean | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n\n  readonly maxRecipesCount?: number | null\n\n  readonly recipes?: ReadonlyArray<string> | null\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: string | null\n\n  readonly pictogram?: string | null\n\n  readonly nameLabel?: string | null\n\n  readonly internalNoteLabel?: string | null\n\n  readonly wareRequirement?: WareRequirementEnum | null\n\n  readonly wareCategoryType?: WareCategoryTypeEnum | null\n\n  readonly enabled?: boolean | null\n\n  readonly public?: boolean | null\n\n  readonly maxRecipesCount?: number | null\n\n  readonly recipes?: ReadonlyArray<string> | null\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: string | null\n\n  readonly internalCode?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n}\n\nexport interface InputWareUpdate {\n  readonly code?: string | null\n\n  readonly internalCode?: string | null\n\n  readonly companyBranch?: string | null\n\n  readonly nameLabel?: InputLabelUpdate | null\n\n  readonly descriptionLabel?: InputLabelUpdate | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: string | null\n\n  readonly zoneType?: ZoneTypeEnum | null\n\n  readonly zoneColor?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly geoPolygon?: ReadonlyArray<InputGeoPointCreate> | null\n\n  readonly availability?: InputAvailabilityCreate | null\n\n  readonly priceRangeRules?: ReadonlyArray<PriceRangeRuleCreate> | null\n\n  readonly minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: string | null\n\n  readonly name?: string | null\n\n  readonly zoneColor?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly geoPolygon?: ReadonlyArray<InputGeoPointCreate> | null\n\n  readonly availability?: InputAvailabilityUpdate | null\n\n  readonly priceRangeRules?: ReadonlyArray<PriceRangeRuleCreate> | null\n\n  readonly minimalOrderPrice?: InputCurrencyCreate | null\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport namespace GBusinessCodeLookup {\n  export type Variables = {\n    readonly code?: string | null\n    readonly url?: string | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly lookup: Lookup\n  }\n\n  export type Lookup = {\n    readonly __typename?: 'CompanyBrandLookUp'\n\n    readonly branch: Branch | null\n\n    readonly isBrand: boolean\n\n    readonly isMobileApp: boolean\n\n    readonly knownBasePath: string\n\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Branch = GCompanyBranch.Fragment\n}\n\nexport namespace GResolveLocation {\n  export type Variables = {\n    readonly brandId?: string | null\n    readonly branchId?: string | null\n    readonly address?: string | null\n    readonly latitude?: number | null\n    readonly longitude?: number | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly resolveLocation: ResolveLocation\n  }\n\n  export type ResolveLocation = GLocationResolution.Fragment\n}\n\nexport namespace GOrderCartForRecipe {\n  export type Variables = {\n    readonly recipeId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = GCartRecipe.Fragment\n}\n\nexport namespace GOrderCartForItem {\n  export type Variables = {\n    readonly itemId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly item: Item\n  }\n\n  export type Item = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  }\n\n  export type Recipe = GCartRecipe.Fragment\n\n  export type SideDishes = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: _Recipe\n  }\n\n  export type _Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n  }\n}\n\nexport namespace GCreatePickupOrder {\n  export type Variables = {\n    readonly branchId: string\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly order: Order\n  }\n\n  export type Order = GCreateOrder.Fragment\n}\n\nexport namespace GCreateDeliveryOrder {\n  export type Variables = {\n    readonly brandId?: string | null\n    readonly branchId?: string | null\n    readonly gps: InputGeoPointCreate\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly order: Order\n  }\n\n  export type Order = GCreateOrder.Fragment\n}\n\nexport namespace GAddToOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly recipeId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createOrderRecipe: CreateOrderRecipe\n  }\n\n  export type CreateOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GAddToOrderMobile {\n  export type Variables = {\n    readonly orderId: string\n    readonly recipeId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createOrderRecipe: CreateOrderRecipe\n  }\n\n  export type CreateOrderRecipe = GOrderMobile.Fragment\n}\n\nexport namespace GChangeOrderItem {\n  export type Variables = {\n    readonly orderId: string\n    readonly itemId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateOrderRecipe: UpdateOrderRecipe\n  }\n\n  export type UpdateOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GRemoveOrderItem {\n  export type Variables = {\n    readonly itemId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyOrderRecipe: DestroyOrderRecipe\n  }\n\n  export type DestroyOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GSubmitOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly customer?: InputCustomerCreate | null\n    readonly note?: string | null\n    readonly paymentGate: PaymentGateEnum\n    readonly deliverAt: string\n    readonly agreements?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly finishOrder: FinishOrder\n  }\n\n  export type FinishOrder = {\n    readonly __typename?: 'FinishedOrder'\n\n    readonly userErrors: ReadonlyArray<string>\n\n    readonly gopayUrl: string | null\n  }\n}\n\nexport namespace GOrderPaymentStatus {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly status: Status\n  }\n\n  export type Status = {\n    readonly __typename?: 'OrderOnlinePaymentStatus'\n\n    readonly isSuccess: boolean\n\n    readonly userErrors: ReadonlyArray<string>\n  }\n}\n\nexport namespace GVamStatus {\n  export type Variables = {\n    readonly input: InputVamStatus\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly vamStatus: ReadonlyArray<VamStatus>\n  }\n\n  export type VamStatus = {\n    readonly __typename?: 'VAMAgreement'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly description: string\n\n    readonly isConfirmed: boolean\n\n    readonly isMandatory: boolean\n  }\n}\n\nexport namespace GCompanyBranchStyle {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly styles: Styles\n  }\n\n  export type Styles = {\n    readonly __typename?: 'GraphicStyle'\n\n    readonly active: string\n\n    readonly main: string\n\n    readonly mainSecondary: string\n\n    readonly storeLogo: string\n\n    readonly storeLogoMobile: string\n\n    readonly backgroundCart: string\n  }\n}\n\nexport namespace GCartView {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly deliveryType: DeliveryType | null\n  } & GOrder.Fragment\n\n  export type DeliveryType = {\n    readonly __typename?: 'DeliveryType'\n\n    readonly enum: DeliveryTypeEnum\n  }\n}\n\nexport namespace GFinishView {\n  export type Variables = {\n    readonly orderId: string\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n\n    readonly companyBranch: CompanyBranch\n\n    readonly androidApp: AndroidApp | null\n\n    readonly iosApp: IosApp | null\n  }\n\n  export type Order = GFinishViewOrder.Fragment\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly phone: string\n\n    readonly company: Company\n  }\n\n  export type Company = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n  }\n\n  export type AndroidApp = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly url: string\n  }\n\n  export type IosApp = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly url: string\n  }\n}\n\nexport namespace GFoodMenu {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly wareCategories: ReadonlyArray<WareCategories>\n  }\n\n  export type WareCategories = {\n    readonly __typename?: 'WareCategory'\n\n    readonly recipes: ReadonlyArray<Recipes>\n  } & GFoodMenuCategory.Fragment\n\n  export type Recipes = GFoodMenuRecipe.Fragment\n}\n\nexport namespace GFoodMenuCartPresence {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  } & GCartPresence.Fragment\n}\n\nexport namespace GInitialLocation {\n  export type Variables = {}\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly initialLocation: InitialLocation\n  }\n\n  export type InitialLocation = {\n    readonly __typename?: 'AddressResolvedLocation'\n\n    readonly gpsCoordinates: GpsCoordinates | null\n  }\n\n  export type GpsCoordinates = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GPickupMapBrand {\n  export type Variables = {\n    readonly brandId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branches: ReadonlyArray<Branches>\n  }\n\n  export type Branches = GPickupBranch.Fragment\n}\n\nexport namespace GPickupMapBranch {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n  }\n\n  export type Branch = GPickupBranch.Fragment\n}\n\nexport namespace GMobileCart {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = GOrderMobile.Fragment\n}\n\nexport namespace GMobileShopStatus {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n  }\n\n  export type Branch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  } & GCompanyBranchStatus.Fragment\n}\n\nexport namespace GMobileShopIntro {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly headerText: string | null\n  }\n}\n\nexport namespace GSmartBanner {\n  export type Variables = {\n    readonly branchId: string\n    readonly platform: MobilePlatformEnum\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly app: App | null\n  }\n\n  export type App = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly title: string\n\n    readonly url: string\n\n    readonly icon: string\n  }\n}\n\nexport namespace GOrderForm {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly countWares: number\n  }\n}\n\nexport namespace GOrderPromoCodes {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace MAddOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly code: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderPromoCode: AddOrderPromoCode\n  }\n\n  export type AddOrderPromoCode = {\n    readonly __typename?: 'OrderWithErrors'\n\n    readonly userErrors: ReadonlyArray<string>\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace MRemoveOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly codeId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly removeOrderPromoCode: RemoveOrderPromoCode\n  }\n\n  export type RemoveOrderPromoCode = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace GShopHeader {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n  }\n\n  export type Branch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly phone: string\n\n    readonly homepageUrl: string | null\n\n    readonly headerText: string | null\n\n    readonly address: Address\n  } & GCompanyBranchStatus.Fragment\n\n  export type Address = GAddress.Fragment\n}\n\nexport namespace GJsonAddress {\n  export type Fragment = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly street: string | null\n\n    readonly houseNumber: string | null\n\n    readonly city: string | null\n\n    readonly state: string | null\n  }\n}\n\nexport namespace GAddress {\n  export type Fragment = {\n    readonly __typename?: 'Address'\n\n    readonly id: string\n\n    readonly location: Location | null\n  }\n\n  export type Location = GJsonAddress.Fragment\n}\n\nexport namespace GGeoPoint {\n  export type Fragment = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GPrice {\n  export type Fragment = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n\n    readonly formattedValue: string\n  }\n}\n\nexport namespace GRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly sideDishCount: number\n  }\n}\n\nexport namespace GCartItem {\n  export type Fragment = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly automatic: boolean\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = GRecipe.Fragment\n}\n\nexport namespace GCompanyBranchStatus {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly isOpen: boolean\n\n    readonly willOpenAt: string | null\n\n    readonly willCloseAt: string | null\n\n    readonly businessHours: ReadonlyArray<BusinessHours>\n  }\n\n  export type BusinessHours = {\n    readonly __typename?: 'BusinessHour'\n\n    readonly id: string\n\n    readonly openAt: string\n\n    readonly closeAt: string\n\n    readonly closed: boolean\n\n    readonly closedNote: string | null\n  }\n}\n\nexport namespace GPromoCode {\n  export type Fragment = {\n    readonly __typename?: 'PromoCode'\n\n    readonly id: string\n\n    readonly code: string\n  }\n}\n\nexport namespace GCompanyBranch {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly brand: Brand\n\n    readonly company: Company\n\n    readonly address: Address\n\n    readonly phone: string\n  }\n\n  export type Brand = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly code: string\n  }\n\n  export type Company = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n  }\n\n  export type Address = {\n    readonly __typename?: 'Address'\n\n    readonly country: Country | null\n  }\n\n  export type Country = {\n    readonly __typename?: 'Country'\n\n    readonly phonePrefix: string\n  }\n}\n\nexport namespace GLocationResolution {\n  export type Fragment = {\n    readonly __typename?: 'AddressResolvedLocation'\n\n    readonly finalAddress: FinalAddress | null\n\n    readonly isResolved: boolean\n\n    readonly isValidAddress: boolean\n\n    readonly inDeliveryLocation: boolean\n\n    readonly gpsCoordinates: GpsCoordinates | null\n\n    readonly companyBranch: CompanyBranch | null\n  }\n\n  export type FinalAddress = GJsonAddress.Fragment\n\n  export type GpsCoordinates = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly isOpen: boolean\n  }\n}\n\nexport namespace GCartRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: string | null\n\n    readonly categories: ReadonlyArray<Categories>\n  }\n\n  export type Categories = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly minCount: number\n\n    readonly maxCount: number\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  }\n\n  export type SideDishes = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly price: Price\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GCreateOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly countWares: number\n\n    readonly items: ReadonlyArray<Items>\n\n    readonly coverPrice: CoverPrice\n\n    readonly transportFee: TransportFee\n\n    readonly discounts: ReadonlyArray<Discounts>\n\n    readonly totalDiscount: TotalDiscount\n\n    readonly totalSum: TotalSum\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly price: Price\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  } & GCartItem.Fragment\n\n  export type Price = GPrice.Fragment\n\n  export type SideDishes = GCartItem.Fragment\n\n  export type CoverPrice = GPrice.Fragment\n\n  export type TransportFee = GPrice.Fragment\n\n  export type Discounts = {\n    readonly __typename?: 'PriceWithDescription'\n\n    readonly code: string\n\n    readonly description: string\n\n    readonly price: _Price\n  }\n\n  export type _Price = GPrice.Fragment\n\n  export type TotalDiscount = GPrice.Fragment\n\n  export type TotalSum = GPrice.Fragment\n}\n\nexport namespace GFinishViewOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly items: ReadonlyArray<Items>\n\n    readonly totalSum: TotalSum\n\n    readonly orderPayments: ReadonlyArray<OrderPayments>\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  } & GCartItem.Fragment\n\n  export type SideDishes = GCartItem.Fragment\n\n  export type TotalSum = GPrice.Fragment\n\n  export type OrderPayments = {\n    readonly __typename?: 'OrderPaymentMethod'\n\n    readonly paymentMethod: PaymentMethod\n  }\n\n  export type PaymentMethod = {\n    readonly __typename?: 'PaymentMethod'\n\n    readonly paymentType: PaymentType\n  }\n\n  export type PaymentType = {\n    readonly __typename?: 'PaymentType'\n\n    readonly enum: PaymentTypeEnum\n  }\n}\n\nexport namespace GFoodMenuCategory {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly pictogram: string | null\n  }\n}\n\nexport namespace GFoodMenuRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly image: string | null\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: string | null\n\n    readonly price: Price\n\n    readonly sideDishCount: number\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GCartPresence {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly items: ReadonlyArray<Items>\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n  }\n}\n\nexport namespace GPickupBranch {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly gps: Gps\n\n    readonly address: Address\n\n    readonly pickupEnabled: boolean\n  } & GCompanyBranchStatus.Fragment\n\n  export type Gps = GGeoPoint.Fragment\n\n  export type Address = GAddress.Fragment\n}\n\nexport namespace GOrderMobile {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly totalSum: TotalSum\n\n    readonly countWares: number\n  } & GCartPresence.Fragment\n\n  export type TotalSum = GPrice.Fragment\n}\n","import * as RM from 'ramda'\n\nexport { RM }\n","import { buildMutation } from './buildMutation'\nimport { buildQuery } from './buildQuery'\n\nexport { buildQuery, buildMutation }\n","import { GGeoPoint } from '../graph/types'\n\nexport type GeoPoint = Omit<GGeoPoint.Fragment, '__typename'>\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { CartItemFragment, PriceFragment } from '../../graph/fragments.graphql'\nimport { GCartView } from '../../graph/types'\n\nexport const OrderFragment = gql`\n  fragment GOrder on Order {\n    id\n    countWares\n    items {\n      ...GCartItem\n      price: priceWithSideDishes {\n        ...GPrice\n      }\n      sideDishes {\n        ...GCartItem\n      }\n    }\n    coverPrice {\n      ...GPrice\n    }\n    transportFee {\n      ...GPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...GPrice\n      }\n    }\n    totalDiscount {\n      ...GPrice\n    }\n    totalSum {\n      ...GPrice\n    }\n  }\n  ${CartItemFragment}\n  ${PriceFragment}\n`\n\nexport const CartViewQuery = gql`\n  query GCartView($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrder\n      deliveryType {\n        enum\n      }\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const QueryCartView = buildQuery<GCartView.Query, GCartView.Variables>(\n  CartViewQuery,\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport { PriceFragment } from '../../graph/fragments.graphql'\nimport { GFoodMenu, GFoodMenuCartPresence } from '../../graph/types'\n\nexport const FoodMenuQuery = gql`\n  query GFoodMenu($branchId: ID!) {\n    wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      enabled: true\n    ) {\n      ...GFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...GFoodMenuRecipe\n      }\n    }\n  }\n\n  fragment GFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n\n  fragment GFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...GPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${PriceFragment}\n`\n\nexport const CartPresenceFragment = gql`\n  fragment GCartPresence on Order {\n    items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FoodMenuCartPresenceQuery = gql`\n  query GFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...GCartPresence\n    }\n  }\n  ${CartPresenceFragment}\n`\n\nexport const QueryFoodMenuCartPresence = buildQuery<\n  GFoodMenuCartPresence.Query,\n  GFoodMenuCartPresence.Variables\n>(FoodMenuCartPresenceQuery)\n\nexport const QueryFoodMenu = buildQuery<GFoodMenu.Query, GFoodMenu.Variables>(\n  FoodMenuQuery,\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { PriceFragment } from '../../graph/fragments.graphql'\nimport { GMobileCart } from '../../graph/types'\nimport { CartPresenceFragment } from '../foodMenu/FoodMenuView.graphql'\n\nexport const OrderMobileFragment = gql`\n  fragment GOrderMobile on Order {\n    id\n    totalSum {\n      ...GPrice\n    }\n    countWares\n    ...GCartPresence\n  }\n  ${PriceFragment}\n  ${CartPresenceFragment}\n`\n\nexport const MobileCartQuery = gql`\n  query GMobileCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const QueryMobileCart = buildQuery<\n  GMobileCart.Query,\n  GMobileCart.Variables\n>(MobileCartQuery)\n","import debug from 'debug'\n\nexport const logMain = debug('c2e:app')\nexport const logMap = debug('c2e:map')\nexport const logDebug = debug('c2e:debug')\nexport const logGraph = debug('c2e:graph')\nexport const logError = debug('c2e:error')\nexport const logAuth = debug('c2e:auth')\nexport const logRouting = debug('c2e:routing')\nexport const logPersist = debug('c2e:persist')\nexport const logOrder = debug('c2e:order')\nexport const logSentry = debug('c2e:sentry')\nexport const logLang = debug('c2e:lang')\n","import React from 'react'\nimport { Button, ButtonProps } from 'reactstrap'\nimport styled, { css } from 'styled-components'\n\nimport { mediaDesktop, mediaMobile } from '../common/Responsive'\nimport { TThemeModel, TThemeModelProps } from '../models/ThemeModel'\nimport { RouteButton } from './RouteButton'\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n  &:active {\n    background-color: #262626 !important;\n  }\n`\n\nPrimaryButton.displayName = 'PrimaryButton'\n\nexport const SecondaryButton = styled(Button)`\n  background-color: ${themeProp('tertiary')};\n  border-color: ${themeProp('tertiary')};\n  &:hover {\n    background-color: ${themeProp('tertiaryHover')};\n    border-color: ${themeProp('tertiaryHover')};\n  }\n`\n\nSecondaryButton.displayName = 'SecondaryButton'\n\nexport const PrimaryRoutedButton = styled(RouteButton)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n`\n\nPrimaryRoutedButton.displayName = 'PrimaryRoutedButton'\n\ninterface IMobileHeaderButton {\n  isConfirm?: boolean\n  theme: TThemeModelProps\n}\n\nexport const MobileHeaderButton = styled(\n  ({ isConfirm, theme, ...props }: ButtonProps & IMobileHeaderButton) => (\n    <Button {...props} />\n  ),\n)`\n  background-color: ${({ isConfirm, theme }) =>\n    isConfirm ? theme.primary : 'white'};\n  color: ${({ isConfirm, theme }) => (isConfirm ? 'white' : theme.primary)};\n`\n\nMobileHeaderButton.displayName = 'MobileHeaderButton'\n\ninterface ISelectButtonThemed {\n  selected?: boolean\n  theme: TThemeModelProps\n}\n\nexport const SelectButtonThemed = styled(\n  ({ selected, theme, ...props }: ButtonProps & ISelectButtonThemed) => (\n    <Button {...props} />\n  ),\n)`\n  ${({ theme, selected }: ISelectButtonThemed) => css`\n    ${mediaDesktop`\n      background-color: ${selected ? theme.tertiary : theme.unselected}\n    `};\n    ${mediaMobile`\n    background-color: ${selected ? theme.tertiary : 'white'}`}\n    border-color: ${selected ? theme.tertiary : theme.unselected};\n    color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    height: 3.7rem;\n    &:hover {\n      background-color: ${\n        selected ? theme.tertiaryHover : theme.unselectedHover\n      };\n      border-color: ${selected ? theme.tertiaryHover : theme.unselectedHover};\n      color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    }\n  `};\n`\n\nSelectButtonThemed.displayName = 'SelectButtonThemed'\n\nfunction themeProp(name: keyof TThemeModelProps) {\n  return ({ theme }: { theme?: TThemeModel }) => theme![name] as string\n}\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { IRootEnvironment, TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    const name = getPath(self).trim() || getType(self).name\n    return debug(`c2e:model/${name}`)\n  },\n  get env() {\n    return getEnv<IRootEnvironment>(self)\n  },\n  get client() {\n    const { client } = getEnv<IRootEnvironment>(self)\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport {\n  AddressFragment,\n  CompanyBranchStatusFragment,\n  GeoPointFragment,\n} from '../../graph/fragments.graphql'\nimport { GPickupMapBranch, GPickupMapBrand } from '../../graph/types'\n\nconst PickupBranchFragment = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...GGeoPoint\n    }\n    address {\n      ...GAddress\n    }\n    pickupEnabled\n    ...GCompanyBranchStatus\n  }\n  ${CompanyBranchStatusFragment}\n  ${GeoPointFragment}\n  ${AddressFragment}\n`\n\nexport const PickupMapBrandQuery = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const PickupMapBranchQuery = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const QueryPickupMapBrand = buildQuery<\n  GPickupMapBrand.Query,\n  GPickupMapBrand.Variables\n>(PickupMapBrandQuery)\n\nexport const QueryPickupMapBranch = buildQuery<\n  GPickupMapBranch.Query,\n  GPickupMapBranch.Variables\n>(PickupMapBranchQuery)\n","import gql from 'graphql-tag'\n\nimport { PriceFragment } from '../graph/fragments.graphql'\nimport { OrderFragment } from '../segments/cart/CartView.graphql'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\n\nconst CartRecipeFragment = gql`\n  fragment GCartRecipe on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...GPrice\n        }\n      }\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const OrderCartForRecipeQuery = gql`\n  query GOrderCartForRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...GCartRecipe\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nexport const OrderCartForItemQuery = gql`\n  query GOrderCartForItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...GCartRecipe\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nconst CreateOrderFragment = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const CreatePickupOrderMutation = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const CreateDeliveryOrderMutation = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const AddToOrderMutation = gql`\n  mutation GAddToOrder($orderId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const AddToOrderMobileMutation = gql`\n  mutation GAddToOrderMobile(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const ChangeOrderItemMutation = gql`\n  mutation GChangeOrderItem($orderId: ID!, $itemId: ID!, $sideDishes: [ID!]) {\n    updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const RemoveOrderItemMutation = gql`\n  mutation GRemoveOrderItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const SubmitOrderMutation = gql`\n  mutation GSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime!\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport const OrderPaymentStatusQuery = gql`\n  query GOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport const VamStatusQuery = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n","import { serviceWorker } from '@speedlo/tools'\nimport React from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloProviderHooks } from 'react-apollo-hooks'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport Pacman from './common/Pacman'\nimport ThemeSwitchProvider from './common/ThemeSwitchProvider'\nimport { RootProvider } from './common/WithRoot'\nimport { createApolloClient } from './createClient'\nimport { installSentry } from './helpers/sentry'\nimport { i18n, I18nManager } from './i18n'\nimport { createRootModel } from './models/RootModel'\n\nconst client = createApolloClient()\nconst root = createRootModel(client)\n\nconst Main = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <RootProvider value={root}>\n      <ApolloProvider client={client}>\n        <ApolloProviderHooks client={client}>\n          <I18nManager>\n            <Router>\n              <ThemeSwitchProvider>\n                <App />\n              </ThemeSwitchProvider>\n            </Router>\n          </I18nManager>\n        </ApolloProviderHooks>\n      </ApolloProvider>\n    </RootProvider>\n  </React.Suspense>\n)\n\ninstallSentry(() => {\n  ReactDOM.render(<Main />, document.getElementById('root'))\n})\n\nserviceWorker.register({\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    if (event.data === 'update-applied') {\n      location.reload()\n    }\n  })\n}\n","import './App.css'\n\nimport { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile, MobileLandscape } from '../common/Responsive'\nimport { ResetPersistenceButton } from './ResetPersistenceButton'\n\nconst LandscapeMessage = styled.div`\n  font-size: 1.1rem;\n  padding: 3rem;\n  vertical-align: center;\n`\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <PageTitle />\n    <Desktop>\n      <DesktopApp />\n    </Desktop>\n    <Mobile>\n      <MobileApp />\n    </Mobile>\n    <MobileLandscape>\n      <LandscapeMessage>\n        <Trans>\n          We know, you like space. Our app is optimised for desktop. Leave your\n          phone in portrait for now.\n        </Trans>\n      </LandscapeMessage>\n    </MobileLandscape>\n    <ResetPersistenceButton />\n  </ErrorContainer>\n)\n\nexport default App\n","import gql from 'graphql-tag'\n\nexport const JsonAddressFragment = gql`\n  fragment GJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n  }\n`\n\nexport const AddressFragment = gql`\n  fragment GAddress on Address {\n    id\n    location {\n      ...GJsonAddress\n    }\n  }\n  ${JsonAddressFragment}\n`\n\nexport const GeoPointFragment = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const PriceFragment = gql`\n  fragment GPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const RecipeFragment = gql`\n  fragment GRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const CartItemFragment = gql`\n  fragment GCartItem on OrderRecipe {\n    id\n    automatic\n    recipe {\n      ...GRecipe\n    }\n  }\n  ${RecipeFragment}\n`\n\nexport const CompanyBranchStatusFragment = gql`\n  fragment GCompanyBranchStatus on CompanyBranch {\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours {\n      id\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n  }\n`\n\nexport const PromoCodeFragment = gql`\n  fragment GPromoCode on PromoCode {\n    id\n    code\n  }\n`\n","import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\nimport { RM } from './ramda'\n\nexport const installSentry = cb => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyGuest = (userId: string, token: string) => {\n  Raven.setUserContext({\n    isGuest: true,\n    userId,\n    token,\n  })\n}\n\nexport const setSentryContext = (context: object) => {\n  Raven.setExtraContext(context)\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n    Raven.showReportDialog()\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  Raven.captureBreadcrumb({\n    category: 'graphql',\n    level: 'debug',\n    message: 'query',\n    data: {\n      ...data,\n      errors,\n    },\n  })\n  errors.forEach(err => {\n    Raven.captureException(new Error(err.message), { extra: err })\n  })\n  const userErrors = errors.filter(RM.propEq('showToUser', true))\n  if (userErrors.length && Raven.lastEventId()) {\n    Raven.showReportDialog({\n      title: RM.head(userErrors)!.message,\n    })\n  }\n}\n\nexport const reportError = (error: Error, meta: object = {}) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n      ...meta,\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","import React from 'react'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.SFC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  let ErrorBoundaryContainer\n\n  if (prod) {\n    ErrorBoundaryContainer = require('react-error-guard')\n      .ProductionErrorBoundary\n    return (\n      <ErrorBoundaryContainer\n        dispatchErrorReporting={({ error, info }) => {\n          reportRenderingError(error, info)\n        }}\n      >\n        {children}\n      </ErrorBoundaryContainer>\n    )\n  } else {\n    ErrorBoundaryContainer = require('react-error-guard').DeveloperErrorBoundary\n    return <ErrorBoundaryContainer>{children}</ErrorBoundaryContainer>\n  }\n}\n","import React from 'react'\nimport DocumentTitle from 'react-document-title'\n\nimport { appConfig } from '../config'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {}\n\nexport const PageTitle: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={root => {\n      if (root.business.isValid) {\n        return (\n          <DocumentTitle\n            title={`${root.business.branch!.brand.name} - ${\n              appConfig.pageTitleSuffix\n            }`}\n          />\n        )\n      }\n      return <DocumentTitle title={appConfig.pageTitleSuffix} />\n    }}\n  />\n)\n","import React from 'react'\n\nimport { SecondaryButton } from '../common/Buttons'\nimport { useRoot } from '../common/WithRoot'\n\ninterface IProps {}\n\nexport const ResetPersistenceButton: React.FC<IProps> = props => {\n  const root = useRoot()\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  return (\n    <SecondaryButton\n      onClick={() => {\n        root.reset()\n        location.reload()\n      }}\n    >\n      Reset uživ. dat [DEV]\n    </SecondaryButton>\n  )\n}\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, ButtonProps } from 'reactstrap'\n\ninterface IProps extends ButtonProps {\n  to: LocationDescriptor\n  replace?: boolean\n}\n\nexport const RouteButton: React.SFC<IProps> = ({\n  to,\n  replace,\n  children,\n  ...buttonProps\n}) => (\n  <Link to={to} replace={replace}>\n    <Button {...buttonProps}>{children}</Button>\n  </Link>\n)\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from '../common/WithRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() =>\n    business.isValid ? (\n      <BrowserRouter\n        basename={business.routerBasePath}\n        key={business.routerBasePath}\n      >\n        {children}\n      </BrowserRouter>\n    ) : null,\n  )\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: process.env.REACT_APP_LOCAL_ENDPOINT,\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: null,\n  pageTitleSuffix: 'LOCAL',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n  })\n}\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { ThemeProvider } from 'styled-components'\n\nimport Pacman from './Pacman'\nimport { useRoot } from './WithRoot'\n\nconst ThemeSwitchProvider: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() =>\n    business.theme.loaded ? (\n      <ThemeProvider theme={business.theme}>\n        {children as React.ReactChild}\n      </ThemeProvider>\n    ) : (\n      <Pacman />\n    ),\n  )\n}\n\nexport default ThemeSwitchProvider\n","import { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport createLogLink from 'apollo-link-log'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from './config'\nimport { createErrorLink } from './graph/errorHandler'\nimport { logGraph } from './helpers/logger'\nimport { isNetworkOnline } from './helpers/offline'\n\nexport type GraphClient = ApolloClient<NormalizedCacheObject>\n\nexport function createApolloClient() {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const loggingLink = createLoggingLink()\n  const httpLink = createHttpLink()\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n\n  const link = ApolloLink.from([\n    loggingLink,\n    retryLink,\n    offlineLink,\n    errorLink,\n    httpLink,\n  ])\n\n  return new ApolloClient({ link, cache })\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createLoggingLink() {\n  return createLogLink({\n    enabled: process.env.REACT_APP_STAGE === 'dev',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: (error, _operation) => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { ErrorResponse, onError } from 'apollo-link-error'\nimport debug from 'debug'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nconst log = debug('graph:error')\n\nexport const errorHandler = ({\n  graphQLErrors,\n  networkError,\n  operation,\n}: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n    graphQLErrors.map(({ message, locations, path }) =>\n      log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    )\n  }\n  if (networkError) {\n    log(`[Network error]: ${networkError}`)\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","var map = {\n\t\"./cs/messages.js\": [\n\t\t440,\n\t\t5\n\t],\n\t\"./de/messages.js\": [\n\t\t441,\n\t\t6\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t443,\n\t\t8\n\t],\n\t\"./en/messages.js\": [\n\t\t442,\n\t\t7\n\t],\n\t\"./pl/messages.js\": [\n\t\t444,\n\t\t9\n\t],\n\t\"./sk/messages.js\": [\n\t\t445,\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 403;\nmodule.exports = webpackAsyncContext;","import {\n  applySnapshot,\n  getSnapshot,\n  Instance,\n  SnapshotIn,\n  types,\n} from 'mobx-state-tree'\n\nimport { GraphClient } from '../createClient'\nimport { logDebug } from '../helpers/logger'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .actions(self => {\n    let initialSnapshot\n    return {\n      afterCreate() {\n        const { business, map, ...snapshot } = getSnapshot(self)\n        initialSnapshot = snapshot\n      },\n      reset() {\n        logDebug(initialSnapshot)\n        applySnapshot(self, initialSnapshot)\n      },\n      init: async () => {\n        self.auth.attachAuthLinkToClient()\n        await Promise.all(self.persistedModels.map(persistModel))\n        await Promise.all([\n          self.business.queryBusiness(),\n          self.order.checkPaymentStatus(),\n        ])\n        initialSnapshot.business = getSnapshot(self.business)\n      },\n    }\n  })\n\nexport interface IRootEnvironment {\n  client: GraphClient\n  fetch: TFetch\n  geolocation: Geolocation\n}\n\nexport function createRootModel(client: GraphClient) {\n  const root = RootModel.create({}, {\n    client,\n    fetch: window.fetch,\n    geolocation: navigator.geolocation,\n  } as IRootEnvironment)\n  root.init()\n  return root\n}\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersist('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersist('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersist('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { setContext } from 'apollo-link-context'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logAuth } from '../helpers/logger'\nimport { identifyGuest } from '../helpers/sentry'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return self.token !== null\n    },\n    getClientHeaders() {\n      return {\n        Authorization: `Bearer ${self.token}`,\n      }\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      identifyGuest(userId, token)\n    },\n  }))\n  .actions(self => {\n    let fetching\n\n    const fetch = async () => {\n      if (!fetching) {\n        fetching = fetchToken()\n        const { token, userId } = await fetching\n        self.authenticate(token, String(userId))\n        fetching = null\n      }\n      return fetching\n    }\n\n    const authLink = setContext(async () => {\n      if (!self.token) {\n        await fetch()\n      }\n      return { headers: self.getClientHeaders() }\n    })\n\n    return {\n      attachAuthLinkToClient() {\n        self.client.link = authLink.concat(self.client.link)\n      },\n    }\n  })\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId && snapshot.token) {\n      identifyGuest(snapshot.userId, snapshot.token)\n    }\n    return snapshot\n  })\n\nfunction fetchToken() {\n  const { endpoint } = appConfig\n  if (!endpoint) {\n    throw new Error('Missing endpoint in configuration.')\n  }\n  logAuth('retrieving guest token...')\n  const url = `${endpoint}/users/token?guest=true`\n  const options = {\n    headers: {\n      Accept: 'application/json',\n    },\n  }\n  logAuth('token retrieved')\n  return fetch(url, options).then(response => response.json())\n}\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport {\n  GBusinessCodeLookup,\n  GCompanyBranch,\n  OrderOriginEnum,\n} from '../graph/types'\nimport { logMain } from '../helpers/logger'\nimport { setSentryContext } from '../helpers/sentry'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\nimport { BranchLookupQuery } from './BusinessModel.graphql'\nimport { ThemeModel } from './ThemeModel'\n\ntype TBranch = Omit<GCompanyBranch.Fragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<GCompanyBranch.Country>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    theme: types.optional(ThemeModel, {}),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      // app can be built with a specific code for a purpose of mobile apps\n      let code = process.env.REACT_APP_BUSINESS_CODE || null\n      if (!code) {\n        // mostly used in DEV because it's not possible to use subdomains for\n        // business resolution ... use either code from url or stored one as fallback\n        const urlCode = readBusinessCodeFromUrl()\n        code = urlCode || self.code\n      }\n      return code\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: GBusinessCodeLookup.Lookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n\n      if (branch.id !== self.root.order.branchId) {\n        self.root.order.orderCancel()\n      }\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    mockBranchData(branch: TBranch) {\n      self.branch = branch\n    },\n  }))\n  .actions(self => ({\n    queryBusiness: async () => {\n      const { data } = await self.client.query<GBusinessCodeLookup.Query>({\n        query: BranchLookupQuery,\n        variables: {\n          code: self.requestedCode,\n          url: window.location.href,\n        },\n      })\n\n      if (!(data && data.lookup && data.lookup.branch)) {\n        logMain('no business found, used code %s', self.requestedCode)\n        redirectAway()\n        return\n      }\n\n      self.updateFromLookup(data.lookup)\n\n      if (self.branchId) {\n        const stylesQuery = self.theme.queryStyles(self.branchId)\n        // no need to wait for styles if some were loaded previously\n        if (!self.theme.loaded) {\n          await stylesQuery\n        }\n      }\n\n      setSentryContext({\n        requestedCode: self.requestedCode,\n        branchId: self.branchId,\n        brandId: self.brandId,\n        companyId: self.companyId,\n        isBrand: self.isBrand,\n      })\n\n      logMain(\n        'identified branch %s, brand %s; company %s, isBrand: %s',\n        self.branchId,\n        self.brandId,\n        self.companyId,\n        self.isBrand,\n      )\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId: branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import gql from 'graphql-tag'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const BranchLookupQuery = gql`\n  query GBusinessCodeLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n  ${CompanyBranchFragment}\n`\n","import Color from 'color'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { GCompanyBranchStyle } from '../graph/types'\nimport { BaseModel } from './BaseModel'\nimport { CompanyBranchStyleQuery } from './ThemeModel.graphql'\n\n// Fallback colors\nconst defaultPrimary = '#54984a'\nconst defaultSecondary = '#99230e'\nconst defaultTertiary = '#d9a700'\n\nexport const ThemeModel = BaseModel.named('Theme')\n  .props({\n    storeLogo: types.maybeNull(types.string),\n    storeLogoMobile: types.maybeNull(types.string),\n    backgroundCart: types.maybeNull(types.string),\n    primary: types.maybeNull(types.string),\n    secondary: types.maybeNull(types.string),\n    secondaryHover: types.maybeNull(types.string),\n    tertiary: types.maybeNull(types.string),\n    tertiaryHover: types.maybeNull(types.string),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    loaded: false,\n  })\n  .actions(self => ({\n    applyStyle(styles: GCompanyBranchStyle.Styles) {\n      Object.assign(self, {\n        primary: styles.active ? styles.active : defaultPrimary,\n        secondary: styles.main ? styles.main : defaultSecondary,\n        secondaryHover: calcHoverColor(\n          styles.main ? styles.main : defaultSecondary,\n        ),\n        tertiary: styles.mainSecondary ? styles.mainSecondary : defaultTertiary,\n        tertiaryHover: calcHoverColor(\n          styles.mainSecondary ? styles.mainSecondary : defaultTertiary,\n        ),\n        tertiaryText: 'white',\n        unselected: '#E5E5E5',\n        unselectedHover: '#EDEDED',\n        unselectedText: '#5A5A5A',\n        storeLogo: styles.storeLogo,\n        storeLogoMobile: styles.storeLogoMobile,\n        backgroundCart: styles.backgroundCart,\n      })\n      self.loaded = true\n    },\n  }))\n  .actions(self => ({\n    queryStyles: async (branchId: ID) => {\n      const { data } = await self.client.query<\n        GCompanyBranchStyle.Query,\n        GCompanyBranchStyle.Variables\n      >({\n        query: CompanyBranchStyleQuery,\n        variables: { branchId },\n      })\n      self.applyStyle(data.companyBranch.styles)\n    },\n  }))\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport interface TThemeModel extends Instance<typeof ThemeModel> {}\nexport interface TThemeModelProps extends SnapshotIn<typeof ThemeModel> {}\n","import gql from 'graphql-tag'\n\nexport const CompanyBranchStyleQuery = gql`\n  query GCompanyBranchStyle($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n","import { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport type TConfigModel = typeof ConfigModel.Type\nexport type TConfigModelProps = typeof ConfigModel.SnapshotType\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { GResolveLocation } from '../graph/types'\nimport { formatAddress } from '../helpers/formats'\nimport { GeoPoint, gpsToLatLng } from '../helpers/gps'\nimport { i18n } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\nimport { ResolveLocationQuery } from './LocationModel.graphql'\n\ninterface IVolatileProps {\n  branchId: MaybeID\n  isOpen: boolean\n  isResolved: boolean\n  isStreetAddress: boolean\n  inDeliveryLocation: boolean\n  geolocationDisabled: boolean\n  geolocationPoint: Maybe<GeoPoint>\n  isResolving: boolean\n}\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.maybe(types.number),\n    longitude: types.maybe(types.number),\n    searchValue: types.maybe(types.string),\n    address: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(self => ({\n    branchId: null,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    geolocationPoint: null,\n    isResolving: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(self.env.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== undefined || self.longitude !== undefined\n    },\n    get hasAddress() {\n      return Boolean(self.address)\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get hasFinishedSearch() {\n      return (\n        ((self.searchValue && self.searchValue.length > 0) || self.address) &&\n        !self.isResolving\n      )\n    },\n    get geoPoint() {\n      if (this.hasLocation) {\n        return {\n          latitude: self.latitude!,\n          longitude: self.longitude!,\n        }\n      }\n      return null\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      if (this.geoPoint) {\n        return gpsToLatLng(this.geoPoint)\n      }\n      return null\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: any) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: GResolveLocation.ResolveLocation) {\n      const { finalAddress: address } = result\n      if (address) {\n        self.address = formatAddress(address)\n      }\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n      if (result.isResolved) {\n        self.setLocation(result.gpsCoordinates)\n        self.log('resolved as %s', self.address)\n      } else {\n        self.log('not resolved')\n      }\n    },\n    setVolatileProps(props: Partial<IVolatileProps>) {\n      Object.assign(self, props)\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = false\n    },\n    clearAddress() {\n      self.address = ''\n    },\n    setIsResolving(state: boolean) {\n      self.isResolving = state\n    },\n  }))\n  .actions(self => {\n    const resolver = async (vars?: Partial<GResolveLocation.Variables>) => {\n      self.setIsResolving(true)\n\n      const variables: GResolveLocation.Variables = {\n        ...self.resolutionTarget,\n        ...vars,\n      }\n      const { data } = await self.client.query<GResolveLocation.Query>({\n        query: ResolveLocationQuery,\n        variables,\n      })\n      if (data !== null) {\n        self.setResolutionResult(data.resolveLocation)\n      }\n      self.setIsResolving(false)\n    }\n    return {\n      validateUserLocation() {\n        if (self.hasLocation) {\n          self.log(\n            'validating stored user location %s, %s',\n            self.latitude,\n            self.longitude,\n          )\n          resolver({ latitude: self.latitude, longitude: self.longitude })\n        }\n      },\n      withUserAddress(address: string) {\n        self.searchValue = address\n        if (address === '') {\n          self.clearAddress()\n        } else {\n          self.log('resolving user address: %s', address)\n          resolver({ address })\n        }\n      },\n      withUserLocation(userLocation: GeoPoint) {\n        self.log('with user location: %j', userLocation)\n        self.latitude = userLocation.latitude\n        self.longitude = userLocation.longitude\n        resolver(userLocation)\n      },\n      useGeolocationResult(point: GeoPoint) {\n        self.geolocationPoint = point\n      },\n      attemptGeolocation() {\n        self.log('geolocating...')\n        self.env.geolocation.getCurrentPosition(\n          ({ coords }) => {\n            const { latitude, longitude } = coords\n            self.log(\n              'geolocated at coords %s, %s (acc: %s)',\n              coords.latitude,\n              coords.longitude,\n              coords.accuracy,\n            )\n            this.useGeolocationResult({ latitude, longitude })\n          },\n          err => {\n            self.log(new VError('failed geolocation', err))\n            self.disableGeolocation()\n            window.alert(i18n.t`Your browser does not support geolocation.`)\n          },\n          {\n            enableHighAccuracy: true,\n            maximumAge: 60 * 1000,\n          },\n        )\n      },\n    }\n  })\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import { Observer } from 'mobx-react'\nimport React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = false }) => {\n  const root = useRoot()\n  if (observe === true) {\n    return <Observer>{() => render(root)}</Observer>\n  }\n  return render(root)\n}\n\nexport const RootProvider = rootContext.Provider\n","import { GJsonAddress } from '../graph/types'\n\nexport const formatAddress = (address: GJsonAddress.Fragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import gql from 'graphql-tag'\n\nimport { JsonAddressFragment } from '../graph/fragments.graphql'\n\nconst LocationResolutionFragment = gql`\n  fragment GLocationResolution on AddressResolvedLocation {\n    finalAddress {\n      ...GJsonAddress\n    }\n    isResolved\n    isValidAddress\n    inDeliveryLocation\n    gpsCoordinates {\n      latitude\n      longitude\n    }\n    companyBranch {\n      id\n      isOpen\n    }\n  }\n  ${JsonAddressFragment}\n`\n\nexport const ResolveLocationQuery = gql`\n  query GResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      ...GLocationResolution\n    }\n  }\n  ${LocationResolutionFragment}\n`\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { GeoPoint, gpsToLatLng, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n  clickPoint: Maybe<GeoPoint>\n}\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n    clickPoint: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panToLocation(gps: GeoPoint, radiusMeters: number = 2000) {\n      if (self.mapRef) {\n        // const bounds = getBounds([\n        //   computeDestinationPoint(gps, radiusMeters, 135), // SE corner\n        //   computeDestinationPoint(gps, radiusMeters, 315), // NW corner\n        // ])\n\n        // // @ts-ignore padding missing in types\n        // self.mapRef.panToBounds(\n        //   {\n        //     west: bounds.minLng,\n        //     east: bounds.maxLng,\n        //     north: bounds.minLat,\n        //     south: bounds.maxLat,\n        //   },\n        //   20,\n        // )\n        self.mapRef.panTo(gpsToLatLng(gps))\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import { addHours } from 'date-fns'\nimport { when } from 'mobx'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { FetchResult } from 'react-apollo'\nimport { VError } from 'verror'\n\nimport { RecipeFragment } from '../graph/fragments.graphql'\nimport {\n  DeliveryTypeEnum,\n  GAddToOrder,\n  GChangeOrderItem,\n  GCreateDeliveryOrder,\n  GCreateOrder,\n  GCreatePickupOrder,\n  GOrder,\n  GOrderMobile,\n  GOrderPaymentStatus,\n  GRecipe,\n  GRemoveOrderItem,\n  GSubmitOrder,\n  GVamStatus,\n  PaymentGateEnum,\n} from '../graph/types'\nimport { executeGoPayPayment } from '../helpers/gopay'\nimport { logMain, logOrder } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { reportError } from '../helpers/sentry'\nimport { i18n } from '../i18n'\nimport { OrderFragment } from '../segments/cart/CartView.graphql'\nimport { FoodMenuQuery } from '../segments/foodMenu/FoodMenuView.graphql'\nimport {\n  PickupMapBranchQuery,\n  PickupMapBrandQuery,\n} from '../segments/map/PickupMap.graphql'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\nimport { IOrderFormState } from '../segments/orderForm/OrderFormSetup'\nimport { BaseModel } from './BaseModel'\nimport {\n  AddToOrderMobileMutation,\n  AddToOrderMutation,\n  ChangeOrderItemMutation,\n  CreateDeliveryOrderMutation,\n  CreatePickupOrderMutation,\n  OrderCartForRecipeQuery,\n  OrderPaymentStatusQuery,\n  RemoveOrderItemMutation,\n  SubmitOrderMutation,\n  VamStatusQuery,\n} from './OrderModel.graphql'\n\ninterface IVolatileProps {\n  isSubmitting: boolean\n  isGoPayChecking: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  agreements: TAgreement[]\n  lastActiveRecipeId: MaybeID\n  isVamInitialized: boolean\n}\n\nexport type TAgreement = GVamStatus.VamStatus\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    payment: PaymentGateEnum.Gopay,\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n  })\n  .volatile<IVolatileProps>(self => ({\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null,\n    agreements: [],\n    lastActiveRecipeId: null,\n    isVamInitialized: false,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get fragmentOrderId() {\n      return `Order-${self.orderId}`\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return '+'\n    },\n    getSubmitVariables(formValues: IOrderFormState): GSubmitOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstname,\n          lastName: formValues.lastname,\n          emails: [{ email: formValues.email }],\n          phones: [{ phone: `${formValues.phonePrefix}${formValues.phone}` }],\n        },\n        note: formValues.note,\n        paymentGate: formValues.payment,\n        deliverAt: addHours(new Date(), 1).toISOString(),\n        agreements: formValues.agreements\n          .filter(RM.propEq('isConfirmed', true))\n          .map(RM.prop('id')),\n      }\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: GCreateOrder.Fragment) {\n      self.orderId = result.id\n      self.branchId = result.companyBranch.id\n      logMain('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        logMain('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        logMain(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n      self.isVamInitialized = false\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    useAgreements(agreements: ReadonlyArray<TAgreement>) {\n      if (Array.isArray(agreements)) {\n        self.agreements = agreements\n      }\n      self.isVamInitialized = true\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    async queryPaymentStatus(\n      orderId: ID = self.orderId!,\n    ): Promise<GOrderPaymentStatus.Status | null> {\n      const variables: GOrderPaymentStatus.Variables = {\n        orderId,\n      }\n      try {\n        const result = await self.client.query<GOrderPaymentStatus.Query>({\n          fetchPolicy: 'no-cache',\n          query: OrderPaymentStatusQuery,\n          variables,\n        })\n        return result.data.status\n      } catch (err) {\n        logOrder('failed to verify payment status for order %s: ', orderId)\n        return null\n      }\n    },\n    rememberFormValues(values: IOrderFormState) {\n      if (self.root.user.shouldRememberForm) {\n        self.firstname = values.firstname\n        self.lastname = values.lastname\n        self.email = values.email\n        self.phone = values.phone\n        self.phonePrefix = values.phonePrefix\n        self.note = values.note\n      } else {\n        self.firstname = ''\n        self.lastname = ''\n        self.email = ''\n        self.phone = ''\n        self.phonePrefix = ''\n        self.note = ''\n      }\n    },\n  }))\n  .actions(self => ({\n    async createDeliveryOrder() {\n      const { business, location } = self.root\n      if (!location.geoPoint) {\n        return null\n      }\n      const variables: GCreateDeliveryOrder.Variables = {\n        gps: location.geoPoint,\n        orderOrigin: business.orderOrigin,\n        brandId: business.isBrand ? business.brandId : undefined,\n        branchId: business.isBrand ? undefined : business.branchId,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreateDeliveryOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreateDeliveryOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    async createPickupOrder(branchId: ID) {\n      const { business } = self.root\n      const variables: GCreatePickupOrder.Variables = {\n        branchId,\n        orderOrigin: business.orderOrigin,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreatePickupOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreatePickupOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    prefetchPickup() {\n      const { business } = self.root\n      if (business.isBrand) {\n        self.client.query({\n          query: PickupMapBrandQuery,\n          variables: { brandId: business.brandId },\n        })\n      } else {\n        self.client.query({\n          query: PickupMapBranchQuery,\n          variables: { branchId: business.branchId },\n        })\n      }\n    },\n    prefetchFoodMenu(branchId?: ID) {\n      if (branchId) {\n        self.client.query({ query: FoodMenuQuery, variables: { branchId } })\n      }\n    },\n    prefetchFood(recipeId: ID) {\n      self.client.query({\n        query: OrderCartForRecipeQuery,\n        variables: { recipeId },\n      })\n    },\n    async addFromRecipe(recipeId: ID, sideDishes: Array<ID> = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrder.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderFragment,\n        fragmentName: 'GOrder',\n      })\n      const recipe = self.client.readFragment<GRecipe.Fragment>({\n        id: `Recipe-${recipeId}`,\n        fragment: RecipeFragment,\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              price: {\n                __typename: 'PriceConverted',\n                value: 0,\n                formattedValue: '---',\n              },\n              recipe: { ...recipe, sideDishes: [] },\n              sideDishes: [],\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async addFromRecipeMobile(recipeId: ID, sideDishes: Array<ID> = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrderMobile.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderMobileFragment,\n        fragmentName: 'GOrderMobile',\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              recipe: { __typename: 'Recipe', id: recipeId },\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMobileMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async updateItem(itemId: ID, sideDishes: Array<ID> = []) {\n      const variables: GChangeOrderItem.Variables = {\n        orderId: self.orderId!,\n        itemId,\n        sideDishes,\n      }\n      await self.client.mutate({ mutation: ChangeOrderItemMutation, variables })\n    },\n    removeItemFromCart(itemId: ID) {\n      const variables: GRemoveOrderItem.Variables = {\n        itemId,\n      }\n      const current = self.client.readFragment<GOrder.Fragment>({\n        fragment: OrderFragment,\n        fragmentName: 'GOrder',\n        id: self.fragmentOrderId,\n      })\n      self.client.mutate({\n        mutation: RemoveOrderItemMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          destroyOrderRecipe: {\n            ...current,\n            countWares: current ? current.countWares - 1 : 0,\n            items: current\n              ? current.items.filter(item => item.id !== itemId)\n              : [],\n          },\n        },\n      })\n    },\n    async initVam() {\n      const variables: GVamStatus.Variables = {\n        input: {\n          orderId: self.orderId!,\n          email: self.email,\n          firstname: self.firstname,\n          lastname: self.lastname,\n          phone: self.phone,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    async updateVam(formValues: IOrderFormState) {\n      const phone = `${formValues.phonePrefix.trim()}${formValues.phone.trim()}`\n      const email = formValues.email.trim()\n      const firstname = formValues.firstname.trim()\n      const lastname = formValues.lastname.trim()\n      const variables: GVamStatus.Variables = {\n        input: {\n          email,\n          phone,\n          firstname,\n          lastname,\n          orderId: self.orderId!,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    submitOrder: async (formValues: IOrderFormState) => {\n      self.isSubmitting = true\n      let result: FetchResult\n\n      self.rememberFormValues(formValues)\n\n      try {\n        result = await self.client.mutate({\n          fetchPolicy: 'no-cache',\n          mutation: SubmitOrderMutation,\n          variables: self.getSubmitVariables(formValues),\n          refetchQueries: ['GCartView', 'GMobileCart'],\n        })\n      } catch (err) {\n        self.submitFailed()\n        throw reportError(new VError('submit mutation error: %j', err))\n      }\n\n      if ((result.errors && result.errors.length) || !result.data) {\n        self.submitFailed()\n        throw reportError(\n          new VError('Submit graphql errors: %j', result.errors),\n        )\n      }\n\n      const submitResult: GSubmitOrder.FinishOrder = result.data.finishOrder\n      if (submitResult.userErrors && submitResult.userErrors.length) {\n        self.submitFailed(submitResult.userErrors)\n        throw reportError(\n          new VError('Order user errors: %j', submitResult.userErrors),\n        )\n      }\n\n      if (formValues.payment === PaymentGateEnum.Cash) {\n        self.submitFinished()\n        return\n      }\n\n      if (!submitResult.gopayUrl) {\n        self.submitFailed()\n        throw reportError(new Error('GoPay url missing from response'))\n      }\n\n      await executeGoPayPayment(submitResult.gopayUrl)\n\n      self.goPayStatusCheck(true)\n      const paymentStatus = await self.queryPaymentStatus()\n      self.goPayStatusCheck(false)\n\n      if (paymentStatus && paymentStatus.isSuccess) {\n        self.submitFinished()\n      } else {\n        self.submitFailed(\n          (paymentStatus && paymentStatus.userErrors) || undefined,\n        )\n        throw reportError(new VError('GoPay payment was not successful'))\n      }\n    },\n  }))\n  .actions(self => ({\n    checkPaymentStatus() {\n      const parsedUrl = new window.URL(window.location.href)\n      // the orderId will come in URL when GoPay payment was handled by redirect\n      const orderId = parsedUrl.searchParams.get('orderId')\n      if (!orderId) {\n        return\n      }\n      when(\n        () => self.root.auth.isValid,\n        async () => {\n          // delay displaying status checking modal\n          const checkDelay = setTimeout(() => self.goPayStatusCheck(true), 500)\n          const paymentStatus = await self.queryPaymentStatus(orderId)\n\n          clearTimeout(checkDelay)\n          self.goPayStatusCheck(false)\n\n          if (paymentStatus && paymentStatus.isSuccess) {\n            self.orderPaid(orderId)\n            parsedUrl.search = ''\n            parsedUrl.pathname = '/finish'\n            location.replace(parsedUrl.toString())\n          } else {\n            const phone = self.root.business.branch!.phone\n            self.submitFailed([\n              i18n.t`We were unable to verify status of your payment. Please contact operator using number ${phone}`,\n            ])\n            return\n          }\n        },\n      )\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import scriptjs from 'scriptjs'\n\nimport { logOrder } from './logger'\n\nconst embedScript = 'https://gate.gopay.cz/gp-gw/js/embed.js'\nconst embedScriptSandbox = 'https://gw.sandbox.gopay.com/gp-gw/js/embed.js'\n\ninterface ICheckoutResult {\n  url: string\n  id: number\n}\n\nexport async function executeGoPayPayment(url: string) {\n  logOrder('GoPay init', url)\n  await loadScript(url)\n  return checkout(getOptions(url))\n}\n\nfunction getOptions(url: string) {\n  // const isSafari = /^((?!chrome|android|mobile).)*safari/i.test(\n  //   navigator.userAgent,\n  // )\n  // logOrder('Browser is desktop Safari', isSafari)\n  return { gatewayUrl: url, inline: true }\n}\n\nfunction loadScript(url: string) {\n  const scriptUrl = url.includes('gw.sandbox.gopay.com')\n    ? embedScriptSandbox\n    : embedScript\n  logOrder('GoPay script url', scriptUrl)\n  return new Promise(resolve => {\n    scriptjs(scriptUrl, resolve)\n  })\n}\n\nfunction checkout(options: object): Promise<number> {\n  return new Promise(resolve => {\n    logOrder('GoPay checkout')\n    // @ts-ignore\n    _gopay.checkout(options, function(result: ICheckoutResult) {\n      logOrder('GoPay result', result)\n      resolve(result.id)\n    })\n  })\n}\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Mutation, MutationProps, MutationResult } from 'react-apollo'\n\nexport function buildMutation<TData, TVariables>(mutation: DocumentNode) {\n  interface IProps\n    extends Omit<MutationProps<TData, TVariables>, 'mutation' | 'children'> {\n    render(data: MutationResult<TData>): ReactNode\n  }\n  const GMutation: React.SFC<IProps> = () => {\n    const { render, ...props } = this.props\n    return (\n      <Mutation mutation={mutation} {...props}>\n        {render}\n      </Mutation>\n    )\n  }\n  return GMutation\n}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    rememberForm: types.maybeNull(types.boolean),\n  })\n  .volatile(self => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n  }))\n  .actions(self => ({\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n  }))\n  .views(self => ({\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.SFC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport * as detector from 'locales-detector'\nimport React, { useState } from 'react'\n\nimport Pacman from './common/Pacman'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC = ({ children }) => {\n  const [isReady, setReady] = useState(false)\n  const [language] = useState(detectLanguage)\n\n  useAsyncEffect(async () => {\n    await changeLanguage(language)\n    setReady(true)\n  })\n\n  if (isReady === false) {\n    return <Pacman />\n  }\n\n  return (\n    <I18nProvider language={language} i18n={i18n}>\n      {children}\n    </I18nProvider>\n  )\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.UrlDetector('lang'), new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages: ReadonlyArray<string> = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport RedBox from 'redbox-react'\nimport { VError } from 'verror'\n\nimport Pacman from '../common/Pacman'\nimport { logError } from '../helpers/logger'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n  }\n  const GQuery: React.SFC<IProps> = ({\n    render,\n    renderFragment,\n    renderLoading = true,\n    renderError = true,\n    children,\n    ...props\n  }) => (\n    <Query query={query} {...props}>\n      {result => {\n        if (result.loading || !result.data) {\n          if (typeof renderLoading === 'function') {\n            return renderLoading(result)\n          } else if (renderLoading === true) {\n            return <Pacman />\n          }\n        }\n        if (result.error) {\n          reportError(result.error)\n          logError(result.error)\n          if (typeof renderError === 'function') {\n            return renderError(result)\n          } else if (renderError === true) {\n            if (process.env.NODE_ENV === 'production') {\n              throw new VError(result.error, 'Query error')\n            }\n            return <RedBox error={result.error} />\n          } else {\n            return null\n          }\n        }\n        if (result.data) {\n          if (renderFragment) {\n            return <>{renderFragment(result.data, result)}</>\n          }\n          if (render) {\n            return render(result.data, result)\n          }\n        }\n        return children || null\n      }}\n    </Query>\n  )\n\n  return GQuery\n}\n"],"sourceRoot":""}