{"version":3,"sources":["helpers/gps.ts","common/AlertModal.tsx","hooks/useOrderModel.ts","common/Pacman.tsx","graph/buildQuery.tsx","segments/map/PickupMap.graphql.ts","hooks/useAlertModal.ts","helpers/formats.ts","app/useRoot.tsx","graph/generated.ts","i18n.tsx","config.ts","app/ThemeSwitchProvider.tsx","helpers/logger.ts","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","common/Responsive.tsx","../node_modules/@speedlo/assets/flags sync /^/.*/.svg$","../node_modules/@speedlo/assets/logos sync /^/logo/-.*/.svg$","common/ErrorContainer.tsx","common/PageTitle.tsx","app/AddSentryContext.tsx","app/BusinessLoader.tsx","app/IdentifyGuest.tsx","app/LandscapeMessage.tsx","app/ResetOrderAtRoot.tsx","app/ResetPersistenceButton.tsx","app/SuspendOnInit.tsx","app/hooks/useSuspenseWhen.ts","app/App.tsx","app/Router.tsx","hooks/useAnalytics.ts","helpers/persistModel.ts","models/BaseModel.ts","models/AuthModel.ts","models/BannerModel.ts","models/BusinessModel.ts","models/CartModel.ts","models/ConfigModel.ts","models/LocationModel.ts","models/MapModel.ts","models/OrderModel.graphql.ts","models/OrderModel.ts","models/UserModel.ts","models/RootModel.ts","index.tsx","graph/createClient.ts","common/Buttons.tsx","common/RouteButton.tsx"],"names":["__webpack_require__","d","__webpack_exports__","gpsToLatLngLit","gpsToLatLng","latLngToGps","gps","lat","Number","latitude","lng","longitude","google","maps","LatLng","latLng","AlertModal","_ref","isOpen","headerText","onClose","children","modalProps","Object","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_3__","assign","toggle","className","data-testid","tag","Container","useOrderModel","_app_useRoot__WEBPACK_IMPORTED_MODULE_0__","useRoot","order","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","Pacman","_ref$noMargin","noMargin","style","display","alignSelf","justifyContent","name","marginTop","buildQuery","query","render","renderFragment","_ref$renderLoading","renderLoading","renderError","props","react__WEBPACK_IMPORTED_MODULE_1___default","react_apollo__WEBPACK_IMPORTED_MODULE_2__","result","loading","data","_common_Pacman__WEBPACK_IMPORTED_MODULE_3__","error","Fragment","PickupBranchFragment","gql","_templateObject","FCompanyBranchStatusFragmentDoc","FGeoPointFragmentDoc","FAddressFragmentDoc","PickupMapBrandQuery","_templateObject2","PickupMapBranchQuery","_templateObject3","QueryPickupMapBrand","QueryPickupMapBranch","useAlertModal","_React$useState","React","useState","_React$useState2","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","alertModal","setAlertModal","header","body","formatTime","formatAddress","date_fns_fp__WEBPACK_IMPORTED_MODULE_0__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_1__","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","parse","address","street","houseNumber","concat","city","state","RootProvider","rootContext","createContext","undefined","root","useContext","Error","Provider","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","WeekDayEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","LanguageEnum","MobilePlatformEnum","WareUnitEnum","AvailabilityTypeEnum","AllergenEnum","WarePriceTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderStateEnum","OrderBillingTypeEnum","PaymentGateEnum","PaymentTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","OrderOriginEnum","ZoneTypeEnum","ShiftUserStateEnum","OrderOriginCategoryEnum","WareCategoryTypeEnum","SubscriptionActionType","WareRequirementEnum","SettingTypeEnum","GCreateOrderFragmentDoc","FJsonAddressFragmentDoc","_templateObject4","_templateObject5","GPickupBranchFragmentDoc","_templateObject6","FCompanyBranchFragmentDoc","_templateObject7","FPromoCodeFragmentDoc","_templateObject8","FRecipeFragmentDoc","_templateObject9","FCartItemFragmentDoc","_templateObject10","FPriceFragmentDoc","_templateObject11","FCartGoodsFragmentDoc","_templateObject12","FCartStaticFragmentDoc","_templateObject13","FCartSummaryFragmentDoc","_templateObject14","FRecipeDetailFragmentDoc","_templateObject15","FOrderFinishedFragmentDoc","_templateObject16","FCartPresenceFragmentDoc","_templateObject17","FFoodMenuCategoryFragmentDoc","_templateObject18","FFoodMenuRecipeFragmentDoc","_templateObject19","FShopOpeningHoursFragmentDoc","_templateObject20","_templateObject21","_templateObject22","_templateObject23","_templateObject24","_templateObject25","_templateObject26","_templateObject27","_templateObject28","QBusinessLookupDocument","_templateObject29","useQBusinessLookup","variables","baseOptions","Hooks","QThemeStyleDocument","_templateObject30","useQThemeStyle","GResolveLocationDocument","_templateObject31","MAddToCartDocument","_templateObject32","useMAddToCart","MChangeCartItemDocument","_templateObject33","useMChangeCartItem","MRemoveCartItemDocument","_templateObject34","useMRemoveCartItem","QCartDocument","_templateObject35","useQCart","QCartItemDocument","_templateObject36","useQCartItem","QCartRecipeDocument","_templateObject37","useQCartRecipe","QOrderFinishDocument","_templateObject38","useQOrderFinish","QFoodMenuDocument","_templateObject39","useQFoodMenu","QFoodMenuCartPresenceDocument","_templateObject40","useQFoodMenuCartPresence","QInitialDeliveryLocationDocument","_templateObject41","useQInitialDeliveryLocation","MOrderDeliveryTimeDocument","_templateObject42","useMOrderDeliveryTime","_templateObject43","MOrderPromoAddDocument","_templateObject44","useMOrderPromoAdd","MOrderPromoRemoveDocument","_templateObject45","useMOrderPromoRemove","MOrderTipUpdateDocument","_templateObject46","useMOrderTipUpdate","MSubmitOrderDocument","_templateObject47","useMSubmitOrder","QOrderFormDocument","_templateObject48","useQOrderForm","QOrderPaymentStatusDocument","_templateObject49","QOrderPromoCodesDocument","_templateObject50","useQOrderPromoCodes","QOrderTimePickerDocument","_templateObject51","useQOrderTimePicker","QSmartBannerDocument","_templateObject52","useQSmartBanner","QShopHeaderBranchDocument","_templateObject53","useQShopHeaderBranch","QShopHeaderIntroDocument","_templateObject54","useQShopHeaderIntro","i18n","setupI18n","I18nManager","rootInit","user","useEffect","autorun","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","mark","_callee","wrap","_context","prev","next","languageActivated","loadCatalog","language","activate","activateLanguage","logLang","stop","react__WEBPACK_IMPORTED_MODULE_6___default","_lingui_react__WEBPACK_IMPORTED_MODULE_4__","_callee2","lang","catalog","_context2","sent","load","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","appConfig","fallbackLanguage","supportedLanguages","endpoint","persistenceKey","process","REACT_APP_LOCAL_KEY","googleMapsApi","redirectOnFail","sentryDSN","pageTitleSuffix","analytics","ThemeSwitchProvider","observer","_useRoot","business","brandId","isBrand","hasOrder","branchId","skip","isValid","context","noBatch","fetchPolicy","theme","useMemo","styles","defaultTheme","primary","secondary","tertiary","primaryHover","calcHoverColor","secondaryHover","tertiaryHover","tertiaryText","unselected","unselectedHover","unselectedText","storeLogo","storeLogoMobile","backgroundCart","D_workspace_deepvision_doveze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","active","main","mainSecondary","getTheme","react__WEBPACK_IMPORTED_MODULE_4___default","styled_components__WEBPACK_IMPORTED_MODULE_1__","useTheme","ThemeContext","inputColor","Color","lighten","hsl","string","logMain","logMap","logDebug","logPersist","logOrder","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","debug","map","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","webpackAsyncContext","req","ids","e","then","id","t","Promise","resolve","code","keys","module","exports","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","mobileBreakpoint","Desktop","react_responsive__WEBPACK_IMPORTED_MODULE_2___default","minWidth","Mobile","maxAspectRatio","maxWidth","MobileLandscape","screen","minAspectRatio","mediaDesktop","css","apply","arguments","mediaMobile","./cs.svg","./de.svg","./en.svg","./pl.svg","./sk.svg","webpackContext","webpackContextResolve","./logo-doveze.svg","./logo-gopay.svg","./logo-mastercard.svg","./logo-visa.svg","makeError","message","_","ErrorContainer","errorGuard","_ref$prod","prod","slicedToArray","errorKind","setErrorKind","_useAlertModal","_useAlertModal2","makeAlert","onRetry","useCallback","onUnhandledError","indexOf","isChunkError","Sentry","withScope","scope","setLevel","Severity","Debug","captureException","flushSentry","window","location","reload","isApolloError","isNetworkUnreachableError","VError","onNetworkError","isUnreachable","react_default","onOperationError","onUserErrors","messages","msg","key","history","useRouterContext","_React$useState3","_React$useState4","modalOpen","setModalOpen","onFeedback","showReportDialog","labelClose","title","onRestart","replace","routerBasePath","_lingui_react","Buttons","onClick","tools_dist","onError","DeveloperErrorBoundary","require","default","dist","PageTitle","document","branch","brand","AddSentryContext","useSentryScope","orderModel","setExtras","orderId","orderBranchId","deliverAt","BusinessLoader","_useQBusinessLookup","requestedCode","url","href","lookup","log","updateFromLookup","companyId","IdentifyGuest","auth","userId","token","configureScope","setUser","username","setExtra","StyledLandscapeMessage","styled","div","LandscapeMessage","ResetOrderAtRoot","match","useRouter","path","isExact","orderCancel","ResetPersistenceButton","SuspendOnInit","predicate","suspend","setSuspend","thrown","useRef","resolverRef","current","when","useSuspenseWhen","DesktopApp","lazy","all","bind","MobileApp","App","ErrorContainer_ErrorContainer","IdentifyGuest_IdentifyGuest","PageTitle_PageTitle","ResetOrderAtRoot_ResetOrderAtRoot","Suspense","fallback","SuspendOnInit_SuspendOnInit","Responsive","LandscapeMessage_LandscapeMessage","ResetPersistenceButton_ResetPersistenceButton","Router","useObserver","react_router_dom","basename","ReactGA","initialize","gaOptions","siteSpeedSampleRate","persistModel","_x","_persistModel","this","model","modelName","stateKey","writeState","regenerator_default","getType","snapshot","localforage","setItem","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","BaseModel","types","volatile","client","actions","self","setClient","views","getPath","trim","getRoot","AuthModel","named","maybeNull","authenticate","addBreadcrumb","category","level","Info","BannerModel","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","isMobileApp","differenceInDays","Boolean","setInstalledNow","setClosedNow","BusinessModel","banners","country","orderOrigin","Web","defaultLanguage","company","brandOrBranch","REACT_APP_BUSINESS_CODE","URL","searchParams","get","codeParam","knownBasePath","toLowerCase","ensureBannerForCurrentBranch","has","set","CartModel","withGoods","withPresence","updateDisplay","isMobile","showGoods","ConfigModel","orderItemsMax","LocationModel","number","searchValue","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","geolocationPoint","isResolving","isGeolocationAvailable","navigator","geolocation","hasLocation","hasAddress","isDeliveryAddress","hasFinishedSearch","length","geoPoint","resolutionTarget","setLocation","setResolutionResult","finalAddress","companyBranch","isValidAddress","gpsCoordinates","setVolatileProps","disableGeolocation","clearAddress","setIsResolving","resolver","_ref2","asyncToGenerator","vars","_ref3","objectSpread","resolveLocation","validateUserLocation","withUserAddress","withUserLocation","userLocation","useGeolocationResult","point","attemptGeolocation","_this","getCurrentPosition","_ref4","coords","accuracy","err","alert","enableHighAccuracy","maximumAge","GPSCzechia","MapModel","zoom","optional","mapRef","clickPoint","isReady","center","setMapRef","ref","updateZoom","getZoom","updatePosition","getCenter","panToLocation","panTo","ev","clearClickPoint","CreateOrderFragment","OrderModel_graphql_templateObject","CreatePickupOrderMutation","CreateDeliveryOrderMutation","VamStatusQuery","OrderModel","orderMethod","Messenger","payment","Gopay","firstname","lastname","email","phone","phonePrefix","note","tips","isSubmitting","isGoPayChecking","submitErrors","paymentErrors","agreements","lastActiveRecipeId","isVamInitialized","timePickerOpen","delayedOrderEnabled","addToCartRecipeId","changeCartItemId","usingDeliveryOrderMethod","usingPickupOrderMethod","Pickup","usingPaymentMethodWithTips","hasErrors","defaultPhonePrefix","getSubmitVariables","formValues","customer","firstName","lastName","emails","phones","parseInt","paymentGate","isoDate","filter","RM","propEq","prop","useOrderMethod","method","setPaymentMethod","setBranch","orderCreated","orderPaid","submitFinished","submitFailed","errors","vamFailed","clearErrors","goPayStatusCheck","checking","useAgreements","Array","isArray","setUsedRecipeId","recipeId","openTimePicker","closeTimePicker","setTips","setDeliverAt","enableDelayedOrder","addToCart","changeCartItem","itemId","rememberFormValues","values","shouldRememberForm","createDeliveryOrder","_createDeliveryOrder","_self$root","abrupt","mutate","mutation","initVam","createPickupOrder","_createPickupOrder","prefetchPickup","prefetchFoodMenu","prefetchFood","_initVam","_callee3","_context3","input","vamStatus","forEach","updateVam","_updateVam","_callee4","_context4","_x2","UserModel","selectedLanguage","rememberForm","boolean","showAppleBanner","closingTimeAlertHidden","orderLimitAlertHidden","detectLanguage","selectLanguage","showClosingTime","hideClosingTime","showOrderLimit","hideOrderLimit","setFormRememberYes","setFormRememberNo","hideAppleBanner","RootModel","cart","config","persistedModels","initialSnapshot","afterCreate","_getSnapshot","objectWithoutProperties","reset","init","_init","ReactDOM","reportPage","pageview","useAnalytics","useSentryInit","create","newClient","getToken","fetchGuestToken","createDefaultApolloClient","createAuthLink","createLanguageLink","createLogLink","createRetryLink","createOfflineLink","createNetworkLink","createApolloClient","value","Router_Router","src_app_App","getElementById","updateWorker","register","autoUpdate","onUpdate","sw","setTimeout","confirm","postMessage","serviceWorker","addEventListener","event","PrimaryButton","Button","withConfig","displayName","componentId","themeProp","SecondaryButton","PrimaryRoutedButton","to","buttonProps","reactstrap_es","MobileHeaderButton","isConfirm","SelectButtonThemed","selected","_ref5","_ref6"],"mappings":"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","file":"static/js/main.240ca5de.chunk.js","sourcesContent":["import { FGeoPointFragment } from '../graph/generated'\n\nexport type GeoPoint = Omit<FGeoPointFragment, '__typename'>\n\nexport const gpsToLatLngLit = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLng =>\n  new google.maps.LatLng(Number(gps.latitude), Number(gps.longitude))\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import './Modal.css'\n\nimport React from 'react'\nimport {\n  Container,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalProps,\n} from 'reactstrap'\n\ninterface IProps extends ModalProps {\n  isOpen: boolean\n  headerText: string\n  onClose?(): void\n}\n\nexport const AlertModal: React.FC<IProps> = ({\n  isOpen,\n  headerText,\n  onClose,\n  children,\n  ...modalProps\n}) => (\n  <Modal\n    isOpen={isOpen}\n    toggle={onClose}\n    className=\"modal__container\"\n    {...modalProps}\n    data-testid=\"alertModal\"\n  >\n    <ModalHeader tag={Container} toggle={onClose} className=\"modal__header\">\n      <span>{headerText}</span>\n    </ModalHeader>\n    <ModalBody className=\"modal__body\">\n      <div className=\"modal__body__content\">{children}</div>\n    </ModalBody>\n  </Modal>\n)\n","import { useRoot } from '../app/useRoot'\n\nexport function useOrderModel() {\n  const { order } = useRoot()\n  return order\n}\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\n\nimport Pacman from '../common/Pacman'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n  }\n  const GQuery: React.FC<IProps> = ({\n    render,\n    renderFragment,\n    renderLoading = true,\n    renderError = true,\n    children,\n    ...props\n  }) => (\n    // @ts-ignore Some weird changes in @types/react\n    <Query query={query} {...props}>\n      {result => {\n        if (result.loading || !result.data) {\n          if (typeof renderLoading === 'function') {\n            return renderLoading(result)\n          } else if (renderLoading === true) {\n            return <Pacman />\n          }\n        }\n        if (result.error) {\n          throw result.error\n        }\n        if (result.data) {\n          if (renderFragment) {\n            return <>{renderFragment(result.data, result)}</>\n          }\n          if (render) {\n            return render(result.data, result)\n          }\n        }\n        return children || null\n      }}\n    </Query>\n  )\n\n  return GQuery\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport {\n  FAddressFragmentDoc,\n  FCompanyBranchStatusFragmentDoc,\n  FGeoPointFragmentDoc,\n} from '../../graph/generated'\nimport { GPickupMapBranch, GPickupMapBrand } from '../../graph/types'\n\nconst PickupBranchFragment = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n  ${FCompanyBranchStatusFragmentDoc}\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n`\n\nexport const PickupMapBrandQuery = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const PickupMapBranchQuery = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const QueryPickupMapBrand = buildQuery<\n  GPickupMapBrand.Query,\n  GPickupMapBrand.Variables\n>(PickupMapBrandQuery)\n\nexport const QueryPickupMapBranch = buildQuery<\n  GPickupMapBranch.Query,\n  GPickupMapBranch.Variables\n>(PickupMapBranchQuery)\n","import React from 'react'\n\nimport { AlertModal } from '../common/AlertModal'\n\nexport function useAlertModal() {\n  const [alertModal, setAlertModal] = React.useState<ReactNode>(null)\n\n  const makeAlert = (header: string, body: ReactNode | string) => {\n    setAlertModal(\n      React.createElement(\n        AlertModal,\n        {\n          isOpen: true,\n          onClose: () => setAlertModal(null),\n          headerText: header,\n        },\n        body,\n      ),\n    )\n  }\n\n  return [alertModal, makeAlert] as [ReactNode, typeof makeAlert]\n}\n","import { format, formatWithOptions, parse } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\n\nimport { FJsonAddressFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const formatTime = format('H:mm')\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const parseTime = parse('HH:mm')\n\nexport const formatAddress = (address: FJsonAddressFragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const RootProvider = rootContext.Provider\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n  /** percentage value of tips */\n  readonly tips?: Maybe<number>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: boolean\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly internalNumber?: Maybe<string>\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputStatisticCreate {\n  readonly dateFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly dateTimeFrom?: Maybe<string>\n\n  readonly dateTimeTo?: Maybe<string>\n\n  readonly branches: ReadonlyArray<string>\n\n  readonly drivers?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: number\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly minCount?: number\n\n  readonly maxCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly minCount?: Maybe<number>\n\n  readonly maxCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n\n  readonly orderOriginCategories?: Maybe<ReadonlyArray<OrderOriginCategoryEnum>>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n  Pln = 'PLN',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  Driver = 'DRIVER',\n  FeAdmin = 'FE_ADMIN',\n  FeCompletion = 'FE_COMPLETION',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n  Pl = 'PL',\n  De = 'DE',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n  Specific = 'SPECIFIC',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n  HighPriority = 'HIGH_PRIORITY',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n  WebMenu = 'WEB_MENU',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible order origin categories */\nexport enum OrderOriginCategoryEnum {\n  Website = 'WEBSITE',\n  Wifi = 'WIFI',\n  Staff = 'STAFF',\n  Doveze = 'DOVEZE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type GCreatePickupOrderVariables = {\n  readonly branchId: string\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GCreatePickupOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: GCreatePickupOrderOrder\n}\n\nexport type GCreatePickupOrderOrder = GCreateOrderFragment\n\nexport type GCreateDeliveryOrderVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GCreateDeliveryOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: GCreateDeliveryOrderOrder\n}\n\nexport type GCreateDeliveryOrderOrder = GCreateOrderFragment\n\nexport type GVamStatusVariables = {\n  readonly input: InputVamStatus\n}\n\nexport type GVamStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamStatus: ReadonlyArray<GVamStatusVamStatus>\n}\n\nexport type GVamStatusVamStatus = {\n  readonly __typename?: 'VAMAgreement'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly description: string\n\n  readonly isConfirmed: boolean\n\n  readonly isMandatory: boolean\n}\n\nexport type GPickupMapBrandVariables = {\n  readonly brandId: string\n}\n\nexport type GPickupMapBrandQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branches: ReadonlyArray<GPickupMapBrandBranches>\n}\n\nexport type GPickupMapBrandBranches = GPickupBranchFragment\n\nexport type GPickupMapBranchVariables = {\n  readonly branchId: string\n}\n\nexport type GPickupMapBranchQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GPickupMapBranchBranch\n}\n\nexport type GPickupMapBranchBranch = GPickupBranchFragment\n\nexport type GMobileShopStatusVariables = {\n  readonly branchId: string\n}\n\nexport type GMobileShopStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GMobileShopStatusBranch\n}\n\nexport type GMobileShopStatusBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n} & FCompanyBranchStatusFragment\n\nexport type GMobileShopIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type GMobileShopIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: GMobileShopIntroIntro\n}\n\nexport type GMobileShopIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type GSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<GSmartBannerApp>\n}\n\nexport type GSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type QBusinessLookupVariables = {\n  readonly code?: Maybe<string>\n  readonly url?: Maybe<string>\n}\n\nexport type QBusinessLookupQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lookup: QBusinessLookupLookup\n}\n\nexport type QBusinessLookupLookup = {\n  readonly __typename?: 'CompanyBrandLookUp'\n\n  readonly branch: Maybe<QBusinessLookupBranch>\n\n  readonly isBrand: boolean\n\n  readonly isMobileApp: boolean\n\n  readonly knownBasePath: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly defaultLanguage: LanguageEnum\n}\n\nexport type QBusinessLookupBranch = FCompanyBranchFragment\n\nexport type QThemeStyleVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QThemeStyleQuery = {\n  readonly __typename?: 'Query'\n\n  readonly theme: QThemeStyleTheme\n}\n\nexport type QThemeStyleTheme = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly styles: QThemeStyleStyles\n}\n\nexport type QThemeStyleStyles = {\n  readonly __typename?: 'GraphicStyle'\n\n  readonly active: string\n\n  readonly main: string\n\n  readonly mainSecondary: string\n\n  readonly storeLogo: string\n\n  readonly storeLogoMobile: string\n\n  readonly backgroundCart: string\n}\n\nexport type GResolveLocationVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly address?: Maybe<string>\n  readonly latitude?: Maybe<number>\n  readonly longitude?: Maybe<number>\n}\n\nexport type GResolveLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: GResolveLocationResolveLocation\n}\n\nexport type GResolveLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly finalAddress: Maybe<GResolveLocationFinalAddress>\n\n  readonly isResolved: boolean\n\n  readonly isValidAddress: boolean\n\n  readonly inDeliveryLocation: boolean\n\n  readonly gpsCoordinates: Maybe<GResolveLocationGpsCoordinates>\n\n  readonly companyBranch: Maybe<GResolveLocationCompanyBranch>\n}\n\nexport type GResolveLocationFinalAddress = FJsonAddressFragment\n\nexport type GResolveLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GResolveLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type MAddToCartVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type MAddToCartMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly add: MAddToCartAdd\n}\n\nexport type MAddToCartAdd = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment\n\nexport type MChangeCartItemVariables = {\n  readonly orderId: string\n  readonly itemId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n  readonly withGoods: boolean\n}\n\nexport type MChangeCartItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly change: MChangeCartItemChange\n}\n\nexport type MChangeCartItemChange = FCartSummaryFragment & FCartGoodsFragment\n\nexport type MRemoveCartItemVariables = {\n  readonly itemId: string\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type MRemoveCartItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly remove: MRemoveCartItemRemove\n}\n\nexport type MRemoveCartItemRemove = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment\n\nexport type QCartVariables = {\n  readonly orderId: string\n  readonly withGoods: boolean\n  readonly withPresence: boolean\n}\n\nexport type QCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QCartOrder\n}\n\nexport type QCartOrder = FCartSummaryFragment &\n  FCartGoodsFragment &\n  FCartPresenceFragment &\n  FCartStaticFragment\n\nexport type QCartItemVariables = {\n  readonly itemId: string\n}\n\nexport type QCartItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: QCartItemItem\n}\n\nexport type QCartItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCartItemRecipe\n\n  readonly sideDishes: ReadonlyArray<QCartItemSideDishes>\n}\n\nexport type QCartItemRecipe = FRecipeDetailFragment\n\nexport type QCartItemSideDishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: QCartItem_Recipe\n}\n\nexport type QCartItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type QCartRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type QCartRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: QCartRecipeRecipe\n}\n\nexport type QCartRecipeRecipe = FRecipeDetailFragment\n\nexport type QOrderFinishVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type QOrderFinishQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFinishOrder\n\n  readonly companyBranch: QOrderFinishCompanyBranch\n\n  readonly androidApp: Maybe<QOrderFinishAndroidApp>\n\n  readonly iosApp: Maybe<QOrderFinishIosApp>\n}\n\nexport type QOrderFinishOrder = FOrderFinishedFragment\n\nexport type QOrderFinishCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly phone: string\n\n  readonly company: QOrderFinishCompany\n}\n\nexport type QOrderFinishCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type QOrderFinishAndroidApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QOrderFinishIosApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type QFoodMenuVariables = {\n  readonly branchId: string\n}\n\nexport type QFoodMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareCategories: ReadonlyArray<QFoodMenuWareCategories>\n}\n\nexport type QFoodMenuWareCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly recipes: ReadonlyArray<QFoodMenuRecipes>\n} & FFoodMenuCategoryFragment\n\nexport type QFoodMenuRecipes = FFoodMenuRecipeFragment\n\nexport type QFoodMenuCartPresenceVariables = {\n  readonly orderId: string\n}\n\nexport type QFoodMenuCartPresenceQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QFoodMenuCartPresenceOrder\n}\n\nexport type QFoodMenuCartPresenceOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & FCartPresenceFragment\n\nexport type QInitialDeliveryLocationVariables = {}\n\nexport type QInitialDeliveryLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly location: QInitialDeliveryLocationLocation\n}\n\nexport type QInitialDeliveryLocationLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly gpsCoordinates: Maybe<QInitialDeliveryLocationGpsCoordinates>\n}\n\nexport type QInitialDeliveryLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type MOrderDeliveryTimeVariables = {\n  readonly orderId: string\n  readonly deliverAt?: Maybe<string>\n  readonly withGoods: boolean\n}\n\nexport type MOrderDeliveryTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderDeliveryTimeUpdateOrder\n}\n\nexport type MOrderDeliveryTimeUpdateOrder = FCartSummaryFragment &\n  FCartGoodsFragment\n\nexport type MOrderFinishVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MOrderFinishMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: MOrderFinishFinishOrder\n}\n\nexport type MOrderFinishFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type MOrderPromoAddVariables = {\n  readonly orderId: string\n  readonly code: string\n  readonly withGoods: boolean\n}\n\nexport type MOrderPromoAddMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MOrderPromoAddAddOrderPromoCode\n}\n\nexport type MOrderPromoAddAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MOrderPromoAddOrder\n}\n\nexport type MOrderPromoAddOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoAddPromoCodes>\n} & (FCartSummaryFragment & FCartGoodsFragment)\n\nexport type MOrderPromoAddPromoCodes = FPromoCodeFragment\n\nexport type MOrderPromoRemoveVariables = {\n  readonly orderId: string\n  readonly codeId: string\n  readonly withGoods: boolean\n}\n\nexport type MOrderPromoRemoveMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MOrderPromoRemoveRemoveOrderPromoCode\n}\n\nexport type MOrderPromoRemoveRemoveOrderPromoCode = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MOrderPromoRemovePromoCodes>\n} & (FCartSummaryFragment & FCartGoodsFragment)\n\nexport type MOrderPromoRemovePromoCodes = FPromoCodeFragment\n\nexport type MOrderTipUpdateVariables = {\n  readonly orderId: string\n  readonly tips: number\n  readonly withGoods: boolean\n}\n\nexport type MOrderTipUpdateMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MOrderTipUpdateUpdateOrder\n}\n\nexport type MOrderTipUpdateUpdateOrder = FCartSummaryFragment &\n  FCartGoodsFragment\n\nexport type MSubmitOrderVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly tips?: Maybe<number>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type MSubmitOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly submitOrder: MSubmitOrderSubmitOrder\n}\n\nexport type MSubmitOrderSubmitOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type QOrderFormVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderFormOrder\n}\n\nexport type QOrderFormOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly orderStateCategory: OrderStateCategoryEnum\n}\n\nexport type QOrderPaymentStatusVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPaymentStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly status: QOrderPaymentStatusStatus\n}\n\nexport type QOrderPaymentStatusStatus = {\n  readonly __typename?: 'OrderOnlinePaymentStatus'\n\n  readonly isSuccess: boolean\n\n  readonly userErrors: ReadonlyArray<string>\n}\n\nexport type QOrderPromoCodesVariables = {\n  readonly orderId: string\n}\n\nexport type QOrderPromoCodesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QOrderPromoCodesOrder\n}\n\nexport type QOrderPromoCodesOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<QOrderPromoCodesPromoCodes>\n}\n\nexport type QOrderPromoCodesPromoCodes = FPromoCodeFragment\n\nexport type QOrderTimePickerVariables = {\n  readonly branchId: string\n}\n\nexport type QOrderTimePickerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: QOrderTimePickerCompanyBranch\n}\n\nexport type QOrderTimePickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly businessHours: ReadonlyArray<QOrderTimePickerBusinessHours>\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly delayedDeliveryEnabled: boolean\n}\n\nexport type QOrderTimePickerBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n}\n\nexport type QSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type QSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<QSmartBannerApp>\n}\n\nexport type QSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type QShopHeaderBranchVariables = {\n  readonly branchId: string\n}\n\nexport type QShopHeaderBranchQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: QShopHeaderBranchBranch\n}\n\nexport type QShopHeaderBranchBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly address: QShopHeaderBranchAddress\n} & (FShopOpeningHoursFragment & FCompanyBranchStatusFragment)\n\nexport type QShopHeaderBranchAddress = FAddressFragment\n\nexport type QShopHeaderIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type QShopHeaderIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: QShopHeaderIntroIntro\n}\n\nexport type QShopHeaderIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly branch: GCreateOrderBranch\n}\n\nexport type GCreateOrderBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GPickupBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly gps: GPickupBranchGps\n\n  readonly address: GPickupBranchAddress\n\n  readonly pickupEnabled: boolean\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nexport type GPickupBranchGps = FGeoPointFragment\n\nexport type GPickupBranchAddress = FAddressFragment\n\nexport type FCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly brand: FCompanyBranchBrand\n\n  readonly company: FCompanyBranchCompany\n\n  readonly address: FCompanyBranchAddress\n\n  readonly phone: string\n\n  readonly supportedLanguages: ReadonlyArray<LanguageEnum>\n}\n\nexport type FCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly code: string\n}\n\nexport type FCompanyBranchCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type FCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly country: Maybe<FCompanyBranchCountry>\n}\n\nexport type FCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type FJsonAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly location: Maybe<FAddressLocation>\n}\n\nexport type FAddressLocation = FJsonAddressFragment\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly formattedValue: string\n}\n\nexport type FRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sideDishCount: number\n}\n\nexport type FCompanyBranchStatusFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly businessHours: ReadonlyArray<FCompanyBranchStatusBusinessHours>\n\n  readonly defaultDeliveryTimeEnabled: boolean\n\n  readonly defaultPickupTimeEnabled: boolean\n}\n\nexport type FCompanyBranchStatusBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n}\n\nexport type FPromoCodeFragment = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type FCartGoodsFragment = {\n  readonly __typename?: 'Order'\n\n  readonly items: ReadonlyArray<FCartGoodsItems>\n\n  readonly coverPrice: FCartGoodsCoverPrice\n\n  readonly transportFee: FCartGoodsTransportFee\n\n  readonly discounts: ReadonlyArray<FCartGoodsDiscounts>\n\n  readonly totalDiscount: FCartGoodsTotalDiscount\n\n  readonly tip: FCartGoodsTip\n}\n\nexport type FCartGoodsItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly automatic: boolean\n\n  readonly price: FCartGoodsPrice\n\n  readonly sideDishes: ReadonlyArray<FCartGoodsSideDishes>\n} & FCartItemFragment\n\nexport type FCartGoodsPrice = FPriceFragment\n\nexport type FCartGoodsSideDishes = FCartItemFragment\n\nexport type FCartGoodsCoverPrice = FPriceFragment\n\nexport type FCartGoodsTransportFee = FPriceFragment\n\nexport type FCartGoodsDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FCartGoods_Price\n}\n\nexport type FCartGoods_Price = FPriceFragment\n\nexport type FCartGoodsTotalDiscount = FPriceFragment\n\nexport type FCartGoodsTip = FPriceFragment\n\nexport type FCartItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartItemRecipe\n}\n\nexport type FCartItemRecipe = FRecipeFragment\n\nexport type FCartStaticFragment = {\n  readonly __typename?: 'Order'\n\n  readonly minimalOrderPrice: Maybe<FCartStaticMinimalOrderPrice>\n\n  readonly deliveryType: Maybe<FCartStaticDeliveryType>\n}\n\nexport type FCartStaticMinimalOrderPrice = FPriceFragment\n\nexport type FCartStaticDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type FCartSummaryFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly totalSum: FCartSummaryTotalSum\n}\n\nexport type FCartSummaryTotalSum = FPriceFragment\n\nexport type FRecipeDetailFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly categories: ReadonlyArray<FRecipeDetailCategories>\n}\n\nexport type FRecipeDetailCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly maxRecipesCount: number\n\n  readonly sideDishes: ReadonlyArray<FRecipeDetailSideDishes>\n}\n\nexport type FRecipeDetailSideDishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: FRecipeDetailPrice\n}\n\nexport type FRecipeDetailPrice = FPriceFragment\n\nexport type FOrderFinishedFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly items: ReadonlyArray<FOrderFinishedItems>\n\n  readonly totalSum: FOrderFinishedTotalSum\n\n  readonly orderPayments: ReadonlyArray<FOrderFinishedOrderPayments>\n}\n\nexport type FOrderFinishedItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sideDishes: ReadonlyArray<FOrderFinishedSideDishes>\n} & FCartItemFragment\n\nexport type FOrderFinishedSideDishes = FCartItemFragment\n\nexport type FOrderFinishedTotalSum = FPriceFragment\n\nexport type FOrderFinishedOrderPayments = {\n  readonly __typename?: 'OrderPaymentMethod'\n\n  readonly paymentMethod: FOrderFinishedPaymentMethod\n}\n\nexport type FOrderFinishedPaymentMethod = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly paymentType: FOrderFinishedPaymentType\n}\n\nexport type FOrderFinishedPaymentType = {\n  readonly __typename?: 'PaymentType'\n\n  readonly enum: PaymentTypeEnum\n}\n\nexport type FCartPresenceFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly presence: ReadonlyArray<FCartPresencePresence>\n}\n\nexport type FCartPresencePresence = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: FCartPresenceRecipe\n}\n\nexport type FCartPresenceRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type FFoodMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n}\n\nexport type FFoodMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: FFoodMenuRecipePrice\n\n  readonly sideDishCount: number\n}\n\nexport type FFoodMenuRecipePrice = FPriceFragment\n\nexport type FShopOpeningHoursFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GCreateOrderFragmentDoc = gql`\n  fragment GCreateOrder on Order {\n    id\n    branch: companyBranch {\n      id\n    }\n  }\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FJsonAddressFragmentDoc = gql`\n  fragment FJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n  }\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on Address {\n    id\n    location {\n      ...FJsonAddress\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport const FCompanyBranchStatusFragmentDoc = gql`\n  fragment FCompanyBranchStatus on CompanyBranch {\n    id\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours: businessHoursIntervals {\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n    defaultDeliveryTimeEnabled\n    defaultPickupTimeEnabled\n  }\n`\n\nexport const GPickupBranchFragmentDoc = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport const FCompanyBranchFragmentDoc = gql`\n  fragment FCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      id\n      country {\n        phonePrefix\n      }\n    }\n    phone\n    supportedLanguages(userSpecific: true)\n  }\n`\n\nexport const FPromoCodeFragmentDoc = gql`\n  fragment FPromoCode on PromoCode {\n    id\n    code\n  }\n`\n\nexport const FRecipeFragmentDoc = gql`\n  fragment FRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FCartItemFragmentDoc = gql`\n  fragment FCartItem on OrderRecipe {\n    id\n    recipe {\n      ...FRecipe\n    }\n  }\n\n  ${FRecipeFragmentDoc}\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const FCartGoodsFragmentDoc = gql`\n  fragment FCartGoods on Order {\n    items {\n      ...FCartItem\n      automatic\n      price: priceWithSideDishes {\n        ...FPrice\n      }\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    tip {\n      ...FPrice\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartStaticFragmentDoc = gql`\n  fragment FCartStatic on Order {\n    minimalOrderPrice {\n      ...FPrice\n    }\n    deliveryType {\n      enum\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartSummaryFragmentDoc = gql`\n  fragment FCartSummary on Order {\n    id\n    countWares\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FRecipeDetailFragmentDoc = gql`\n  fragment FRecipeDetail on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      maxRecipesCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FOrderFinishedFragmentDoc = gql`\n  fragment FOrderFinished on Order {\n    id\n    items {\n      ...FCartItem\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    totalSum {\n      ...FPrice\n    }\n    orderPayments {\n      paymentMethod {\n        paymentType {\n          enum\n        }\n      }\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FCartPresenceFragmentDoc = gql`\n  fragment FCartPresence on Order {\n    id\n    presence: items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FFoodMenuCategoryFragmentDoc = gql`\n  fragment FFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n`\n\nexport const FFoodMenuRecipeFragmentDoc = gql`\n  fragment FFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...FPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FShopOpeningHoursFragmentDoc = gql`\n  fragment FShopOpeningHours on CompanyBranch {\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const GCreatePickupOrderDocument = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n\n  ${GCreateOrderFragmentDoc}\n`\n\nexport function useGCreatePickupOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreatePickupOrderMutation,\n    GCreatePickupOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreatePickupOrderMutation,\n    GCreatePickupOrderVariables\n  >(GCreatePickupOrderDocument, baseOptions)\n}\n\nexport const GCreateDeliveryOrderDocument = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n\n  ${GCreateOrderFragmentDoc}\n`\n\nexport function useGCreateDeliveryOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateDeliveryOrderMutation,\n    GCreateDeliveryOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateDeliveryOrderMutation,\n    GCreateDeliveryOrderVariables\n  >(GCreateDeliveryOrderDocument, baseOptions)\n}\n\nexport const GVamStatusDocument = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n\nexport function useGVamStatus(\n  variables?: GVamStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVamStatusVariables>,\n) {\n  return Hooks.useQuery<GVamStatusQuery, GVamStatusVariables>(\n    GVamStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GPickupMapBrandDocument = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n\n  ${GPickupBranchFragmentDoc}\n`\n\nexport function useGPickupMapBrand(\n  variables?: GPickupMapBrandVariables,\n  baseOptions?: Hooks.QueryHookOptions<GPickupMapBrandVariables>,\n) {\n  return Hooks.useQuery<GPickupMapBrandQuery, GPickupMapBrandVariables>(\n    GPickupMapBrandDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GPickupMapBranchDocument = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n\n  ${GPickupBranchFragmentDoc}\n`\n\nexport function useGPickupMapBranch(\n  variables?: GPickupMapBranchVariables,\n  baseOptions?: Hooks.QueryHookOptions<GPickupMapBranchVariables>,\n) {\n  return Hooks.useQuery<GPickupMapBranchQuery, GPickupMapBranchVariables>(\n    GPickupMapBranchDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileShopStatusDocument = gql`\n  query GMobileShopStatus($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useGMobileShopStatus(\n  variables?: GMobileShopStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileShopStatusVariables>,\n) {\n  return Hooks.useQuery<GMobileShopStatusQuery, GMobileShopStatusVariables>(\n    GMobileShopStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileShopIntroDocument = gql`\n  query GMobileShopIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useGMobileShopIntro(\n  variables?: GMobileShopIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileShopIntroVariables>,\n) {\n  return Hooks.useQuery<GMobileShopIntroQuery, GMobileShopIntroVariables>(\n    GMobileShopIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSmartBannerDocument = gql`\n  query GSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useGSmartBanner(\n  variables?: GSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSmartBannerVariables>,\n) {\n  return Hooks.useQuery<GSmartBannerQuery, GSmartBannerVariables>(\n    GSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QBusinessLookupDocument = gql`\n  query QBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...FCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n      defaultLanguage: userDefaultLanguage\n    }\n  }\n\n  ${FCompanyBranchFragmentDoc}\n`\n\nexport function useQBusinessLookup(\n  variables?: QBusinessLookupVariables,\n  baseOptions?: Hooks.QueryHookOptions<QBusinessLookupVariables>,\n) {\n  return Hooks.useQuery<QBusinessLookupQuery, QBusinessLookupVariables>(\n    QBusinessLookupDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QThemeStyleDocument = gql`\n  query QThemeStyle($brandId: ID, $branchId: ID) {\n    theme: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n\nexport function useQThemeStyle(\n  variables?: QThemeStyleVariables,\n  baseOptions?: Hooks.QueryHookOptions<QThemeStyleVariables>,\n) {\n  return Hooks.useQuery<QThemeStyleQuery, QThemeStyleVariables>(\n    QThemeStyleDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GResolveLocationDocument = gql`\n  query GResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      finalAddress {\n        ...FJsonAddress\n      }\n      isResolved\n      isValidAddress\n      inDeliveryLocation\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      companyBranch {\n        id\n        isOpen\n      }\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport function useGResolveLocation(\n  variables?: GResolveLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GResolveLocationVariables>,\n) {\n  return Hooks.useQuery<GResolveLocationQuery, GResolveLocationVariables>(\n    GResolveLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MAddToCartDocument = gql`\n  mutation MAddToCart(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n    $withGoods: Boolean!\n    $withPresence: Boolean!\n  ) {\n    add: createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useMAddToCart(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddToCartMutation,\n    MAddToCartVariables\n  >,\n) {\n  return Hooks.useMutation<MAddToCartMutation, MAddToCartVariables>(\n    MAddToCartDocument,\n    baseOptions,\n  )\n}\n\nexport const MChangeCartItemDocument = gql`\n  mutation MChangeCartItem(\n    $orderId: ID!\n    $itemId: ID!\n    $sideDishes: [ID!]\n    $withGoods: Boolean!\n  ) {\n    change: updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMChangeCartItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MChangeCartItemMutation,\n    MChangeCartItemVariables\n  >,\n) {\n  return Hooks.useMutation<MChangeCartItemMutation, MChangeCartItemVariables>(\n    MChangeCartItemDocument,\n    baseOptions,\n  )\n}\n\nexport const MRemoveCartItemDocument = gql`\n  mutation MRemoveCartItem(\n    $itemId: ID!\n    $withGoods: Boolean!\n    $withPresence: Boolean!\n  ) {\n    remove: destroyOrderRecipe(id: $itemId) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useMRemoveCartItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveCartItemMutation,\n    MRemoveCartItemVariables\n  >,\n) {\n  return Hooks.useMutation<MRemoveCartItemMutation, MRemoveCartItemVariables>(\n    MRemoveCartItemDocument,\n    baseOptions,\n  )\n}\n\nexport const QCartDocument = gql`\n  query QCart($orderId: ID!, $withGoods: Boolean!, $withPresence: Boolean!) {\n    order(id: $orderId) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n      ...FCartPresence @include(if: $withPresence)\n      ...FCartStatic\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n  ${FCartPresenceFragmentDoc}\n  ${FCartStaticFragmentDoc}\n`\n\nexport function useQCart(\n  variables?: QCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartVariables>,\n) {\n  return Hooks.useQuery<QCartQuery, QCartVariables>(\n    QCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCartItemDocument = gql`\n  query QCartItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...FRecipeDetail\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${FRecipeDetailFragmentDoc}\n`\n\nexport function useQCartItem(\n  variables?: QCartItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartItemVariables>,\n) {\n  return Hooks.useQuery<QCartItemQuery, QCartItemVariables>(\n    QCartItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCartRecipeDocument = gql`\n  query QCartRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...FRecipeDetail\n    }\n  }\n\n  ${FRecipeDetailFragmentDoc}\n`\n\nexport function useQCartRecipe(\n  variables?: QCartRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartRecipeVariables>,\n) {\n  return Hooks.useQuery<QCartRecipeQuery, QCartRecipeVariables>(\n    QCartRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderFinishDocument = gql`\n  query QOrderFinish($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      ...FOrderFinished\n    }\n    companyBranch(id: $branchId) {\n      id\n      phone\n      company {\n        id\n      }\n    }\n    androidApp: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: ANDROID\n    ) {\n      url\n    }\n    iosApp: mobileApplicationSettings(companyBranch: $branchId, platform: IOS) {\n      url\n    }\n  }\n\n  ${FOrderFinishedFragmentDoc}\n`\n\nexport function useQOrderFinish(\n  variables?: QOrderFinishVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFinishVariables>,\n) {\n  return Hooks.useQuery<QOrderFinishQuery, QOrderFinishVariables>(\n    QOrderFinishDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QFoodMenuDocument = gql`\n  query QFoodMenu($branchId: ID!) {\n    wareCategories(\n      companyBranch: $branchId\n      wareCategoryType: MAIN\n      orderOriginCategory: DOVEZE\n      enabled: true\n      isAvailable: true\n    ) {\n      ...FFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...FFoodMenuRecipe\n      }\n    }\n  }\n\n  ${FFoodMenuCategoryFragmentDoc}\n  ${FFoodMenuRecipeFragmentDoc}\n`\n\nexport function useQFoodMenu(\n  variables?: QFoodMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuVariables>,\n) {\n  return Hooks.useQuery<QFoodMenuQuery, QFoodMenuVariables>(\n    QFoodMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QFoodMenuCartPresenceDocument = gql`\n  query QFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...FCartPresence\n    }\n  }\n\n  ${FCartPresenceFragmentDoc}\n`\n\nexport function useQFoodMenuCartPresence(\n  variables?: QFoodMenuCartPresenceVariables,\n  baseOptions?: Hooks.QueryHookOptions<QFoodMenuCartPresenceVariables>,\n) {\n  return Hooks.useQuery<\n    QFoodMenuCartPresenceQuery,\n    QFoodMenuCartPresenceVariables\n  >(QFoodMenuCartPresenceDocument, variables, baseOptions)\n}\n\nexport const QInitialDeliveryLocationDocument = gql`\n  query QInitialDeliveryLocation {\n    location: resolveLocation {\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\nexport function useQInitialDeliveryLocation(\n  variables?: QInitialDeliveryLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<QInitialDeliveryLocationVariables>,\n) {\n  return Hooks.useQuery<\n    QInitialDeliveryLocationQuery,\n    QInitialDeliveryLocationVariables\n  >(QInitialDeliveryLocationDocument, variables, baseOptions)\n}\n\nexport const MOrderDeliveryTimeDocument = gql`\n  mutation MOrderDeliveryTime(\n    $orderId: ID!\n    $deliverAt: DateTime\n    $withGoods: Boolean!\n  ) {\n    updateOrder(id: $orderId, order: { deliverAt: $deliverAt }) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderDeliveryTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderDeliveryTimeMutation,\n    MOrderDeliveryTimeVariables\n  >(MOrderDeliveryTimeDocument, baseOptions)\n}\n\nexport const MOrderFinishDocument = gql`\n  mutation MOrderFinish(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMOrderFinish(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderFinishMutation,\n    MOrderFinishVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderFinishMutation, MOrderFinishVariables>(\n    MOrderFinishDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoAddDocument = gql`\n  mutation MOrderPromoAdd($orderId: ID!, $code: String!, $withGoods: Boolean!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        id\n        promoCodes {\n          ...FPromoCode\n        }\n        ...FCartSummary\n        ...FCartGoods @include(if: $withGoods)\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderPromoAdd(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoAddMutation,\n    MOrderPromoAddVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderPromoAddMutation, MOrderPromoAddVariables>(\n    MOrderPromoAddDocument,\n    baseOptions,\n  )\n}\n\nexport const MOrderPromoRemoveDocument = gql`\n  mutation MOrderPromoRemove(\n    $orderId: ID!\n    $codeId: ID!\n    $withGoods: Boolean!\n  ) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderPromoRemove(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MOrderPromoRemoveMutation,\n    MOrderPromoRemoveVariables\n  >(MOrderPromoRemoveDocument, baseOptions)\n}\n\nexport const MOrderTipUpdateDocument = gql`\n  mutation MOrderTipUpdate($orderId: ID!, $tips: Float!, $withGoods: Boolean!) {\n    updateOrder(id: $orderId, order: { tips: $tips }) {\n      ...FCartSummary\n      ...FCartGoods @include(if: $withGoods)\n    }\n  }\n\n  ${FCartSummaryFragmentDoc}\n  ${FCartGoodsFragmentDoc}\n`\n\nexport function useMOrderTipUpdate(\n  baseOptions?: Hooks.MutationHookOptions<\n    MOrderTipUpdateMutation,\n    MOrderTipUpdateVariables\n  >,\n) {\n  return Hooks.useMutation<MOrderTipUpdateMutation, MOrderTipUpdateVariables>(\n    MOrderTipUpdateDocument,\n    baseOptions,\n  )\n}\n\nexport const MSubmitOrderDocument = gql`\n  mutation MSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $tips: Float\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    submitOrder: finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        tips: $tips\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useMSubmitOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    MSubmitOrderMutation,\n    MSubmitOrderVariables\n  >,\n) {\n  return Hooks.useMutation<MSubmitOrderMutation, MSubmitOrderVariables>(\n    MSubmitOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const QOrderFormDocument = gql`\n  query QOrderForm($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      countWares\n      orderStateCategory\n    }\n  }\n`\n\nexport function useQOrderForm(\n  variables?: QOrderFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderFormVariables>,\n) {\n  return Hooks.useQuery<QOrderFormQuery, QOrderFormVariables>(\n    QOrderFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderPaymentStatusDocument = gql`\n  query QOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport function useQOrderPaymentStatus(\n  variables?: QOrderPaymentStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPaymentStatusVariables>,\n) {\n  return Hooks.useQuery<QOrderPaymentStatusQuery, QOrderPaymentStatusVariables>(\n    QOrderPaymentStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderPromoCodesDocument = gql`\n  query QOrderPromoCodes($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useQOrderPromoCodes(\n  variables?: QOrderPromoCodesVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderPromoCodesVariables>,\n) {\n  return Hooks.useQuery<QOrderPromoCodesQuery, QOrderPromoCodesVariables>(\n    QOrderPromoCodesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QOrderTimePickerDocument = gql`\n  query QOrderTimePicker($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      isOpen\n      businessHours: businessHoursIntervals {\n        openAt\n        closeAt\n        closed\n      }\n      defaultDeliveryTime\n      defaultPickupTime\n      willOpenAt\n      willCloseAt\n      delayedDeliveryEnabled\n    }\n  }\n`\n\nexport function useQOrderTimePicker(\n  variables?: QOrderTimePickerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QOrderTimePickerVariables>,\n) {\n  return Hooks.useQuery<QOrderTimePickerQuery, QOrderTimePickerVariables>(\n    QOrderTimePickerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QSmartBannerDocument = gql`\n  query QSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useQSmartBanner(\n  variables?: QSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<QSmartBannerVariables>,\n) {\n  return Hooks.useQuery<QSmartBannerQuery, QSmartBannerVariables>(\n    QSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QShopHeaderBranchDocument = gql`\n  query QShopHeaderBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      address {\n        ...FAddress\n      }\n      ...FShopOpeningHours\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FShopOpeningHoursFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useQShopHeaderBranch(\n  variables?: QShopHeaderBranchVariables,\n  baseOptions?: Hooks.QueryHookOptions<QShopHeaderBranchVariables>,\n) {\n  return Hooks.useQuery<QShopHeaderBranchQuery, QShopHeaderBranchVariables>(\n    QShopHeaderBranchDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QShopHeaderIntroDocument = gql`\n  query QShopHeaderIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useQShopHeaderIntro(\n  variables?: QShopHeaderIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<QShopHeaderIntroVariables>,\n) {\n  return Hooks.useQuery<QShopHeaderIntroQuery, QShopHeaderIntroVariables>(\n    QShopHeaderIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-05-15T15:34:20+02:00\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { autorun } from 'mobx'\nimport React from 'react'\n\nimport { useRoot } from './app/useRoot'\nimport { logLang } from './helpers/logger'\n\ninterface IProps {\n  rootInit: Promise<void>\n}\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC<IProps> = ({ rootInit, children }) => {\n  const { user } = useRoot()\n\n  React.useEffect(\n    () =>\n      autorun(async () => {\n        if (!user.languageActivated) {\n          await rootInit\n          await loadCatalog(user.language)\n          i18n.activate(user.language)\n          user.activateLanguage()\n          logLang('changed to %s', user.language)\n        }\n      }),\n    [],\n  )\n\n  return <I18nProvider i18n={i18n}>{children}</I18nProvider>\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  googleMapsApi: process.env.REACT_APP_LOCAL_GOOGLE_API_KEY,\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: '',\n  pageTitleSuffix: 'LOCAL',\n  analytics: '',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n    analytics: '',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n    analytics: 'UA-4990100-13',\n    googleMapsApi: 'AIzaSyCDn-SXz6ngOCNVwHR8zDY38JopNFVIrsU',\n  })\n}\n","import Color from 'color'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { ThemeContext, ThemeProvider } from 'styled-components/macro'\n\nimport {\n  QThemeStyleStyles,\n  QThemeStyleVariables,\n  useQThemeStyle,\n} from '../graph/generated'\nimport { useRoot } from './useRoot'\n\ninterface IProps {\n  children: ReactNode[]\n}\n\nconst ThemeSwitchProvider = observer<IProps>(({ children }) => {\n  const { order, business } = useRoot()\n  const variables: QThemeStyleVariables = {\n    brandId: business.isBrand && !order.hasOrder ? business.brandId : undefined,\n    branchId:\n      business.isBrand && !order.hasOrder\n        ? undefined\n        : order.branchId || business.branchId,\n  }\n  const { data } = useQThemeStyle(variables, {\n    skip: !business.isValid && !order.hasOrder,\n    context: { noBatch: true },\n    fetchPolicy: 'cache-first',\n  })\n  const theme = React.useMemo(\n    () => getTheme(data && data.theme && data.theme.styles),\n    [data],\n  )\n  return (\n    <ThemeProvider theme={theme}>\n      <>{children}</>\n    </ThemeProvider>\n  )\n})\n\nexport function useTheme() {\n  return React.useContext(ThemeContext) as TTheme\n}\n\nexport function getTheme(styles?: QThemeStyleStyles) {\n  // Fallback colors\n  const defaultPrimary = '#54984a'\n  const defaultSecondary = '#99230e'\n  const defaultTertiary = '#d9a700'\n\n  const defaultTheme = {\n    primary: defaultPrimary,\n    secondary: defaultSecondary,\n    tertiary: defaultTertiary,\n    primaryHover: calcHoverColor(defaultPrimary),\n    secondaryHover: calcHoverColor(defaultPrimary),\n    tertiaryHover: calcHoverColor(defaultTertiary),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    storeLogo: null,\n    storeLogoMobile: null,\n    backgroundCart: undefined,\n  }\n\n  if (styles) {\n    return {\n      ...defaultTheme,\n      primary: styles.active || defaultPrimary,\n      secondary: styles.main || defaultSecondary,\n      tertiary: styles.mainSecondary || defaultTertiary,\n      primaryHover: styles.active && calcHoverColor(styles.active),\n      secondaryHover: styles.main && calcHoverColor(styles.main),\n      tertiaryHover:\n        styles.mainSecondary && calcHoverColor(styles.mainSecondary),\n      storeLogo: styles.storeLogo,\n      storeLogoMobile: styles.storeLogoMobile,\n      backgroundCart: styles.backgroundCart,\n    }\n  }\n\n  return defaultTheme\n}\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport type TTheme = ReturnType<typeof getTheme>\n\nexport default ThemeSwitchProvider\n","import debug from 'debug'\n\nexport const logMain = debug('app')\nexport const logMap = debug('map')\nexport const logDebug = debug('debug')\nexport const logGraph = debug('graph')\nexport const logError = debug('error')\nexport const logAuth = debug('auth')\nexport const logRouting = debug('routing')\nexport const logPersist = debug('persist')\nexport const logOrder = debug('order')\nexport const logLang = debug('lang')\n","var map = {\n\t\"./cs/messages.po\": [\n\t\t891,\n\t\t2\n\t],\n\t\"./de/messages.po\": [\n\t\t892,\n\t\t3\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t894,\n\t\t5\n\t],\n\t\"./en/messages.po\": [\n\t\t893,\n\t\t4\n\t],\n\t\"./pl/messages.po\": [\n\t\t895,\n\t\t6\n\t],\n\t\"./sk/messages.po\": [\n\t\t896,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 819;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t897,\n\t\t2\n\t],\n\t\"./de/messages.js\": [\n\t\t898,\n\t\t3\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t900,\n\t\t5\n\t],\n\t\"./en/messages.js\": [\n\t\t899,\n\t\t4\n\t],\n\t\"./pl/messages.js\": [\n\t\t901,\n\t\t6\n\t],\n\t\"./sk/messages.js\": [\n\t\t902,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 820;\nmodule.exports = webpackAsyncContext;","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components/macro'\n\nexport const mobileBreakpoint = 767\n\nexport const Desktop = props => (\n  <ReactResponsive {...props} minWidth={mobileBreakpoint + 1} />\n)\nexport const Mobile = props => (\n  <ReactResponsive\n    {...props}\n    maxAspectRatio=\"14/9\"\n    maxWidth={mobileBreakpoint}\n  />\n)\nexport const MobileLandscape = props => (\n  <ReactResponsive\n    {...props}\n    screen={true}\n    minAspectRatio=\"14/9\"\n    maxWidth={mobileBreakpoint}\n  />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.FC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${(mobileBreakpoint + 1) / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${mobileBreakpoint / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n","var map = {\n\t\"./cs.svg\": 867,\n\t\"./de.svg\": 868,\n\t\"./en.svg\": 869,\n\t\"./pl.svg\": 870,\n\t\"./sk.svg\": 871\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 866;","var map = {\n\t\"./logo-doveze.svg\": 874,\n\t\"./logo-gopay.svg\": 875,\n\t\"./logo-mastercard.svg\": 876,\n\t\"./logo-visa.svg\": 877\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 873;","import { Trans } from '@lingui/macro'\nimport { ApolloDefender, isNetworkUnreachableError } from '@speedlo/graphql'\nimport { useRouterContext } from '@speedlo/hooks'\nimport { flushSentry, Sentry } from '@speedlo/sentry'\nimport { SillyErrorBoundary } from '@speedlo/tools'\nimport { isApolloError } from 'apollo-client'\nimport React from 'react'\nimport { VError } from 'verror'\n\nimport { useRoot } from '../app/useRoot'\nimport { useAlertModal } from '../hooks/useAlertModal'\nimport { i18n } from '../i18n'\nimport { AlertModal } from './AlertModal'\nimport { PrimaryButton, SecondaryButton } from './Buttons'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport type ErrorKind = 'none' | 'serviceUnreachable' | 'otherError'\n\nconst makeError = (message: string) =>\n  `${message} ${i18n.t`Our team was notified about the issue.`}`\n\nexport const ErrorContainer: React.FC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  const [errorKind, setErrorKind] = React.useState<ErrorKind>('none')\n  const [alertModal, makeAlert] = useAlertModal()\n\n  const onRetry = React.useCallback(() => {\n    setErrorKind('none')\n  }, [])\n\n  const onUnhandledError = React.useCallback((error: Error) => {\n    if (isChunkError(error)) {\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Debug)\n        Sentry.captureException(error)\n      })\n      flushSentry().then(() => window.location.reload())\n      return\n    }\n    if (isApolloError(error) && isNetworkUnreachableError(error)) {\n      setErrorKind('serviceUnreachable')\n      return\n    }\n    Sentry.captureException(new VError(error, 'Unhandled exception'))\n    setErrorKind('otherError')\n  }, [])\n\n  const onNetworkError = React.useCallback(\n    (error: Error, isUnreachable: boolean) => {\n      if (isUnreachable) {\n        setErrorKind('serviceUnreachable')\n      } else {\n        makeAlert(\n          i18n.t`Service problem`,\n          <div>\n            {makeError(\n              i18n.t`Unexpected error occured in communication with service.`,\n            )}\n          </div>,\n        )\n      }\n    },\n    [],\n  )\n\n  const onOperationError = React.useCallback(() => {\n    makeAlert(\n      i18n.t`Communication problem`,\n      <div>\n        {makeError(i18n.t`Unexpected error occured while sending a request.`)}\n      </div>,\n    )\n  }, [])\n\n  const onUserErrors = React.useCallback((messages: ReadonlyArray<string>) => {\n    makeAlert(\n      i18n.t`Problems encountered`,\n      <div>\n        {messages.map(msg => (\n          <div key={msg}>{msg}</div>\n        ))}\n      </div>,\n    )\n  }, [])\n\n  const { history } = useRouterContext()\n  const [modalOpen, setModalOpen] = React.useState(true)\n\n  const onFeedback = React.useCallback(() => {\n    setModalOpen(false)\n    showFeedback()\n  }, [])\n\n  const { business } = useRoot()\n\n  const onRestart = React.useCallback(() => {\n    setModalOpen(false)\n    history.replace(business.routerBasePath)\n    window.location.reload()\n  }, [])\n\n  const render = () => {\n    switch (errorKind) {\n      case 'serviceUnreachable': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Service is temporarily unavailable`}\n          >\n            <Trans>\n              Please try again in moment. We apologize for inconvenience.\n            </Trans>\n            <PrimaryButton onClick={onRetry}>\n              <Trans>Try now</Trans>\n            </PrimaryButton>\n          </AlertModal>\n        )\n      }\n      case 'otherError': {\n        return (\n          <AlertModal\n            isOpen={modalOpen}\n            headerText={i18n.t`Unexpected error has occurred`}\n          >\n            <Trans>\n              If you like, please fill out feedback form so we can fix the\n              problem faster. Restart the application otherwise.\n            </Trans>\n            <br />\n            <PrimaryButton onClick={onRestart}>\n              <Trans>Restart application</Trans>\n            </PrimaryButton>\n            <SecondaryButton onClick={onFeedback}>\n              <Trans>Send feedback</Trans>\n            </SecondaryButton>\n          </AlertModal>\n        )\n      }\n      default: {\n        return children\n      }\n    }\n  }\n\n  let errorGuard\n\n  if (prod) {\n    errorGuard = (\n      <SillyErrorBoundary\n        onError={error => {\n          onUnhandledError(error)\n        }}\n      >\n        {render()}\n      </SillyErrorBoundary>\n    )\n  } else {\n    const DeveloperErrorBoundary = require('react-error-guard/lib/DeveloperErrorBoundary')\n      .default\n    errorGuard = <DeveloperErrorBoundary>{render()}</DeveloperErrorBoundary>\n  }\n\n  return (\n    <ApolloDefender\n      onNetworkError={onNetworkError}\n      onOperationError={onOperationError}\n      onUserErrors={onUserErrors}\n    >\n      <>\n        {alertModal}\n        {errorGuard}\n      </>\n    </ApolloDefender>\n  )\n}\n\nfunction isChunkError(error: Error) {\n  return error.message && error.message.indexOf('Loading chunk') >= 0\n}\n\nfunction showFeedback() {\n  Sentry.showReportDialog({\n    labelClose: i18n.t`Close`,\n    title: i18n.t`Unexpected problem occurred`,\n  })\n}\n","import { autorun } from 'mobx'\nimport React from 'react'\n\nimport { useRoot } from '../app/useRoot'\nimport { appConfig } from '../config'\n\nexport const PageTitle: React.FC = () => {\n  const { business } = useRoot()\n\n  React.useEffect(\n    () =>\n      autorun(() => {\n        if (business.isValid) {\n          document.title = `${business.branch!.brand.name} - ${\n            appConfig.pageTitleSuffix\n          }`\n        } else {\n          document.title = appConfig.pageTitleSuffix\n        }\n      }),\n    [],\n  )\n\n  return null\n}\n","import { useSentryScope } from '@speedlo/sentry'\nimport { observer } from 'mobx-react-lite'\n\nimport { useOrderModel } from '../hooks/useOrderModel'\n\nexport const AddSentryContext = observer(() => {\n  const scope = useSentryScope()\n  const orderModel = useOrderModel()\n\n  scope.setExtras({\n    orderId: orderModel.orderId,\n    orderBranchId: orderModel.branchId,\n    deliverAt: orderModel.deliverAt,\n  })\n\n  return null\n})\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { appConfig } from '../config'\nimport { useQBusinessLookup } from '../graph/generated'\nimport { useRoot } from './useRoot'\n\nexport const BusinessLoader = observer(() => {\n  const { business } = useRoot()\n  const { data, loading } = useQBusinessLookup(\n    {\n      code: business.requestedCode,\n      url: window.location.href,\n    },\n    { context: { noBatch: true } },\n  )\n\n  React.useEffect(() => {\n    if (loading || business.isValid) {\n      return\n    }\n\n    if (!data.lookup.branch) {\n      business.log('no business found, used code %s', business.requestedCode)\n      redirectAway()\n      return\n    }\n\n    business.updateFromLookup(data.lookup)\n    business.log(\n      'identified branch %s, brand %s; company %s, isBrand: %s',\n      business.branchId,\n      business.brandId,\n      business.companyId,\n      business.isBrand,\n    )\n  })\n\n  return null\n})\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n","import { Sentry } from '@speedlo/sentry'\nimport { autorun } from 'mobx'\nimport React from 'react'\n\nimport { useRoot } from './useRoot'\n\nexport const IdentifyGuest: React.FC = () => {\n  const { auth } = useRoot()\n  React.useEffect(\n    () =>\n      autorun(() => {\n        const id = auth.userId!\n        const token = auth.token\n        Sentry.configureScope(scope => {\n          scope.setUser({ id, username: 'GUEST' })\n          scope.setExtra('token', token)\n        })\n      }),\n    [auth],\n  )\n  return null\n}\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst StyledLandscapeMessage = styled.div`\n  font-size: 1.1rem;\n  padding: 3rem;\n  vertical-align: center;\n`\n\nexport const LandscapeMessage: React.FC = () => {\n  return (\n    <StyledLandscapeMessage>\n      <Trans>\n        We know, you like space. Our app is optimised for desktop. Leave your\n        phone in portrait for now.\n      </Trans>\n    </StyledLandscapeMessage>\n  )\n}\n","import { useRouter } from '@speedlo/hooks'\nimport React from 'react'\n\nimport { useOrderModel } from '../hooks/useOrderModel'\n\nexport const ResetOrderAtRoot: React.FC = () => {\n  const { match } = useRouter({\n    path: '/',\n  })\n  const orderModel = useOrderModel()\n  React.useEffect(() => {\n    if (match && match.isExact && orderModel.hasOrder) {\n      orderModel.orderCancel()\n    }\n  })\n  return null\n}\n","import React from 'react'\n\nimport { SecondaryButton } from '../common/Buttons'\nimport { useRoot } from './useRoot'\n\ninterface IProps {}\n\nexport const ResetPersistenceButton: React.FC<IProps> = props => {\n  const root = useRoot()\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  return (\n    <SecondaryButton\n      onClick={() => {\n        root.reset()\n        location.reload()\n      }}\n    >\n      Reset uživ. dat [DEV]\n    </SecondaryButton>\n  )\n}\n","import React from 'react'\n\nimport { useSuspenseWhen } from './hooks/useSuspenseWhen'\nimport { useRoot } from './useRoot'\n\ninterface IProps {\n  children: ReactNode[]\n}\n\nexport const SuspendOnInit: React.FC<IProps> = ({ children }) => {\n  const { business, user } = useRoot()\n\n  const predicate = () => !(business.isValid && user.languageActivated)\n\n  useSuspenseWhen(predicate)\n\n  return <>{children}</>\n}\n","import { when } from 'mobx'\nimport React from 'react'\n\nexport function useSuspenseWhen(predicate: () => boolean) {\n  const [suspend, setSuspend] = React.useState<Maybe<Promise<any>>>(null)\n  const thrown = React.useRef(false)\n  const resolverRef = React.useRef<Maybe<AnyFunction>>()\n\n  React.useEffect(() => {\n    if (predicate() === true && suspend === null) {\n      setSuspend(\n        new Promise(resolve => {\n          resolverRef.current = resolve\n        }),\n      )\n      when(\n        () => !predicate(),\n        () => {\n          if (resolverRef.current) {\n            resolverRef.current()\n            resolverRef.current = null\n            setSuspend(null)\n          }\n        },\n      )\n    }\n  }, [predicate])\n\n  if (suspend !== null && !thrown.current) {\n    thrown.current = true\n    throw suspend\n  }\n}\n","import './App.css'\n\nimport React from 'react'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport Pacman from '../common/Pacman'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile, MobileLandscape } from '../common/Responsive'\nimport { AddSentryContext } from './AddSentryContext'\nimport { BusinessLoader } from './BusinessLoader'\nimport { IdentifyGuest } from './IdentifyGuest'\nimport { LandscapeMessage } from './LandscapeMessage'\nimport { ResetOrderAtRoot } from './ResetOrderAtRoot'\nimport { ResetPersistenceButton } from './ResetPersistenceButton'\nimport { SuspendOnInit } from './SuspendOnInit'\nimport ThemeSwitchProvider from './ThemeSwitchProvider'\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <ThemeSwitchProvider>\n      <BusinessLoader />\n      <IdentifyGuest />\n      <PageTitle />\n      <AddSentryContext />\n      <ResetOrderAtRoot />\n      <React.Suspense fallback={<Pacman />}>\n        <SuspendOnInit>\n          <Desktop>\n            <DesktopApp />\n          </Desktop>\n          <Mobile>\n            <MobileApp />\n          </Mobile>\n          <MobileLandscape>\n            <LandscapeMessage />\n          </MobileLandscape>\n          <ResetPersistenceButton />\n        </SuspendOnInit>\n      </React.Suspense>\n    </ThemeSwitchProvider>\n  </ErrorContainer>\n)\n\nexport default App\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from './useRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() => (\n    <BrowserRouter\n      basename={business.routerBasePath}\n      key={business.routerBasePath}\n    >\n      {children}\n    </BrowserRouter>\n  ))\n}\n","import ReactGA from 'react-ga'\n\nimport { appConfig } from '../config'\n\nconst key = appConfig.analytics\nif (key) {\n  const debug = process.env.REACT_APP_STAGE !== 'prod'\n  ReactGA.initialize(key, {\n    debug,\n    gaOptions: {\n      siteSpeedSampleRate: 50,\n    },\n  })\n  if (debug) {\n    ReactGA.ga('set', 'sendHitTask', null)\n  }\n}\n\ninterface IOptions {\n  reportPage: boolean\n}\n\nexport function useAnalytics(opts: Partial<IOptions> = {}) {\n  if (opts.reportPage) {\n    ReactGA.pageview(window.location.href)\n  }\n  return ReactGA\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersist('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersist('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersist('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { DefaultApolloClient } from '@speedlo/graphql'\nimport debug from 'debug'\nimport { getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { TRootModel } from './RootModel'\n\nexport const BaseModel = types\n  .model()\n  .volatile(() => ({\n    client: (null as unknown) as DefaultApolloClient,\n  }))\n  .actions(self => ({\n    setClient(client: DefaultApolloClient) {\n      self.client = client\n    },\n  }))\n  .views(self => ({\n    get log() {\n      const name = getPath(self).trim() || getType(self).name\n      return debug(`c2e:model/${name}`)\n    },\n    get root() {\n      return getRoot<TRootModel>(self)\n    },\n  }))\n","import { Sentry } from '@speedlo/sentry'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return self.token !== null\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      Sentry.addBreadcrumb({\n        category: 'Auth',\n        level: Sentry.Severity.Info,\n        data: {\n          userId,\n          token,\n        },\n      })\n    },\n  }))\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport {\n  FCompanyBranchCountry,\n  FCompanyBranchFragment,\n  OrderOriginEnum,\n  QBusinessLookupLookup,\n} from '../graph/generated'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\n\ntype TBranch = Omit<FCompanyBranchFragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<FCompanyBranchCountry>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n  defaultLanguage: Maybe<string>\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n    defaultLanguage: null,\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get brandOrBranch() {\n      return {\n        brandId: this.isBrand ? this.brandId : undefined,\n        branchId: this.isBrand ? undefined : this.branchId,\n      }\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      // app can be built with a specific code for a purpose of mobile apps\n      let code = process.env.REACT_APP_BUSINESS_CODE || null\n      if (!code) {\n        // mostly used in DEV because it's not possible to use subdomains for\n        // business resolution ... use either code from url or stored one as fallback\n        const urlCode = readBusinessCodeFromUrl()\n        code = urlCode || self.code\n      }\n      return code\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: QBusinessLookupLookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        // handled in BusinessLoader.tsx\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n      self.defaultLanguage = lookup.defaultLanguage.toLowerCase()\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const CartModel = BaseModel.named('Cart')\n  .volatile(() => ({\n    withGoods: false,\n    withPresence: false,\n  }))\n  .actions(self => ({\n    updateDisplay(isMobile: boolean, showGoods: boolean) {\n      self.withGoods = !isMobile || showGoods\n      self.withPresence = isMobile ? !showGoods : true\n    },\n  }))\n\nexport interface TCartModel extends Instance<typeof CartModel> {}\nexport interface TCartModelProps extends SnapshotIn<typeof CartModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport interface TConfigModel extends Instance<typeof ConfigModel> {}\nexport interface TConfigModelProps extends SnapshotIn<typeof ConfigModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { GResolveLocationDocument } from '../graph/generated'\nimport { GResolveLocation } from '../graph/types'\nimport { formatAddress } from '../helpers/formats'\nimport { GeoPoint, gpsToLatLng } from '../helpers/gps'\nimport { i18n } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  branchId: MaybeID\n  isOpen: boolean\n  isResolved: boolean\n  isStreetAddress: boolean\n  inDeliveryLocation: boolean\n  geolocationDisabled: boolean\n  geolocationPoint: Maybe<GeoPoint>\n  isResolving: boolean\n}\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.maybe(types.number),\n    longitude: types.maybe(types.number),\n    searchValue: types.maybe(types.string),\n    address: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(self => ({\n    branchId: null,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    geolocationPoint: null,\n    isResolving: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(navigator.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== undefined || self.longitude !== undefined\n    },\n    get hasAddress() {\n      return Boolean(self.address)\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get hasFinishedSearch() {\n      return (\n        ((self.searchValue && self.searchValue.length > 0) || self.address) &&\n        !self.isResolving\n      )\n    },\n    get geoPoint() {\n      if (this.hasLocation) {\n        return {\n          latitude: self.latitude!,\n          longitude: self.longitude!,\n        }\n      }\n      return null\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      if (this.geoPoint) {\n        return gpsToLatLng(this.geoPoint)\n      }\n      return null\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: any) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: GResolveLocation.ResolveLocation) {\n      const { finalAddress: address } = result\n      if (address) {\n        self.address = formatAddress(address)\n      }\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n      if (result.isResolved) {\n        self.setLocation(result.gpsCoordinates)\n        self.log('resolved as %s', self.address)\n      } else {\n        self.log('not resolved')\n      }\n    },\n    setVolatileProps(props: Partial<IVolatileProps>) {\n      Object.assign(self, props)\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = false\n    },\n    clearAddress() {\n      self.address = ''\n    },\n    setIsResolving(state: boolean) {\n      self.isResolving = state\n    },\n  }))\n  .actions(self => {\n    const resolver = async (vars?: Partial<GResolveLocation.Variables>) => {\n      self.setIsResolving(true)\n\n      const variables: GResolveLocation.Variables = {\n        ...self.resolutionTarget,\n        ...vars,\n      }\n      const { data } = await self.client.query<GResolveLocation.Query>({\n        query: GResolveLocationDocument,\n        variables,\n      })\n      if (data !== null) {\n        self.setResolutionResult(data.resolveLocation)\n      }\n      self.setIsResolving(false)\n    }\n    return {\n      validateUserLocation() {\n        if (self.hasLocation) {\n          self.log(\n            'validating stored user location %s, %s',\n            self.latitude,\n            self.longitude,\n          )\n          resolver({ latitude: self.latitude, longitude: self.longitude })\n        }\n      },\n      withUserAddress(address: string) {\n        self.searchValue = address\n        if (address === '') {\n          self.clearAddress()\n        } else {\n          self.log('resolving user address: %s', address)\n          resolver({ address })\n        }\n      },\n      withUserLocation(userLocation: GeoPoint) {\n        self.log('with user location: %j', userLocation)\n        self.latitude = userLocation.latitude\n        self.longitude = userLocation.longitude\n        resolver(userLocation)\n      },\n      useGeolocationResult(point: GeoPoint) {\n        self.geolocationPoint = point\n      },\n      attemptGeolocation() {\n        self.log('geolocating...')\n        navigator.geolocation.getCurrentPosition(\n          ({ coords }) => {\n            const { latitude, longitude } = coords\n            self.log(\n              'geolocated at coords %s, %s (acc: %s)',\n              coords.latitude,\n              coords.longitude,\n              coords.accuracy,\n            )\n            this.useGeolocationResult({ latitude, longitude })\n          },\n          err => {\n            self.log(new VError('failed geolocation', err))\n            self.disableGeolocation()\n            window.alert(i18n.t`Your browser does not support geolocation.`)\n          },\n          {\n            enableHighAccuracy: true,\n            maximumAge: 60 * 1000,\n          },\n        )\n      },\n    }\n  })\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { GeoPoint, gpsToLatLngLit, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<google.maps.Map>\n  clickPoint: Maybe<GeoPoint>\n}\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n    clickPoint: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLngLit(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<google.maps.Map>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panToLocation(gps: GeoPoint, radiusMeters: number = 2000) {\n      if (self.mapRef) {\n        // const bounds = getBounds([\n        //   computeDestinationPoint(gps, radiusMeters, 135), // SE corner\n        //   computeDestinationPoint(gps, radiusMeters, 315), // NW corner\n        // ])\n\n        // // @ts-ignore padding missing in types\n        // self.mapRef.panToBounds(\n        //   {\n        //     west: bounds.minLng,\n        //     east: bounds.maxLng,\n        //     north: bounds.minLat,\n        //     south: bounds.maxLat,\n        //   },\n        //   20,\n        // )\n        self.mapRef.panTo(gpsToLatLngLit(gps))\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import gql from 'graphql-tag'\n\nconst CreateOrderFragment = gql`\n  fragment GCreateOrder on Order {\n    id\n    branch: companyBranch {\n      id\n    }\n  }\n`\n\nexport const CreatePickupOrderMutation = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const CreateDeliveryOrderMutation = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const VamStatusQuery = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n","import { isoDate } from '@speedlo/graphql'\nimport { Sentry } from '@speedlo/sentry'\nimport { RM } from '@speedlo/tools'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport {\n  DeliveryTypeEnum,\n  MSubmitOrderVariables,\n  PaymentGateEnum,\n  QCartRecipeDocument,\n  QFoodMenuDocument,\n} from '../graph/generated'\nimport {\n  GCreateDeliveryOrder,\n  GCreateOrder,\n  GCreatePickupOrder,\n  GVamStatus,\n} from '../graph/types'\nimport { logMain } from '../helpers/logger'\nimport { i18n } from '../i18n'\nimport {\n  PickupMapBranchQuery,\n  PickupMapBrandQuery,\n} from '../segments/map/PickupMap.graphql'\nimport { IOrderFormState } from '../segments/orderForm/OrderFormSetup'\nimport { BaseModel } from './BaseModel'\nimport {\n  CreateDeliveryOrderMutation,\n  CreatePickupOrderMutation,\n  VamStatusQuery,\n} from './OrderModel.graphql'\n\ninterface IVolatileProps {\n  isSubmitting: boolean\n  isGoPayChecking: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  agreements: TAgreement[]\n  lastActiveRecipeId: MaybeID\n  isVamInitialized: boolean\n  timePickerOpen: boolean\n  delayedOrderEnabled: boolean\n  addToCartRecipeId: MaybeID\n  changeCartItemId: MaybeID\n}\n\nexport type TAgreement = GVamStatus.VamStatus\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    payment: PaymentGateEnum.Gopay,\n    deliverAt: types.optional(types.maybe(types.Date), undefined),\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n    tips: '',\n  })\n  .volatile<IVolatileProps>(self => ({\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null,\n    paymentErrors: null,\n    agreements: [],\n    lastActiveRecipeId: null,\n    isVamInitialized: false,\n    timePickerOpen: false,\n    delayedOrderEnabled: false,\n    addToCartRecipeId: null,\n\n    changeCartItemId: null,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get usingPaymentMethodWithTips() {\n      return self.payment === PaymentGateEnum.Gopay\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return ''\n    },\n    getSubmitVariables(formValues: IOrderFormState): MSubmitOrderVariables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstname,\n          lastName: formValues.lastname,\n          emails: [{ email: formValues.email }],\n          phones: [{ phone: `${formValues.phonePrefix}${formValues.phone}` }],\n        },\n        note: formValues.note,\n        tips: formValues.tips.length ? Number.parseInt(formValues.tips, 10) : 0,\n        paymentGate: formValues.payment,\n        deliverAt: self.deliverAt && isoDate(self.deliverAt),\n        agreements: formValues.agreements\n          .filter(RM.propEq('isConfirmed', true))\n          .map(RM.prop('id'))\n          .filter(Boolean),\n      }\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setPaymentMethod(method: PaymentGateEnum) {\n      self.payment = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: GCreateOrder.Fragment) {\n      self.orderId = result.id\n      self.branchId = result.branch.id\n      self.deliverAt = undefined\n      logMain('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        logMain('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        logMain(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n      self.deliverAt = undefined\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n      self.isVamInitialized = false\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    useAgreements(agreements: ReadonlyArray<TAgreement>) {\n      if (Array.isArray(agreements)) {\n        self.agreements = agreements\n      }\n      self.isVamInitialized = true\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    openTimePicker() {\n      self.timePickerOpen = true\n    },\n    closeTimePicker() {\n      self.timePickerOpen = false\n    },\n    setTips(tips: string) {\n      self.tips = tips\n    },\n    setDeliverAt(deliverAt: Date | undefined) {\n      self.deliverAt = deliverAt\n    },\n    enableDelayedOrder() {\n      self.delayedOrderEnabled = true\n    },\n    addToCart(recipeId: MaybeID) {\n      self.addToCartRecipeId = recipeId\n    },\n    changeCartItem(itemId: MaybeID) {\n      self.changeCartItemId = itemId\n    },\n    rememberFormValues(values: IOrderFormState) {\n      if (self.root.user.shouldRememberForm) {\n        self.firstname = values.firstname\n        self.lastname = values.lastname\n        self.email = values.email\n        self.phone = values.phone\n        self.phonePrefix = values.phonePrefix\n        self.note = values.note\n        self.tips = values.tips\n        self.payment = values.payment\n      } else {\n        self.firstname = ''\n        self.lastname = ''\n        self.email = ''\n        self.phone = ''\n        self.phonePrefix = ''\n        self.note = ''\n        self.tips = ''\n      }\n    },\n  }))\n  .actions(self => ({\n    async createDeliveryOrder() {\n      const { business, location } = self.root\n      if (!location.geoPoint) {\n        return null\n      }\n      const variables: GCreateDeliveryOrder.Variables = {\n        gps: location.geoPoint,\n        orderOrigin: business.orderOrigin,\n        ...business.brandOrBranch,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreateDeliveryOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreateDeliveryOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    async createPickupOrder(branchId: ID) {\n      const { business } = self.root\n      const variables: GCreatePickupOrder.Variables = {\n        branchId,\n        orderOrigin: business.orderOrigin,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreatePickupOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreatePickupOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    prefetchPickup() {\n      const { business } = self.root\n      if (business.isBrand) {\n        self.client.query({\n          query: PickupMapBrandQuery,\n          variables: { brandId: business.brandId },\n        })\n      } else {\n        self.client.query({\n          query: PickupMapBranchQuery,\n          variables: { branchId: business.branchId },\n        })\n      }\n    },\n    prefetchFoodMenu(branchId?: ID) {\n      if (branchId) {\n        self.client.query({ query: QFoodMenuDocument, variables: { branchId } })\n      }\n    },\n    prefetchFood(recipeId: ID) {\n      self.client.query({\n        query: QCartRecipeDocument,\n        variables: { recipeId },\n      })\n    },\n    async initVam() {\n      const variables: GVamStatus.Variables = {\n        input: {\n          orderId: self.orderId!,\n          email: self.email,\n          firstname: self.firstname,\n          lastname: self.lastname,\n          phone: self.phone,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        self.vamFailed()\n        Sentry.withScope(scope => {\n          Object.keys(variables).forEach(key => {\n            scope.setExtra(key, variables[key])\n          })\n          Sentry.captureException(new VError(err, 'VAM init failed'))\n        })\n      }\n    },\n    async updateVam(formValues: IOrderFormState) {\n      const phone = `${formValues.phonePrefix.trim()}${formValues.phone.trim()}`\n      const email = formValues.email.trim()\n      const firstname = formValues.firstname.trim()\n      const lastname = formValues.lastname.trim()\n      const variables: GVamStatus.Variables = {\n        input: {\n          email,\n          phone,\n          firstname,\n          lastname,\n          orderId: self.orderId!,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        self.vamFailed()\n        Sentry.withScope(scope => {\n          Object.keys(variables).forEach(key => {\n            scope.setExtra(key, variables[key])\n          })\n          Sentry.captureException(new VError(err, 'VAM update failed'))\n        })\n      }\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import { detectLanguage } from '@speedlo/ui'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    selectedLanguage: types.maybe(types.string),\n    rememberForm: types.maybeNull(types.boolean),\n    showAppleBanner: types.optional(types.boolean, true),\n  })\n  .volatile(() => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n    languageActivated: false,\n  }))\n  .views(self => ({\n    get language() {\n      return (\n        self.selectedLanguage ||\n        self.root.business.defaultLanguage ||\n        detectLanguage(appConfig.supportedLanguages, appConfig.fallbackLanguage)\n      )\n    },\n  }))\n  .actions(self => ({\n    selectLanguage(lang: string) {\n      self.selectedLanguage = lang\n      self.languageActivated = false\n    },\n    activateLanguage() {\n      self.languageActivated = true\n    },\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n    hideAppleBanner() {\n      self.showAppleBanner = false\n    },\n  }))\n  .views(self => ({\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import {\n  applySnapshot,\n  getSnapshot,\n  Instance,\n  SnapshotIn,\n  types,\n} from 'mobx-state-tree'\n\nimport { logDebug } from '../helpers/logger'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { CartModel } from './CartModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    cart: types.optional(CartModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .actions(self => {\n    let initialSnapshot\n    return {\n      afterCreate() {\n        const { business, map, ...snapshot } = getSnapshot(self)\n        initialSnapshot = snapshot\n      },\n      reset() {\n        logDebug(initialSnapshot)\n        applySnapshot(self, initialSnapshot)\n      },\n      init: async () => {\n        await Promise.all(self.persistedModels.map(persistModel))\n        initialSnapshot.business = getSnapshot(self.business)\n      },\n    }\n  })\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { ApolloProvider } from '@speedlo/graphql'\nimport { useSentryInit } from '@speedlo/sentry'\nimport { updateWorker } from '@speedlo/tools'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport { RootProvider } from './app/useRoot'\nimport { appConfig } from './config'\nimport { createApolloClient } from './graph/createClient'\nimport { useAnalytics } from './hooks/useAnalytics'\nimport { i18n, I18nManager } from './i18n'\nimport { RootModel } from './models/RootModel'\n\nconst Main = () => {\n  useAnalytics({ reportPage: true })\n  useSentryInit(appConfig.sentryDSN)\n\n  const [root] = React.useState(() => RootModel.create({}))\n  const rootInit = React.useRef(root.init())\n\n  const [client] = React.useState(() => {\n    const newClient = createApolloClient(root, rootInit.current)\n    // TODO: Required for legacy code of calling GraphQL from models\n    root.location.setClient(newClient)\n    root.order.setClient(newClient)\n    return newClient\n  })\n\n  return (\n    <RootProvider value={root}>\n      <ApolloProvider client={client}>\n        <I18nManager rootInit={rootInit.current}>\n          <Router>\n            <App />\n          </Router>\n        </I18nManager>\n      </ApolloProvider>\n    </RootProvider>\n  )\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))\n\nupdateWorker.register({\n  autoUpdate: true,\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    if (event.data === 'update-applied') {\n      location.reload()\n    }\n  })\n}\n","import {\n  createAuthLink,\n  createDefaultApolloClient,\n  createLanguageLink,\n  createLogLink,\n  createNetworkLink,\n  createOfflineLink,\n  createRetryLink,\n  fetchGuestToken,\n} from '@speedlo/graphql'\n\nimport { appConfig } from '../config'\nimport { TRootModel } from '../models/RootModel'\n\nexport function createApolloClient(root: TRootModel, rootInit: Promise<void>) {\n  const getToken = async () => {\n    await rootInit\n    if (root.auth.token) {\n      return root.auth.token\n    }\n    const { token, userId } = await fetchGuestToken(appConfig.endpoint)\n    root.auth.authenticate(token, userId)\n    return token\n  }\n\n  const getLang = () => root.user.language\n\n  return createDefaultApolloClient(\n    createAuthLink({ getToken }),\n    createLanguageLink(getLang),\n    createLogLink(),\n    createRetryLink(),\n    createOfflineLink(),\n    createNetworkLink(appConfig.endpoint),\n  )\n}\n","import React from 'react'\nimport { Button, ButtonProps } from 'reactstrap'\nimport styled, { css } from 'styled-components/macro'\n\nimport { TTheme } from '../app/ThemeSwitchProvider'\nimport { mediaDesktop, mediaMobile } from '../common/Responsive'\nimport { RouteButton } from './RouteButton'\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n  &:active {\n    background-color: #262626 !important;\n  }\n`\n\nPrimaryButton.displayName = 'PrimaryButton'\n\nexport const SecondaryButton = styled(Button)`\n  background-color: ${themeProp('tertiary')};\n  border-color: ${themeProp('tertiary')};\n  &:hover {\n    background-color: ${themeProp('tertiaryHover')};\n    border-color: ${themeProp('tertiaryHover')};\n  }\n`\n\nSecondaryButton.displayName = 'SecondaryButton'\n\nexport const PrimaryRoutedButton = styled(RouteButton)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n`\n\nPrimaryRoutedButton.displayName = 'PrimaryRoutedButton'\n\ninterface IMobileHeaderButton {\n  isConfirm?: boolean\n  theme: TTheme\n}\n\nexport const MobileHeaderButton = styled(\n  ({ isConfirm, theme, ...props }: ButtonProps & IMobileHeaderButton) => (\n    <Button {...props} />\n  ),\n)`\n  background-color: ${({ isConfirm, theme }) =>\n    isConfirm ? theme.primary : 'white'};\n  color: ${({ isConfirm, theme }) => (isConfirm ? 'white' : theme.primary)};\n`\n\nMobileHeaderButton.displayName = 'MobileHeaderButton'\n\ninterface ISelectButtonThemed {\n  selected?: boolean\n  theme: TTheme\n}\n\nexport const SelectButtonThemed = styled(\n  ({ selected, theme, ...props }: ButtonProps & ISelectButtonThemed) => (\n    <Button {...props} />\n  ),\n)`\n  ${({ theme, selected }: ISelectButtonThemed) => css`\n    ${mediaDesktop`\n      background-color: ${selected ? theme.tertiary : theme.unselected}\n    `};\n    ${mediaMobile`\n    background-color: ${selected ? theme.tertiary : 'white'}`}\n    border-color: ${selected ? theme.tertiary : theme.unselected};\n    color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    &:hover {\n      background-color: ${\n        selected ? theme.tertiaryHover : theme.unselectedHover\n      };\n      border-color: ${selected ? theme.tertiaryHover : theme.unselectedHover};\n      color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    }\n  `};\n`\n\nSelectButtonThemed.displayName = 'SelectButtonThemed'\n\nfunction themeProp(name: keyof TTheme) {\n  return ({ theme }: { theme?: TTheme }) => theme![name] as string\n}\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, ButtonProps } from 'reactstrap'\n\ninterface IProps extends ButtonProps {\n  to: LocationDescriptor\n  replace?: boolean\n}\n\nexport const RouteButton: React.FC<IProps> = ({\n  to,\n  replace,\n  children,\n  ...buttonProps\n}) => (\n  <Link to={to} replace={replace}>\n    <Button {...buttonProps}>{children}</Button>\n  </Link>\n)\n"],"sourceRoot":""}