{"version":3,"sources":["app/DesktopApp.tsx","segments/finish/FinishView.tsx","segments/map/views/MapView.tsx","segments/map/OrderMap.tsx","segments/map/PickupMap.tsx","segments/map/atoms/MapPanning.tsx","segments/map/PickupMapBranch.tsx","segments/shop/ShopHeaderView.tsx","segments/shop/ShopHeader.tsx","segments/shop/OrderAddress.tsx","segments/shop/ShopCloseAlert.tsx","segments/shop/ShopIntro.tsx","segments/shop/ShopLogo.tsx","segments/shop/ShopOpeningHours.tsx","segments/shop/Sticker.tsx","segments/shop/ShopHeader.graphql.ts","segments/shop/ShopOverview.tsx","segments/orderForm/OrderFormView.tsx","segments/orderForm/OrderForm.tsx","segments/orderForm/OrderPaymentMethod.tsx","segments/orderForm/OrderPaymentButton.tsx"],"names":["_react","__webpack_require__","_reactRouterDom","_reactstrap","_FinishView","_MapView","_ShopHeaderView","_ShopOverview","default","createElement","Container","fluid","Route","path","component","ShopHeaderView","exact","MapView","ShopOverview","FinishView","_ColStyle","_FinishViewFooter","_FinishViewLoader","_FinishViewOrder","_FinishViewSupport","Row","className","ColStyle","FinishViewLoader","render","result","Fragment","FinishViewOrder","order","FinishViewSupport","branch","companyBranch","FinishViewFooter","finish","_reactRouter","_OrderMethod","_OrderMap","OrderMethod","history","OrderMap","onConfirm","push","_mobxReact","_interopRequireWildcard","_BaseMap","_WithRoot","_types","_DeliveryMap","_PickupMap","mapByOrderMethod","[object Object]","DeliveryTypeEnum","Messenger","createFactory","DeliveryMap","Pickup","PickupMap","WithRoot","rootModel","BaseMap","model","map","Observer","business","isValid","factory","orderMethod","_reactGoogleMaps","_ramda","_MapPanning","_PickupMap2","_PickupMapBranch","Component","this","state","branchId","setNoBranch","setState","renderSite","Marker","key","id","position","lat","gps","latitude","lng","longitude","onClick","setActiveBranch","InfoWindow","onCloseClick","defaultOptions","maxWidth","PickupMapBranch","props","setBranch","prefetchFoodMenu","createPickupOrder","isBrand","QueryPickupMapBrand","variables","brandId","renderLoading","branches","find","RM","propEq","MapPanning","QueryPickupMapBranch","PureComponent","executePanning","panToLocation","_react2","_interopRequireDefault","_styledComponents","_Buttons","_ShopAddress","_ShopStatus","_i18n","PickupMapHeaderStyled","div","withConfig","displayName","theme","primary","tertiaryText","name","ShopAddress","address","ShopStatus","status","opts","PrimaryButton","color","data-testid","disabled","pickupEnabled","decision","openingIn","closingIn","Trans","values","i18n","_","toLocaleUpperCase","getButtonText","_ShopHeader","_ShopHeader2","observe","root","QueryShopHeader","skip","loading","ShopHeader","isLoading","_OrderAddress","_ShopCloseAlert","_ShopClosingTimeModal","_ShopHeaderIcons","_ShopIntro","_ShopLogo","_ShopOpeningHours","_Sticker","ShopHeaderStyled","ShopHeaderInfoStyled","ShopHeaderIcons","ShopLogo","url","homepageUrl","Sticker","ShopIntro","ShopClosingTimeModal","success","OrderAddress","ShopOpeningHours","ShopCloseAlert","location","now","Alert","ShopIntroStyled","headerText","_BackgroundThemed","LogoLink","children","href","Link","to","LogoContainerStyled","BackgroundThemed","imageName","size","_ShopStatusDisplay","ContainerStyled","OpeningHoursStyled","StatusDisplayPosition","span","businessHours","businessHour","closed","closedNote","openAt","closeAt","ShopStatusDisplay","_classnames","StickerThemed","IconStyled","order-method-unselected","order-method-selected","_graphqlTag","_graph","_fragments","ShopHeaderQuery","AddressFragment","CompanyBranchStatusFragment","buildQuery","_CartView","_FoodMenuView","_OrderFormStorageNotice","_OrderFormView","ColStyleLeft","FoodMenuView","ColStyleRight","CartView","OrderFormView","OrderFormStorageNotice","_WithOrder","_OrderErrorModal","_OrderForm","_OrderFormView2","_OrderGoPayModal","WithOrder","orderModel","QueryOrderForm","orderId","countWares","OrderForm","OrderGoPayModal","OrderErrorModal","_OrderAgreements","_OrderFormInputs","_OrderFormSetup","_OrderPaymentMethod","_OrderSubmitLine","OrderFormSetup","form","OrderFormInputs","OrderPaymentMethod","OrderAgreements","OrderSubmitLine","submitForm","canSubmit","isVamInitialized","_OrderPaymentButton","OrderPaymentButton","method","PaymentGateEnum","Gopay","Cash","_reactForm","Checkmark","show","_a","__rest","Field","field","fieldApi","SelectButtonThemed","_extends","selected","value","setValue"],"mappings":"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","file":"static/js/3.772c21cb.chunk.js","sourcesContent":["import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { Container } from 'reactstrap'\n\nimport { FinishView } from '../segments/finish/FinishView'\nimport { MapView } from '../segments/map/views/MapView'\nimport { ShopHeaderView } from '../segments/shop/ShopHeaderView'\nimport { ShopOverview } from '../segments/shop/ShopOverview'\n\nconst DesktopApp = () => (\n  <Container fluid={true}>\n    <Route path=\"/\" component={ShopHeaderView} />\n    <Route exact={true} path=\"/\" component={MapView} />\n    <Route path=\"/order\" component={ShopOverview} />\n    <Route path=\"/finish\" component={FinishView} />\n  </Container>\n)\n\nexport default DesktopApp\n","import './FinishView.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../common/ColStyle'\n\nimport { FinishViewFooter } from './FinishViewFooter'\nimport { FinishViewLoader } from './FinishViewLoader'\nimport { FinishViewOrder } from './FinishViewOrder'\nimport { FinishViewSupport } from './FinishViewSupport'\n\ninterface IProps {}\n\nexport const FinishView: React.SFC<IProps> = ({}) => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyle>\n      <div className=\"finish__view\">\n        <FinishViewLoader\n          render={result => (\n            <>\n              <FinishViewOrder order={result.order} />\n              <FinishViewSupport branch={result.companyBranch} />\n              <FinishViewFooter finish={result} />\n            </>\n          )}\n        />\n      </div>\n    </ColStyle>\n  </Row>\n)\n","import './MapView.css'\n\nimport React from 'react'\nimport { Route } from 'react-router'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../../common/ColStyle'\nimport { OrderMethod } from '../../destination/OrderMethod'\nimport { OrderMap } from '../OrderMap'\n\nexport const MapView = () => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyle>\n      <div className=\"map__view\">\n        <div className=\"map__view__header\">\n          <OrderMethod />\n        </div>\n        <Route>\n          {({ history }) => (\n            <OrderMap onConfirm={() => history.push(`/order`)} />\n          )}\n        </Route>\n      </div>\n    </ColStyle>\n  </Row>\n)\n","import { Observer } from 'mobx-react'\nimport React, { createFactory } from 'react'\n\nimport { BaseMap } from '../../common/BaseMap'\nimport { WithRoot } from '../../common/WithRoot'\nimport { DeliveryTypeEnum } from '../../graph/types'\nimport { TRootModel } from '../../models/RootModel'\nimport { DeliveryMap } from './DeliveryMap'\nimport { PickupMap } from './PickupMap'\n\ninterface IProps {\n  onConfirm(): void\n}\n\ninterface IMapProps extends IProps {\n  rootModel: TRootModel\n}\n\nconst mapByOrderMethod = {\n  [DeliveryTypeEnum.Messenger]: createFactory<IMapProps>(DeliveryMap),\n  [DeliveryTypeEnum.Pickup]: createFactory<IMapProps>(PickupMap),\n}\n\nexport const OrderMap: React.SFC<IProps> = ({ onConfirm }) => (\n  <WithRoot\n    render={rootModel => (\n      <BaseMap\n        model={rootModel.map}\n        render={() => (\n          <Observer>\n            {() => {\n              if (!rootModel.business.isValid) {\n                return null\n              }\n              const factory = mapByOrderMethod[rootModel.order.orderMethod]\n              return factory({\n                rootModel,\n                onConfirm,\n              })\n            }}\n          </Observer>\n        )}\n      />\n    )}\n  />\n)\n","import './PickupMap.css'\n\nimport React, { Component } from 'react'\nimport { InfoWindow, Marker } from 'react-google-maps'\n\nimport { GPickupBranch } from '../../graph/types'\nimport { TRootModel } from '../../models/RootModel'\n\nimport { RM } from '../../helpers/ramda'\nimport { MapPanning } from './atoms/MapPanning'\nimport { QueryPickupMapBranch, QueryPickupMapBrand } from './PickupMap.graphql'\nimport { PickupMapBranch } from './PickupMapBranch'\n\ninterface IProps {\n  rootModel: TRootModel\n  onConfirm(): void\n}\n\ninterface IState {\n  branchId: Maybe<ID>\n}\n\nexport class PickupMap extends Component<IProps, IState> {\n  state = {\n    branchId: null,\n  }\n\n  componentDidMount() {\n    this.setActiveBranch(this.props.rootModel.business.branchId!)\n  }\n\n  setActiveBranch(branchId: ID) {\n    this.setState({ branchId: branchId })\n    this.props.rootModel.order.prefetchFoodMenu(branchId)\n  }\n\n  setNoBranch = () => {\n    this.setState({ branchId: null })\n  }\n\n  onConfirm(branchId: ID) {\n    this.props.rootModel.order.createPickupOrder(branchId, this.props.onConfirm)\n  }\n\n  renderSite = (branch: GPickupBranch.Fragment) => (\n    <Marker\n      key={branch.id}\n      position={{ lat: branch.gps.latitude, lng: branch.gps.longitude }}\n      onClick={() => this.setActiveBranch(branch.id)}\n    >\n      {this.state.branchId === branch.id ? (\n        <InfoWindow\n          onCloseClick={this.setNoBranch}\n          defaultOptions={{ maxWidth: 200 }}\n        >\n          <PickupMapBranch\n            branch={branch}\n            onConfirm={() => {\n              this.props.rootModel.order.setBranch(branch.id)\n              this.onConfirm(branch.id)\n            }}\n          />\n        </InfoWindow>\n      ) : null}\n    </Marker>\n  )\n\n  render() {\n    const { map, business } = this.props.rootModel\n    if (business.isBrand) {\n      return (\n        <QueryPickupMapBrand\n          variables={{ brandId: business.brandId! }}\n          renderLoading={false}\n          render={({ branches }) => {\n            const branch =\n              branches && branches.find(RM.propEq('id', business.branchId))\n            return (\n              <>\n                <MapPanning map={map} gps={branch && branch.gps} />\n                {branches && branches.map(this.renderSite)}\n              </>\n            )\n          }}\n        />\n      )\n    }\n    return (\n      <QueryPickupMapBranch\n        variables={{ branchId: business.branchId! }}\n        renderLoading={false}\n        render={({ branch }) => (\n          <>\n            <MapPanning map={map} gps={branch && branch.gps} />\n            {branch && this.renderSite(branch)}\n          </>\n        )}\n      />\n    )\n  }\n}\n","import React from 'react'\n\nimport { GeoPoint } from '../../../helpers/gps'\nimport { TMapModel } from '../../../models/MapModel'\n\ninterface IProps {\n  gps?: GeoPoint\n  map: TMapModel\n}\n\nexport class MapPanning extends React.PureComponent<IProps> {\n  componentDidMount() {\n    this.executePanning()\n  }\n  componentDidUpdate() {\n    this.executePanning()\n  }\n  executePanning() {\n    const { map, gps } = this.props\n    if (map && gps) {\n      map.panToLocation(gps)\n    }\n  }\n  render() {\n    return null\n  }\n}\n","import { Plural, Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { PrimaryButton } from '../../common/Buttons'\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { IShopStatusRender, ShopStatus } from '../../common/ShopStatus'\nimport { GPickupBranch } from '../../graph/types'\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  branch: GPickupBranch.Fragment\n  onConfirm(): void\n}\n\nconst PickupMapHeaderStyled = styled.div`\n  background-color: ${({ theme }) => theme.primary};\n  color: ${({ theme }) => theme.tertiaryText};\n  text-align: center;\n  padding: 0.4rem 0.2rem 0.2rem 0.2rem;\n  height: 2rem;\n  vertical-align: middle;\n`\n\nexport const PickupMapBranch: React.SFC<IProps> = ({ branch, onConfirm }) => (\n  <div className=\"pickup__map\">\n    <PickupMapHeaderStyled className=\"pickup__map__header\">\n      {branch.name}\n    </PickupMapHeaderStyled>\n    <div className=\"pickup__map__info\">\n      <ShopAddress address={branch.address} />\n    </div>\n    <ShopStatus\n      status={branch}\n      render={opts => (\n        <PrimaryButton\n          color=\"primary\"\n          data-testid=\"submitPickupBranch\"\n          disabled={!branch.pickupEnabled}\n          onClick={onConfirm}\n        >\n          {branch.pickupEnabled ? (\n            getButtonText(opts)\n          ) : (\n            <Trans>Delivery only</Trans>\n          )}\n        </PrimaryButton>\n      )}\n    />\n  </div>\n)\n\nfunction getButtonText({ decision, openingIn, closingIn }: IShopStatusRender) {\n  switch (decision) {\n    case 'Closed':\n      return <Trans>Closed</Trans>\n    case 'ClosingSoon':\n      return (\n        <Plural\n          value={closingIn}\n          one=\"Closing in 1 minute\"\n          other=\"Closing in # minutes\"\n        />\n      )\n    case 'OpeningSoon':\n      return (\n        <Plural\n          value={openingIn}\n          one=\"Opening in 1 minute\"\n          other=\"Opening in # minutes\"\n        />\n      )\n    default:\n      return i18n.t`Pickup here`.toLocaleUpperCase()\n  }\n}\n","import React from 'react'\n\nimport { WithRoot } from '../../common/WithRoot'\n\nimport { ShopHeader } from './ShopHeader'\nimport { QueryShopHeader } from './ShopHeader.graphql'\n\ninterface IProps {}\n\nexport const ShopHeaderView: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={root => (\n      <QueryShopHeader\n        // need to use branchId from order first as it reflects branch for which\n        // order is being made and it might have different eg. business hours\n        // then the one obtained through business code\n        variables={{ branchId: root.order.branchId || root.business.branchId! }}\n        skip={!root.business.isValid}\n        renderLoading={false}\n        render={({ branch }, { loading }) => (\n          <ShopHeader branch={branch} isLoading={loading} />\n        )}\n      />\n    )}\n  />\n)\n\nexport default ShopHeaderView\n","import { Trans } from '@lingui/react'\nimport React from 'react'\nimport { Route } from 'react-router'\nimport { Row } from 'reactstrap'\nimport styled from 'styled-components'\n\nimport { ColStyle } from '../../common/ColStyle'\nimport { GShopHeader } from '../../graph/types'\n\nimport { OrderAddress } from './OrderAddress'\nimport { ShopCloseAlert } from './ShopCloseAlert'\nimport { ShopClosingTimeModal } from './ShopClosingTimeModal'\nimport { ShopHeaderIcons } from './ShopHeaderIcons'\nimport { ShopIntro } from './ShopIntro'\nimport { ShopLogo } from './ShopLogo'\nimport { ShopOpeningHours } from './ShopOpeningHours'\nimport { Sticker } from './Sticker'\n\ninterface IProps {\n  branch?: GShopHeader.Branch\n  isLoading: boolean\n}\n\nconst ShopHeaderStyled = styled.div`\n  display: flex;\n  min-height: 200px;\n`\n\nconst ShopHeaderInfoStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nexport const ShopHeader: React.SFC<IProps> = ({ branch, isLoading }) => (\n  <div>\n    <Row className=\"justify-content-md-center\">\n      <ShopHeaderIcons />\n    </Row>\n\n    <Row className=\"row-white justify-content-md-center\">\n      <ColStyle>\n        <ShopHeaderStyled data-testid=\"shopHeader\">\n          {isLoading ? null : (\n            <>\n              <ShopLogo url={(branch && branch.homepageUrl) || ''} />\n\n              <ShopHeaderInfoStyled>\n                <Route\n                  exact={true}\n                  path=\"/\"\n                  render={() => (\n                    <>\n                      <Sticker>\n                        <Trans>Choose your delivery option below</Trans>\n                      </Sticker>\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/order\"\n                  render={() => (\n                    <>\n                      <ShopClosingTimeModal status={branch} />\n                      <Sticker success={true}>\n                        <OrderAddress address={branch && branch.address} />\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/finish\"\n                  render={() => (\n                    <>\n                      <Sticker success={true}>\n                        <Trans>Order was send</Trans>\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro branch={branch} />\n                    </>\n                  )}\n                />\n              </ShopHeaderInfoStyled>\n              <ShopCloseAlert status={branch} />\n            </>\n          )}\n        </ShopHeaderStyled>\n      </ColStyle>\n    </Row>\n  </div>\n)\n","import React from 'react'\n\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { WithRoot } from '../../common/WithRoot'\nimport { DeliveryTypeEnum, GShopHeader } from '../../graph/types'\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  address?: GShopHeader.Address\n}\n\nexport const OrderAddress: React.SFC<IProps> = ({ address }) => (\n  <WithRoot\n    render={root => {\n      switch (root.order.orderMethod) {\n        case DeliveryTypeEnum.Messenger:\n          return (\n            <span>\n              {i18n.t`Order to address`}: <b>{root.location.address}</b>\n            </span>\n          )\n        case DeliveryTypeEnum.Pickup:\n          return (\n            <span>\n              {i18n.t`Pickup at address`}:{' '}\n              <b>\n                <ShopAddress address={address} />\n              </b>\n            </span>\n          )\n        default:\n          return null\n      }\n    }}\n  />\n)\n","import './ShopCloseAlert.css'\n\nimport { Plural, Trans } from '@lingui/react'\nimport React from 'react'\nimport { Alert } from 'reactstrap'\n\nimport { ShopStatus } from '../../common/ShopStatus'\nimport { GCompanyBranchStatus } from '../../graph/types'\n\ninterface IProps {\n  status?: GCompanyBranchStatus.Fragment\n  now?: Date\n}\n\nexport const ShopCloseAlert: React.SFC<IProps> = ({ status, now }) => {\n  return status ? (\n    <ShopStatus\n      now={now}\n      status={status}\n      render={({ decision, closingIn }) => {\n        if (decision === 'ClosingSoon') {\n          return (\n            <Alert className=\"shop__header__alert\">\n              <Trans>\n                Beware! We are\n                <Plural\n                  value={closingIn}\n                  one=\"closing in 1 minute\"\n                  other=\"closing in # minutes\"\n                />\n                . Finish your order quickly.\n              </Trans>\n            </Alert>\n          )\n        }\n        return null\n      }}\n    />\n  ) : null\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GShopHeader } from '../../graph/types'\n\ninterface IProps {\n  branch?: Maybe<GShopHeader.Branch>\n}\n\nconst ShopIntroStyled = styled.div`\n  margin: 0.8rem 1rem 1rem 1.3rem;\n`\n\nexport const ShopIntro: React.SFC<IProps> = ({ branch }) => (\n  <ShopIntroStyled data-testid=\"headerText\">\n    {branch ? branch.headerText : ''}\n  </ShopIntroStyled>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { BackgroundThemed } from '../../common/BackgroundThemed'\n\ninterface IProps {\n  url: string\n}\n\nconst LogoLink: React.SFC<IProps> = ({ url, children }) =>\n  url ? <a href={url}>{children}</a> : <Link to=\"/\">{children}</Link>\n\nconst LogoContainerStyled = styled.div`\n  height: 200px;\n  width: 400px;\n  flex: 0 0 400px;\n  & .shop__header__logo {\n    height: 100%;\n  }\n`\n\nexport const ShopLogo: React.SFC<IProps> = props => (\n  <LogoContainerStyled>\n    <LogoLink {...props}>\n      <BackgroundThemed\n        className=\"shop__header__logo\"\n        imageName=\"storeLogo\"\n        size=\"cover\"\n      />\n    </LogoLink>\n  </LogoContainerStyled>\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GShopHeader } from '../../graph/types'\nimport { i18n } from '../../i18n'\nimport { ShopStatusDisplay } from './ShopStatusDisplay'\n\ninterface IProps {\n  branch?: GShopHeader.Branch\n}\n\nconst ContainerStyled = styled.div`\n  margin: 0.4rem 0 0 0.1rem;\n`\n\nconst OpeningHoursStyled = styled.div`\n  margin: -0.2rem 0 0 1.35rem;\n  display: inline-block;\n  vertical-align: middle;\n`\n\nconst StatusDisplayPosition = styled.span`\n  padding-left: 2rem;\n`\n\nexport const ShopOpeningHours: React.SFC<IProps> = ({ branch }) => (\n  <ContainerStyled>\n    <span className=\"flaticon-clock\" />\n    {branch &&\n      branch.businessHours.map(businessHour => (\n        <OpeningHoursStyled data-testid=\"openingHours\" key={businessHour.id}>\n          {businessHour.closed\n            ? businessHour.closedNote || i18n.t`Closed`\n            : `${businessHour.openAt} - ${businessHour.closeAt}`}\n        </OpeningHoursStyled>\n      ))}\n    <StatusDisplayPosition>\n      <ShopStatusDisplay status={branch} />\n    </StatusDisplayPosition>\n  </ContainerStyled>\n)\n","import classNames from 'classnames'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst StickerThemed = styled.div`\n  background: ${({ theme }) => theme.primary};\n  color: white;\n  margin-top: 1rem;\n  padding: 0;\n  border-radius: 0 0.7rem 0.7rem 0;\n  white-space: nowrap;\n  flex: none;\n\n  & p {\n    display: inline-block;\n    margin: 0.6rem 1rem 0 0;\n    vertical-align: top;\n    white-space: nowrap;\n  }\n`\n\nconst IconStyled = styled.span`\n  margin: 0.5rem 1rem 0 0.1rem;\n  &:before,:after {\n  font-size: 1.8rem;\n  margin: 0 0 0 1rem;\n  }\n}\n`\n\ninterface IProps {\n  success?: boolean\n}\n\nexport const Sticker: React.SFC<IProps> = ({ success = false, children }) => (\n  <StickerThemed\n    className={classNames('right__sticker', {\n      'order-method-unselected': !success,\n      'order-method-selected': success,\n    })}\n  >\n    <IconStyled className=\"flaticon-transport\" />\n    <p>{children}</p>\n  </StickerThemed>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport {\n  AddressFragment,\n  CompanyBranchStatusFragment,\n} from '../../graph/fragments.graphql'\nimport { GShopHeader } from '../../graph/types'\n\nexport const ShopHeaderQuery = gql`\n  query GShopHeader($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      name\n      phone\n      homepageUrl\n      headerText\n      address {\n        ...GAddress\n      }\n      ...GCompanyBranchStatus\n    }\n  }\n  ${AddressFragment}\n  ${CompanyBranchStatusFragment}\n`\n\nexport const QueryShopHeader = buildQuery<\n  GShopHeader.Query,\n  GShopHeader.Variables\n>(ShopHeaderQuery)\n","import './ShopOverview.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport BackgroundThemed from '../../common/BackgroundThemed'\nimport { ColStyleLeft, ColStyleRight } from '../../common/ColStyle'\nimport { i18n } from '../../i18n'\nimport { CartView } from '../cart/CartView'\nimport { FoodMenuView } from '../foodMenu/FoodMenuView'\nimport { OrderFormStorageNotice } from '../orderForm/OrderFormStorageNotice'\nimport { OrderFormView } from '../orderForm/OrderFormView'\n\nexport const ShopOverview = () => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyleLeft>\n      <div className=\"shop__overview__column\">\n        <FoodMenuView />\n      </div>\n    </ColStyleLeft>\n\n    <ColStyleRight>\n      <div className=\"shop__overview__column cart__column\">\n        <div className=\"cart__column__header\">\n          <span className=\"flaticon-cart cart__column__header__icon\" />\n          <h4>{i18n.t`Your order`}</h4>\n        </div>\n\n        <BackgroundThemed\n          className=\"cart__column__cart\"\n          imageName=\"backgroundCart\"\n        >\n          <CartView />\n        </BackgroundThemed>\n\n        <OrderFormView />\n      </div>\n    </ColStyleRight>\n    <OrderFormStorageNotice />\n  </Row>\n)\n","import './OrderFormView.css'\n\nimport React from 'react'\n\nimport { WithOrder } from '../../common/WithOrder'\n\nimport { OrderErrorModal } from './OrderErrorModal'\nimport { OrderForm } from './OrderForm'\nimport { QueryOrderForm } from './OrderFormView.graphql'\nimport { OrderGoPayModal } from './OrderGoPayModal'\n\nexport const OrderFormView: React.SFC = () => (\n  <WithOrder\n    render={orderModel => (\n      <>\n        <QueryOrderForm\n          variables={{ orderId: orderModel.orderId! }}\n          renderLoading={false}\n          render={({ order }) => {\n            return !order || order.countWares === 0 ? null : (\n              <OrderForm order={orderModel} />\n            )\n          }}\n        />\n        <OrderGoPayModal order={orderModel} />\n        <OrderErrorModal />\n      </>\n    )}\n  />\n)\n","import React from 'react'\n\nimport { TOrderModel } from '../../models/OrderModel'\nimport { OrderAgreements } from './OrderAgreements'\nimport { OrderFormInputs } from './OrderFormInputs'\nimport { OrderFormSetup } from './OrderFormSetup'\nimport { OrderPaymentMethod } from './OrderPaymentMethod'\nimport { OrderSubmitLine } from './OrderSubmitLine'\n\ninterface IProps {\n  order: TOrderModel\n}\n\nexport const OrderForm: React.SFC<IProps> = ({ order }) => (\n  <OrderFormSetup\n    order={order}\n    render={form => (\n      <div className=\"order__form\">\n        <div className=\"order__form__inner\">\n          <OrderFormInputs />\n          <OrderPaymentMethod />\n          <OrderAgreements />\n        </div>\n        <OrderSubmitLine\n          onClick={form.submitForm}\n          canSubmit={order.isVamInitialized}\n        />\n      </div>\n    )}\n  />\n)\n","import './OrderPaymentMethod.css'\n\nimport React from 'react'\n\nimport { PaymentGateEnum } from '../../graph/types'\nimport { i18n } from '../../i18n'\nimport { OrderPaymentButton } from './OrderPaymentButton'\n\nexport const OrderPaymentMethod: React.SFC = () => (\n  <div className=\"order__payment__method\">\n    <OrderPaymentButton\n      method={PaymentGateEnum.Gopay}\n      data-testid=\"orderPaymentMethod__GoPay\"\n    >\n      {i18n.t`Pay by card`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n    <OrderPaymentButton\n      method={PaymentGateEnum.Cash}\n      data-testid=\"orderPaymentMethod__Cash\"\n    >\n      {i18n.t`Pay by cash`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n  </div>\n)\n","import React from 'react'\nimport { Field } from 'react-form'\n\nimport { SelectButtonThemed } from '../../common/Buttons'\nimport { PaymentGateEnum } from '../../graph/types'\n\nexport interface IPaymentButtonProps {\n  method: PaymentGateEnum\n  disabled?: boolean\n}\n\nexport const OrderPaymentButton: React.SFC<IPaymentButtonProps> = ({\n  children,\n  disabled,\n  method,\n  ...props\n}) => (\n  <Field\n    field=\"payment\"\n    render={fieldApi => (\n      <SelectButtonThemed\n        disabled={disabled}\n        selected={fieldApi.value === method}\n        onClick={() => {\n          fieldApi.setValue(method)\n        }}\n        {...props}\n      >\n        <Checkmark show={fieldApi.value === method} />\n        {children}\n      </SelectButtonThemed>\n    )}\n  />\n)\n\nfunction Checkmark({ show }: { show: boolean }) {\n  return show ? (\n    <span className=\"flaticon-mark order__payment__method__button__checked\" />\n  ) : (\n    <div className=\"order__payment__method__button__unchecked\" />\n  )\n}\n"],"sourceRoot":""}