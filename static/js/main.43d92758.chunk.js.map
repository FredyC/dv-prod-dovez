{"version":3,"sources":["helpers/sentry.ts","segments/map/PickupMap.graphql.ts","graph/fragments.graphql.ts","config.ts","models/OrderModel.graphql.ts","graph/index.ts","i18n.tsx","common/WithRoot.tsx","graph/types.ts","locale lazy /^/.*/messages/.ts$/ groupOptions: {} namespace object","graph/buildQuery.tsx","helpers/persistModel.ts","models/BaseModel.ts","models/AuthModel.ts","models/BannerModel.ts","models/BusinessModel.graphql.ts","models/BusinessModel.ts","models/ConfigModel.ts","models/LocationModel.graphql.ts","models/LocationModel.ts","models/MapModel.ts","helpers/gopay.ts","models/OrderModel.ts","models/ThemeModel.graphql.ts","models/ThemeModel.ts","models/UserModel.ts","models/RootModel.ts","common/ErrorContainer.tsx","common/GeolocationAlert.tsx","common/PageTitle.tsx","app/App.tsx","app/Router.tsx","common/ThemeSwitchProvider.tsx","graph/errorHandler.ts","helpers/offline.ts","index.tsx","createClient.ts","styled.ts","segments/cart/CartView.graphql.ts","helpers/ramda.ts","helpers/logger.ts","common/Pacman.tsx","helpers/gps.ts","common/Responsive.tsx","segments/foodMenu/FoodMenuView.graphql.ts","segments/mobile/MobileCart.graphql.ts"],"names":["__webpack_require__","d","__webpack_exports__","installSentry","identifyGuest","setSentryContext","reportRenderingError","reportFailingQuery","reportError","raven_js__WEBPACK_IMPORTED_MODULE_0__","raven_js__WEBPACK_IMPORTED_MODULE_0___default","n","verror__WEBPACK_IMPORTED_MODULE_1__","_config__WEBPACK_IMPORTED_MODULE_2__","_logger__WEBPACK_IMPORTED_MODULE_3__","_ramda__WEBPACK_IMPORTED_MODULE_4__","cb","sentryDSN","Object","a","config","environment","install","context","userId","token","setUserContext","isGuest","setExtraContext","error","info","isSetup","captureException","extra","showReportDialog","errors","data","captureBreadcrumb","category","level","message","assign","forEach","err","Error","userErrors","filter","propEq","length","lastEventId","title","head","meta","cause","PickupMapBrandQuery","PickupMapBranchQuery","QueryPickupMapBrand","QueryPickupMapBranch","graph__WEBPACK_IMPORTED_MODULE_0__","graph_buildQuery__WEBPACK_IMPORTED_MODULE_1__","graph_fragments_graphql__WEBPACK_IMPORTED_MODULE_2__","PickupBranchFragment","JsonAddressFragment","AddressFragment","GeoPointFragment","PriceFragment","RecipeFragment","CartItemFragment","CompanyBranchStatusFragment","appConfig","endpoint","persistenceKey","NODE_ENV","PUBLIC_URL","REACT_APP_LOCAL_ENDPOINT","REACT_APP_STAGE","REACT_APP_LOCAL_KEY","redirectOnFail","pageTitleSuffix","OrderCartForRecipeQuery","OrderCartForItemQuery","CreatePickupOrderMutation","CreateDeliveryOrderMutation","AddToOrderMutation","AddToOrderMobileMutation","ChangeOrderItemMutation","RemoveOrderItemMutation","SubmitOrderMutation","OrderPaymentStatusQuery","VamStatusQuery","graph_fragments_graphql__WEBPACK_IMPORTED_MODULE_1__","segments_cart_CartView_graphql__WEBPACK_IMPORTED_MODULE_2__","_segments_mobile_MobileCart_graphql__WEBPACK_IMPORTED_MODULE_3__","CartRecipeFragment","CreateOrderFragment","src_default","buildQuery","i18n","_lingui_core__WEBPACK_IMPORTED_MODULE_0__","fallbackLanguage","supportedLanguages","I18nManager","react__WEBPACK_IMPORTED_MODULE_3___default","Component","[object Object]","this","state","language","languages","locales_detector__WEBPACK_IMPORTED_MODULE_2__","getLocales","helpers_logger__WEBPACK_IMPORTED_MODULE_4__","join","find","loc","includes","detectLanguage","isReady","lang","catalog","load","loadCatalog","activate","changeLanguage","setState","children","props","createElement","_lingui_react__WEBPACK_IMPORTED_MODULE_1__","WithRoot","RootProvider","mobx_react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","verror__WEBPACK_IMPORTED_MODULE_3__","rootContext","createContext","undefined","render","observe","Consumer","root","Provider","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","LanguageEnum","ShiftUserStateEnum","DeviceStateEnum","DeviceTypeEnum","WareUnitEnum","PaymentGateEnum","PaymentTypeEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","OrderOriginEnum","ZoneTypeEnum","OrderStateEnum","DeliveryTypeEnum","OrderBillingTypeEnum","OrderRecipeStateEnum","OrderOnlineStateEnum","SubscriptionActionType","SettingTypeEnum","map","./cs/messages.ts","./de/messages.ts","./en-dev/messages.ts","./en/messages.ts","./pl/messages.ts","./sk/messages.ts","webpackAsyncContext","req","ids","e","then","id","t","Promise","resolve","code","keys","module","exports","query","_a","renderFragment","renderLoading","renderError","__rest","react__WEBPACK_IMPORTED_MODULE_0___default","react_apollo__WEBPACK_IMPORTED_MODULE_1__","_extends","result","loading","_common_Pacman__WEBPACK_IMPORTED_MODULE_5__","_helpers_sentry__WEBPACK_IMPORTED_MODULE_6__","Fragment","persistModel","model","modelName","mobx_state_tree_module","name","stateKey","writeState","snapshot","localforage_default","setItem","getItem","logger","removeItem","BaseModel","views","self","log","trim","browser_default","env","client","AuthModel","named","maybeNull","string","isValid","getClientHeaders","Authorization","actions","sentry","fetching","authLink","lib","request","previousContext","AuthModel_awaiter","fetchToken","authenticate","String","fetch","headers","link","concat","preProcessSnapshot","url","Accept","response","json","BannerModel","branchId","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","business","isMobileApp","esm","Boolean","CompanyBranchFragment","graph","BranchLookupQuery","BusinessModel","banners","volatile","isBrand","branch","country","orderOrigin","types","WEB","routerBasePath","companyId","company","brandId","brand","requestedCode","REACT_APP_BUSINESS_CODE","window","URL","location","href","searchParams","get","codeParam","lookup","knownBasePath","address","order","orderCancel","mobx_module","initialized","BusinessModel_awaiter","variables","replace","updateFromLookup","has","set","ConfigModel","orderItemsMax","LocationResolutionFragment","fragments_graphql","ResolveLocationQuery","LocationModel","latitude","optional","number","Infinity","longitude","searchValue","isOpen","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","isResolving","isGeolocationAvailable","geolocation","hasLocation","hasAddress","isDeliveryAddress","hasFinishedSearch","geoPoint","latLng","helpers_gps","finalAddress","street","houseNumber","city","companyBranch","isValidAddress","setLocation","gpsCoordinates","resolver","vars","LocationModel_awaiter","setIsResolving","target","setResolutionResult","resolveLocation","clearAddress","userLocation","getCurrentPosition","coords","verror","disableGeolocation","enableHighAccuracy","maximumAge","queryInitialUserLocation","GPSCzechia","MapModel","zoom","mapRef","clickPoint","center","ref","getZoom","getCenter","lat","lng","gps","radiusMeters","panTo","ev","embedScript","embedScriptSandbox","executeGoPayPayment","scriptUrl","script_default","loadScript","options","gatewayUrl","inline","getOptions","_gopay","checkout","OrderModel","orderId","orderMethod","MESSENGER","payment","GOPAY","firstname","lastname","email","phone","phonePrefix","note","isSubmitting","isGoPayChecking","submitErrors","agreements","lastActiveRecipeId","isVamInitialized","hasOrder","fragmentOrderId","usingDeliveryOrderMethod","usingPickupOrderMethod","PICKUP","hasErrors","defaultPhonePrefix","getSubmitVariables","formValues","customer","firstName","lastName","emails","phones","paymentGate","deliverAt","ramda","prop","method","_","checking","Array","isArray","recipeId","fetchPolicy","OrderModel_graphql","status","values","user","shouldRememberForm","done","mutate","mutation","orderCreated","initVam","PickupMap_graphql","FoodMenuView_graphql","sideDishes","current","readFragment","fragment","CartView_graphql","fragmentName","recipe","optimisticResponse","__typename","createOrderRecipe","countWares","items","price","value","formattedValue","MobileCart_graphql","itemId","destroyOrderRecipe","item","input","useAgreements","vamStatus","vamFailed","submitOrder","OrderModel_awaiter","rememberFormValues","submitFailed","submitResult","finishOrder","CASH","submitFinished","gopayUrl","goPayStatusCheck","paymentStatus","queryPaymentStatus","isSuccess","parsedUrl","auth","checkDelay","setTimeout","clearTimeout","orderPaid","search","pathname","toString","CompanyBranchStyleQuery","ThemeModel","storeLogo","storeLogoMobile","backgroundCart","primary","secondary","secondaryHover","tertiary","tertiaryHover","tertiaryText","unselected","unselectedHover","unselectedText","styles","active","main","calcHoverColor","mainSecondary","queryStyles","ThemeModel_awaiter","applyStyle","inputColor","color_default","lighten","hsl","UserModel","rememberForm","boolean","closingTimeAlertHidden","orderLimitAlertHidden","RootModel","theme","persistedModels","init","all","ErrorContainer","prod","ErrorBoundaryContainer","ProductionErrorBoundary","react_default","dispatchErrorReporting","DeveloperErrorBoundary","GeolocationAlert_GeolocationAlertHandler","alert","GeolocationAlert","PageTitle","react_document_title_default","LandscapeMessage","styled","withConfig","displayName","DesktopApp","lazy","bind","MobileApp","app_App","Suspense","fallback","Pacman","Responsive","_lingui_react","Router","index_module","react_router_dom","basename","key","common_ThemeSwitchProvider","styled_components_browser_esm","errorHandler","graphQLErrors","networkError","operation","operationName","locations","path","createErrorLink","apollo_link_error_lib","isOnline","box","navigator","onLine","addEventListener","isNetworkOnline","src_client","cache","inMemoryCache","dataIdFromObject","o","loggingLink","lib_default","enabled","httpLink","apollo_link_batch_http_lib","uri","credentials","retryLink","apollo_link_retry_lib","delay","initial","max","jitter","attempts","retryIf","_operation","offlineLink","dist_default","open","close","createOfflineLink","errorLink","apollo_link_lib","from","ApolloClient","createApolloClient","src_root","create","authenticateClient","createRootModel","Main","react_apollo_browser_umd","react_dom_default","document","getElementById","themed","styled_components__WEBPACK_IMPORTED_MODULE_0__","styled_components_ts__WEBPACK_IMPORTED_MODULE_1__","styled_components_ts__WEBPACK_IMPORTED_MODULE_1___default","component","OrderFragment","QueryCartView","CartViewQuery","ramda__WEBPACK_IMPORTED_MODULE_0__","logMain","logGraph","logError","logAuth","logPersist","logOrder","logSentry","logLang","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_0__","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","noMargin","style","display","alignSelf","justifyContent","data-testid","marginTop","gpsToLatLng","latLngToGps","Number","Desktop","react_responsive__WEBPACK_IMPORTED_MODULE_1___default","minWidth","Mobile","orientation","maxWidth","MobileLandscape","mediaDesktop","args","_styled__WEBPACK_IMPORTED_MODULE_2__","mediaMobile","FoodMenuQuery","CartPresenceFragment","QueryFoodMenuCartPresence","QueryFoodMenu","FoodMenuCartPresenceQuery","OrderMobileFragment","QueryMobileCart","_foodMenu_FoodMenuView_graphql__WEBPACK_IMPORTED_MODULE_2__","MobileCartQuery"],"mappings":"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","file":"static/js/main.43d92758.chunk.js","sourcesContent":["import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\nimport { RM } from './ramda'\n\nexport const installSentry = cb => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyGuest = (userId: string, token: string) => {\n  Raven.setUserContext({\n    isGuest: true,\n    userId,\n    token,\n  })\n}\n\nexport const setSentryContext = (context: object) => {\n  Raven.setExtraContext(context)\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n    Raven.showReportDialog()\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  Raven.captureBreadcrumb({\n    category: 'graphql',\n    level: 'debug',\n    message: 'query',\n    data: {\n      ...data,\n      errors,\n    },\n  })\n  errors.forEach(err => {\n    Raven.captureException(new Error(err.message), { extra: err })\n  })\n  const userErrors = errors.filter(RM.propEq('showToUser', true))\n  if (userErrors.length && Raven.lastEventId()) {\n    Raven.showReportDialog({\n      title: RM.head(userErrors)!.message,\n    })\n  }\n}\n\nexport const reportError = (error: Error, meta: object = {}) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n      ...meta,\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","import { gql } from 'graph'\n\nimport { buildQuery } from 'graph/buildQuery'\nimport {\n  AddressFragment,\n  CompanyBranchStatusFragment,\n  GeoPointFragment,\n} from 'graph/fragments.graphql'\n\nimport { GPickupMapBranch, GPickupMapBrand } from '../../graph/types'\n\nconst PickupBranchFragment = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...GGeoPoint\n    }\n    address {\n      ...GAddress\n    }\n    pickupEnabled\n    ...GCompanyBranchStatus\n  }\n  ${CompanyBranchStatusFragment}\n  ${GeoPointFragment}\n  ${AddressFragment}\n`\n\nexport const PickupMapBrandQuery = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const PickupMapBranchQuery = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const QueryPickupMapBrand = buildQuery<\n  GPickupMapBrand.Query,\n  GPickupMapBrand.Variables\n>(PickupMapBrandQuery)\n\nexport const QueryPickupMapBranch = buildQuery<\n  GPickupMapBranch.Query,\n  GPickupMapBranch.Variables\n>(PickupMapBranchQuery)\n","import { gql } from 'graph'\n\nexport const JsonAddressFragment = gql`\n  fragment GJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n  }\n`\n\nexport const AddressFragment = gql`\n  fragment GAddress on Address {\n    id\n    location {\n      ...GJsonAddress\n    }\n  }\n  ${JsonAddressFragment}\n`\n\nexport const GeoPointFragment = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const PriceFragment = gql`\n  fragment GPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const RecipeFragment = gql`\n  fragment GRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const CartItemFragment = gql`\n  fragment GCartItem on OrderRecipe {\n    id\n    recipe {\n      ...GRecipe\n    }\n  }\n  ${PriceFragment}\n  ${RecipeFragment}\n`\n\nexport const CompanyBranchStatusFragment = gql`\n  fragment GCompanyBranchStatus on CompanyBranch {\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours {\n      id\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n  }\n`\n","export const appConfig = {\n  endpoint: process.env.REACT_APP_LOCAL_ENDPOINT,\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: null,\n  pageTitleSuffix: 'LOCAL',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://b8eb1cf5cf014293aebed1a1cf3314c3@sentry.io/1227696',\n    pageTitleSuffix: 'DEV',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://b8eb1cf5cf014293aebed1a1cf3314c3@sentry.io/1227696',\n    pageTitleSuffix: 'Doveze.cz',\n  })\n}\n","import { gql } from 'graph'\n\nimport { PriceFragment } from 'graph/fragments.graphql'\nimport { OrderFragment } from 'segments/cart/CartView.graphql'\n\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\n\nconst CartRecipeFragment = gql`\n  fragment GCartRecipe on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...GPrice\n        }\n      }\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const OrderCartForRecipeQuery = gql`\n  query GOrderCartForRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...GCartRecipe\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nexport const OrderCartForItemQuery = gql`\n  query GOrderCartForItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...GCartRecipe\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nconst CreateOrderFragment = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const CreatePickupOrderMutation = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const CreateDeliveryOrderMutation = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const AddToOrderMutation = gql`\n  mutation GAddToOrder($orderId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const AddToOrderMobileMutation = gql`\n  mutation GAddToOrderMobile(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const ChangeOrderItemMutation = gql`\n  mutation GChangeOrderItem($orderId: ID!, $itemId: ID!, $sideDishes: [ID!]) {\n    updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const RemoveOrderItemMutation = gql`\n  mutation GRemoveOrderItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const SubmitOrderMutation = gql`\n  mutation GSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime!\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport const OrderPaymentStatusQuery = gql`\n  query GOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport const VamStatusQuery = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nimport { buildMutation } from './buildMutation'\nimport { buildQuery } from './buildQuery'\n\nexport { gql, buildQuery, buildMutation }\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport * as detector from 'locales-detector'\nimport React from 'react'\n\nimport { logLang } from 'helpers/logger'\n\nimport { TRootModel } from './models/RootModel'\n\nexport const i18n = setupI18n()\n\nconst fallbackLanguage = 'en'\nconst supportedLanguages = ['cs', 'sk', 'de', 'pl']\n\nexport class I18nManager extends React.Component<\n  { root: TRootModel },\n  { language: string; isReady: boolean }\n> {\n  state = { language: detectLanguage(), isReady: false }\n  async componentDidMount() {\n    await changeLanguage(this.state.language)\n    this.setState({ isReady: true })\n  }\n  render() {\n    if (this.state.isReady === false) {\n      return null\n    }\n    const { children } = this.props\n    return (\n      <I18nProvider language={this.state.language} i18n={i18n}>\n        {children}\n      </I18nProvider>\n    )\n  }\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.UrlDetector('lang'), new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc => supportedLanguages.includes(loc))\n  return supported || fallbackLanguage\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.ts`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import { Observer } from 'mobx-react'\nimport React, { createFactory } from 'react'\nimport { getDisplayName } from 'recompose'\nimport { VError } from 'verror'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\ninterface IProps {\n  render(root: TRootModel): ReactNode | ReactNode[]\n  observe?: boolean\n}\n\nexport const WithRoot: React.SFC<IProps> = ({ render, observe = false }) => (\n  <rootContext.Consumer>\n    {root => {\n      if (!root) {\n        throw new VError('Missing RootProvider in the tree')\n      }\n      if (observe === true) {\n        return <Observer>{() => render(root)}</Observer>\n      }\n      return render(root)\n    }}\n  </rootContext.Consumer>\n)\n\ninterface IValueMap {\n  [key: string]: any\n}\n\ninterface IInjected {\n  root: TRootModel\n}\n\nexport function inject<TProps extends IValueMap>(observe: boolean = false) {\n  return (BaseComponent: React.SFC<TProps & IInjected>) => {\n    const factory = createFactory(BaseComponent)\n    const injectComponent: React.SFC<TProps> = props => (\n      <WithRoot\n        observe={observe}\n        render={root => factory(Object.assign({ root }, props))}\n      />\n    )\n    injectComponent.displayName = `inject(${getDisplayName(BaseComponent)})`\n    return injectComponent\n  }\n}\n\nexport const RootProvider = rootContext.Provider\n","/* tslint:disable */\n\n/** Date in format YYYY-MM-DD */\nexport type Date = any\n\n/** Time without date (HH:MM:SS) */\nexport type Time = any\n\n/** Date in format iso 8601 format */\nexport type DateTime = any\n\n/** Data in json format */\nexport type Json = any\n\nexport interface InputOrderIndex {\n  companyBranches?: string[] | null\n  user?: string | null\n  orderStatesAND?: OrderStateEnum[] | null\n  orderStatesOR?: OrderStateEnum[] | null\n  orderStateCategoriesOR?: OrderStateCategoryEnum[] | null\n  orderStateCategoryTarget?: OrderStateCategoryTargetEnum | null\n  currency?: CurrencyEnum | null\n  location?: InputLocationIndex | null\n  stateChangeSince?: DateTime | null\n  includeOldFinished?: boolean | null\n}\n\nexport interface InputLocationIndex {\n  tableNumber?: number | null\n}\n\nexport interface InputPaginationParams {\n  fromIndex: number\n  toIndex: number\n}\n\nexport interface InputVamStatus {\n  email?: string | null\n  phone?: string | null\n  firstname?: string | null\n  lastname?: string | null\n  orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  order: string\n  recipe: string\n  orderRecipeState?: OrderRecipeStateEnum | null\n  parent?: string | null\n  sideDishes?: string[] | null\n  associatedRecipes?: string[] | null\n  amount?: number | null\n}\n\nexport interface InputOrderRecipeUpdate {\n  order?: string | null\n  recipe?: string | null\n  orderRecipeState?: string | null\n  parent?: string | null\n  sideDishes?: string[] | null\n}\n\nexport interface InputOrderDeliveryCreate {\n  companyBranch?: string | null\n  brand?: string | null\n  orderOrigin: OrderOriginEnum\n  gps: InputGeoPointCreate\n  deliveryType?: DeliveryTypeEnum | null\n}\n\nexport interface InputGeoPointCreate {\n  latitude: number\n  longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  companyBranch: string\n  orderOrigin: OrderOriginEnum\n  deliverAt: DateTime\n  gps?: InputGeoPointCreate | null\n  warePriceType?: WarePriceTypeEnum | null\n  deliveryType?: DeliveryTypeEnum | null\n  orderRecipes?: InputOrderRecipeCreates[] | null\n  customer?: InputCustomerCreate | null\n}\n\nexport interface InputOrderRecipeCreates {\n  recipe: string\n  sideDishes?: string[] | null\n  associatedRecipes?: string[] | null\n  amount?: number | null\n}\n\nexport interface InputCustomerCreate {\n  firstName?: string | null\n  lastName?: string | null\n  emails?: InputEmailCreate[] | null\n  phones?: InputPhoneCreate[] | null\n}\n\nexport interface InputEmailCreate {\n  email: string\n  description?: string | null\n  default?: boolean | null\n}\n\nexport interface InputPhoneCreate {\n  phone: string\n  description?: string | null\n  default?: boolean | null\n}\n\nexport interface InputOrderCreate {\n  companyBranch: string\n  orderOrigin: OrderOriginEnum\n  warePriceType: WarePriceTypeEnum\n  deliveryType?: DeliveryTypeEnum | null\n  language?: LanguageEnum | null\n  customer: InputCustomerCreate\n  gps?: InputGeoPointCreate | null\n  notification?: InputNotificationCreate | null\n  note?: string | null\n  deliverAt?: DateTime | null\n  location?: InputLocationCreate | null\n  callEventId?: string | null\n}\n\nexport interface InputNotificationCreate {\n  sms?: string | null\n  chrome?: Json | null\n  firebase?: Json | null\n}\n\nexport interface InputLocationCreate {\n  tableNumber?: number | null\n}\n\nexport interface InputOrderPickupCreate {\n  companyBranch: string\n  orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  paymentType: PaymentTypeEnum\n  paymentGate: PaymentGateEnum\n  price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  value: number\n  currency?: CurrencyEnum | null\n}\n\nexport interface InputOrderFinish {\n  customer?: InputCustomerCreate | null\n  paymentMethod?: PaymentTypeEnum | null /** payment method used to finalize order */\n  paymentGate?: PaymentGateEnum | null /** payment gate used to finalize order */\n  deliverAt?: DateTime | null\n  note?: string | null\n  confirmedAgreements?: string[] | null\n}\n\nexport interface InputOrderUpdate {\n  deliveryType?: DeliveryTypeEnum | null\n  language?: LanguageEnum | null\n  customer?: InputCustomerCreate | null\n  gps?: InputGeoPointCreate | null\n  notification?: InputNotificationCreate | null\n  note?: string | null\n  deliverAt?: DateTime | null\n  location?: InputLocationCreate | null\n  warePriceType?: WarePriceTypeEnum | null\n}\n\nexport interface InputPaymentMethodIndex {\n  companyBranch: string\n  orderOrigin: OrderOriginEnum\n  warePriceType: WarePriceTypeEnum\n  paymentType: PaymentTypeEnum\n  paymentGate: PaymentGateEnum\n  enabled?: boolean | null\n}\n\nexport interface InputCompanyCreate {\n  name: string\n  number: string\n  vatIdent: string\n  account: string\n  companyType: CompanyTypeEnum\n}\n\nexport interface InputCompanyBranchCreate {\n  currencies?: CurrencyEnum[] | null\n  name: string\n  enabled?: boolean | null\n  brand: string\n  internalNumber: string\n}\n\nexport interface InputTransportationDeviceCreate {\n  companyBranch: string\n  deviceType: string\n  deviceState: string\n  idNumber: string\n}\n\nexport interface InputBusinessHourCreate {\n  weekDay: WeekDayEnum\n  openAt: Time\n  closeAt: Time\n  smsLabel?: InputLabelCreate | null\n  webLabel?: InputLabelCreate | null\n}\n\nexport interface InputLabelCreate {\n  translations: InputLabelTranslation[]\n  enabled?: boolean | null\n}\n\nexport interface InputLabelTranslation {\n  language: LanguageEnum\n  content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  companyBranch: string\n  openAt?: Time | null\n  closeAt?: Time | null\n  specificDate: Date\n  closed?: boolean | null\n  smsLabel?: InputLabelCreate | null\n  webLabel?: InputLabelCreate | null\n  closedNote?: string | null\n}\n\nexport interface InputWareCreate {\n  companyBranch: string\n  nameLabel: InputLabelCreate\n  descriptionLabel: InputLabelCreate\n  code?: string | null\n  internalCode?: string | null\n  enabled?: boolean | null\n  availabilities?: InputAvailabilityCreate[] | null\n}\n\nexport interface InputAvailabilityCreate {\n  availabilityType?: string | null\n  dateFrom?: Date | null\n  timeFrom?: Time | null\n  dateTo?: Date | null\n  timeTo?: Time | null\n  available?: boolean | null\n  periodic?: boolean | null\n  weekDay?: WeekDayEnum | null\n}\n\nexport interface InputWareUpdate {\n  code?: string | null\n  internalCode?: string | null\n  companyBranch?: string | null\n  nameLabel?: InputLabelUpdate | null\n  descriptionLabel?: InputLabelUpdate | null\n  enabled?: boolean | null\n}\n\nexport interface InputLabelUpdate {\n  translations?: InputLabelTranslation[] | null\n  enabled?: boolean | null\n}\n\nexport interface InputWareCategoryCreate {\n  companyBranch: string\n  wareCategoryType: WareCategoryTypeEnum\n  pictogram?: string | null\n  nameLabel: string\n  internalNoteLabel?: string | null\n  wareRequirement?: WareRequirementEnum | null\n  enabled?: boolean | null\n  public?: boolean | null\n  availabilities?: InputAvailabilityCreate[] | null\n  maxRecipesCount?: number | null\n  recipes?: string[] | null\n}\n\nexport interface InputWareCategoryUpdate {\n  companyBranch?: string | null\n  pictogram?: string | null\n  nameLabel?: string | null\n  internalNoteLabel?: string | null\n  wareRequirement?: WareRequirementEnum | null\n  wareCategoryType?: WareCategoryTypeEnum | null\n  enabled?: boolean | null\n  public?: boolean | null\n  maxRecipesCount?: number | null\n  recipes?: string[] | null\n}\n\nexport interface InputShiftCreate {\n  companyBranch: string\n  beginAt: DateTime\n  endAt: DateTime\n  capacity?: number | null\n  placeCode: string\n}\n\nexport interface InputIngredientCreate {\n  recipe: string\n  stockItem: string\n  quantity: number\n}\n\nexport interface InputRecipeCreate {\n  companyBranch: string\n  nameLabel: string\n  descriptionLabel?: string | null\n  internalNote?: string | null\n  wareCategoryType: WareCategoryTypeEnum\n  enabled?: boolean | null\n  ingredients?: InputRecipeIngredient[] | null\n  wareCategories?: string[] | null\n  sideDishCategories?: string[] | null\n  availabilities?: InputAvailabilityCreate[] | null\n  video?: string | null\n  code?: string | null\n  ware?: string | null\n  prices: InputRecipePriceCreate[]\n  associatedRecipes?: InputRecipeRelationCreate[] | null\n}\n\nexport interface InputRecipeIngredient {\n  stockItem: string\n  quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  warePriceType: WarePriceTypeEnum\n  price: InputCurrencyCreate\n  vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  associatedRecipe: string\n  warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  ware?: string | null\n  nameLabel?: string | null\n  descriptionLabel?: string | null\n  enabled?: boolean | null\n  internalNote?: string | null\n  video?: string | null\n  code?: string | null\n  ingredients?: InputRecipeIngredient[] | null\n  wareCategories?: string[] | null\n  sideDishCategories?: string[] | null\n  prices?: InputRecipePriceCreate[] | null\n  associatedRecipes?: InputRecipeRelationCreate[] | null\n}\n\nexport interface InputZoneCreate {\n  companyBranch: string\n  name?: string | null\n  zoneType?: ZoneTypeEnum | null\n  zoneColor?: string | null\n  enabled?: boolean | null\n  geoPolygon?: InputGeoPointCreate[] | null\n  availability?: InputAvailabilityCreate | null\n  priceRangeRules?: PriceRangeRuleCreate[] | null\n  minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface PriceRangeRuleCreate {\n  price: InputCurrencyCreate\n  toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  companyBranch?: string | null\n  name?: string | null\n  zoneColor?: string | null\n  enabled?: boolean | null\n  geoPolygon?: InputGeoPointCreate[] | null\n  availability?: InputAvailabilityUpdate | null\n  priceRangeRules?: PriceRangeRuleCreate[] | null\n  minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface InputAvailabilityUpdate {\n  availabilityType?: string | null\n  dateFrom?: Date | null\n  timeFrom?: Time | null\n  dateTo?: Date | null\n  timeTo?: Time | null\n  available?: boolean | null\n  periodic?: boolean | null\n  weekDay?: WeekDayEnum | null\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  order: string\n  paymentMethod: string\n  price: InputCurrencyCreate\n}\n\nexport interface InputStockItemCreate {\n  companyBranch: string\n  wareUnit: WareUnitEnum\n  label: string\n  code: string\n  allowNegative: FieldStateEnum\n  plu?: string | null\n  quantity?: number | null\n  allergens?: AllergenEnum[] | null\n  note?: string | null\n}\n\nexport interface InputStockItemUpdate {\n  quantity?: number | null\n  label?: string | null\n  code?: string | null\n  plu?: string | null\n  wareUnit?: WareUnitEnum | null\n  allergens?: AllergenEnum[] | null\n  note?: string | null\n  allowNegative?: FieldStateEnum | null\n}\n\nexport interface InputUserUpdate {\n  language?: LanguageEnum | null\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  CLIENT = 'CLIENT',\n  AFFILIATE = 'AFFILIATE',\n  BRAND = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  BUSINESS = 'BUSINESS',\n  PREMISES = 'PREMISES',\n  MAIN_ADDRESS = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  CZK = 'CZK',\n  HOP = 'HOP',\n  EUR = 'EUR',\n  USD = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  BACKEND = 'BACKEND',\n  FE_ADMIN = 'FE_ADMIN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  PAYMENT = 'PAYMENT',\n  NOTIFICATION = 'NOTIFICATION',\n  RECLAMATION = 'RECLAMATION',\n  DELIVERY = 'DELIVERY',\n  CANCEL = 'CANCEL',\n  MAIN = 'MAIN',\n  PRODUCTION = 'PRODUCTION',\n  NEW_ORDERS = 'NEW_ORDERS',\n  PREPARING = 'PREPARING',\n  ON_WAY = 'ON_WAY',\n  FINISHED = 'FINISHED',\n  READY_TO_DELIVER = 'READY_TO_DELIVER',\n  IN_CART = 'IN_CART',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  MONDAY = 'MONDAY',\n  TUESDAY = 'TUESDAY',\n  WEDNESDAY = 'WEDNESDAY',\n  THURSDAY = 'THURSDAY',\n  FRIDAY = 'FRIDAY',\n  SATURDAY = 'SATURDAY',\n  SUNDAY = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CEREALS_WITH_GLUTTEN = 'CEREALS_WITH_GLUTTEN',\n  SHELLFISH = 'SHELLFISH',\n  EGG = 'EGG',\n  FISH = 'FISH',\n  PEANUT = 'PEANUT',\n  SOYBEANS = 'SOYBEANS',\n  MILK = 'MILK',\n  NUT = 'NUT',\n  CELERY = 'CELERY',\n  MUSTARD = 'MUSTARD',\n  SESAME = 'SESAME',\n  SULFUROUS = 'SULFUROUS',\n  LUPIN = 'LUPIN',\n  MOLLUSCS = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  DELIVERY = 'DELIVERY',\n  INHOUSE = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  MAIN = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  DEFAULT = 'DEFAULT',\n  ENABLED = 'ENABLED',\n  DISABLED = 'DISABLED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  CS = 'CS',\n  SK = 'SK',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  ACCEPTED = 'ACCEPTED',\n  REJECTED = 'REJECTED',\n  WAITING_FOR_RESPONSE = 'WAITING_FOR_RESPONSE',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  WORKING = 'WORKING',\n  BROKEN = 'BROKEN',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  CAR = 'CAR',\n  PLANE = 'PLANE',\n  DRON = 'DRON',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  KILOGRAM = 'KILOGRAM',\n  GRAM = 'GRAM',\n  LITRE = 'LITRE',\n  PIECE = 'PIECE',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  GOPAY = 'GOPAY',\n  PAYPAL = 'PAYPAL',\n  CREDIT = 'CREDIT',\n  CASH = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  CASH = 'CASH',\n  CREDIT = 'CREDIT',\n  VOUCHER = 'VOUCHER',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  MAIN = 'MAIN',\n  SIDE_DISH = 'SIDE_DISH',\n  COVER = 'COVER',\n  MIXIN = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NO_LIMIT = 'NO_LIMIT',\n  OPTIONAL = 'OPTIONAL',\n  MAX_ONE = 'MAX_ONE',\n  MANDATORY = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  ANDROID = 'ANDROID',\n  IOS = 'IOS',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  WEB = 'WEB',\n  DAME_JIDLO = 'DAME_JIDLO',\n  MOBIL_ANDROID = 'MOBIL_ANDROID',\n  MOBIL_IOS = 'MOBIL_IOS',\n  STAFF = 'STAFF',\n  WIFI = 'WIFI',\n  BAKER = 'BAKER',\n  WEB_PARTNER = 'WEB_PARTNER',\n  ENIGOO = 'ENIGOO',\n  MPIZZA = 'MPIZZA',\n  MINISITE = 'MINISITE',\n  AFFILIATE_PIZZA_ROZVOZ = 'AFFILIATE_PIZZA_ROZVOZ',\n  AFFILIATE_ROZVOZ_PIZZY_ZDARMA = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AFFILIATE_ROZVOZ_JIDLA = 'AFFILIATE_ROZVOZ_JIDLA',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  AREA = 'AREA',\n  TABLE = 'TABLE',\n  SECTOR = 'SECTOR',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  IN_CART = 'IN_CART',\n  RECEIVED = 'RECEIVED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  FINISHED = 'FINISHED',\n  RECLAMATION = 'RECLAMATION',\n  RECLAMATION_HANDLED = 'RECLAMATION_HANDLED',\n  UNPAID = 'UNPAID',\n  PAID = 'PAID',\n  BY_CREDIT_CARD = 'BY_CREDIT_CARD',\n  REFUND = 'REFUND',\n  SHOULD_BE_PAID = 'SHOULD_BE_PAID',\n  CUSTOMER_NOTIFIED = 'CUSTOMER_NOTIFIED',\n  NEW = 'NEW',\n  ONLINE = 'ONLINE',\n  EVALUATED = 'EVALUATED',\n  NOT_EVALUATED = 'NOT_EVALUATED',\n  SHOWN = 'SHOWN',\n  ACCEPTED = 'ACCEPTED',\n  READY_TO_PRODUCE = 'READY_TO_PRODUCE',\n  IN_PRODUCE = 'IN_PRODUCE',\n  MADE = 'MADE',\n  READY_TO_DELIVER = 'READY_TO_DELIVER',\n  ON_WAY = 'ON_WAY',\n  STUCK_ON_ROAD = 'STUCK_ON_ROAD',\n  LATE = 'LATE',\n  DELIVERED = 'DELIVERED',\n  CAUSE = 'CAUSE',\n  HANDOVER = 'HANDOVER',\n  WAITING_FOR_CUSTOMER = 'WAITING_FOR_CUSTOMER',\n  CUSTOMER_DID_NOT_COME = 'CUSTOMER_DID_NOT_COME',\n  DELIVER_REJECTED = 'DELIVER_REJECTED',\n  CANCEL_ON_WAY = 'CANCEL_ON_WAY',\n  CANCELED = 'CANCELED',\n  BRANCH_CANCEL = 'BRANCH_CANCEL',\n  CUSTOMER_CANCEL = 'CUSTOMER_CANCEL',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  PICKUP = 'PICKUP',\n  MESSENGER = 'MESSENGER',\n  DRON = 'DRON',\n  MAIL = 'MAIL',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PRICE_SUM = 'PRICE_SUM',\n  COMMISSION = 'COMMISSION',\n  FEE = 'FEE',\n  REWARD_RESULT = 'REWARD_RESULT',\n  AFFILIATE = 'AFFILIATE',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  FRESH = 'FRESH',\n  PREPARING = 'PREPARING',\n  COOKED = 'COOKED',\n  CANCELED = 'CANCELED',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  CREATED = 'CREATED',\n  PENDING = 'PENDING',\n  PAID = 'PAID',\n  CANCELED = 'CANCELED',\n  COMPLETED = 'COMPLETED',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  CREATE = 'CREATE',\n  UPDATE = 'UPDATE',\n  DESTROY = 'DESTROY',\n  REMOVE = 'REMOVE',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  CONFIRMATION = 'CONFIRMATION',\n  ADMIN_ORDER_LISTING = 'ADMIN_ORDER_LISTING',\n  RULES = 'RULES',\n  URL = 'URL',\n  GRAPHIC = 'GRAPHIC',\n  OPTIONS = 'OPTIONS',\n}\nexport namespace GBusinessCodeLookup {\n  export type Variables = {\n    code?: string | null\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    lookup: Lookup\n  }\n\n  export type Lookup = {\n    __typename?: 'CompanyBrandLookUp'\n    branch?: Branch | null\n    isBrand: boolean\n    isMobileApp: boolean\n    knownBasePath: string\n    orderOrigin: OrderOriginEnum\n  }\n\n  export type Branch = GCompanyBranch.Fragment\n}\nexport namespace GResolveLocation {\n  export type Variables = {\n    brandId?: string | null\n    branchId?: string | null\n    address?: string | null\n    latitude?: number | null\n    longitude?: number | null\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    resolveLocation: ResolveLocation\n  }\n\n  export type ResolveLocation = GLocationResolution.Fragment\n}\nexport namespace GOrderCartForRecipe {\n  export type Variables = {\n    recipeId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    recipe: Recipe\n  }\n\n  export type Recipe = GCartRecipe.Fragment\n}\nexport namespace GOrderCartForItem {\n  export type Variables = {\n    itemId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    item: Item\n  }\n\n  export type Item = {\n    __typename?: 'OrderRecipe'\n    id: string\n    recipe: Recipe\n    sideDishes: SideDishes[]\n  }\n\n  export type Recipe = GCartRecipe.Fragment\n\n  export type SideDishes = {\n    __typename?: 'OrderRecipe'\n    id: string\n    recipe: _Recipe\n  }\n\n  export type _Recipe = {\n    __typename?: 'Recipe'\n    id: string\n  }\n}\nexport namespace GCreatePickupOrder {\n  export type Variables = {\n    branchId: string\n    orderOrigin: OrderOriginEnum\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    order: Order\n  }\n\n  export type Order = GCreateOrder.Fragment\n}\nexport namespace GCreateDeliveryOrder {\n  export type Variables = {\n    brandId?: string | null\n    branchId?: string | null\n    gps: InputGeoPointCreate\n    orderOrigin: OrderOriginEnum\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    order: Order\n  }\n\n  export type Order = GCreateOrder.Fragment\n}\nexport namespace GAddToOrder {\n  export type Variables = {\n    orderId: string\n    recipeId: string\n    sideDishes?: string[] | null\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    createOrderRecipe: CreateOrderRecipe\n  }\n\n  export type CreateOrderRecipe = GOrder.Fragment\n}\nexport namespace GAddToOrderMobile {\n  export type Variables = {\n    orderId: string\n    recipeId: string\n    sideDishes?: string[] | null\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    createOrderRecipe: CreateOrderRecipe\n  }\n\n  export type CreateOrderRecipe = GOrderMobile.Fragment\n}\nexport namespace GChangeOrderItem {\n  export type Variables = {\n    orderId: string\n    itemId: string\n    sideDishes?: string[] | null\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    updateOrderRecipe: UpdateOrderRecipe\n  }\n\n  export type UpdateOrderRecipe = GOrder.Fragment\n}\nexport namespace GRemoveOrderItem {\n  export type Variables = {\n    itemId: string\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    destroyOrderRecipe: DestroyOrderRecipe\n  }\n\n  export type DestroyOrderRecipe = GOrder.Fragment\n}\nexport namespace GSubmitOrder {\n  export type Variables = {\n    orderId: string\n    customer?: InputCustomerCreate | null\n    note?: string | null\n    paymentGate: PaymentGateEnum\n    deliverAt: DateTime\n    agreements?: string[] | null\n  }\n\n  export type Mutation = {\n    __typename?: 'Mutation'\n    finishOrder: FinishOrder\n  }\n\n  export type FinishOrder = {\n    __typename?: 'FinishedOrder'\n    userErrors: string[]\n    gopayUrl?: string | null\n  }\n}\nexport namespace GOrderPaymentStatus {\n  export type Variables = {\n    orderId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    status: Status\n  }\n\n  export type Status = {\n    __typename?: 'OrderOnlinePaymentStatus'\n    isSuccess: boolean\n    userErrors: string[]\n  }\n}\nexport namespace GVamStatus {\n  export type Variables = {\n    input: InputVamStatus\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    vamStatus: VamStatus[]\n  }\n\n  export type VamStatus = {\n    __typename?: 'VAMAgreement'\n    id: string\n    name: string\n    description: string\n    isConfirmed: boolean\n    isMandatory: boolean\n  }\n}\nexport namespace GCompanyBranchStyle {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    styles: Styles\n  }\n\n  export type Styles = {\n    __typename?: 'GraphicStyle'\n    active: string\n    main: string\n    mainSecondary: string\n    storeLogo: string\n    storeLogoMobile: string\n    backgroundCart: string\n  }\n}\nexport namespace GCartView {\n  export type Variables = {\n    orderId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n  }\n\n  export type Order = {\n    __typename?: 'Order'\n    deliveryType?: DeliveryType | null\n  } & GOrder.Fragment\n\n  export type DeliveryType = {\n    __typename?: 'DeliveryType'\n    enum: DeliveryTypeEnum\n  }\n}\nexport namespace GFinishView {\n  export type Variables = {\n    orderId: string\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n    companyBranch: CompanyBranch\n    androidApp?: AndroidApp | null\n    iosApp?: IosApp | null\n  }\n\n  export type Order = GFinishViewOrder.Fragment\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    phone: string\n    company: Company\n  }\n\n  export type Company = {\n    __typename?: 'Company'\n    id: string\n  }\n\n  export type AndroidApp = {\n    __typename?: 'MobileApplicationSetting'\n    url: string\n  }\n\n  export type IosApp = {\n    __typename?: 'MobileApplicationSetting'\n    url: string\n  }\n}\nexport namespace GFoodMenu {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    wareCategories: WareCategories[]\n  }\n\n  export type WareCategories = {\n    __typename?: 'WareCategory'\n    recipes: Recipes[]\n  } & GFoodMenuCategory.Fragment\n\n  export type Recipes = GFoodMenuRecipe.Fragment\n}\nexport namespace GFoodMenuCartPresence {\n  export type Variables = {\n    orderId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n  }\n\n  export type Order = {\n    __typename?: 'Order'\n    id: string\n  } & GCartPresence.Fragment\n}\nexport namespace GPickupMapBrand {\n  export type Variables = {\n    brandId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    branches: Branches[]\n  }\n\n  export type Branches = GPickupBranch.Fragment\n}\nexport namespace GPickupMapBranch {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    branch: Branch\n  }\n\n  export type Branch = GPickupBranch.Fragment\n}\nexport namespace GMobileCart {\n  export type Variables = {\n    orderId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n  }\n\n  export type Order = GOrderMobile.Fragment\n}\nexport namespace GMobileShopStatus {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    branch: Branch\n  }\n\n  export type Branch = {\n    __typename?: 'CompanyBranch'\n    id: string\n  } & GCompanyBranchStatus.Fragment\n}\nexport namespace GMobileShopIntro {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    headerText?: string | null\n  }\n}\nexport namespace GSmartBanner {\n  export type Variables = {\n    branchId: string\n    platform: MobilePlatformEnum\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    app?: App | null\n  }\n\n  export type App = {\n    __typename?: 'MobileApplicationSetting'\n    title: string\n    url: string\n    icon: string\n  }\n}\nexport namespace GOrderForm {\n  export type Variables = {\n    orderId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    order: Order\n  }\n\n  export type Order = {\n    __typename?: 'Order'\n    id: string\n    countWares: number\n  }\n}\nexport namespace GShopHeader {\n  export type Variables = {\n    branchId: string\n  }\n\n  export type Query = {\n    __typename?: 'Query'\n    branch: Branch\n  }\n\n  export type Branch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    name: string\n    phone: string\n    homepageUrl?: string | null\n    headerText?: string | null\n    address: Address\n  } & GCompanyBranchStatus.Fragment\n\n  export type Address = GAddress.Fragment\n}\n\nexport namespace GJsonAddress {\n  export type Fragment = {\n    __typename?: 'JsonAddress'\n    street?: string | null\n    houseNumber?: string | null\n    city?: string | null\n  }\n}\n\nexport namespace GAddress {\n  export type Fragment = {\n    __typename?: 'Address'\n    id: string\n    location?: Location | null\n  }\n\n  export type Location = GJsonAddress.Fragment\n}\n\nexport namespace GGeoPoint {\n  export type Fragment = {\n    __typename?: 'GeoPoint'\n    latitude: number\n    longitude: number\n  }\n}\n\nexport namespace GPrice {\n  export type Fragment = {\n    __typename?: 'PriceConverted'\n    value: number\n    formattedValue: string\n  }\n}\n\nexport namespace GRecipe {\n  export type Fragment = {\n    __typename?: 'Recipe'\n    id: string\n    nameLabel: string\n    sideDishCount: number\n  }\n}\n\nexport namespace GCartItem {\n  export type Fragment = {\n    __typename?: 'OrderRecipe'\n    id: string\n    recipe: Recipe\n  }\n\n  export type Recipe = GRecipe.Fragment\n}\n\nexport namespace GCompanyBranchStatus {\n  export type Fragment = {\n    __typename?: 'CompanyBranch'\n    isOpen: boolean\n    willOpenAt?: DateTime | null\n    willCloseAt?: DateTime | null\n    businessHours: BusinessHours[]\n  }\n\n  export type BusinessHours = {\n    __typename?: 'BusinessHour'\n    id: string\n    openAt: Time\n    closeAt: Time\n    closed: boolean\n    closedNote?: string | null\n  }\n}\n\nexport namespace GCompanyBranch {\n  export type Fragment = {\n    __typename?: 'CompanyBranch'\n    id: string\n    code: string\n    brand: Brand\n    company: Company\n    address: Address\n    phone: string\n  }\n\n  export type Brand = {\n    __typename?: 'Company'\n    id: string\n    name: string\n    code: string\n  }\n\n  export type Company = {\n    __typename?: 'Company'\n    id: string\n  }\n\n  export type Address = {\n    __typename?: 'Address'\n    country?: Country | null\n  }\n\n  export type Country = {\n    __typename?: 'Country'\n    phonePrefix: string\n  }\n}\n\nexport namespace GLocationResolution {\n  export type Fragment = {\n    __typename?: 'AddressResolvedLocation'\n    finalAddress?: FinalAddress | null\n    isResolved: boolean\n    isValidAddress: boolean\n    inDeliveryLocation: boolean\n    gpsCoordinates?: GpsCoordinates | null\n    companyBranch?: CompanyBranch | null\n  }\n\n  export type FinalAddress = GJsonAddress.Fragment\n\n  export type GpsCoordinates = {\n    __typename?: 'GeoPoint'\n    latitude: number\n    longitude: number\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n    isOpen: boolean\n  }\n}\n\nexport namespace GCartRecipe {\n  export type Fragment = {\n    __typename?: 'Recipe'\n    id: string\n    nameLabel: string\n    descriptionLabel?: string | null\n    categories: Categories[]\n  }\n\n  export type Categories = {\n    __typename?: 'WareCategory'\n    id: string\n    nameLabel: string\n    minCount: number\n    maxCount: number\n    sideDishes: SideDishes[]\n  }\n\n  export type SideDishes = {\n    __typename?: 'Recipe'\n    id: string\n    nameLabel: string\n    price: Price\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GCreateOrder {\n  export type Fragment = {\n    __typename?: 'Order'\n    id: string\n    companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    __typename?: 'CompanyBranch'\n    id: string\n  }\n}\n\nexport namespace GOrder {\n  export type Fragment = {\n    __typename?: 'Order'\n    id: string\n    countWares: number\n    items: Items[]\n    coverPrice: CoverPrice\n    transportFee: TransportFee\n    discounts: Discounts[]\n    totalDiscount: TotalDiscount\n    totalSum: TotalSum\n  }\n\n  export type Items = {\n    __typename?: 'OrderRecipe'\n    price: Price\n    sideDishes: SideDishes[]\n  } & GCartItem.Fragment\n\n  export type Price = GPrice.Fragment\n\n  export type SideDishes = GCartItem.Fragment\n\n  export type CoverPrice = GPrice.Fragment\n\n  export type TransportFee = GPrice.Fragment\n\n  export type Discounts = {\n    __typename?: 'PriceWithDescription'\n    code: string\n    description: string\n    price: _Price\n  }\n\n  export type _Price = GPrice.Fragment\n\n  export type TotalDiscount = GPrice.Fragment\n\n  export type TotalSum = GPrice.Fragment\n}\n\nexport namespace GFinishViewOrder {\n  export type Fragment = {\n    __typename?: 'Order'\n    id: string\n    items: Items[]\n    totalSum: TotalSum\n    orderPayments: OrderPayments[]\n  }\n\n  export type Items = {\n    __typename?: 'OrderRecipe'\n    sideDishes: SideDishes[]\n  } & GCartItem.Fragment\n\n  export type SideDishes = GCartItem.Fragment\n\n  export type TotalSum = GPrice.Fragment\n\n  export type OrderPayments = {\n    __typename?: 'OrderPaymentMethod'\n    paymentMethod: PaymentMethod\n  }\n\n  export type PaymentMethod = {\n    __typename?: 'PaymentMethod'\n    paymentType: PaymentType\n  }\n\n  export type PaymentType = {\n    __typename?: 'PaymentType'\n    enum: PaymentTypeEnum\n  }\n}\n\nexport namespace GFoodMenuCategory {\n  export type Fragment = {\n    __typename?: 'WareCategory'\n    id: string\n    nameLabel: string\n    pictogram?: string | null\n  }\n}\n\nexport namespace GFoodMenuRecipe {\n  export type Fragment = {\n    __typename?: 'Recipe'\n    id: string\n    image?: string | null\n    nameLabel: string\n    descriptionLabel?: string | null\n    price: Price\n    sideDishCount: number\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GCartPresence {\n  export type Fragment = {\n    __typename?: 'Order'\n    items: Items[]\n  }\n\n  export type Items = {\n    __typename?: 'OrderRecipe'\n    id: string\n    recipe: Recipe\n  }\n\n  export type Recipe = {\n    __typename?: 'Recipe'\n    id: string\n  }\n}\n\nexport namespace GPickupBranch {\n  export type Fragment = {\n    __typename?: 'CompanyBranch'\n    id: string\n    name: string\n    gps: Gps\n    address: Address\n    pickupEnabled: boolean\n  } & GCompanyBranchStatus.Fragment\n\n  export type Gps = GGeoPoint.Fragment\n\n  export type Address = GAddress.Fragment\n}\n\nexport namespace GOrderMobile {\n  export type Fragment = {\n    __typename?: 'Order'\n    id: string\n    totalSum: TotalSum\n    countWares: number\n  } & GCartPresence.Fragment\n\n  export type TotalSum = GPrice.Fragment\n}\n","var map = {\n\t\"./cs/messages.ts\": [\n\t\t386,\n\t\t3\n\t],\n\t\"./de/messages.ts\": [\n\t\t387,\n\t\t4\n\t],\n\t\"./en-dev/messages.ts\": [\n\t\t389,\n\t\t6\n\t],\n\t\"./en/messages.ts\": [\n\t\t388,\n\t\t5\n\t],\n\t\"./pl/messages.ts\": [\n\t\t390,\n\t\t7\n\t],\n\t\"./sk/messages.ts\": [\n\t\t391,\n\t\t8\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 344;\nmodule.exports = webpackAsyncContext;","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport RedBox from 'redbox-react'\nimport { VError } from 'verror'\n\nimport { logError } from 'helpers/logger'\n\nimport Pacman from '../common/Pacman'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n  }\n  const GQuery: React.SFC<IProps> = ({\n    render,\n    renderFragment,\n    renderLoading = true,\n    renderError = true,\n    children,\n    ...props\n  }) => (\n    <Query query={query} {...props}>\n      {result => {\n        if (result.loading || !result.data) {\n          if (typeof renderLoading === 'function') {\n            return renderLoading(result)\n          } else if (renderLoading === true) {\n            return <Pacman />\n          }\n        }\n        if (result.error) {\n          reportError(result.error)\n          logError(result.error)\n          if (typeof renderError === 'function') {\n            return renderError(result)\n          } else if (renderError === true) {\n            if (process.env.NODE_ENV === 'production') {\n              throw new VError(result.error, 'Query error')\n            }\n            return <RedBox error={result.error} />\n          } else {\n            return null\n          }\n        }\n        if (result.data) {\n          if (renderFragment) {\n            return <>{renderFragment(result.data, result)}</>\n          }\n          if (render) {\n            return render(result.data, result)\n          }\n        }\n        return children || null\n      }}\n    </Query>\n  )\n\n  return GQuery\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersist('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersist('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersist('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { IRootEnvironment, TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    const name = getPath(self).trim() || getType(self).name\n    return debug(`c2e:model/${name}`)\n  },\n  get env() {\n    return getEnv<IRootEnvironment>(self)\n  },\n  get client() {\n    const { client } = getEnv<IRootEnvironment>(self)\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import { setContext } from 'apollo-link-context'\nimport { types } from 'mobx-state-tree'\n\nimport { logAuth } from 'helpers/logger'\n\nimport { appConfig } from '../config'\nimport { identifyGuest } from '../helpers/sentry'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return self.token !== null\n    },\n    getClientHeaders() {\n      return {\n        Authorization: `Bearer ${self.token}`,\n      }\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      identifyGuest(userId, token)\n    },\n  }))\n  .actions(self => {\n    let fetching\n\n    const fetch = async () => {\n      if (!fetching) {\n        fetching = fetchToken()\n        const { token, userId } = await fetching\n        self.authenticate(token, String(userId))\n        fetching = null\n      }\n      return fetching\n    }\n\n    const authLink = setContext(async (request, previousContext) => {\n      if (!self.token) {\n        await fetch()\n      }\n      return { headers: self.getClientHeaders() }\n    })\n\n    return {\n      authenticateClient() {\n        self.client.link = authLink.concat(self.client.link)\n      },\n    }\n  })\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId && snapshot.token) {\n      identifyGuest(snapshot.userId, snapshot.token)\n    }\n    return snapshot\n  })\n\nfunction fetchToken() {\n  const { endpoint } = appConfig\n  if (!endpoint) {\n    throw new Error('Missing endpoint in configuration.')\n  }\n  logAuth('retrieving guest token...')\n  const url = `${endpoint}/users/token?guest=true`\n  const options = {\n    headers: {\n      Accept: 'application/json',\n    },\n  }\n  logAuth('token retrieved')\n  return fetch(url, options).then(response => response.json())\n}\n\nexport type TAuthModel = typeof AuthModel.Type\n","import { differenceInDays } from 'date-fns'\nimport { Instance, types } from 'mobx-state-tree'\n\nimport { BaseModel } from 'models/BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\n","import { gql } from 'graph'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const BranchLookupQuery = gql`\n  query GBusinessCodeLookup($code: String) {\n    lookup: companyBranchLookUp(wac: $code) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n  ${CompanyBranchFragment}\n`\n","import { when } from 'mobx'\nimport { types } from 'mobx-state-tree'\n\nimport {\n  GBusinessCodeLookup,\n  GCompanyBranch,\n  OrderOriginEnum,\n} from 'graph/types'\nimport { logMain } from 'helpers/logger'\nimport { setSentryContext } from 'helpers/sentry'\nimport { BaseModel } from 'models/BaseModel'\n\nimport { appConfig } from '../config'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BranchLookupQuery } from './BusinessModel.graphql'\n\ntype TBranch = Omit<GCompanyBranch.Fragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<GCompanyBranch.Country>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.WEB,\n    routerBasePath: '',\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      // app can be built with a specific code for a purpose of mobile apps\n      let code = process.env.REACT_APP_BUSINESS_CODE || null\n      if (!code) {\n        // mostly used in DEV because it's not possible to use subdomains for\n        // business resolution ... use either code from url or stored one as fallback\n        const urlCode = readBusinessCodeFromUrl()\n        code = urlCode || self.code\n      }\n      return code\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: GBusinessCodeLookup.Lookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n      if (!branch) {\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n\n      if (branch.id !== self.root.order.branchId) {\n        self.root.order.orderCancel()\n      }\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    mockBranchData(branch: TBranch) {\n      self.branch = branch\n    },\n  }))\n  .actions(self => ({\n    async afterAttach() {\n      when(\n        () => self.root.initialized,\n        async () => {\n          const { data } = await self.client.query<GBusinessCodeLookup.Query>({\n            query: BranchLookupQuery,\n            variables: {\n              code: self.requestedCode,\n            },\n          })\n\n          if (!(data && data.lookup && data.lookup.branch)) {\n            logMain('no business found, used code %s', self.requestedCode)\n            redirectAway()\n            return\n          }\n\n          self.updateFromLookup(data.lookup)\n\n          setSentryContext({\n            requestedCode: self.requestedCode,\n            branchId: self.branchId,\n            brandId: self.brandId,\n            companyId: self.companyId,\n            isBrand: self.isBrand,\n          })\n\n          logMain(\n            'identified branch %s, brand %s; company %s, isBrand: %s',\n            self.branchId,\n            self.brandId,\n            self.companyId,\n            self.isBrand,\n          )\n        },\n      )\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId: branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n\nexport type TBusinessModel = typeof BusinessModel.Type\nexport type TBusinessModelProps = typeof BusinessModel.SnapshotType\n","import { BaseModel } from 'models/BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport type TConfigModel = typeof ConfigModel.Type\nexport type TConfigModelProps = typeof ConfigModel.SnapshotType\n","import { gql } from 'graph'\n\nimport { JsonAddressFragment } from 'graph/fragments.graphql'\n\nconst LocationResolutionFragment = gql`\n  fragment GLocationResolution on AddressResolvedLocation {\n    finalAddress {\n      ...GJsonAddress\n    }\n    isResolved\n    isValidAddress\n    inDeliveryLocation\n    gpsCoordinates {\n      latitude\n      longitude\n    }\n    companyBranch {\n      id\n      isOpen\n    }\n  }\n  ${JsonAddressFragment}\n`\n\nexport const ResolveLocationQuery = gql`\n  query GResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      ...GLocationResolution\n    }\n  }\n  ${LocationResolutionFragment}\n`\n","import { when } from 'mobx'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { GResolveLocation } from 'graph/types'\nimport { GeoPoint, gpsToLatLng } from 'helpers/gps'\nimport { BaseModel } from 'models/BaseModel'\n\nimport { ResolveLocationQuery } from './LocationModel.graphql'\n\ninterface IVolatileProps {\n  branchId: MaybeID\n  isOpen: boolean\n  isResolved: boolean\n  isStreetAddress: boolean\n  inDeliveryLocation: boolean\n  geolocationDisabled: boolean\n  isResolving: boolean\n}\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.optional(types.number, Infinity),\n    longitude: types.optional(types.number, Infinity),\n    searchValue: types.optional(types.string, ''),\n    address: types.maybeNull(types.string),\n  })\n  .volatile<IVolatileProps>(self => ({\n    branchId: null,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    isResolving: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(self.env.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== Infinity || self.longitude !== Infinity\n    },\n    get hasAddress() {\n      return Boolean(self.address)\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get hasFinishedSearch() {\n      return (self.searchValue.length > 0 || self.address) && !self.isResolving\n    },\n    get geoPoint() {\n      return {\n        latitude: self.latitude,\n        longitude: self.longitude,\n      }\n    },\n    get latLng() {\n      const { latitude, longitude } = self\n      return gpsToLatLng({ latitude, longitude })\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: any) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: GResolveLocation.ResolveLocation) {\n      const { finalAddress: address } = result\n      if (address) {\n        self.address = `${address.street} ${address.houseNumber}, ${\n          address.city\n        }`\n      }\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n      if (result.isResolved) {\n        self.setLocation(result.gpsCoordinates)\n        self.log('resolved as %s', self.address)\n      } else {\n        self.log('not resolved')\n      }\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = false\n    },\n    clearAddress() {\n      self.address = ''\n    },\n    setIsResolving(state: boolean) {\n      self.isResolving = state\n    },\n  }))\n  .actions(self => {\n    const { business } = self.root\n    const resolver = async (vars?: Partial<GResolveLocation.Variables>) => {\n      self.setIsResolving(true)\n      const target = business.isBrand\n        ? {\n            brandId: business.brandId!,\n          }\n        : {\n            branchId: business.branchId!,\n          }\n      const variables: GResolveLocation.Variables = {\n        ...target,\n        ...vars,\n      }\n      const { data } = await self.client.query<GResolveLocation.Query>({\n        query: ResolveLocationQuery,\n        variables,\n      })\n      if (data !== null) {\n        self.setResolutionResult(data.resolveLocation)\n      }\n      self.setIsResolving(false)\n    }\n    return {\n      queryInitialUserLocation() {\n        self.log('resolving initial user location...')\n        if (self.hasLocation) {\n          resolver({ latitude: self.latitude, longitude: self.longitude })\n        } else if (self.searchValue) {\n          resolver({ address: self.searchValue })\n        } else {\n          resolver()\n        }\n      },\n      withUserAddress(address: string) {\n        self.searchValue = address\n        if (address === '') {\n          self.clearAddress()\n        } else {\n          self.log('resolving user address: %s', address)\n          resolver({ address })\n        }\n      },\n      withUserLocation(userLocation: GeoPoint) {\n        self.log('resolving user location: %j', userLocation)\n        resolver(userLocation)\n      },\n      attemptGeolocation() {\n        self.log('geolocating...')\n        self.env.geolocation.getCurrentPosition(\n          ({ coords }) => {\n            resolver(coords)\n          },\n          err => {\n            self.log(new VError('failed geolocation', err))\n            self.disableGeolocation()\n          },\n          {\n            enableHighAccuracy: true,\n            maximumAge: 60 * 1000,\n          },\n        )\n      },\n    }\n  })\n  .actions(self => ({\n    afterAttach() {\n      when(\n        () => self.root.initialized && self.root.business.isValid,\n        () => {\n          self.queryInitialUserLocation()\n        },\n      )\n    },\n  }))\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import { types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { GeoPoint, gpsToLatLng, latLngToGps } from 'helpers/gps'\nimport { BaseModel } from 'models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n  clickPoint: Maybe<GeoPoint>\n}\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n    clickPoint: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panToLocation(gps: GeoPoint, radiusMeters: number = 2000) {\n      if (self.mapRef) {\n        // const bounds = getBounds([\n        //   computeDestinationPoint(gps, radiusMeters, 135), // SE corner\n        //   computeDestinationPoint(gps, radiusMeters, 315), // NW corner\n        // ])\n\n        // // @ts-ignore padding missing in types\n        // self.mapRef.panToBounds(\n        //   {\n        //     west: bounds.minLng,\n        //     east: bounds.maxLng,\n        //     north: bounds.minLat,\n        //     south: bounds.maxLat,\n        //   },\n        //   20,\n        // )\n        self.mapRef.panTo(gpsToLatLng(gps))\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport type TMapModel = typeof MapModel.Type\nexport type TMapModelProps = typeof MapModel.SnapshotType\n","import scriptjs from 'scriptjs'\n\nimport { logOrder } from './logger'\n\nconst embedScript = 'https://gate.gopay.cz/gp-gw/js/embed.js'\nconst embedScriptSandbox = 'https://gw.sandbox.gopay.com/gp-gw/js/embed.js'\n\ninterface ICheckoutResult {\n  url: string\n  id: number\n}\n\nexport async function executeGoPayPayment(url: string) {\n  logOrder('GoPay init', url)\n  await loadScript(url)\n  return checkout(getOptions(url))\n}\n\nfunction getOptions(url: string) {\n  // const isSafari = /^((?!chrome|android|mobile).)*safari/i.test(\n  //   navigator.userAgent,\n  // )\n  // logOrder('Browser is desktop Safari', isSafari)\n  return { gatewayUrl: url, inline: true }\n}\n\nfunction loadScript(url: string) {\n  const scriptUrl = url.includes('gw.sandbox.gopay.com')\n    ? embedScriptSandbox\n    : embedScript\n  logOrder('GoPay script url', scriptUrl)\n  return new Promise(resolve => {\n    scriptjs(scriptUrl, resolve)\n  })\n}\n\nfunction checkout(options: object): Promise<number> {\n  return new Promise(resolve => {\n    logOrder('GoPay checkout')\n    // @ts-ignore\n    _gopay.checkout(options, function(result: ICheckoutResult) {\n      logOrder('GoPay result', result)\n      resolve(result.id)\n    })\n  })\n}\n","import { addHours } from 'date-fns'\nimport { autorun } from 'mobx'\nimport { types } from 'mobx-state-tree'\nimport { FetchResult } from 'react-apollo'\nimport { VError } from 'verror'\n\nimport {\n  DeliveryTypeEnum,\n  GAddToOrder,\n  GChangeOrderItem,\n  GCreateDeliveryOrder,\n  GCreateOrder,\n  GCreatePickupOrder,\n  GOrder,\n  GOrderMobile,\n  GOrderPaymentStatus,\n  GRecipe,\n  GRemoveOrderItem,\n  GSubmitOrder,\n  GVamStatus,\n  PaymentGateEnum,\n} from 'graph/types'\nimport { executeGoPayPayment } from 'helpers/gopay'\nimport { IOrderFormState } from 'segments/orderForm/OrderFormSetup'\n\nimport { RecipeFragment } from '../graph/fragments.graphql'\nimport { logMain, logOrder } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { reportError } from '../helpers/sentry'\nimport { i18n } from '../i18n'\nimport { OrderFragment } from '../segments/cart/CartView.graphql'\nimport { FoodMenuQuery } from '../segments/foodMenu/FoodMenuView.graphql'\nimport {\n  PickupMapBranchQuery,\n  PickupMapBrandQuery,\n} from '../segments/map/PickupMap.graphql'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\nimport { BaseModel } from './BaseModel'\nimport {\n  AddToOrderMobileMutation,\n  AddToOrderMutation,\n  ChangeOrderItemMutation,\n  CreateDeliveryOrderMutation,\n  CreatePickupOrderMutation,\n  OrderCartForRecipeQuery,\n  OrderPaymentStatusQuery,\n  RemoveOrderItemMutation,\n  SubmitOrderMutation,\n  VamStatusQuery,\n} from './OrderModel.graphql'\n\ninterface IVolatileProps {\n  isSubmitting: boolean\n  isGoPayChecking: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  agreements: TAgreement[]\n  lastActiveRecipeId: MaybeID\n  isVamInitialized: boolean\n}\n\nexport type TAgreement = GVamStatus.VamStatus\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.MESSENGER,\n    payment: PaymentGateEnum.GOPAY,\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n  })\n  .volatile<IVolatileProps>(self => ({\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null,\n    agreements: [],\n    lastActiveRecipeId: null,\n    isVamInitialized: false,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get fragmentOrderId() {\n      return `Order-${self.orderId}`\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.MESSENGER\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.PICKUP\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return '+'\n    },\n    getSubmitVariables(formValues: IOrderFormState): GSubmitOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstname,\n          lastName: formValues.lastname,\n          emails: [{ email: formValues.email }],\n          phones: [{ phone: `${formValues.phonePrefix}${formValues.phone}` }],\n        },\n        note: formValues.note,\n        paymentGate: formValues.payment,\n        deliverAt: addHours(new Date(), 1),\n        agreements: formValues.agreements\n          .filter(RM.propEq('isConfirmed', true))\n          .map(RM.prop('id')),\n      }\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: GCreateOrder.Fragment) {\n      self.orderId = result.id\n      self.branchId = result.companyBranch.id\n      logMain('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        logMain('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        logMain(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: string[]) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n      self.isVamInitialized = false\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    useAgreements(agreements: TAgreement[]) {\n      if (Array.isArray(agreements)) {\n        self.agreements = agreements\n      }\n      self.isVamInitialized = true\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    async queryPaymentStatus(\n      orderId: ID = self.orderId!,\n    ): Promise<GOrderPaymentStatus.Status | null> {\n      const variables: GOrderPaymentStatus.Variables = {\n        orderId,\n      }\n      try {\n        const result = await self.client.query<GOrderPaymentStatus.Query>({\n          fetchPolicy: 'no-cache',\n          query: OrderPaymentStatusQuery,\n          variables,\n        })\n        return result.data.status\n      } catch (err) {\n        logOrder('failed to verify payment status for order %s: ', orderId)\n        return null\n      }\n    },\n    rememberFormValues(values: IOrderFormState) {\n      if (self.root.user.shouldRememberForm) {\n        self.firstname = values.firstname\n        self.lastname = values.lastname\n        self.email = values.email\n        self.phone = values.phone\n        self.phonePrefix = values.phonePrefix\n        self.note = values.note\n      } else {\n        self.firstname = ''\n        self.lastname = ''\n        self.email = ''\n        self.phone = ''\n        self.phonePrefix = ''\n        self.note = ''\n      }\n    },\n  }))\n  .actions(self => ({\n    async createDeliveryOrder(done: () => void) {\n      const { business } = self.root\n      const variables: GCreateDeliveryOrder.Variables = {\n        gps: self.root.location.geoPoint,\n        orderOrigin: business.orderOrigin,\n      }\n      if (business.isBrand) {\n        variables.brandId = business.brandId\n      } else {\n        variables.branchId = business.branchId\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreateDeliveryOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreateDeliveryOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      done()\n    },\n    async createPickupOrder(branchId: ID, done: () => void) {\n      const { business } = self.root\n      const variables: GCreatePickupOrder.Variables = {\n        branchId,\n        orderOrigin: business.orderOrigin,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreatePickupOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreatePickupOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      done()\n    },\n    prefetchPickup() {\n      const { business } = self.root\n      if (business.isBrand) {\n        self.client.query({\n          query: PickupMapBrandQuery,\n          variables: { brandId: business.brandId },\n        })\n      } else {\n        self.client.query({\n          query: PickupMapBranchQuery,\n          variables: { branchId: business.branchId },\n        })\n      }\n    },\n    prefetchFoodMenu(branchId?: ID) {\n      if (branchId) {\n        self.client.query({ query: FoodMenuQuery, variables: { branchId } })\n      }\n    },\n    prefetchFood(recipeId: ID) {\n      self.client.query({\n        query: OrderCartForRecipeQuery,\n        variables: { recipeId },\n      })\n    },\n    async addFromRecipe(recipeId: ID, sideDishes: Array<ID> = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrder.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderFragment,\n        fragmentName: 'GOrder',\n      })\n      const recipe = self.client.readFragment<GRecipe.Fragment>({\n        id: `Recipe-${recipeId}`,\n        fragment: RecipeFragment,\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              price: {\n                __typename: 'PriceConverted',\n                value: 0,\n                formattedValue: '---',\n              },\n              recipe: { ...recipe, sideDishes: [] },\n              sideDishes: [],\n            },\n            ...(current ? current.items : []),\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async addFromRecipeMobile(recipeId: ID, sideDishes: Array<ID> = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrderMobile.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderMobileFragment,\n        fragmentName: 'GOrderMobile',\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              recipe: { __typename: 'Recipe', id: recipeId },\n            },\n            ...(current ? current.items : []),\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMobileMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async updateItem(itemId: ID, sideDishes: Array<ID> = []) {\n      const variables: GChangeOrderItem.Variables = {\n        orderId: self.orderId!,\n        itemId,\n        sideDishes,\n      }\n      await self.client.mutate({ mutation: ChangeOrderItemMutation, variables })\n    },\n    removeItemFromCart(itemId: ID) {\n      const variables: GRemoveOrderItem.Variables = {\n        itemId,\n      }\n      const current = self.client.readFragment<GOrder.Fragment>({\n        fragment: OrderFragment,\n        fragmentName: 'GOrder',\n        id: self.fragmentOrderId,\n      })\n      self.client.mutate({\n        mutation: RemoveOrderItemMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          destroyOrderRecipe: {\n            ...current,\n            countWares: current ? current.countWares - 1 : 0,\n            items: current\n              ? current.items.filter(item => item.id !== itemId)\n              : [],\n          },\n        },\n      })\n    },\n    async initVam() {\n      const variables: GVamStatus.Variables = {\n        input: {\n          orderId: self.orderId!,\n          email: self.email,\n          firstname: self.firstname,\n          lastname: self.lastname,\n          phone: self.phone,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    async updateVam(formValues: IOrderFormState) {\n      const phone = `${formValues.phonePrefix.trim()}${formValues.phone.trim()}`\n      const email = formValues.email.trim()\n      const firstname = formValues.firstname.trim()\n      const lastname = formValues.lastname.trim()\n      const variables: GVamStatus.Variables = {\n        input: {\n          email,\n          phone,\n          firstname,\n          lastname,\n          orderId: self.orderId!,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    submitOrder: async (formValues: IOrderFormState) => {\n      self.isSubmitting = true\n      let result: FetchResult\n\n      self.rememberFormValues(formValues)\n\n      try {\n        result = await self.client.mutate({\n          fetchPolicy: 'no-cache',\n          mutation: SubmitOrderMutation,\n          variables: self.getSubmitVariables(formValues),\n        })\n      } catch (err) {\n        self.submitFailed()\n        throw reportError(new VError('submit mutation error: %j', err))\n      }\n\n      if ((result.errors && result.errors.length) || !result.data) {\n        self.submitFailed()\n        throw reportError(\n          new VError('Submit graphql errors: %j', result.errors),\n        )\n      }\n\n      const submitResult: GSubmitOrder.FinishOrder = result.data.finishOrder\n      if (submitResult.userErrors && submitResult.userErrors.length) {\n        self.submitFailed(submitResult.userErrors)\n        throw reportError(\n          new VError('Order user errors: %j', submitResult.userErrors),\n        )\n      }\n\n      if (formValues.payment === PaymentGateEnum.CASH) {\n        self.submitFinished()\n        return\n      }\n\n      if (!submitResult.gopayUrl) {\n        self.submitFailed()\n        throw reportError(new Error('GoPay url missing from response'))\n      }\n\n      await executeGoPayPayment(submitResult.gopayUrl)\n\n      self.goPayStatusCheck(true)\n      const paymentStatus = await self.queryPaymentStatus()\n      self.goPayStatusCheck(false)\n\n      if (paymentStatus && paymentStatus.isSuccess) {\n        self.submitFinished()\n      } else {\n        self.submitFailed(\n          (paymentStatus && paymentStatus.userErrors) || undefined,\n        )\n        throw reportError(new VError('GoPay payment was not successful'))\n      }\n    },\n  }))\n  .actions(self => ({\n    afterAttach() {\n      const parsedUrl = new window.URL(window.location.href)\n      const orderId = parsedUrl.searchParams.get('orderId')\n      autorun(async () => {\n        if (!(orderId && self.root.initialized && self.root.auth.isValid)) {\n          return\n        }\n        const checkDelay = setTimeout(() => self.goPayStatusCheck(true), 500)\n\n        const paymentStatus = await self.queryPaymentStatus(orderId)\n\n        clearTimeout(checkDelay)\n        self.goPayStatusCheck(false)\n        if (paymentStatus && paymentStatus.isSuccess) {\n          self.orderPaid(orderId)\n          parsedUrl.search = ''\n          parsedUrl.pathname = '/finish'\n          location.replace(parsedUrl.toString())\n        } else {\n          const phone = self.root.business.branch!.phone\n          self.submitFailed([\n            i18n.t`We were unable to verify status of your payment. Please contact operator using number ${phone}`,\n          ])\n          return\n        }\n      })\n    },\n  }))\n\nexport type TOrderModel = typeof OrderModel.Type\nexport type TOrderModelProps = typeof OrderModel.SnapshotType\n","import { gql } from 'graph'\n\nexport const CompanyBranchStyleQuery = gql`\n  query GCompanyBranchStyle($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n","import Color from 'color'\nimport { reaction } from 'mobx'\nimport { types } from 'mobx-state-tree'\n\nimport { GCompanyBranchStyle } from 'graph/types'\n\nimport { BaseModel } from './BaseModel'\nimport { CompanyBranchStyleQuery } from './ThemeModel.graphql'\n\n// Fallback colors\nconst defaultPrimary = '#54984a'\nconst defaultSecondary = '#99230e'\nconst defaultTertiary = '#d9a700'\n\nexport const ThemeModel = BaseModel.named('Theme')\n  .props({\n    storeLogo: types.maybeNull(types.string),\n    storeLogoMobile: types.maybeNull(types.string),\n    backgroundCart: types.maybeNull(types.string),\n    primary: types.maybeNull(types.string),\n    secondary: types.maybeNull(types.string),\n    secondaryHover: types.maybeNull(types.string),\n    tertiary: types.maybeNull(types.string),\n    tertiaryHover: types.maybeNull(types.string),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n  })\n  .volatile(self => ({\n    loading: true,\n  }))\n  .actions(self => ({\n    applyStyle(styles: GCompanyBranchStyle.Styles) {\n      Object.assign(self, {\n        primary: styles.active ? styles.active : defaultPrimary,\n        secondary: styles.main ? styles.main : defaultSecondary,\n        secondaryHover: calcHoverColor(\n          styles.main ? styles.main : defaultSecondary,\n        ),\n        tertiary: styles.mainSecondary ? styles.mainSecondary : defaultTertiary,\n        tertiaryHover: calcHoverColor(\n          styles.mainSecondary ? styles.mainSecondary : defaultTertiary,\n        ),\n        tertiaryText: 'white',\n        unselected: '#E5E5E5',\n        unselectedHover: '#EDEDED',\n        unselectedText: '#5A5A5A',\n        storeLogo: styles.storeLogo,\n        storeLogoMobile: styles.storeLogoMobile,\n        backgroundCart: styles.backgroundCart,\n      })\n\n      self.loading = false\n    },\n  }))\n  .actions(self => ({\n    afterAttach() {\n      const queryStyles = async (branchId: ID) => {\n        const { data } = await self.client.query<GCompanyBranchStyle.Query>({\n          query: CompanyBranchStyleQuery,\n          variables: { branchId },\n        })\n        return data.companyBranch.styles\n      }\n      reaction(\n        () => self.root.business.branchId,\n        branchId => {\n          if (branchId) {\n            queryStyles(branchId).then(self.applyStyle)\n          }\n        },\n      )\n    },\n  }))\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport type TThemeModel = typeof ThemeModel.Type\nexport type TThemeModelProps = typeof ThemeModel.SnapshotType\n","import { types } from 'mobx-state-tree'\n\nimport { BaseModel } from 'models/BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    rememberForm: types.maybeNull(types.boolean),\n  })\n  .volatile(self => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n  }))\n  .actions(self => ({\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n  }))\n  .views(self => ({\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n\nexport type TUserModel = typeof UserModel.Type\nexport type TUserModelProps = typeof UserModel.SnapshotType\n","import { GraphClient } from 'createClient'\nimport { flow, Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { persistModel } from 'helpers/persistModel'\n\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { ThemeModel } from './ThemeModel'\nimport { UserModel } from './UserModel'\n\ninterface IVolatileProps {\n  initialized: boolean\n}\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    theme: types.optional(ThemeModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .volatile<IVolatileProps>(self => ({\n    initialized: false,\n  }))\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .actions(self => ({\n    init: flow(function*() {\n      if (self.initialized) {\n        return\n      }\n      yield Promise.all(self.persistedModels.map(persistModel))\n      self.initialized = true\n    }),\n  }))\n\nexport interface IRootEnvironment {\n  client: GraphClient\n  fetch: TFetch\n  geolocation: Geolocation\n}\n\nexport function createRootModel(client: GraphClient) {\n  const root = RootModel.create({}, {\n    client,\n    fetch: window.fetch,\n    geolocation: navigator.geolocation,\n  } as IRootEnvironment)\n  root.init()\n  root.auth.authenticateClient()\n  return root\n}\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import React from 'react'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.SFC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  let ErrorBoundaryContainer\n\n  if (prod) {\n    ErrorBoundaryContainer = require('react-error-guard')\n      .ProductionErrorBoundary\n    return (\n      <ErrorBoundaryContainer\n        dispatchErrorReporting={({ error, info }) => {\n          reportRenderingError(error, info)\n        }}\n      >\n        {children}\n      </ErrorBoundaryContainer>\n    )\n  } else {\n    ErrorBoundaryContainer = require('react-error-guard').DeveloperErrorBoundary\n    return <ErrorBoundaryContainer>{children}</ErrorBoundaryContainer>\n  }\n}\n","import { i18n } from 'i18n'\nimport { when } from 'mobx'\nimport React from 'react'\n\nimport { TRootModel } from 'models/RootModel'\n\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  root: TRootModel\n}\n\nclass GeolocationAlertHandler extends React.Component<IProps> {\n  componentDidMount() {\n    const { root } = this.props\n    when(\n      () => root.initialized && root.location.isGeolocationAvailable,\n      () => {\n        when(\n          () => !root.location.isGeolocationAvailable,\n          () => {\n            window.alert(i18n.t`Your browser does not support geolocation.`)\n          },\n        )\n      },\n    )\n  }\n  render() {\n    return null\n  }\n}\n\nexport const GeolocationAlert = () => (\n  <WithRoot render={root => <GeolocationAlertHandler root={root} />} />\n)\n","import React from 'react'\nimport DocumentTitle from 'react-document-title'\n\nimport { appConfig } from '../config'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {}\n\nexport const PageTitle: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={root => {\n      if (root.business.isValid) {\n        return (\n          <DocumentTitle\n            title={`${root.business.branch!.brand.name} - ${\n              appConfig.pageTitleSuffix\n            }`}\n          />\n        )\n      }\n      return <DocumentTitle title={appConfig.pageTitleSuffix} />\n    }}\n  />\n)\n","import './App.css'\n\nimport { Trans } from '@lingui/react'\nimport React from 'react'\nimport { styled } from 'styled'\n\nimport { ErrorContainer } from 'common/ErrorContainer'\nimport { GeolocationAlert } from 'common/GeolocationAlert'\nimport Pacman from 'common/Pacman'\nimport { Desktop, Mobile, MobileLandscape } from 'common/Responsive'\n\nimport { PageTitle } from '../common/PageTitle'\n\nconst LandscapeMessage = styled('div')`\n  font-size: 1.1rem;\n  padding: 3rem;\n  vertical-align: center;\n`\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <GeolocationAlert />\n    <PageTitle />\n    <React.Suspense fallback={<Pacman />}>\n      <Desktop>\n        <DesktopApp />\n      </Desktop>\n      <Mobile>\n        <MobileApp />\n      </Mobile>\n    </React.Suspense>\n    <MobileLandscape>\n      <LandscapeMessage>\n        <Trans>\n          We know, you like space. Our app is optimised for desktop. Leave your\n          phone in portrait for now.\n        </Trans>\n      </LandscapeMessage>\n    </MobileLandscape>\n  </ErrorContainer>\n)\n\nexport default App\n","import { Observer } from 'mobx-react'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { TRootModel } from '../models/RootModel'\n\ninterface IProps {\n  root: TRootModel\n}\n\nexport const Router: React.SFC<IProps> = ({ root, children }) => (\n  <Observer>\n    {() => (\n      <BrowserRouter\n        basename={root.business.routerBasePath}\n        key={root.business.routerBasePath}\n      >\n        {children}\n      </BrowserRouter>\n    )}\n  </Observer>\n)\n","import React from 'react'\nimport { ThemeProvider } from 'styled-components'\n\nimport Pacman from './Pacman'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {}\n\nconst ThemeSwitchProvider: React.SFC<IProps> = ({ children }) => (\n  <WithRoot\n    observe={true}\n    render={({ auth, theme }) => {\n      if (theme.loading) {\n        return <Pacman />\n      }\n      return <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    }}\n  />\n)\n\nexport default ThemeSwitchProvider\n","import { ErrorResponse, onError } from 'apollo-link-error'\nimport debug from 'debug'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nconst log = debug('graph:error')\n\nexport const errorHandler = ({\n  graphQLErrors,\n  networkError,\n  operation,\n}: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n    graphQLErrors.map(({ message, locations, path }) =>\n      log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    )\n  }\n  if (networkError) {\n    log(`[Network error]: ${networkError}`)\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import React from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport ReactDOM from 'react-dom'\n\nimport { RootProvider } from 'common/WithRoot'\nimport { createRootModel } from 'models/RootModel'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport ThemeSwitchProvider from './common/ThemeSwitchProvider'\nimport { createApolloClient } from './createClient'\nimport { installSentry } from './helpers/sentry'\nimport { I18nManager } from './i18n'\n\nconst client = createApolloClient()\nconst root = createRootModel(client)\n\nconst Main = () => (\n  <RootProvider value={root}>\n    <ApolloProvider client={client}>\n      <I18nManager root={root}>\n        <Router root={root}>\n          <ThemeSwitchProvider>\n            <App />\n          </ThemeSwitchProvider>\n        </Router>\n      </I18nManager>\n    </ApolloProvider>\n  </RootProvider>\n)\n\ninstallSentry(() => {\n  ReactDOM.render(<Main />, document.getElementById('root'))\n})\n","import { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport createLogLink from 'apollo-link-log'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { createErrorLink } from 'graph/errorHandler'\nimport { logGraph } from 'helpers/logger'\nimport { isNetworkOnline } from 'helpers/offline'\n\nimport { appConfig } from './config'\n\nexport type GraphClient = ApolloClient<NormalizedCacheObject>\n\nexport function createApolloClient() {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const loggingLink = createLoggingLink()\n  const httpLink = createHttpLink()\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n\n  const link = ApolloLink.from([\n    loggingLink,\n    retryLink,\n    offlineLink,\n    errorLink,\n    httpLink,\n  ])\n\n  return new ApolloClient({ link, cache })\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createLoggingLink() {\n  return createLogLink({\n    enabled: process.env.REACT_APP_STAGE === 'dev',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: (error, _operation) => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import styled, { css } from 'styled-components'\nimport styledTS from 'styled-components-ts'\n\nimport { TThemeModelProps } from 'models/ThemeModel'\n\nconst themed = <TProps = {}>(component) =>\n  styledTS<TProps, TThemeModelProps>(styled(component))\n\nexport { css, themed as styled }\n","import { buildQuery, gql } from 'graph'\n\nimport { CartItemFragment, PriceFragment } from 'graph/fragments.graphql'\nimport { GCartView } from 'graph/types'\n\nexport const OrderFragment = gql`\n  fragment GOrder on Order {\n    id\n    countWares\n    items {\n      ...GCartItem\n      price: priceWithSideDishes {\n        ...GPrice\n      }\n      sideDishes {\n        ...GCartItem\n      }\n    }\n    coverPrice {\n      ...GPrice\n    }\n    transportFee {\n      ...GPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...GPrice\n      }\n    }\n    totalDiscount {\n      ...GPrice\n    }\n    totalSum {\n      ...GPrice\n    }\n  }\n  ${CartItemFragment}\n  ${PriceFragment}\n`\n\nexport const CartViewQuery = gql`\n  query GCartView($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrder\n      deliveryType {\n        enum\n      }\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const QueryCartView = buildQuery<GCartView.Query, GCartView.Variables>(\n  CartViewQuery,\n)\n","import * as RM from 'ramda'\n\nexport { RM }\n","import debug from 'debug'\n\nexport const logMain = debug('c2e:app')\nexport const logDebug = debug('c2e:debug')\nexport const logGraph = debug('c2e:graph')\nexport const logError = debug('c2e:error')\nexport const logAuth = debug('c2e:auth')\nexport const logRouting = debug('c2e:routing')\nexport const logPersist = debug('c2e:persist')\nexport const logOrder = debug('c2e:order')\nexport const logSentry = debug('c2e:sentry')\nexport const logLang = debug('c2e:lang')\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.SFC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import { GGeoPoint } from 'graph/types'\n\nexport type GeoPoint = Omit<GGeoPoint.Fragment, '__typename'>\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\n\nimport { css } from '../styled'\n\nexport const Desktop = props => <ReactResponsive {...props} minWidth={768} />\nexport const Mobile = props => (\n  <ReactResponsive {...props} orientation=\"portrait\" maxWidth={767} />\n)\nexport const MobileLandscape = props => (\n  <ReactResponsive {...props} orientation=\"landscape\" maxWidth={767} />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.SFC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${768 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${767 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n","import { gql } from 'graph'\n\nimport { buildQuery } from 'graph/buildQuery'\nimport { PriceFragment } from 'graph/fragments.graphql'\nimport { GFoodMenu, GFoodMenuCartPresence } from 'graph/types'\n\nexport const FoodMenuQuery = gql`\n  query GFoodMenu($branchId: ID!) {\n    wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      enabled: true\n    ) {\n      ...GFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...GFoodMenuRecipe\n      }\n    }\n  }\n\n  fragment GFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n\n  fragment GFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...GPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${PriceFragment}\n`\n\nexport const CartPresenceFragment = gql`\n  fragment GCartPresence on Order {\n    items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FoodMenuCartPresenceQuery = gql`\n  query GFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...GCartPresence\n    }\n  }\n  ${CartPresenceFragment}\n`\n\nexport const QueryFoodMenuCartPresence = buildQuery<\n  GFoodMenuCartPresence.Query,\n  GFoodMenuCartPresence.Variables\n>(FoodMenuCartPresenceQuery)\n\nexport const QueryFoodMenu = buildQuery<GFoodMenu.Query, GFoodMenu.Variables>(\n  FoodMenuQuery,\n)\n","import { buildQuery, gql } from 'graph'\n\nimport { PriceFragment } from 'graph/fragments.graphql'\nimport { GMobileCart } from 'graph/types'\n\nimport { CartPresenceFragment } from '../foodMenu/FoodMenuView.graphql'\n\nexport const OrderMobileFragment = gql`\n  fragment GOrderMobile on Order {\n    id\n    totalSum {\n      ...GPrice\n    }\n    countWares\n    ...GCartPresence\n  }\n  ${PriceFragment}\n  ${CartPresenceFragment}\n`\n\nexport const MobileCartQuery = gql`\n  query GMobileCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const QueryMobileCart = buildQuery<\n  GMobileCart.Query,\n  GMobileCart.Variables\n>(MobileCartQuery)\n"],"sourceRoot":""}