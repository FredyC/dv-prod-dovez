{"version":3,"sources":["segments/foodMenu/FoodMenuView.graphql.ts","segments/mobile/MobileCart.graphql.ts","helpers/logger.ts","graph/generated.ts","segments/map/PickupMap.graphql.ts","common/Buttons.tsx","common/RouteButton.tsx","graph/index.ts","helpers/sentry.ts","helpers/formats.ts","config.ts","common/ThemeSwitchProvider.tsx","models/OrderModel.graphql.ts","common/WithRoot.tsx","i18n.tsx","graph/buildQuery.tsx","common/Responsive.tsx","../ /^/.*/messages/.po$/ groupOptions: {} namespace object","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","helpers/ramda.ts","helpers/gps.ts","common/Pacman.tsx","common/ErrorContainer.tsx","common/PageTitle.tsx","app/ResetPersistenceButton.tsx","app/App.tsx","app/Router.tsx","graph/errorHandler.ts","helpers/offline.ts","helpers/persistModel.ts","models/BaseModel.ts","models/AuthModel.ts","models/BannerModel.ts","models/BusinessModel.graphql.ts","models/BusinessModel.ts","models/ConfigModel.ts","models/LocationModel.ts","models/MapModel.ts","helpers/gopay.ts","models/OrderModel.ts","models/UserModel.ts","models/RootModel.ts","index.tsx","createClient.ts"],"names":["FoodMenuQuery","gql","_templateObject","FPriceFragmentDoc","CartPresenceFragment","_templateObject2","FoodMenuCartPresenceQuery","_templateObject3","QueryFoodMenuCartPresence","buildQuery","QueryFoodMenu","OrderMobileFragment","MobileCartQuery","__webpack_require__","d","__webpack_exports__","logMain","logMap","logDebug","logGraph","logError","logAuth","logPersist","logOrder","logSentry","logLang","debug__WEBPACK_IMPORTED_MODULE_0__","debug__WEBPACK_IMPORTED_MODULE_0___default","n","debug","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderBillingTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","LanguageEnum","OrderOnlineStateEnum","OrderOriginEnum","PaymentGateEnum","PaymentTypeEnum","OrderStateEnum","ZoneTypeEnum","ShiftUserStateEnum","WareUnitEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","SubscriptionActionType","SettingTypeEnum","GCompanyBranchFragmentDoc","GCartRecipeFragmentDoc","GCreateOrderFragmentDoc","_templateObject4","FRecipeFragmentDoc","_templateObject5","FCartItemFragmentDoc","_templateObject6","GFinishViewOrderFragmentDoc","_templateObject7","GFoodMenuCategoryFragmentDoc","_templateObject8","GFoodMenuRecipeFragmentDoc","_templateObject9","FGeoPointFragmentDoc","_templateObject10","FJsonAddressFragmentDoc","_templateObject11","FAddressFragmentDoc","_templateObject12","FCompanyBranchStatusFragmentDoc","_templateObject13","GPickupBranchFragmentDoc","_templateObject14","GCartPresenceFragmentDoc","_templateObject15","GOrderMobileFragmentDoc","_templateObject16","FPromoCodeFragmentDoc","_templateObject17","FOrderFragmentDoc","_templateObject18","FShopOpeningHoursFragmentDoc","_templateObject19","_templateObject20","_templateObject21","_templateObject22","_templateObject23","_templateObject24","_templateObject25","_templateObject26","_templateObject27","_templateObject28","_templateObject29","_templateObject30","_templateObject31","_templateObject32","_templateObject33","_templateObject34","GInitialLocationDocument","_templateObject35","useGInitialLocation","variables","baseOptions","Hooks","_templateObject36","_templateObject37","_templateObject38","_templateObject39","_templateObject40","_templateObject41","_templateObject42","_templateObject43","_templateObject44","_templateObject45","_templateObject46","_templateObject47","_templateObject48","_templateObject49","GThemeStyleDocument","_templateObject50","useGThemeStyle","GResolveLocationDocument","_templateObject51","QCartViewDocument","_templateObject52","useQCartView","PickupBranchFragment","PickupMapBrandQuery","PickupMapBranchQuery","QueryPickupMapBrand","QueryPickupMapBranch","PrimaryButton","styled","Button","withConfig","displayName","componentId","themeProp","SecondaryButton","PrimaryRoutedButton","_ref","to","replace","children","buttonProps","Object","objectWithoutProperties","react_default","a","createElement","react_router_dom","reactstrap_es","MobileHeaderButton","isConfirm","theme","props","_ref2","primary","_ref3","SelectButtonThemed","_ref4","selected","_ref5","css","mediaDesktop","tertiary","unselected","mediaMobile","tertiaryText","unselectedText","tertiaryHover","unselectedHover","name","_ref6","installSentry","cb","sentryDSN","appConfig","Raven","config","environment","process","install","context","identifyGuest","userId","token","setUserContext","isGuest","setSentryContext","setExtraContext","reportRenderingError","error","info","isSetup","captureException","extra","showReportDialog","reportFailingQuery","errors","data","captureBreadcrumb","category","level","message","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","forEach","err","Error","userErrors","filter","RM","propEq","length","lastEventId","title","head","reportError","meta","arguments","undefined","VError","cause","formatTime","formatDateTime","formatAddress","date_fns_fp__WEBPACK_IMPORTED_MODULE_0__","date_fns_locale_cs__WEBPACK_IMPORTED_MODULE_1__","currentLocale","csLocale","formatLocale","formatWithOptions","locale","format","parse","address","street","houseNumber","concat","city","state","fallbackLanguage","supportedLanguages","endpoint","persistenceKey","REACT_APP_LOCAL_KEY","redirectOnFail","pageTitleSuffix","assign","calcHoverColor","inputColor","Color","lighten","hsl","string","ThemeSwitchProvider","branchId","business","useRoot","brandId","skip","isValid","styles","defaultTheme","secondary","secondaryHover","storeLogo","storeLogoMobile","backgroundCart","active","main","mainSecondary","getTheme","useObserver","react__WEBPACK_IMPORTED_MODULE_3___default","styled_components__WEBPACK_IMPORTED_MODULE_4__","CartRecipeFragment","OrderCartForRecipeQuery","OrderCartForItemQuery","CreateOrderFragment","CreatePickupOrderMutation","CreateDeliveryOrderMutation","AddToOrderMutation","AddToOrderMobileMutation","ChangeOrderItemMutation","RemoveOrderItemMutation","SubmitOrderMutation","OrderPaymentStatusQuery","VamStatusQuery","WithRoot","RootProvider","mobx_react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","rootContext","React","createContext","root","useContext","render","_ref$observe","observe","Provider","i18n","setupI18n","I18nManager","forceLanguage","_useState","useState","_useState2","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","isReady","setReady","_useState3","languages","detector","getLocales","join","find","loc","includes","detectLanguage","language","useAsyncEffect","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","mark","_callee","wrap","_context","prev","next","changeLanguage","stop","this","react__WEBPACK_IMPORTED_MODULE_8___default","_common_Pacman__WEBPACK_IMPORTED_MODULE_9__","_lingui_react__WEBPACK_IMPORTED_MODULE_5__","_x","_changeLanguage","apply","_callee2","lang","_context2","abrupt","loadCatalog","activate","_callee3","catalog","_context3","sent","load","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","query","renderFragment","_ref$renderLoading","renderLoading","_ref$renderError","renderError","D_workspace_deepvision_doveze_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react_apollo__WEBPACK_IMPORTED_MODULE_2__","result","loading","_common_Pacman__WEBPACK_IMPORTED_MODULE_5__","Fragment","Desktop","Mobile","MobileLandscape","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","react_responsive__WEBPACK_IMPORTED_MODULE_1__","react_responsive__WEBPACK_IMPORTED_MODULE_1___default","styled_components__WEBPACK_IMPORTED_MODULE_2__","minWidth","maxAspectRatio","maxWidth","screen","minAspectRatio","map","./cs/messages.po","./de/messages.po","./en-dev/messages.po","./en/messages.po","./pl/messages.po","./sk/messages.po","webpackAsyncContext","req","ids","e","then","id","t","Promise","resolve","code","keys","module","exports","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","ramda__WEBPACK_IMPORTED_MODULE_0__","gpsToLatLng","latLngToGps","gps","lat","Number","latitude","lng","longitude","latLng","react_spinkit__WEBPACK_IMPORTED_MODULE_1__","react_spinkit__WEBPACK_IMPORTED_MODULE_1___default","Pacman","_ref$noMargin","noMargin","style","display","alignSelf","justifyContent","data-testid","marginTop","ErrorContainer","ErrorBoundaryContainer","_ref$prod","prod","require","ProductionErrorBoundary","dispatchErrorReporting","DeveloperErrorBoundary","PageTitle","react_document_title_default","branch","brand","ResetPersistenceButton","LandscapeMessage","div","DesktopApp","lazy","all","bind","MobileApp","App","ErrorContainer_ErrorContainer","PageTitle_PageTitle","Responsive","_lingui_react","ResetPersistenceButton_ResetPersistenceButton","Router","basename","routerBasePath","key","log","errorHandler","graphQLErrors","networkError","operation","operationName","locations","path","createErrorLink","onError","isOnline","observable","box","navigator","onLine","window","addEventListener","set","isNetworkOnline","get","persistModel","_persistModel","model","modelName","stateKey","writeState","regenerator_default","getType","snapshot","localforage","setItem","getItem","applySnapshot","getSnapshot","t0","removeItem","onSnapshot","BaseModel","types","views","self","getPath","trim","env","getEnv","client","getRoot","AuthModel","named","maybeNull","getClientHeaders","Authorization","actions","authenticate","fetching","fetch","asyncToGenerator","fetchToken","String","authLink","setContext","headers","attachAuthLinkToClient","link","preProcessSnapshot","url","Accept","response","json","BannerModel","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","isMobileApp","differenceInDays","Boolean","setInstalledNow","setClosedNow","CompanyBranchFragment","BusinessLookupQuery","BusinessModel","banners","volatile","isBrand","country","orderOrigin","Web","companyId","company","brandOrBranch","requestedCode","REACT_APP_BUSINESS_CODE","URL","location","href","searchParams","codeParam","updateFromLookup","lookup","knownBasePath","mockBranchData","queryBusiness","_queryBusiness","redirectAway","ensureBannerForCurrentBranch","has","ConfigModel","orderItemsMax","LocationModel","number","searchValue","isOpen","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","geolocationPoint","isResolving","isGeolocationAvailable","geolocation","hasLocation","hasAddress","isDeliveryAddress","hasFinishedSearch","geoPoint","resolutionTarget","setLocation","setResolutionResult","finalAddress","companyBranch","isValidAddress","gpsCoordinates","setVolatileProps","disableGeolocation","clearAddress","setIsResolving","resolver","vars","objectSpread","resolveLocation","validateUserLocation","withUserAddress","withUserLocation","userLocation","useGeolocationResult","point","attemptGeolocation","_this","getCurrentPosition","coords","accuracy","alert","_","enableHighAccuracy","maximumAge","GPSCzechia","MapModel","zoom","optional","mapRef","clickPoint","center","setMapRef","ref","updateZoom","getZoom","updatePosition","getCenter","panToLocation","panTo","onClick","ev","clearClickPoint","embedScript","embedScriptSandbox","executeGoPayPayment","_executeGoPayPayment","loadScript","checkout","getOptions","gatewayUrl","inline","scriptUrl","scriptjs","options","_gopay","OrderModel","orderId","orderMethod","Messenger","payment","Gopay","deliverAt","firstname","lastname","email","phone","phonePrefix","note","isSubmitting","isGoPayChecking","submitErrors","agreements","lastActiveRecipeId","isVamInitialized","timePickerOpen","shouldRefreshCart","delayedOrderEnabled","hasOrder","fragmentOrderId","usingDeliveryOrderMethod","usingPickupOrderMethod","Pickup","hasErrors","defaultPhonePrefix","getSubmitVariables","formValues","customer","firstName","lastName","emails","phones","paymentGate","isoDate","prop","useOrderMethod","method","setBranch","orderCreated","orderPaid","orderCancel","order","submitFinished","submitFailed","vamFailed","clearErrors","goPayStatusCheck","checking","useAgreements","Array","isArray","setUsedRecipeId","recipeId","openTimePicker","closeTimePicker","setCartRefresh","shouldRefresh","setDeliverAt","enableDelayedOrder","queryPaymentStatus","_queryPaymentStatus","_args","fetchPolicy","status","rememberFormValues","values","user","shouldRememberForm","createDeliveryOrder","_createDeliveryOrder","_self$root","mutate","mutation","initVam","createPickupOrder","_createPickupOrder","prefetchPickup","prefetchFoodMenu","prefetchFood","addFromRecipe","_addFromRecipe","_callee4","sideDishes","current","recipe","optimisticResponse","_args4","_context4","readFragment","fragment","fragmentName","__typename","createOrderRecipe","countWares","items","toConsumableArray","price","value","formattedValue","automatic","_x2","addFromRecipeMobile","_addFromRecipeMobile","_callee5","_args5","_context5","_x3","updateItem","_updateItem","_callee6","itemId","_args6","_context6","_x4","removeItemFromCart","destroyOrderRecipe","item","_initVam","_callee7","_context7","input","vamStatus","updateVam","_updateVam","_callee8","_context8","_x5","submitOrder","_submitOrder","_callee9","submitResult","paymentStatus","_context9","finishOrder","Cash","gopayUrl","isSuccess","_x6","checkPaymentStatus","parsedUrl","when","auth","_callee10","checkDelay","_context10","setTimeout","clearTimeout","search","pathname","toString","UserModel","rememberForm","boolean","closingTimeAlertHidden","orderLimitAlertHidden","showClosingTime","hideClosingTime","showOrderLimit","hideOrderLimit","setFormRememberYes","setFormRememberNo","RootModel","persistedModels","initialSnapshot","afterCreate","_getSnapshot","reset","init","_init","cache","InMemoryCache","dataIdFromObject","o","loggingLink","createLogLink","enabled","httpLink","BatchHttpLink","uri","credentials","retryLink","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","offlineLink","QueueLink","autorun","open","close","createOfflineLink","errorLink","ApolloLink","from","ApolloClient","createApolloClient","create","createRootModel","Main","Suspense","fallback","react_apollo_browser_umd","ApolloContext","Router_Router","src_app_App","ReactDOM","src_Main","document","getElementById","updateWorker","register","onUpdate","sw","confirm","postMessage","serviceWorker","event","reload"],"mappings":"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","file":"static/js/main.f3b2529f.chunk.js","sourcesContent":["import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport { FPriceFragmentDoc } from '../../graph/generated'\nimport { GFoodMenu, GFoodMenuCartPresence } from '../../graph/types'\n\nexport const FoodMenuQuery = gql`\n  query GFoodMenu($branchId: ID!) {\n    wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      enabled: true\n    ) {\n      ...GFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...GFoodMenuRecipe\n      }\n    }\n  }\n\n  fragment GFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n\n  fragment GFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...FPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const CartPresenceFragment = gql`\n  fragment GCartPresence on Order {\n    items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FoodMenuCartPresenceQuery = gql`\n  query GFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...GCartPresence\n    }\n  }\n  ${CartPresenceFragment}\n`\n\nexport const QueryFoodMenuCartPresence = buildQuery<\n  GFoodMenuCartPresence.Query,\n  GFoodMenuCartPresence.Variables\n>(FoodMenuCartPresenceQuery)\n\nexport const QueryFoodMenu = buildQuery<GFoodMenu.Query, GFoodMenu.Variables>(\n  FoodMenuQuery,\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { FPriceFragmentDoc } from '../../graph/generated'\nimport { GMobileCart } from '../../graph/types'\nimport { CartPresenceFragment } from '../foodMenu/FoodMenuView.graphql'\n\nexport const OrderMobileFragment = gql`\n  fragment GOrderMobile on Order {\n    id\n    totalSum {\n      ...FPrice\n    }\n    countWares\n    ...GCartPresence\n  }\n  ${FPriceFragmentDoc}\n  ${CartPresenceFragment}\n`\n\nexport const MobileCartQuery = gql`\n  query GMobileCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const QueryMobileCart = buildQuery<\n  GMobileCart.Query,\n  GMobileCart.Variables\n>(MobileCartQuery)\n","import debug from 'debug'\n\nexport const logMain = debug('c2e:app')\nexport const logMap = debug('c2e:map')\nexport const logDebug = debug('c2e:debug')\nexport const logGraph = debug('c2e:graph')\nexport const logError = debug('c2e:error')\nexport const logAuth = debug('c2e:auth')\nexport const logRouting = debug('c2e:routing')\nexport const logPersist = debug('c2e:persist')\nexport const logOrder = debug('c2e:order')\nexport const logSentry = debug('c2e:sentry')\nexport const logLang = debug('c2e:lang')\n","export type Maybe<T> = T | null\n\nexport interface InputOrderIndex {\n  readonly companyBranches?: Maybe<ReadonlyArray<string>>\n\n  readonly user?: Maybe<string>\n\n  readonly orderStatesAND?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStatesOR?: Maybe<ReadonlyArray<OrderStateEnum>>\n\n  readonly orderStateCategoriesOR?: Maybe<ReadonlyArray<OrderStateCategoryEnum>>\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum\n\n  readonly currency?: Maybe<CurrencyEnum>\n\n  readonly location?: Maybe<InputLocationIndex>\n\n  readonly stateChangeSince?: Maybe<string>\n\n  readonly includeOldFinished?: boolean\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: Maybe<string>\n\n  readonly phone?: Maybe<string>\n\n  readonly firstname?: Maybe<string>\n\n  readonly lastname?: Maybe<string>\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: Maybe<string>\n\n  readonly recipe?: Maybe<string>\n\n  readonly orderRecipeState?: Maybe<OrderRecipeStateEnum>\n\n  readonly parent?: Maybe<string>\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly brand?: Maybe<string>\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly warePriceType?: WarePriceTypeEnum\n\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly orderRecipes?: Maybe<ReadonlyArray<InputOrderRecipeCreates>>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<string>>\n\n  readonly amount?: number\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: Maybe<string>\n\n  readonly lastName?: Maybe<string>\n\n  readonly emails?: Maybe<ReadonlyArray<InputEmailCreate>>\n\n  readonly phones?: Maybe<ReadonlyArray<InputPhoneCreate>>\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: Maybe<string>\n\n  readonly default?: boolean\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly callEventId?: Maybe<string>\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: Maybe<string>\n\n  readonly chrome?: Maybe<{ [key: string]: string | number }>\n\n  readonly firebase?: Maybe<{ [key: string]: string | number }>\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: Maybe<number>\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: Maybe<CurrencyEnum>\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: Maybe<InputCustomerCreate>\n  /** payment method used to finalize order */\n  readonly paymentMethod?: Maybe<PaymentTypeEnum>\n  /** payment gate used to finalize order */\n  readonly paymentGate?: Maybe<PaymentGateEnum>\n  /** Preferred time of order delivery. In case that argument is null, deliver_at value is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: Maybe<string>\n\n  readonly note?: Maybe<string>\n\n  readonly confirmedAgreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: Maybe<DeliveryTypeEnum>\n\n  readonly language?: Maybe<LanguageEnum>\n\n  readonly customer?: Maybe<InputCustomerCreate>\n\n  readonly gps?: Maybe<InputGeoPointCreate>\n\n  readonly notification?: Maybe<InputNotificationCreate>\n\n  readonly note?: Maybe<string>\n\n  readonly deliverAt?: Maybe<string>\n\n  readonly location?: Maybe<InputLocationCreate>\n\n  readonly warePriceType?: Maybe<WarePriceTypeEnum>\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: Maybe<string>\n\n  readonly dateFrom?: Maybe<string>\n\n  readonly timeFrom?: Maybe<string>\n\n  readonly dateTo?: Maybe<string>\n\n  readonly timeTo?: Maybe<string>\n\n  readonly available?: Maybe<boolean>\n\n  readonly periodic?: Maybe<boolean>\n\n  readonly weekDay?: Maybe<WeekDayEnum>\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: Maybe<string>\n\n  readonly closeAt?: Maybe<string>\n\n  readonly specificDate: string\n\n  readonly closed?: Maybe<boolean>\n\n  readonly smsLabel?: Maybe<InputLabelCreate>\n\n  readonly webLabel?: Maybe<InputLabelCreate>\n\n  readonly closedNote?: Maybe<string>\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum>\n\n  readonly name: string\n\n  readonly enabled?: boolean\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: Maybe<ReadonlyArray<InputLabelTranslation>>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly availabilities?: Maybe<ReadonlyArray<InputAvailabilityCreate>>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ware?: Maybe<string>\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly descriptionLabel?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly internalNote?: Maybe<string>\n\n  readonly video?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly ingredients?: Maybe<ReadonlyArray<InputRecipeIngredient>>\n\n  readonly wareCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly sideDishCategories?: Maybe<ReadonlyArray<string>>\n\n  readonly prices?: Maybe<ReadonlyArray<InputRecipePriceCreate>>\n\n  readonly associatedRecipes?: Maybe<ReadonlyArray<InputRecipeRelationCreate>>\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number\n\n  readonly placeCode: string\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: Maybe<string>\n\n  readonly quantity?: Maybe<number>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: Maybe<number>\n\n  readonly label?: Maybe<string>\n\n  readonly code?: Maybe<string>\n\n  readonly plu?: Maybe<string>\n\n  readonly wareUnit?: Maybe<WareUnitEnum>\n\n  readonly allergens?: Maybe<ReadonlyArray<AllergenEnum>>\n\n  readonly note?: Maybe<string>\n\n  readonly allowNegative?: Maybe<FieldStateEnum>\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: Maybe<LanguageEnum>\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly enabled?: boolean\n\n  readonly public?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n\n  readonly maxRecipesCount?: number\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly pictogram?: Maybe<string>\n\n  readonly nameLabel?: Maybe<string>\n\n  readonly internalNoteLabel?: Maybe<string>\n\n  readonly wareRequirement?: Maybe<WareRequirementEnum>\n\n  readonly wareCategoryType?: Maybe<WareCategoryTypeEnum>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly public?: Maybe<boolean>\n\n  readonly maxRecipesCount?: Maybe<number>\n\n  readonly recipes?: Maybe<ReadonlyArray<string>>\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate>\n}\n\nexport interface InputWareUpdate {\n  readonly code?: Maybe<string>\n\n  readonly internalCode?: Maybe<string>\n\n  readonly companyBranch?: Maybe<string>\n\n  readonly nameLabel?: Maybe<InputLabelUpdate>\n\n  readonly descriptionLabel?: Maybe<InputLabelUpdate>\n\n  readonly enabled?: Maybe<boolean>\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: Maybe<string>\n\n  readonly zoneType?: Maybe<ZoneTypeEnum>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: boolean\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityCreate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: Maybe<string>\n\n  readonly name?: Maybe<string>\n\n  readonly zoneColor?: Maybe<string>\n\n  readonly enabled?: Maybe<boolean>\n\n  readonly geoPolygon?: Maybe<ReadonlyArray<InputGeoPointCreate>>\n\n  readonly availability?: Maybe<InputAvailabilityUpdate>\n\n  readonly priceRangeRules?: Maybe<ReadonlyArray<PriceRangeRuleCreate>>\n\n  readonly minimalOrderPrice?: Maybe<InputCurrencyCreate>\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n  Pwa = 'PWA',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type GBusinessLookupVariables = {\n  readonly code?: Maybe<string>\n  readonly url?: Maybe<string>\n}\n\nexport type GBusinessLookupQuery = {\n  readonly __typename?: 'Query'\n\n  readonly lookup: GBusinessLookupLookup\n}\n\nexport type GBusinessLookupLookup = {\n  readonly __typename?: 'CompanyBrandLookUp'\n\n  readonly branch: Maybe<GBusinessLookupBranch>\n\n  readonly isBrand: boolean\n\n  readonly isMobileApp: boolean\n\n  readonly knownBasePath: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GBusinessLookupBranch = GCompanyBranchFragment\n\nexport type GOrderCartForRecipeVariables = {\n  readonly recipeId: string\n}\n\nexport type GOrderCartForRecipeQuery = {\n  readonly __typename?: 'Query'\n\n  readonly recipe: GOrderCartForRecipeRecipe\n}\n\nexport type GOrderCartForRecipeRecipe = GCartRecipeFragment\n\nexport type GOrderCartForItemVariables = {\n  readonly itemId: string\n}\n\nexport type GOrderCartForItemQuery = {\n  readonly __typename?: 'Query'\n\n  readonly item: GOrderCartForItemItem\n}\n\nexport type GOrderCartForItemItem = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GOrderCartForItemRecipe\n\n  readonly sideDishes: ReadonlyArray<GOrderCartForItemSideDishes>\n}\n\nexport type GOrderCartForItemRecipe = GCartRecipeFragment\n\nexport type GOrderCartForItemSideDishes = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GOrderCartForItem_Recipe\n}\n\nexport type GOrderCartForItem_Recipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GCreatePickupOrderVariables = {\n  readonly branchId: string\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GCreatePickupOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: GCreatePickupOrderOrder\n}\n\nexport type GCreatePickupOrderOrder = GCreateOrderFragment\n\nexport type GCreateDeliveryOrderVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly gps: InputGeoPointCreate\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport type GCreateDeliveryOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly order: GCreateDeliveryOrderOrder\n}\n\nexport type GCreateDeliveryOrderOrder = GCreateOrderFragment\n\nexport type GAddToOrderVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type GAddToOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: GAddToOrderCreateOrderRecipe\n}\n\nexport type GAddToOrderCreateOrderRecipe = FOrderFragment\n\nexport type GAddToOrderMobileVariables = {\n  readonly orderId: string\n  readonly recipeId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type GAddToOrderMobileMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly createOrderRecipe: GAddToOrderMobileCreateOrderRecipe\n}\n\nexport type GAddToOrderMobileCreateOrderRecipe = GOrderMobileFragment\n\nexport type GChangeOrderItemVariables = {\n  readonly orderId: string\n  readonly itemId: string\n  readonly sideDishes?: Maybe<ReadonlyArray<string>>\n}\n\nexport type GChangeOrderItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrderRecipe: GChangeOrderItemUpdateOrderRecipe\n}\n\nexport type GChangeOrderItemUpdateOrderRecipe = FOrderFragment\n\nexport type GRemoveOrderItemVariables = {\n  readonly itemId: string\n}\n\nexport type GRemoveOrderItemMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly destroyOrderRecipe: GRemoveOrderItemDestroyOrderRecipe\n}\n\nexport type GRemoveOrderItemDestroyOrderRecipe = FOrderFragment\n\nexport type GSubmitOrderVariables = {\n  readonly orderId: string\n  readonly customer?: Maybe<InputCustomerCreate>\n  readonly note?: Maybe<string>\n  readonly paymentGate: PaymentGateEnum\n  readonly deliverAt?: Maybe<string>\n  readonly agreements?: Maybe<ReadonlyArray<string>>\n}\n\nexport type GSubmitOrderMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly finishOrder: GSubmitOrderFinishOrder\n}\n\nexport type GSubmitOrderFinishOrder = {\n  readonly __typename?: 'FinishedOrder'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly gopayUrl: Maybe<string>\n}\n\nexport type GOrderPaymentStatusVariables = {\n  readonly orderId: string\n}\n\nexport type GOrderPaymentStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly status: GOrderPaymentStatusStatus\n}\n\nexport type GOrderPaymentStatusStatus = {\n  readonly __typename?: 'OrderOnlinePaymentStatus'\n\n  readonly isSuccess: boolean\n\n  readonly userErrors: ReadonlyArray<string>\n}\n\nexport type GVamStatusVariables = {\n  readonly input: InputVamStatus\n}\n\nexport type GVamStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly vamStatus: ReadonlyArray<GVamStatusVamStatus>\n}\n\nexport type GVamStatusVamStatus = {\n  readonly __typename?: 'VAMAgreement'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly description: string\n\n  readonly isConfirmed: boolean\n\n  readonly isMandatory: boolean\n}\n\nexport type GFinishViewVariables = {\n  readonly orderId: string\n  readonly branchId: string\n}\n\nexport type GFinishViewQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GFinishViewOrder\n\n  readonly companyBranch: GFinishViewCompanyBranch\n\n  readonly androidApp: Maybe<GFinishViewAndroidApp>\n\n  readonly iosApp: Maybe<GFinishViewIosApp>\n}\n\nexport type GFinishViewOrder = GFinishViewOrderFragment\n\nexport type GFinishViewCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly phone: string\n\n  readonly company: GFinishViewCompany\n}\n\nexport type GFinishViewCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type GFinishViewAndroidApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type GFinishViewIosApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly url: string\n}\n\nexport type GFoodMenuVariables = {\n  readonly branchId: string\n}\n\nexport type GFoodMenuQuery = {\n  readonly __typename?: 'Query'\n\n  readonly wareCategories: ReadonlyArray<GFoodMenuWareCategories>\n}\n\nexport type GFoodMenuWareCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly recipes: ReadonlyArray<GFoodMenuRecipes>\n} & GFoodMenuCategoryFragment\n\nexport type GFoodMenuRecipes = GFoodMenuRecipeFragment\n\nexport type GFoodMenuCartPresenceVariables = {\n  readonly orderId: string\n}\n\nexport type GFoodMenuCartPresenceQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GFoodMenuCartPresenceOrder\n}\n\nexport type GFoodMenuCartPresenceOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n} & GCartPresenceFragment\n\nexport type GInitialLocationVariables = {}\n\nexport type GInitialLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly initialLocation: GInitialLocationInitialLocation\n}\n\nexport type GInitialLocationInitialLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly gpsCoordinates: Maybe<GInitialLocationGpsCoordinates>\n}\n\nexport type GInitialLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GPickupMapBrandVariables = {\n  readonly brandId: string\n}\n\nexport type GPickupMapBrandQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branches: ReadonlyArray<GPickupMapBrandBranches>\n}\n\nexport type GPickupMapBrandBranches = GPickupBranchFragment\n\nexport type GPickupMapBranchVariables = {\n  readonly branchId: string\n}\n\nexport type GPickupMapBranchQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GPickupMapBranchBranch\n}\n\nexport type GPickupMapBranchBranch = GPickupBranchFragment\n\nexport type GMobileCartVariables = {\n  readonly orderId: string\n}\n\nexport type GMobileCartQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GMobileCartOrder\n}\n\nexport type GMobileCartOrder = GOrderMobileFragment\n\nexport type GMobileShopStatusVariables = {\n  readonly branchId: string\n}\n\nexport type GMobileShopStatusQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GMobileShopStatusBranch\n}\n\nexport type GMobileShopStatusBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n} & FCompanyBranchStatusFragment\n\nexport type GMobileShopIntroVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type GMobileShopIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: GMobileShopIntroIntro\n}\n\nexport type GMobileShopIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GSmartBannerVariables = {\n  readonly branchId: string\n  readonly platform: MobilePlatformEnum\n}\n\nexport type GSmartBannerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly app: Maybe<GSmartBannerApp>\n}\n\nexport type GSmartBannerApp = {\n  readonly __typename?: 'MobileApplicationSetting'\n\n  readonly title: string\n\n  readonly url: string\n\n  readonly icon: string\n}\n\nexport type GOrderFormVariables = {\n  readonly orderId: string\n}\n\nexport type GOrderFormQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderFormOrder\n}\n\nexport type GOrderFormOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n}\n\nexport type GOrderPromoCodesVariables = {\n  readonly orderId: string\n}\n\nexport type GOrderPromoCodesQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: GOrderPromoCodesOrder\n}\n\nexport type GOrderPromoCodesOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<GOrderPromoCodesPromoCodes>\n}\n\nexport type GOrderPromoCodesPromoCodes = FPromoCodeFragment\n\nexport type MAddOrderPromoVariables = {\n  readonly orderId: string\n  readonly code: string\n}\n\nexport type MAddOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly addOrderPromoCode: MAddOrderPromoAddOrderPromoCode\n}\n\nexport type MAddOrderPromoAddOrderPromoCode = {\n  readonly __typename?: 'OrderWithErrors'\n\n  readonly userErrors: ReadonlyArray<string>\n\n  readonly order: MAddOrderPromoOrder\n}\n\nexport type MAddOrderPromoOrder = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MAddOrderPromoPromoCodes>\n}\n\nexport type MAddOrderPromoPromoCodes = FPromoCodeFragment\n\nexport type MRemoveOrderPromoVariables = {\n  readonly orderId: string\n  readonly codeId: string\n}\n\nexport type MRemoveOrderPromoMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly removeOrderPromoCode: MRemoveOrderPromoRemoveOrderPromoCode\n}\n\nexport type MRemoveOrderPromoRemoveOrderPromoCode = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly promoCodes: ReadonlyArray<MRemoveOrderPromoPromoCodes>\n}\n\nexport type MRemoveOrderPromoPromoCodes = FPromoCodeFragment\n\nexport type GOrderTimePickerVariables = {\n  readonly branchId: string\n}\n\nexport type GOrderTimePickerQuery = {\n  readonly __typename?: 'Query'\n\n  readonly companyBranch: GOrderTimePickerCompanyBranch\n}\n\nexport type GOrderTimePickerCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly businessHours: ReadonlyArray<GOrderTimePickerBusinessHours>\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly delayedDeliveryEnabled: boolean\n}\n\nexport type GOrderTimePickerBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n}\n\nexport type MUpdateOrderDeliveryTimeVariables = {\n  readonly orderId: string\n  readonly deliverAt?: Maybe<string>\n}\n\nexport type MUpdateOrderDeliveryTimeMutation = {\n  readonly __typename?: 'Mutation'\n\n  readonly updateOrder: MUpdateOrderDeliveryTimeUpdateOrder\n}\n\nexport type MUpdateOrderDeliveryTimeUpdateOrder = FOrderFragment\n\nexport type GShopHeaderVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId: string\n}\n\nexport type GShopHeaderQuery = {\n  readonly __typename?: 'Query'\n\n  readonly branch: GShopHeaderBranch\n\n  readonly intro: GShopHeaderIntro\n}\n\nexport type GShopHeaderBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly address: GShopHeaderAddress\n} & (FShopOpeningHoursFragment & FCompanyBranchStatusFragment)\n\nexport type GShopHeaderAddress = FAddressFragment\n\nexport type GShopHeaderIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GShopIntroVariables = {\n  readonly brandId: string\n  readonly branchId?: Maybe<string>\n}\n\nexport type GShopIntroQuery = {\n  readonly __typename?: 'Query'\n\n  readonly intro: GShopIntroIntro\n}\n\nexport type GShopIntroIntro = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly headerText: Maybe<string>\n\n  readonly homepageUrl: Maybe<string>\n}\n\nexport type GThemeStyleVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n}\n\nexport type GThemeStyleQuery = {\n  readonly __typename?: 'Query'\n\n  readonly theme: GThemeStyleTheme\n}\n\nexport type GThemeStyleTheme = {\n  readonly __typename?: 'ApplicationSettings'\n\n  readonly styles: GThemeStyleStyles\n}\n\nexport type GThemeStyleStyles = {\n  readonly __typename?: 'GraphicStyle'\n\n  readonly active: string\n\n  readonly main: string\n\n  readonly mainSecondary: string\n\n  readonly storeLogo: string\n\n  readonly storeLogoMobile: string\n\n  readonly backgroundCart: string\n}\n\nexport type GResolveLocationVariables = {\n  readonly brandId?: Maybe<string>\n  readonly branchId?: Maybe<string>\n  readonly address?: Maybe<string>\n  readonly latitude?: Maybe<number>\n  readonly longitude?: Maybe<number>\n}\n\nexport type GResolveLocationQuery = {\n  readonly __typename?: 'Query'\n\n  readonly resolveLocation: GResolveLocationResolveLocation\n}\n\nexport type GResolveLocationResolveLocation = {\n  readonly __typename?: 'AddressResolvedLocation'\n\n  readonly finalAddress: Maybe<GResolveLocationFinalAddress>\n\n  readonly isResolved: boolean\n\n  readonly isValidAddress: boolean\n\n  readonly inDeliveryLocation: boolean\n\n  readonly gpsCoordinates: Maybe<GResolveLocationGpsCoordinates>\n\n  readonly companyBranch: Maybe<GResolveLocationCompanyBranch>\n}\n\nexport type GResolveLocationFinalAddress = FJsonAddressFragment\n\nexport type GResolveLocationGpsCoordinates = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type GResolveLocationCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n}\n\nexport type QCartViewVariables = {\n  readonly orderId: string\n}\n\nexport type QCartViewQuery = {\n  readonly __typename?: 'Query'\n\n  readonly order: QCartViewOrder\n}\n\nexport type QCartViewOrder = {\n  readonly __typename?: 'Order'\n\n  readonly deliveryType: Maybe<QCartViewDeliveryType>\n} & FOrderFragment\n\nexport type QCartViewDeliveryType = {\n  readonly __typename?: 'DeliveryType'\n\n  readonly enum: DeliveryTypeEnum\n}\n\nexport type GCompanyBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly code: string\n\n  readonly brand: GCompanyBranchBrand\n\n  readonly company: GCompanyBranchCompany\n\n  readonly address: GCompanyBranchAddress\n\n  readonly phone: string\n}\n\nexport type GCompanyBranchBrand = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly code: string\n}\n\nexport type GCompanyBranchCompany = {\n  readonly __typename?: 'Company'\n\n  readonly id: string\n}\n\nexport type GCompanyBranchAddress = {\n  readonly __typename?: 'Address'\n\n  readonly country: Maybe<GCompanyBranchCountry>\n}\n\nexport type GCompanyBranchCountry = {\n  readonly __typename?: 'Country'\n\n  readonly phonePrefix: string\n}\n\nexport type GCartRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly categories: ReadonlyArray<GCartRecipeCategories>\n}\n\nexport type GCartRecipeCategories = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly minCount: number\n\n  readonly maxCount: number\n\n  readonly sideDishes: ReadonlyArray<GCartRecipeSideDishes>\n}\n\nexport type GCartRecipeSideDishes = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly price: GCartRecipePrice\n}\n\nexport type GCartRecipePrice = FPriceFragment\n\nexport type GCreateOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly companyBranch: GCreateOrderCompanyBranch\n}\n\nexport type GCreateOrderCompanyBranch = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n}\n\nexport type GFinishViewOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly items: ReadonlyArray<GFinishViewOrderItems>\n\n  readonly totalSum: GFinishViewOrderTotalSum\n\n  readonly orderPayments: ReadonlyArray<GFinishViewOrderOrderPayments>\n}\n\nexport type GFinishViewOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly sideDishes: ReadonlyArray<GFinishViewOrderSideDishes>\n} & FCartItemFragment\n\nexport type GFinishViewOrderSideDishes = FCartItemFragment\n\nexport type GFinishViewOrderTotalSum = FPriceFragment\n\nexport type GFinishViewOrderOrderPayments = {\n  readonly __typename?: 'OrderPaymentMethod'\n\n  readonly paymentMethod: GFinishViewOrderPaymentMethod\n}\n\nexport type GFinishViewOrderPaymentMethod = {\n  readonly __typename?: 'PaymentMethod'\n\n  readonly paymentType: GFinishViewOrderPaymentType\n}\n\nexport type GFinishViewOrderPaymentType = {\n  readonly __typename?: 'PaymentType'\n\n  readonly enum: PaymentTypeEnum\n}\n\nexport type GFoodMenuCategoryFragment = {\n  readonly __typename?: 'WareCategory'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly pictogram: Maybe<string>\n}\n\nexport type GFoodMenuRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly image: Maybe<string>\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel: Maybe<string>\n\n  readonly price: GFoodMenuRecipePrice\n\n  readonly sideDishCount: number\n}\n\nexport type GFoodMenuRecipePrice = FPriceFragment\n\nexport type GCartPresenceFragment = {\n  readonly __typename?: 'Order'\n\n  readonly items: ReadonlyArray<GCartPresenceItems>\n}\n\nexport type GCartPresenceItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly recipe: GCartPresenceRecipe\n}\n\nexport type GCartPresenceRecipe = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n}\n\nexport type GPickupBranchFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly name: string\n\n  readonly gps: GPickupBranchGps\n\n  readonly address: GPickupBranchAddress\n\n  readonly pickupEnabled: boolean\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nexport type GPickupBranchGps = FGeoPointFragment\n\nexport type GPickupBranchAddress = FAddressFragment\n\nexport type GOrderMobileFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly totalSum: GOrderMobileTotalSum\n\n  readonly countWares: number\n} & GCartPresenceFragment\n\nexport type GOrderMobileTotalSum = FPriceFragment\n\nexport type FJsonAddressFragment = {\n  readonly __typename?: 'JsonAddress'\n\n  readonly street: Maybe<string>\n\n  readonly houseNumber: Maybe<string>\n\n  readonly city: Maybe<string>\n\n  readonly state: Maybe<string>\n}\n\nexport type FAddressFragment = {\n  readonly __typename?: 'Address'\n\n  readonly id: string\n\n  readonly location: Maybe<FAddressLocation>\n}\n\nexport type FAddressLocation = FJsonAddressFragment\n\nexport type FGeoPointFragment = {\n  readonly __typename?: 'GeoPoint'\n\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport type FPriceFragment = {\n  readonly __typename?: 'PriceConverted'\n\n  readonly value: number\n\n  readonly formattedValue: string\n}\n\nexport type FRecipeFragment = {\n  readonly __typename?: 'Recipe'\n\n  readonly id: string\n\n  readonly nameLabel: string\n\n  readonly sideDishCount: number\n}\n\nexport type FCartItemFragment = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly id: string\n\n  readonly automatic: boolean\n\n  readonly recipe: FCartItemRecipe\n}\n\nexport type FCartItemRecipe = FRecipeFragment\n\nexport type FCompanyBranchStatusFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly id: string\n\n  readonly isOpen: boolean\n\n  readonly willOpenAt: Maybe<string>\n\n  readonly willCloseAt: Maybe<string>\n\n  readonly businessHours: ReadonlyArray<FCompanyBranchStatusBusinessHours>\n}\n\nexport type FCompanyBranchStatusBusinessHours = {\n  readonly __typename?: 'BusinessHourInterval'\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly closed: boolean\n\n  readonly closedNote: Maybe<string>\n}\n\nexport type FPromoCodeFragment = {\n  readonly __typename?: 'PromoCode'\n\n  readonly id: string\n\n  readonly code: string\n}\n\nexport type FOrderFragment = {\n  readonly __typename?: 'Order'\n\n  readonly id: string\n\n  readonly countWares: number\n\n  readonly items: ReadonlyArray<FOrderItems>\n\n  readonly coverPrice: FOrderCoverPrice\n\n  readonly transportFee: FOrderTransportFee\n\n  readonly discounts: ReadonlyArray<FOrderDiscounts>\n\n  readonly totalDiscount: FOrderTotalDiscount\n\n  readonly totalSum: FOrderTotalSum\n}\n\nexport type FOrderItems = {\n  readonly __typename?: 'OrderRecipe'\n\n  readonly price: FOrderPrice\n\n  readonly sideDishes: ReadonlyArray<FOrderSideDishes>\n} & FCartItemFragment\n\nexport type FOrderPrice = FPriceFragment\n\nexport type FOrderSideDishes = FCartItemFragment\n\nexport type FOrderCoverPrice = FPriceFragment\n\nexport type FOrderTransportFee = FPriceFragment\n\nexport type FOrderDiscounts = {\n  readonly __typename?: 'PriceWithDescription'\n\n  readonly code: string\n\n  readonly description: string\n\n  readonly price: FOrder_Price\n}\n\nexport type FOrder_Price = FPriceFragment\n\nexport type FOrderTotalDiscount = FPriceFragment\n\nexport type FOrderTotalSum = FPriceFragment\n\nexport type FShopOpeningHoursFragment = {\n  readonly __typename?: 'CompanyBranch'\n\n  readonly defaultDeliveryTime: number\n\n  readonly defaultPickupTime: number\n} & FCompanyBranchStatusFragment\n\nimport * as Hooks from '@speedlo/graphql'\nimport gql from 'graphql-tag'\n\n// ====================================================\n// Fragments\n// ====================================================\n\nexport const GCompanyBranchFragmentDoc = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const FPriceFragmentDoc = gql`\n  fragment FPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const GCartRecipeFragmentDoc = gql`\n  fragment GCartRecipe on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const GCreateOrderFragmentDoc = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const FRecipeFragmentDoc = gql`\n  fragment FRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const FCartItemFragmentDoc = gql`\n  fragment FCartItem on OrderRecipe {\n    id\n    automatic\n    recipe {\n      ...FRecipe\n    }\n  }\n\n  ${FRecipeFragmentDoc}\n`\n\nexport const GFinishViewOrderFragmentDoc = gql`\n  fragment GFinishViewOrder on Order {\n    id\n    items {\n      ...FCartItem\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    totalSum {\n      ...FPrice\n    }\n    orderPayments {\n      paymentMethod {\n        paymentType {\n          enum\n        }\n      }\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const GFoodMenuCategoryFragmentDoc = gql`\n  fragment GFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n`\n\nexport const GFoodMenuRecipeFragmentDoc = gql`\n  fragment GFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...FPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${FPriceFragmentDoc}\n`\n\nexport const FGeoPointFragmentDoc = gql`\n  fragment FGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const FJsonAddressFragmentDoc = gql`\n  fragment FJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n  }\n`\n\nexport const FAddressFragmentDoc = gql`\n  fragment FAddress on Address {\n    id\n    location {\n      ...FJsonAddress\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport const FCompanyBranchStatusFragmentDoc = gql`\n  fragment FCompanyBranchStatus on CompanyBranch {\n    id\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours: businessHoursIntervals {\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n  }\n`\n\nexport const GPickupBranchFragmentDoc = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport const GCartPresenceFragmentDoc = gql`\n  fragment GCartPresence on Order {\n    items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const GOrderMobileFragmentDoc = gql`\n  fragment GOrderMobile on Order {\n    id\n    totalSum {\n      ...FPrice\n    }\n    countWares\n    ...GCartPresence\n  }\n\n  ${FPriceFragmentDoc}\n  ${GCartPresenceFragmentDoc}\n`\n\nexport const FPromoCodeFragmentDoc = gql`\n  fragment FPromoCode on PromoCode {\n    id\n    code\n  }\n`\n\nexport const FOrderFragmentDoc = gql`\n  fragment FOrder on Order {\n    id\n    countWares\n    items {\n      ...FCartItem\n      price: priceWithSideDishes {\n        ...FPrice\n      }\n      sideDishes {\n        ...FCartItem\n      }\n    }\n    coverPrice {\n      ...FPrice\n    }\n    transportFee {\n      ...FPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...FPrice\n      }\n    }\n    totalDiscount {\n      ...FPrice\n    }\n    totalSum {\n      ...FPrice\n    }\n  }\n\n  ${FCartItemFragmentDoc}\n  ${FPriceFragmentDoc}\n`\n\nexport const FShopOpeningHoursFragmentDoc = gql`\n  fragment FShopOpeningHours on CompanyBranch {\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\n// ====================================================\n// Hooks\n// ====================================================\n\nexport const GBusinessLookupDocument = gql`\n  query GBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n\n  ${GCompanyBranchFragmentDoc}\n`\n\nexport function useGBusinessLookup(\n  variables?: GBusinessLookupVariables,\n  baseOptions?: Hooks.QueryHookOptions<GBusinessLookupVariables>,\n) {\n  return Hooks.useQuery<GBusinessLookupQuery, GBusinessLookupVariables>(\n    GBusinessLookupDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderCartForRecipeDocument = gql`\n  query GOrderCartForRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...GCartRecipe\n    }\n  }\n\n  ${GCartRecipeFragmentDoc}\n`\n\nexport function useGOrderCartForRecipe(\n  variables?: GOrderCartForRecipeVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderCartForRecipeVariables>,\n) {\n  return Hooks.useQuery<GOrderCartForRecipeQuery, GOrderCartForRecipeVariables>(\n    GOrderCartForRecipeDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderCartForItemDocument = gql`\n  query GOrderCartForItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...GCartRecipe\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n\n  ${GCartRecipeFragmentDoc}\n`\n\nexport function useGOrderCartForItem(\n  variables?: GOrderCartForItemVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderCartForItemVariables>,\n) {\n  return Hooks.useQuery<GOrderCartForItemQuery, GOrderCartForItemVariables>(\n    GOrderCartForItemDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GCreatePickupOrderDocument = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n\n  ${GCreateOrderFragmentDoc}\n`\n\nexport function useGCreatePickupOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreatePickupOrderMutation,\n    GCreatePickupOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreatePickupOrderMutation,\n    GCreatePickupOrderVariables\n  >(GCreatePickupOrderDocument, baseOptions)\n}\n\nexport const GCreateDeliveryOrderDocument = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n\n  ${GCreateOrderFragmentDoc}\n`\n\nexport function useGCreateDeliveryOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GCreateDeliveryOrderMutation,\n    GCreateDeliveryOrderVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GCreateDeliveryOrderMutation,\n    GCreateDeliveryOrderVariables\n  >(GCreateDeliveryOrderDocument, baseOptions)\n}\n\nexport const GAddToOrderDocument = gql`\n  mutation GAddToOrder($orderId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useGAddToOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GAddToOrderMutation,\n    GAddToOrderVariables\n  >,\n) {\n  return Hooks.useMutation<GAddToOrderMutation, GAddToOrderVariables>(\n    GAddToOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const GAddToOrderMobileDocument = gql`\n  mutation GAddToOrderMobile(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrderMobile\n    }\n  }\n\n  ${GOrderMobileFragmentDoc}\n`\n\nexport function useGAddToOrderMobile(\n  baseOptions?: Hooks.MutationHookOptions<\n    GAddToOrderMobileMutation,\n    GAddToOrderMobileVariables\n  >,\n) {\n  return Hooks.useMutation<\n    GAddToOrderMobileMutation,\n    GAddToOrderMobileVariables\n  >(GAddToOrderMobileDocument, baseOptions)\n}\n\nexport const GChangeOrderItemDocument = gql`\n  mutation GChangeOrderItem($orderId: ID!, $itemId: ID!, $sideDishes: [ID!]) {\n    updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useGChangeOrderItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    GChangeOrderItemMutation,\n    GChangeOrderItemVariables\n  >,\n) {\n  return Hooks.useMutation<GChangeOrderItemMutation, GChangeOrderItemVariables>(\n    GChangeOrderItemDocument,\n    baseOptions,\n  )\n}\n\nexport const GRemoveOrderItemDocument = gql`\n  mutation GRemoveOrderItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useGRemoveOrderItem(\n  baseOptions?: Hooks.MutationHookOptions<\n    GRemoveOrderItemMutation,\n    GRemoveOrderItemVariables\n  >,\n) {\n  return Hooks.useMutation<GRemoveOrderItemMutation, GRemoveOrderItemVariables>(\n    GRemoveOrderItemDocument,\n    baseOptions,\n  )\n}\n\nexport const GSubmitOrderDocument = gql`\n  mutation GSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport function useGSubmitOrder(\n  baseOptions?: Hooks.MutationHookOptions<\n    GSubmitOrderMutation,\n    GSubmitOrderVariables\n  >,\n) {\n  return Hooks.useMutation<GSubmitOrderMutation, GSubmitOrderVariables>(\n    GSubmitOrderDocument,\n    baseOptions,\n  )\n}\n\nexport const GOrderPaymentStatusDocument = gql`\n  query GOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport function useGOrderPaymentStatus(\n  variables?: GOrderPaymentStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPaymentStatusVariables>,\n) {\n  return Hooks.useQuery<GOrderPaymentStatusQuery, GOrderPaymentStatusVariables>(\n    GOrderPaymentStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GVamStatusDocument = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n\nexport function useGVamStatus(\n  variables?: GVamStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GVamStatusVariables>,\n) {\n  return Hooks.useQuery<GVamStatusQuery, GVamStatusVariables>(\n    GVamStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GFinishViewDocument = gql`\n  query GFinishView($orderId: ID!, $branchId: ID!) {\n    order(id: $orderId) {\n      ...GFinishViewOrder\n    }\n    companyBranch(id: $branchId) {\n      id\n      phone\n      company {\n        id\n      }\n    }\n    androidApp: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: ANDROID\n    ) {\n      url\n    }\n    iosApp: mobileApplicationSettings(companyBranch: $branchId, platform: IOS) {\n      url\n    }\n  }\n\n  ${GFinishViewOrderFragmentDoc}\n`\n\nexport function useGFinishView(\n  variables?: GFinishViewVariables,\n  baseOptions?: Hooks.QueryHookOptions<GFinishViewVariables>,\n) {\n  return Hooks.useQuery<GFinishViewQuery, GFinishViewVariables>(\n    GFinishViewDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GFoodMenuDocument = gql`\n  query GFoodMenu($branchId: ID!) {\n    wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      enabled: true\n    ) {\n      ...GFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...GFoodMenuRecipe\n      }\n    }\n  }\n\n  ${GFoodMenuCategoryFragmentDoc}\n  ${GFoodMenuRecipeFragmentDoc}\n`\n\nexport function useGFoodMenu(\n  variables?: GFoodMenuVariables,\n  baseOptions?: Hooks.QueryHookOptions<GFoodMenuVariables>,\n) {\n  return Hooks.useQuery<GFoodMenuQuery, GFoodMenuVariables>(\n    GFoodMenuDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GFoodMenuCartPresenceDocument = gql`\n  query GFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...GCartPresence\n    }\n  }\n\n  ${GCartPresenceFragmentDoc}\n`\n\nexport function useGFoodMenuCartPresence(\n  variables?: GFoodMenuCartPresenceVariables,\n  baseOptions?: Hooks.QueryHookOptions<GFoodMenuCartPresenceVariables>,\n) {\n  return Hooks.useQuery<\n    GFoodMenuCartPresenceQuery,\n    GFoodMenuCartPresenceVariables\n  >(GFoodMenuCartPresenceDocument, variables, baseOptions)\n}\n\nexport const GInitialLocationDocument = gql`\n  query GInitialLocation {\n    initialLocation: resolveLocation {\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n    }\n  }\n`\n\nexport function useGInitialLocation(\n  variables?: GInitialLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GInitialLocationVariables>,\n) {\n  return Hooks.useQuery<GInitialLocationQuery, GInitialLocationVariables>(\n    GInitialLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GPickupMapBrandDocument = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n\n  ${GPickupBranchFragmentDoc}\n`\n\nexport function useGPickupMapBrand(\n  variables?: GPickupMapBrandVariables,\n  baseOptions?: Hooks.QueryHookOptions<GPickupMapBrandVariables>,\n) {\n  return Hooks.useQuery<GPickupMapBrandQuery, GPickupMapBrandVariables>(\n    GPickupMapBrandDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GPickupMapBranchDocument = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n\n  ${GPickupBranchFragmentDoc}\n`\n\nexport function useGPickupMapBranch(\n  variables?: GPickupMapBranchVariables,\n  baseOptions?: Hooks.QueryHookOptions<GPickupMapBranchVariables>,\n) {\n  return Hooks.useQuery<GPickupMapBranchQuery, GPickupMapBranchVariables>(\n    GPickupMapBranchDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileCartDocument = gql`\n  query GMobileCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrderMobile\n    }\n  }\n\n  ${GOrderMobileFragmentDoc}\n`\n\nexport function useGMobileCart(\n  variables?: GMobileCartVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileCartVariables>,\n) {\n  return Hooks.useQuery<GMobileCartQuery, GMobileCartVariables>(\n    GMobileCartDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileShopStatusDocument = gql`\n  query GMobileShopStatus($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      ...FCompanyBranchStatus\n    }\n  }\n\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useGMobileShopStatus(\n  variables?: GMobileShopStatusVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileShopStatusVariables>,\n) {\n  return Hooks.useQuery<GMobileShopStatusQuery, GMobileShopStatusVariables>(\n    GMobileShopStatusDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GMobileShopIntroDocument = gql`\n  query GMobileShopIntro($brandId: ID, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useGMobileShopIntro(\n  variables?: GMobileShopIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<GMobileShopIntroVariables>,\n) {\n  return Hooks.useQuery<GMobileShopIntroQuery, GMobileShopIntroVariables>(\n    GMobileShopIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GSmartBannerDocument = gql`\n  query GSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport function useGSmartBanner(\n  variables?: GSmartBannerVariables,\n  baseOptions?: Hooks.QueryHookOptions<GSmartBannerVariables>,\n) {\n  return Hooks.useQuery<GSmartBannerQuery, GSmartBannerVariables>(\n    GSmartBannerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderFormDocument = gql`\n  query GOrderForm($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      countWares\n    }\n  }\n`\n\nexport function useGOrderForm(\n  variables?: GOrderFormVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderFormVariables>,\n) {\n  return Hooks.useQuery<GOrderFormQuery, GOrderFormVariables>(\n    GOrderFormDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GOrderPromoCodesDocument = gql`\n  query GOrderPromoCodes($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useGOrderPromoCodes(\n  variables?: GOrderPromoCodesVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderPromoCodesVariables>,\n) {\n  return Hooks.useQuery<GOrderPromoCodesQuery, GOrderPromoCodesVariables>(\n    GOrderPromoCodesDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MAddOrderPromoDocument = gql`\n  mutation MAddOrderPromo($orderId: ID!, $code: String!) {\n    addOrderPromoCode(order: $orderId, promoCode: $code) {\n      userErrors: errors\n      order {\n        id\n        promoCodes {\n          ...FPromoCode\n        }\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useMAddOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MAddOrderPromoMutation,\n    MAddOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<MAddOrderPromoMutation, MAddOrderPromoVariables>(\n    MAddOrderPromoDocument,\n    baseOptions,\n  )\n}\n\nexport const MRemoveOrderPromoDocument = gql`\n  mutation MRemoveOrderPromo($orderId: ID!, $codeId: ID!) {\n    removeOrderPromoCode(order: $orderId, promoCode: $codeId) {\n      id\n      promoCodes {\n        ...FPromoCode\n      }\n    }\n  }\n\n  ${FPromoCodeFragmentDoc}\n`\n\nexport function useMRemoveOrderPromo(\n  baseOptions?: Hooks.MutationHookOptions<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MRemoveOrderPromoMutation,\n    MRemoveOrderPromoVariables\n  >(MRemoveOrderPromoDocument, baseOptions)\n}\n\nexport const GOrderTimePickerDocument = gql`\n  query GOrderTimePicker($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      isOpen\n      businessHours: businessHoursIntervals {\n        openAt\n        closeAt\n        closed\n      }\n      defaultDeliveryTime\n      defaultPickupTime\n      willOpenAt\n      willCloseAt\n      delayedDeliveryEnabled\n    }\n  }\n`\n\nexport function useGOrderTimePicker(\n  variables?: GOrderTimePickerVariables,\n  baseOptions?: Hooks.QueryHookOptions<GOrderTimePickerVariables>,\n) {\n  return Hooks.useQuery<GOrderTimePickerQuery, GOrderTimePickerVariables>(\n    GOrderTimePickerDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const MUpdateOrderDeliveryTimeDocument = gql`\n  mutation MUpdateOrderDeliveryTime($orderId: ID!, $deliverAt: DateTime) {\n    updateOrder(id: $orderId, order: { deliverAt: $deliverAt }) {\n      ...FOrder\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useMUpdateOrderDeliveryTime(\n  baseOptions?: Hooks.MutationHookOptions<\n    MUpdateOrderDeliveryTimeMutation,\n    MUpdateOrderDeliveryTimeVariables\n  >,\n) {\n  return Hooks.useMutation<\n    MUpdateOrderDeliveryTimeMutation,\n    MUpdateOrderDeliveryTimeVariables\n  >(MUpdateOrderDeliveryTimeDocument, baseOptions)\n}\n\nexport const GShopHeaderDocument = gql`\n  query GShopHeader($brandId: ID, $branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      address {\n        ...FAddress\n      }\n      ...FShopOpeningHours\n      ...FCompanyBranchStatus\n    }\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n\n  ${FAddressFragmentDoc}\n  ${FShopOpeningHoursFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n`\n\nexport function useGShopHeader(\n  variables?: GShopHeaderVariables,\n  baseOptions?: Hooks.QueryHookOptions<GShopHeaderVariables>,\n) {\n  return Hooks.useQuery<GShopHeaderQuery, GShopHeaderVariables>(\n    GShopHeaderDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GShopIntroDocument = gql`\n  query GShopIntro($brandId: ID!, $branchId: ID) {\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n`\n\nexport function useGShopIntro(\n  variables?: GShopIntroVariables,\n  baseOptions?: Hooks.QueryHookOptions<GShopIntroVariables>,\n) {\n  return Hooks.useQuery<GShopIntroQuery, GShopIntroVariables>(\n    GShopIntroDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GThemeStyleDocument = gql`\n  query GThemeStyle($brandId: ID, $branchId: ID) {\n    theme: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n\nexport function useGThemeStyle(\n  variables?: GThemeStyleVariables,\n  baseOptions?: Hooks.QueryHookOptions<GThemeStyleVariables>,\n) {\n  return Hooks.useQuery<GThemeStyleQuery, GThemeStyleVariables>(\n    GThemeStyleDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const GResolveLocationDocument = gql`\n  query GResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      finalAddress {\n        ...FJsonAddress\n      }\n      isResolved\n      isValidAddress\n      inDeliveryLocation\n      gpsCoordinates {\n        latitude\n        longitude\n      }\n      companyBranch {\n        id\n        isOpen\n      }\n    }\n  }\n\n  ${FJsonAddressFragmentDoc}\n`\n\nexport function useGResolveLocation(\n  variables?: GResolveLocationVariables,\n  baseOptions?: Hooks.QueryHookOptions<GResolveLocationVariables>,\n) {\n  return Hooks.useQuery<GResolveLocationQuery, GResolveLocationVariables>(\n    GResolveLocationDocument,\n    variables,\n    baseOptions,\n  )\n}\n\nexport const QCartViewDocument = gql`\n  query QCartView($orderId: ID!) {\n    order(id: $orderId) {\n      ...FOrder\n      deliveryType {\n        enum\n      }\n    }\n  }\n\n  ${FOrderFragmentDoc}\n`\n\nexport function useQCartView(\n  variables?: QCartViewVariables,\n  baseOptions?: Hooks.QueryHookOptions<QCartViewVariables>,\n) {\n  return Hooks.useQuery<QCartViewQuery, QCartViewVariables>(\n    QCartViewDocument,\n    variables,\n    baseOptions,\n  )\n}\n\n// Generated in 2019-02-25T16:06:28+01:00\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport {\n  FAddressFragmentDoc,\n  FCompanyBranchStatusFragmentDoc,\n  FGeoPointFragmentDoc,\n} from '../../graph/generated'\nimport { GPickupMapBranch, GPickupMapBrand } from '../../graph/types'\n\nconst PickupBranchFragment = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...FGeoPoint\n    }\n    address {\n      ...FAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...FCompanyBranchStatus\n  }\n  ${FCompanyBranchStatusFragmentDoc}\n  ${FGeoPointFragmentDoc}\n  ${FAddressFragmentDoc}\n`\n\nexport const PickupMapBrandQuery = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const PickupMapBranchQuery = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const QueryPickupMapBrand = buildQuery<\n  GPickupMapBrand.Query,\n  GPickupMapBrand.Variables\n>(PickupMapBrandQuery)\n\nexport const QueryPickupMapBranch = buildQuery<\n  GPickupMapBranch.Query,\n  GPickupMapBranch.Variables\n>(PickupMapBranchQuery)\n","import React from 'react'\nimport { Button, ButtonProps } from 'reactstrap'\nimport styled, { css } from 'styled-components'\n\nimport { mediaDesktop, mediaMobile } from '../common/Responsive'\nimport { RouteButton } from './RouteButton'\nimport { TTheme } from './ThemeSwitchProvider'\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n  &:active {\n    background-color: #262626 !important;\n  }\n`\n\nPrimaryButton.displayName = 'PrimaryButton'\n\nexport const SecondaryButton = styled(Button)`\n  background-color: ${themeProp('tertiary')};\n  border-color: ${themeProp('tertiary')};\n  &:hover {\n    background-color: ${themeProp('tertiaryHover')};\n    border-color: ${themeProp('tertiaryHover')};\n  }\n`\n\nSecondaryButton.displayName = 'SecondaryButton'\n\nexport const PrimaryRoutedButton = styled(RouteButton)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n`\n\nPrimaryRoutedButton.displayName = 'PrimaryRoutedButton'\n\ninterface IMobileHeaderButton {\n  isConfirm?: boolean\n  theme: TTheme\n}\n\nexport const MobileHeaderButton = styled(\n  ({ isConfirm, theme, ...props }: ButtonProps & IMobileHeaderButton) => (\n    <Button {...props} />\n  ),\n)`\n  background-color: ${({ isConfirm, theme }) =>\n    isConfirm ? theme.primary : 'white'};\n  color: ${({ isConfirm, theme }) => (isConfirm ? 'white' : theme.primary)};\n`\n\nMobileHeaderButton.displayName = 'MobileHeaderButton'\n\ninterface ISelectButtonThemed {\n  selected?: boolean\n  theme: TTheme\n}\n\nexport const SelectButtonThemed = styled(\n  ({ selected, theme, ...props }: ButtonProps & ISelectButtonThemed) => (\n    <Button {...props} />\n  ),\n)`\n  ${({ theme, selected }: ISelectButtonThemed) => css`\n    ${mediaDesktop`\n      background-color: ${selected ? theme.tertiary : theme.unselected}\n    `};\n    ${mediaMobile`\n    background-color: ${selected ? theme.tertiary : 'white'}`}\n    border-color: ${selected ? theme.tertiary : theme.unselected};\n    color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    height: 3.7rem;\n    &:hover {\n      background-color: ${\n        selected ? theme.tertiaryHover : theme.unselectedHover\n      };\n      border-color: ${selected ? theme.tertiaryHover : theme.unselectedHover};\n      color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    }\n  `};\n`\n\nSelectButtonThemed.displayName = 'SelectButtonThemed'\n\nfunction themeProp(name: keyof TTheme) {\n  return ({ theme }: { theme?: TTheme }) => theme![name] as string\n}\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, ButtonProps } from 'reactstrap'\n\ninterface IProps extends ButtonProps {\n  to: LocationDescriptor\n  replace?: boolean\n}\n\nexport const RouteButton: React.FC<IProps> = ({\n  to,\n  replace,\n  children,\n  ...buttonProps\n}) => (\n  <Link to={to} replace={replace}>\n    <Button {...buttonProps}>{children}</Button>\n  </Link>\n)\n","import { buildMutation } from './buildMutation'\nimport { buildQuery } from './buildQuery'\n\nexport { buildQuery, buildMutation }\n","import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\nimport { RM } from './ramda'\n\nexport const installSentry = cb => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyGuest = (userId: string, token: string) => {\n  Raven.setUserContext({\n    isGuest: true,\n    userId,\n    token,\n  })\n}\n\nexport const setSentryContext = (context: object) => {\n  Raven.setExtraContext(context)\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n    Raven.showReportDialog()\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  Raven.captureBreadcrumb({\n    category: 'graphql',\n    level: 'debug',\n    message: 'query',\n    data: {\n      ...data,\n      errors,\n    },\n  })\n  errors.forEach(err => {\n    Raven.captureException(new Error(err.message), { extra: err })\n  })\n  const userErrors = errors.filter(RM.propEq('showToUser', true))\n  if (userErrors.length && Raven.lastEventId()) {\n    Raven.showReportDialog({\n      title: RM.head(userErrors)!.message,\n    })\n  }\n}\n\nexport const reportError = (error: Error, meta: object = {}) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n      ...meta,\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","import { format, formatWithOptions, parse } from 'date-fns/fp'\nimport csLocale from 'date-fns/locale/cs'\n\nimport { FJsonAddressFragment } from '../graph/generated'\n\nexport const currentLocale = csLocale\n\nexport const formatLocale = formatWithOptions({ locale: currentLocale })\n\nexport const formatTime = format('H:mm')\n\nexport const dateTimeFormat = 'D.M.YYYY H:mm'\nexport const formatDateTime = formatLocale(dateTimeFormat)\n\nexport const parseTime = parse('HH:mm')\n\nexport const formatAddress = (address: FJsonAddressFragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: process.env.REACT_APP_LOCAL_ENDPOINT,\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: null,\n  pageTitleSuffix: 'LOCAL',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n  })\n}\n","import Color from 'color'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { ThemeProvider } from 'styled-components'\n\nimport { useGThemeStyle } from '../graph/generated'\nimport { GThemeStyle } from '../graph/types'\nimport { useRoot } from './WithRoot'\n\ninterface IProps {\n  branchId?: MaybeID\n}\n\nconst ThemeSwitchProvider: React.FC<IProps> = ({ children, branchId }) => {\n  const { business } = useRoot()\n  const { data } = useGThemeStyle(\n    {\n      brandId: branchId ? null : business.brandId,\n      branchId: branchId || business.branchId,\n    },\n    {\n      skip: !business.isValid,\n    },\n  )\n  const theme = getTheme(data && data.theme && data.theme.styles)\n  return useObserver(() => (\n    <ThemeProvider theme={theme}>{children as React.ReactChild}</ThemeProvider>\n  ))\n}\n\nexport function getTheme(styles?: GThemeStyle.Styles) {\n  // Fallback colors\n  const defaultPrimary = '#54984a'\n  const defaultSecondary = '#99230e'\n  const defaultTertiary = '#d9a700'\n\n  const defaultTheme = {\n    primary: defaultPrimary,\n    secondary: defaultSecondary,\n    tertiary: defaultTertiary,\n    secondaryHover: calcHoverColor(defaultPrimary),\n    tertiaryHover: calcHoverColor(defaultTertiary),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    storeLogo: null,\n    storeLogoMobile: null,\n    backgroundCart: null,\n  }\n\n  if (styles) {\n    return {\n      ...defaultTheme,\n      primary: styles.active || defaultPrimary,\n      secondary: styles.main || defaultSecondary,\n      tertiary: styles.mainSecondary || defaultTertiary,\n      secondaryHover: styles.main && calcHoverColor(styles.main),\n      tertiaryHover:\n        styles.mainSecondary && calcHoverColor(styles.mainSecondary),\n      storeLogo: styles.storeLogo,\n      storeLogoMobile: styles.storeLogoMobile,\n      backgroundCart: styles.backgroundCart,\n    }\n  }\n\n  return defaultTheme\n}\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport type TTheme = ReturnType<typeof getTheme>\n\nexport default ThemeSwitchProvider\n","import gql from 'graphql-tag'\n\nimport { FOrderFragmentDoc, FPriceFragmentDoc } from '../graph/generated'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\n\nconst CartRecipeFragment = gql`\n  fragment GCartRecipe on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...FPrice\n        }\n      }\n    }\n  }\n  ${FPriceFragmentDoc}\n`\n\nexport const OrderCartForRecipeQuery = gql`\n  query GOrderCartForRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...GCartRecipe\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nexport const OrderCartForItemQuery = gql`\n  query GOrderCartForItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...GCartRecipe\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nconst CreateOrderFragment = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const CreatePickupOrderMutation = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const CreateDeliveryOrderMutation = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const AddToOrderMutation = gql`\n  mutation GAddToOrder($orderId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...FOrder\n    }\n  }\n  ${FOrderFragmentDoc}\n`\n\nexport const AddToOrderMobileMutation = gql`\n  mutation GAddToOrderMobile(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const ChangeOrderItemMutation = gql`\n  mutation GChangeOrderItem($orderId: ID!, $itemId: ID!, $sideDishes: [ID!]) {\n    updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...FOrder\n    }\n  }\n  ${FOrderFragmentDoc}\n`\n\nexport const RemoveOrderItemMutation = gql`\n  mutation GRemoveOrderItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...FOrder\n    }\n  }\n  ${FOrderFragmentDoc}\n`\n\nexport const SubmitOrderMutation = gql`\n  mutation GSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport const OrderPaymentStatusQuery = gql`\n  query GOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport const VamStatusQuery = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n","import { Observer } from 'mobx-react'\nimport React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = false }) => {\n  const root = useRoot()\n  if (observe === true) {\n    return <Observer>{() => render(root)}</Observer>\n  }\n  return render(root)\n}\n\nexport const RootProvider = rootContext.Provider\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport * as detector from 'locales-detector'\nimport React, { useState } from 'react'\n\nimport Pacman from './common/Pacman'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC<{ forceLanguage?: string }> = ({\n  children,\n  forceLanguage,\n}) => {\n  const [isReady, setReady] = useState(false)\n  const [language] = useState(() => forceLanguage || detectLanguage())\n\n  useAsyncEffect(async () => {\n    await changeLanguage(language)\n    setReady(true)\n  })\n\n  if (isReady === false) {\n    return <Pacman />\n  }\n\n  return (\n    <I18nProvider language={language} i18n={i18n}>\n      {children}\n    </I18nProvider>\n  )\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.UrlDetector('lang'), new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages: ReadonlyArray<string> = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport RedBox from 'redbox-react'\nimport { VError } from 'verror'\n\nimport Pacman from '../common/Pacman'\nimport { logError } from '../helpers/logger'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n  }\n  const GQuery: React.FC<IProps> = ({\n    render,\n    renderFragment,\n    renderLoading = true,\n    renderError = true,\n    children,\n    ...props\n  }) => (\n    <Query query={query} {...props}>\n      {result => {\n        if (result.loading || !result.data) {\n          if (typeof renderLoading === 'function') {\n            return renderLoading(result)\n          } else if (renderLoading === true) {\n            return <Pacman />\n          }\n        }\n        if (result.error) {\n          reportError(result.error)\n          logError(result.error)\n          if (typeof renderError === 'function') {\n            return renderError(result)\n          } else if (renderError === true) {\n            if (process.env.NODE_ENV === 'production') {\n              throw new VError(result.error, 'Query error')\n            }\n            return <RedBox error={result.error} />\n          } else {\n            return null\n          }\n        }\n        if (result.data) {\n          if (renderFragment) {\n            return <>{renderFragment(result.data, result)}</>\n          }\n          if (render) {\n            return render(result.data, result)\n          }\n        }\n        return children || null\n      }}\n    </Query>\n  )\n\n  return GQuery\n}\n","import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components'\n\nexport const Desktop = props => <ReactResponsive {...props} minWidth={768} />\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxAspectRatio=\"14/9\" maxWidth={767} />\n)\nexport const MobileLandscape = props => (\n  <ReactResponsive\n    {...props}\n    screen={true}\n    minAspectRatio=\"14/9\"\n    maxWidth={767}\n  />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.FC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${768 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${767 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n","var map = {\n\t\"./cs/messages.po\": [\n\t\t860,\n\t\t2\n\t],\n\t\"./de/messages.po\": [\n\t\t861,\n\t\t3\n\t],\n\t\"./en-dev/messages.po\": [\n\t\t863,\n\t\t5\n\t],\n\t\"./en/messages.po\": [\n\t\t862,\n\t\t4\n\t],\n\t\"./pl/messages.po\": [\n\t\t864,\n\t\t6\n\t],\n\t\"./sk/messages.po\": [\n\t\t865,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 561;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./cs/messages.js\": [\n\t\t866,\n\t\t2\n\t],\n\t\"./de/messages.js\": [\n\t\t867,\n\t\t3\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t869,\n\t\t5\n\t],\n\t\"./en/messages.js\": [\n\t\t868,\n\t\t4\n\t],\n\t\"./pl/messages.js\": [\n\t\t870,\n\t\t6\n\t],\n\t\"./sk/messages.js\": [\n\t\t871,\n\t\t7\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 562;\nmodule.exports = webpackAsyncContext;","import * as RM from 'ramda'\n\nexport { RM }\n","import { FGeoPointFragment } from '../graph/generated'\n\nexport type GeoPoint = Omit<FGeoPointFragment, '__typename'>\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.FC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import React from 'react'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.FC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  let ErrorBoundaryContainer\n\n  if (prod) {\n    ErrorBoundaryContainer = require('react-error-guard')\n      .ProductionErrorBoundary\n    return (\n      <ErrorBoundaryContainer\n        dispatchErrorReporting={({ error, info }) => {\n          reportRenderingError(error, info)\n        }}\n      >\n        {children}\n      </ErrorBoundaryContainer>\n    )\n  } else {\n    ErrorBoundaryContainer = require('react-error-guard').DeveloperErrorBoundary\n    return <ErrorBoundaryContainer>{children}</ErrorBoundaryContainer>\n  }\n}\n","import React from 'react'\nimport DocumentTitle from 'react-document-title'\n\nimport { appConfig } from '../config'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {}\n\nexport const PageTitle: React.FC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={root => {\n      if (root.business.isValid) {\n        return (\n          <DocumentTitle\n            title={`${root.business.branch!.brand.name} - ${\n              appConfig.pageTitleSuffix\n            }`}\n          />\n        )\n      }\n      return <DocumentTitle title={appConfig.pageTitleSuffix} />\n    }}\n  />\n)\n","import React from 'react'\n\nimport { SecondaryButton } from '../common/Buttons'\nimport { useRoot } from '../common/WithRoot'\n\ninterface IProps {}\n\nexport const ResetPersistenceButton: React.FC<IProps> = props => {\n  const root = useRoot()\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  return (\n    <SecondaryButton\n      onClick={() => {\n        root.reset()\n        location.reload()\n      }}\n    >\n      Reset uživ. dat [DEV]\n    </SecondaryButton>\n  )\n}\n","import './App.css'\n\nimport { Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile, MobileLandscape } from '../common/Responsive'\nimport { ResetPersistenceButton } from './ResetPersistenceButton'\n\nconst LandscapeMessage = styled.div`\n  font-size: 1.1rem;\n  padding: 3rem;\n  vertical-align: center;\n`\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <PageTitle />\n    <Desktop>\n      <DesktopApp />\n    </Desktop>\n    <Mobile>\n      <MobileApp />\n    </Mobile>\n    <MobileLandscape>\n      <LandscapeMessage>\n        <Trans>\n          We know, you like space. Our app is optimised for desktop. Leave your\n          phone in portrait for now.\n        </Trans>\n      </LandscapeMessage>\n    </MobileLandscape>\n    <ResetPersistenceButton />\n  </ErrorContainer>\n)\n\nexport default App\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from '../common/WithRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() =>\n    business.isValid ? (\n      <BrowserRouter\n        basename={business.routerBasePath}\n        key={business.routerBasePath}\n      >\n        {children}\n      </BrowserRouter>\n    ) : null,\n  )\n}\n","import { ErrorResponse, onError } from 'apollo-link-error'\nimport debug from 'debug'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nconst log = debug('graph:error')\n\nexport const errorHandler = ({\n  graphQLErrors,\n  networkError,\n  operation,\n}: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n    graphQLErrors.map(({ message, locations, path }) =>\n      log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    )\n  }\n  if (networkError) {\n    log(`[Network error]: ${networkError}`)\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersist('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersist('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersist('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { IRootEnvironment, TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    const name = getPath(self).trim() || getType(self).name\n    return debug(`c2e:model/${name}`)\n  },\n  get env() {\n    return getEnv<IRootEnvironment>(self)\n  },\n  get client() {\n    const { client } = getEnv<IRootEnvironment>(self)\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import { setContext } from 'apollo-link-context'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logAuth } from '../helpers/logger'\nimport { identifyGuest } from '../helpers/sentry'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return self.token !== null\n    },\n    getClientHeaders() {\n      return {\n        Authorization: `Bearer ${self.token}`,\n      }\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      identifyGuest(userId, token)\n    },\n  }))\n  .actions(self => {\n    let fetching\n\n    const fetch = async () => {\n      if (!fetching) {\n        fetching = fetchToken()\n        const { token, userId } = await fetching\n        self.authenticate(token, String(userId))\n        fetching = null\n      }\n      return fetching\n    }\n\n    const authLink = setContext(async () => {\n      if (!self.token) {\n        await fetch()\n      }\n      return { headers: self.getClientHeaders() }\n    })\n\n    return {\n      attachAuthLinkToClient() {\n        self.client.link = authLink.concat(self.client.link)\n      },\n    }\n  })\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId && snapshot.token) {\n      identifyGuest(snapshot.userId, snapshot.token)\n    }\n    return snapshot\n  })\n\nfunction fetchToken() {\n  const { endpoint } = appConfig\n  if (!endpoint) {\n    throw new Error('Missing endpoint in configuration.')\n  }\n  logAuth('retrieving guest token...')\n  const url = `${endpoint}/users/token?guest=true`\n  const options = {\n    headers: {\n      Accept: 'application/json',\n    },\n  }\n  logAuth('token retrieved')\n  return fetch(url, options).then(response => response.json())\n}\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import gql from 'graphql-tag'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const BusinessLookupQuery = gql`\n  query GBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n  ${CompanyBranchFragment}\n`\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { OrderOriginEnum } from '../graph/generated'\nimport { GBusinessLookup, GCompanyBranch } from '../graph/types'\nimport { logMain } from '../helpers/logger'\nimport { setSentryContext } from '../helpers/sentry'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessLookupQuery } from './BusinessModel.graphql'\n\ntype TBranch = Omit<GCompanyBranch.Fragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<GCompanyBranch.Country>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get brandOrBranch() {\n      return {\n        brandId: this.isBrand ? this.brandId : undefined,\n        branchId: this.isBrand ? undefined : this.branchId,\n      }\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      // app can be built with a specific code for a purpose of mobile apps\n      let code = process.env.REACT_APP_BUSINESS_CODE || null\n      if (!code) {\n        // mostly used in DEV because it's not possible to use subdomains for\n        // business resolution ... use either code from url or stored one as fallback\n        const urlCode = readBusinessCodeFromUrl()\n        code = urlCode || self.code\n      }\n      return code\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: GBusinessLookup.Lookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    mockBranchData(branch: TBranch) {\n      self.branch = branch\n    },\n  }))\n  .actions(self => ({\n    queryBusiness: async () => {\n      const { data } = await self.client.query<GBusinessLookup.Query>({\n        query: BusinessLookupQuery,\n        variables: {\n          code: self.requestedCode,\n          url: window.location.href,\n        },\n      })\n\n      if (!(data && data.lookup && data.lookup.branch)) {\n        logMain('no business found, used code %s', self.requestedCode)\n        redirectAway()\n        return\n      }\n\n      self.updateFromLookup(data.lookup)\n\n      setSentryContext({\n        requestedCode: self.requestedCode,\n        branchId: self.branchId,\n        brandId: self.brandId,\n        companyId: self.companyId,\n        isBrand: self.isBrand,\n      })\n\n      logMain(\n        'identified branch %s, brand %s; company %s, isBrand: %s',\n        self.branchId,\n        self.brandId,\n        self.companyId,\n        self.isBrand,\n      )\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { Instance, SnapshotIn } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport interface TConfigModel extends Instance<typeof ConfigModel> {}\nexport interface TConfigModelProps extends SnapshotIn<typeof ConfigModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { GResolveLocationDocument } from '../graph/generated'\nimport { GResolveLocation } from '../graph/types'\nimport { formatAddress } from '../helpers/formats'\nimport { GeoPoint, gpsToLatLng } from '../helpers/gps'\nimport { i18n } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  branchId: MaybeID\n  isOpen: boolean\n  isResolved: boolean\n  isStreetAddress: boolean\n  inDeliveryLocation: boolean\n  geolocationDisabled: boolean\n  geolocationPoint: Maybe<GeoPoint>\n  isResolving: boolean\n}\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.maybe(types.number),\n    longitude: types.maybe(types.number),\n    searchValue: types.maybe(types.string),\n    address: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(self => ({\n    branchId: null,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    geolocationPoint: null,\n    isResolving: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(self.env.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== undefined || self.longitude !== undefined\n    },\n    get hasAddress() {\n      return Boolean(self.address)\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get hasFinishedSearch() {\n      return (\n        ((self.searchValue && self.searchValue.length > 0) || self.address) &&\n        !self.isResolving\n      )\n    },\n    get geoPoint() {\n      if (this.hasLocation) {\n        return {\n          latitude: self.latitude!,\n          longitude: self.longitude!,\n        }\n      }\n      return null\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      if (this.geoPoint) {\n        return gpsToLatLng(this.geoPoint)\n      }\n      return null\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: any) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: GResolveLocation.ResolveLocation) {\n      const { finalAddress: address } = result\n      if (address) {\n        self.address = formatAddress(address)\n      }\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n      if (result.isResolved) {\n        self.setLocation(result.gpsCoordinates)\n        self.log('resolved as %s', self.address)\n      } else {\n        self.log('not resolved')\n      }\n    },\n    setVolatileProps(props: Partial<IVolatileProps>) {\n      Object.assign(self, props)\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = false\n    },\n    clearAddress() {\n      self.address = ''\n    },\n    setIsResolving(state: boolean) {\n      self.isResolving = state\n    },\n  }))\n  .actions(self => {\n    const resolver = async (vars?: Partial<GResolveLocation.Variables>) => {\n      self.setIsResolving(true)\n\n      const variables: GResolveLocation.Variables = {\n        ...self.resolutionTarget,\n        ...vars,\n      }\n      const { data } = await self.client.query<GResolveLocation.Query>({\n        query: GResolveLocationDocument,\n        variables,\n      })\n      if (data !== null) {\n        self.setResolutionResult(data.resolveLocation)\n      }\n      self.setIsResolving(false)\n    }\n    return {\n      validateUserLocation() {\n        if (self.hasLocation) {\n          self.log(\n            'validating stored user location %s, %s',\n            self.latitude,\n            self.longitude,\n          )\n          resolver({ latitude: self.latitude, longitude: self.longitude })\n        }\n      },\n      withUserAddress(address: string) {\n        self.searchValue = address\n        if (address === '') {\n          self.clearAddress()\n        } else {\n          self.log('resolving user address: %s', address)\n          resolver({ address })\n        }\n      },\n      withUserLocation(userLocation: GeoPoint) {\n        self.log('with user location: %j', userLocation)\n        self.latitude = userLocation.latitude\n        self.longitude = userLocation.longitude\n        resolver(userLocation)\n      },\n      useGeolocationResult(point: GeoPoint) {\n        self.geolocationPoint = point\n      },\n      attemptGeolocation() {\n        self.log('geolocating...')\n        self.env.geolocation.getCurrentPosition(\n          ({ coords }) => {\n            const { latitude, longitude } = coords\n            self.log(\n              'geolocated at coords %s, %s (acc: %s)',\n              coords.latitude,\n              coords.longitude,\n              coords.accuracy,\n            )\n            this.useGeolocationResult({ latitude, longitude })\n          },\n          err => {\n            self.log(new VError('failed geolocation', err))\n            self.disableGeolocation()\n            window.alert(i18n.t`Your browser does not support geolocation.`)\n          },\n          {\n            enableHighAccuracy: true,\n            maximumAge: 60 * 1000,\n          },\n        )\n      },\n    }\n  })\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { GeoPoint, gpsToLatLng, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n  clickPoint: Maybe<GeoPoint>\n}\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n    clickPoint: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panToLocation(gps: GeoPoint, radiusMeters: number = 2000) {\n      if (self.mapRef) {\n        // const bounds = getBounds([\n        //   computeDestinationPoint(gps, radiusMeters, 135), // SE corner\n        //   computeDestinationPoint(gps, radiusMeters, 315), // NW corner\n        // ])\n\n        // // @ts-ignore padding missing in types\n        // self.mapRef.panToBounds(\n        //   {\n        //     west: bounds.minLng,\n        //     east: bounds.maxLng,\n        //     north: bounds.minLat,\n        //     south: bounds.maxLat,\n        //   },\n        //   20,\n        // )\n        self.mapRef.panTo(gpsToLatLng(gps))\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import scriptjs from 'scriptjs'\n\nimport { logOrder } from './logger'\n\nconst embedScript = 'https://gate.gopay.cz/gp-gw/js/embed.js'\nconst embedScriptSandbox = 'https://gw.sandbox.gopay.com/gp-gw/js/embed.js'\n\ninterface ICheckoutResult {\n  url: string\n  id: number\n}\n\nexport async function executeGoPayPayment(url: string) {\n  logOrder('GoPay init', url)\n  await loadScript(url)\n  return checkout(getOptions(url))\n}\n\nfunction getOptions(url: string) {\n  // const isSafari = /^((?!chrome|android|mobile).)*safari/i.test(\n  //   navigator.userAgent,\n  // )\n  // logOrder('Browser is desktop Safari', isSafari)\n  return { gatewayUrl: url, inline: true }\n}\n\nfunction loadScript(url: string) {\n  const scriptUrl = url.includes('gw.sandbox.gopay.com')\n    ? embedScriptSandbox\n    : embedScript\n  logOrder('GoPay script url', scriptUrl)\n  return new Promise(resolve => {\n    scriptjs(scriptUrl, resolve)\n  })\n}\n\nfunction checkout(options: object): Promise<number> {\n  return new Promise(resolve => {\n    logOrder('GoPay checkout')\n    // @ts-ignore_gopay global\n    _gopay.checkout(options, (result: ICheckoutResult) => {\n      logOrder('GoPay result', result)\n      resolve(result.id)\n    })\n  })\n}\n","import { isoDate } from '@speedlo/graphql'\nimport { when } from 'mobx'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { FetchResult } from 'react-apollo'\nimport { VError } from 'verror'\n\nimport {\n  DeliveryTypeEnum,\n  FOrderFragmentDoc,\n  FRecipeFragmentDoc,\n  PaymentGateEnum,\n} from '../graph/generated'\nimport {\n  FOrder,\n  FRecipe,\n  GAddToOrder,\n  GChangeOrderItem,\n  GCreateDeliveryOrder,\n  GCreateOrder,\n  GCreatePickupOrder,\n  GOrderMobile,\n  GOrderPaymentStatus,\n  GRemoveOrderItem,\n  GSubmitOrder,\n  GVamStatus,\n} from '../graph/types'\nimport { executeGoPayPayment } from '../helpers/gopay'\nimport { logMain, logOrder } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { reportError } from '../helpers/sentry'\nimport { i18n } from '../i18n'\nimport { FoodMenuQuery } from '../segments/foodMenu/FoodMenuView.graphql'\nimport {\n  PickupMapBranchQuery,\n  PickupMapBrandQuery,\n} from '../segments/map/PickupMap.graphql'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\nimport { IOrderFormState } from '../segments/orderForm/OrderFormSetup'\nimport { BaseModel } from './BaseModel'\nimport {\n  AddToOrderMobileMutation,\n  AddToOrderMutation,\n  ChangeOrderItemMutation,\n  CreateDeliveryOrderMutation,\n  CreatePickupOrderMutation,\n  OrderCartForRecipeQuery,\n  OrderPaymentStatusQuery,\n  RemoveOrderItemMutation,\n  SubmitOrderMutation,\n  VamStatusQuery,\n} from './OrderModel.graphql'\n\ninterface IVolatileProps {\n  isSubmitting: boolean\n  isGoPayChecking: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  agreements: TAgreement[]\n  lastActiveRecipeId: MaybeID\n  isVamInitialized: boolean\n  timePickerOpen: boolean\n  shouldRefreshCart: boolean\n  delayedOrderEnabled: boolean\n}\n\nexport type TAgreement = GVamStatus.VamStatus\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    payment: PaymentGateEnum.Gopay,\n    deliverAt: types.maybe(types.Date),\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n  })\n  .volatile<IVolatileProps>(self => ({\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null,\n    agreements: [],\n    lastActiveRecipeId: null,\n    isVamInitialized: false,\n    timePickerOpen: false,\n    shouldRefreshCart: false,\n    delayedOrderEnabled: false,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get fragmentOrderId() {\n      return `Order-${self.orderId}`\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return '+'\n    },\n    getSubmitVariables(formValues: IOrderFormState): GSubmitOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstname,\n          lastName: formValues.lastname,\n          emails: [{ email: formValues.email }],\n          phones: [{ phone: `${formValues.phonePrefix}${formValues.phone}` }],\n        },\n        note: formValues.note,\n        paymentGate: formValues.payment,\n        deliverAt: self.deliverAt && isoDate(self.deliverAt),\n        agreements: formValues.agreements\n          .filter(RM.propEq('isConfirmed', true))\n          .map(RM.prop('id'))\n          .filter(Boolean),\n      }\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: GCreateOrder.Fragment) {\n      self.orderId = result.id\n      self.branchId = result.companyBranch.id\n      self.deliverAt = undefined\n      logMain('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        logMain('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        logMain(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n      self.isVamInitialized = false\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    useAgreements(agreements: ReadonlyArray<TAgreement>) {\n      if (Array.isArray(agreements)) {\n        self.agreements = agreements\n      }\n      self.isVamInitialized = true\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    openTimePicker() {\n      self.timePickerOpen = true\n    },\n    closeTimePicker() {\n      self.timePickerOpen = false\n    },\n    setCartRefresh(shouldRefresh: boolean) {\n      self.shouldRefreshCart = shouldRefresh\n    },\n    setDeliverAt(deliverAt: Date | undefined) {\n      self.deliverAt = deliverAt\n    },\n    enableDelayedOrder() {\n      self.delayedOrderEnabled = true\n    },\n    async queryPaymentStatus(\n      orderId: ID = self.orderId!,\n    ): Promise<GOrderPaymentStatus.Status | null> {\n      const variables: GOrderPaymentStatus.Variables = {\n        orderId,\n      }\n      try {\n        const result = await self.client.query<GOrderPaymentStatus.Query>({\n          fetchPolicy: 'no-cache',\n          query: OrderPaymentStatusQuery,\n          variables,\n        })\n        return result.data.status\n      } catch (err) {\n        logOrder('failed to verify payment status for order %s: ', orderId)\n        return null\n      }\n    },\n    rememberFormValues(values: IOrderFormState) {\n      if (self.root.user.shouldRememberForm) {\n        self.firstname = values.firstname\n        self.lastname = values.lastname\n        self.email = values.email\n        self.phone = values.phone\n        self.phonePrefix = values.phonePrefix\n        self.note = values.note\n      } else {\n        self.firstname = ''\n        self.lastname = ''\n        self.email = ''\n        self.phone = ''\n        self.phonePrefix = ''\n        self.note = ''\n      }\n    },\n  }))\n  .actions(self => ({\n    async createDeliveryOrder() {\n      const { business, location } = self.root\n      if (!location.geoPoint) {\n        return null\n      }\n      const variables: GCreateDeliveryOrder.Variables = {\n        gps: location.geoPoint,\n        orderOrigin: business.orderOrigin,\n        ...business.brandOrBranch,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreateDeliveryOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreateDeliveryOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    async createPickupOrder(branchId: ID) {\n      const { business } = self.root\n      const variables: GCreatePickupOrder.Variables = {\n        branchId,\n        orderOrigin: business.orderOrigin,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreatePickupOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreatePickupOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    prefetchPickup() {\n      const { business } = self.root\n      if (business.isBrand) {\n        self.client.query({\n          query: PickupMapBrandQuery,\n          variables: { brandId: business.brandId },\n        })\n      } else {\n        self.client.query({\n          query: PickupMapBranchQuery,\n          variables: { branchId: business.branchId },\n        })\n      }\n    },\n    prefetchFoodMenu(branchId?: ID) {\n      if (branchId) {\n        self.client.query({ query: FoodMenuQuery, variables: { branchId } })\n      }\n    },\n    prefetchFood(recipeId: ID) {\n      self.client.query({\n        query: OrderCartForRecipeQuery,\n        variables: { recipeId },\n      })\n    },\n    async addFromRecipe(recipeId: ID, sideDishes: ID[] = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<FOrder.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: FOrderFragmentDoc,\n        fragmentName: 'FOrder',\n      })\n      const recipe = self.client.readFragment<FRecipe.Fragment>({\n        id: `Recipe-${recipeId}`,\n        fragment: FRecipeFragmentDoc,\n        fragmentName: 'FRecipe',\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              price: {\n                __typename: 'PriceConverted',\n                value: 0,\n                formattedValue: '---',\n              },\n              recipe: { ...recipe, sideDishes: [] },\n              sideDishes: [],\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async addFromRecipeMobile(recipeId: ID, sideDishes: ID[] = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrderMobile.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderMobileFragment,\n        fragmentName: 'GOrderMobile',\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              recipe: { __typename: 'Recipe', id: recipeId },\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMobileMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async updateItem(itemId: ID, sideDishes: ID[] = []) {\n      const variables: GChangeOrderItem.Variables = {\n        orderId: self.orderId!,\n        itemId,\n        sideDishes,\n      }\n      await self.client.mutate({ mutation: ChangeOrderItemMutation, variables })\n    },\n    removeItemFromCart(itemId: ID) {\n      const variables: GRemoveOrderItem.Variables = {\n        itemId,\n      }\n      const current = self.client.readFragment<FOrder.Fragment>({\n        fragment: FOrderFragmentDoc,\n        fragmentName: 'FOrder',\n        id: self.fragmentOrderId,\n      })\n      self.client.mutate({\n        mutation: RemoveOrderItemMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          destroyOrderRecipe: {\n            ...current,\n            countWares: current ? current.countWares - 1 : 0,\n            items: current\n              ? current.items.filter(item => item.id !== itemId)\n              : [],\n          },\n        },\n      })\n    },\n    async initVam() {\n      const variables: GVamStatus.Variables = {\n        input: {\n          orderId: self.orderId!,\n          email: self.email,\n          firstname: self.firstname,\n          lastname: self.lastname,\n          phone: self.phone,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    async updateVam(formValues: IOrderFormState) {\n      const phone = `${formValues.phonePrefix.trim()}${formValues.phone.trim()}`\n      const email = formValues.email.trim()\n      const firstname = formValues.firstname.trim()\n      const lastname = formValues.lastname.trim()\n      const variables: GVamStatus.Variables = {\n        input: {\n          email,\n          phone,\n          firstname,\n          lastname,\n          orderId: self.orderId!,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    submitOrder: async (formValues: IOrderFormState) => {\n      self.isSubmitting = true\n      let result: FetchResult\n\n      self.rememberFormValues(formValues)\n\n      try {\n        result = await self.client.mutate({\n          fetchPolicy: 'no-cache',\n          mutation: SubmitOrderMutation,\n          variables: self.getSubmitVariables(formValues),\n        })\n      } catch (err) {\n        self.submitFailed()\n        throw reportError(new VError('order submit mutation error: %j', err))\n      }\n\n      if ((result.errors && result.errors.length) || !result.data) {\n        self.submitFailed()\n        throw reportError(\n          new VError('order submit graphql errors: %j', result.errors),\n        )\n      }\n\n      const submitResult: GSubmitOrder.FinishOrder = result.data.finishOrder\n      if (submitResult.userErrors && submitResult.userErrors.length) {\n        self.submitFailed(submitResult.userErrors)\n        throw new VError('Order user errors: %j', submitResult.userErrors)\n      }\n\n      if (formValues.payment === PaymentGateEnum.Cash) {\n        self.submitFinished()\n        return\n      }\n\n      if (!submitResult.gopayUrl) {\n        self.submitFailed()\n        throw reportError(new Error('GoPay url missing from response'))\n      }\n\n      await executeGoPayPayment(submitResult.gopayUrl)\n\n      self.goPayStatusCheck(true)\n      const paymentStatus = await self.queryPaymentStatus()\n      self.goPayStatusCheck(false)\n\n      if (paymentStatus) {\n        if (paymentStatus.isSuccess) {\n          self.submitFinished()\n        } else {\n          self.submitFailed(\n            paymentStatus.userErrors.length\n              ? paymentStatus.userErrors\n              : undefined,\n          )\n          throw new VError('Payment failed: %j', paymentStatus.userErrors)\n        }\n      } else {\n        self.submitFailed()\n        throw reportError(new VError('No payment status returned'))\n      }\n    },\n  }))\n  .actions(self => ({\n    checkPaymentStatus() {\n      const parsedUrl = new window.URL(window.location.href)\n      // the orderId will come in URL when GoPay payment was handled by redirect\n      const orderId = parsedUrl.searchParams.get('orderId')\n      if (!orderId) {\n        return\n      }\n      when(\n        () => self.root.auth.isValid,\n        async () => {\n          // delay displaying status checking modal\n          const checkDelay = setTimeout(() => self.goPayStatusCheck(true), 500)\n          const paymentStatus = await self.queryPaymentStatus(orderId)\n\n          clearTimeout(checkDelay)\n          self.goPayStatusCheck(false)\n\n          if (paymentStatus && paymentStatus.isSuccess) {\n            self.orderPaid(orderId)\n            parsedUrl.search = ''\n            parsedUrl.pathname = '/finish'\n            location.replace(parsedUrl.toString())\n          } else {\n            const phone = self.root.business.branch!.phone\n            self.submitFailed([\n              i18n.t`We were unable to verify status of your payment. Please contact operator using number ${phone}`,\n            ])\n            return\n          }\n        },\n      )\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    rememberForm: types.maybeNull(types.boolean),\n  })\n  .volatile(self => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n  }))\n  .actions(self => ({\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n  }))\n  .views(self => ({\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n","import {\n  applySnapshot,\n  getSnapshot,\n  Instance,\n  SnapshotIn,\n  types,\n} from 'mobx-state-tree'\n\nimport { GraphClient } from '../createClient'\nimport { logDebug } from '../helpers/logger'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .actions(self => {\n    let initialSnapshot\n    return {\n      afterCreate() {\n        const { business, map, ...snapshot } = getSnapshot(self)\n        initialSnapshot = snapshot\n      },\n      reset() {\n        logDebug(initialSnapshot)\n        applySnapshot(self, initialSnapshot)\n      },\n      init: async () => {\n        self.auth.attachAuthLinkToClient()\n        await Promise.all(self.persistedModels.map(persistModel))\n        await self.business.queryBusiness()\n        self.order.checkPaymentStatus()\n        initialSnapshot.business = getSnapshot(self.business)\n      },\n    }\n  })\n\nexport interface IRootEnvironment {\n  client: GraphClient\n  fetch: TFetch\n  geolocation: Geolocation\n}\n\nexport function createRootModel(client: GraphClient) {\n  const root = RootModel.create({}, {\n    client,\n    fetch: window.fetch,\n    geolocation: navigator.geolocation,\n  } as IRootEnvironment)\n  root.init()\n  return root\n}\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import { updateWorker } from '@speedlo/tools'\nimport React from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloProviderHooks } from 'react-apollo-hooks'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport Pacman from './common/Pacman'\nimport ThemeSwitchProvider from './common/ThemeSwitchProvider'\nimport { RootProvider } from './common/WithRoot'\nimport { createApolloClient } from './createClient'\nimport { installSentry } from './helpers/sentry'\nimport { i18n, I18nManager } from './i18n'\nimport { createRootModel } from './models/RootModel'\n\nconst client = createApolloClient()\nconst root = createRootModel(client)\n\nconst Main = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <RootProvider value={root}>\n      <ApolloProvider client={client}>\n        <ApolloProviderHooks client={client}>\n          <I18nManager>\n            <Router>\n              <ThemeSwitchProvider>\n                <App />\n              </ThemeSwitchProvider>\n            </Router>\n          </I18nManager>\n        </ApolloProviderHooks>\n      </ApolloProvider>\n    </RootProvider>\n  </React.Suspense>\n)\n\ninstallSentry(() => {\n  ReactDOM.render(<Main />, document.getElementById('root'))\n})\n\nupdateWorker.register({\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    if (event.data === 'update-applied') {\n      location.reload()\n    }\n  })\n}\n","import { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport createLogLink from 'apollo-link-log'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from './config'\nimport { createErrorLink } from './graph/errorHandler'\nimport { logGraph } from './helpers/logger'\nimport { isNetworkOnline } from './helpers/offline'\n\nexport type GraphClient = ApolloClient<NormalizedCacheObject>\n\nexport function createApolloClient() {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      // tslint:disable-next-line triple-equals\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const loggingLink = createLoggingLink()\n  const httpLink = createHttpLink()\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n\n  const link = ApolloLink.from([\n    loggingLink,\n    retryLink,\n    offlineLink,\n    errorLink,\n    httpLink,\n  ])\n\n  return new ApolloClient({ link, cache })\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createLoggingLink() {\n  return createLogLink({\n    enabled: process.env.REACT_APP_STAGE === 'dev',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: error => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n"],"sourceRoot":""}