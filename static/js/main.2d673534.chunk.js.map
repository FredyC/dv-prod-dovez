{"version":3,"sources":["common/Responsive.tsx","helpers/ramda.ts","graph/types.ts","graph/index.ts","helpers/gps.ts","segments/cart/CartView.graphql.ts","segments/foodMenu/FoodMenuView.graphql.ts","segments/mobile/MobileCart.graphql.ts","helpers/logger.ts","models/BaseModel.ts","graph/fragments.graphql.ts","helpers/sentry.ts","common/Buttons.tsx","helpers/formats.ts","segments/map/PickupMap.graphql.ts","models/OrderModel.graphql.ts","common/ThemeSwitchProvider.tsx","index.tsx","config.ts","common/WithRoot.tsx","app/App.tsx","common/ErrorContainer.tsx","common/PageTitle.tsx","app/ResetPersistenceButton.tsx","common/RouteButton.tsx","app/Router.tsx","models/ThemeModel.graphql.ts","createClient.ts","i18n.tsx","graph/errorHandler.ts","common/Pacman.tsx","helpers/offline.ts","graph/buildQuery.tsx","locale lazy /^/.*/messages/.js$/ groupOptions: {} namespace object","models/RootModel.ts","helpers/persistModel.ts","models/AuthModel.ts","models/BusinessModel.ts","models/BannerModel.ts","models/BusinessModel.graphql.ts","models/ConfigModel.ts","models/LocationModel.ts","models/LocationModel.graphql.ts","models/MapModel.ts","models/OrderModel.ts","helpers/gopay.ts","graph/buildMutation.tsx","models/UserModel.ts"],"names":["_react","_interopRequireDefault","__webpack_require__","_reactResponsive","_styledComponents","Desktop","props","default","createElement","_extends","minWidth","Mobile","maxAspectRatio","maxWidth","screen","minAspectRatio","children","mobile","desktop","Fragment","className","args","css","RM","_interopRequireWildcard","CompanyTypeEnum","AddressTypeEnum","CurrencyEnum","OrderStateCategoryTargetEnum","OrderStateCategoryEnum","WeekDayEnum","AllergenEnum","WarePriceTypeEnum","AvailabilityTypeEnum","FieldStateEnum","DeviceStateEnum","DeviceTypeEnum","OrderBillingTypeEnum","DeliveryTypeEnum","OrderRecipeStateEnum","LanguageEnum","OrderOnlineStateEnum","OrderOriginEnum","PaymentGateEnum","PaymentTypeEnum","OrderStateEnum","ZoneTypeEnum","ShiftUserStateEnum","WareUnitEnum","WareCategoryTypeEnum","WareRequirementEnum","MobilePlatformEnum","SubscriptionActionType","SettingTypeEnum","exports","_buildMutation","_buildQuery","gps","lat","Number","latitude","lng","longitude","latLng","_graphqlTag","_graph","_fragments","OrderFragment","CartItemFragment","PriceFragment","CartViewQuery","QueryCartView","buildQuery","FoodMenuQuery","CartPresenceFragment","FoodMenuCartPresenceQuery","QueryFoodMenuCartPresence","QueryFoodMenu","_FoodMenuView","OrderMobileFragment","MobileCartQuery","QueryMobileCart","_debug","logMain","logMap","logDebug","logGraph","logError","logAuth","logRouting","logPersist","logOrder","logSentry","logLang","_mobxStateTree","BaseModel","types","model","views","self","log","name","getPath","trim","getType","env","getEnv","client","root","getRoot","JsonAddressFragment","AddressFragment","GeoPointFragment","RecipeFragment","CompanyBranchStatusFragment","PromoCodeFragment","_ravenJs","_verror","_config","_logger","_ramda","cb","sentryDSN","appConfig","config","environment","install","context","userId","token","setUserContext","isGuest","setExtraContext","error","info","isSetup","captureException","extra","showReportDialog","errors","data","captureBreadcrumb","category","level","message","Object","assign","forEach","err","Error","userErrors","filter","propEq","length","lastEventId","title","head","meta","VError","cause","_reactstrap","_Responsive","_RouteButton","PrimaryButton","Button","withConfig","displayName","themeProp","SecondaryButton","PrimaryRoutedButton","RouteButton","MobileHeaderButton","_a","isConfirm","theme","__rest","primary","SelectButtonThemed","selected","mediaDesktop","tertiary","unselected","mediaMobile","tertiaryText","unselectedText","tertiaryHover","unselectedHover","_fp","formatTime","format","parseTime","parse","address","street","houseNumber","city","state","PickupBranchFragment","PickupMapBrandQuery","PickupMapBranchQuery","QueryPickupMapBrand","QueryPickupMapBranch","_CartView","_MobileCart","CartRecipeFragment","OrderCartForRecipeQuery","OrderCartForItemQuery","CreateOrderFragment","CreatePickupOrderMutation","CreateDeliveryOrderMutation","AddToOrderMutation","AddToOrderMobileMutation","ChangeOrderItemMutation","RemoveOrderItemMutation","SubmitOrderMutation","OrderPaymentStatusQuery","VamStatusQuery","_color","_mobxReactLite","_reactApolloHooks","_ThemeModel","_WithRoot","getTheme","styles","defaultTheme","secondary","secondaryHover","calcHoverColor","storeLogo","storeLogoMobile","backgroundCart","active","main","mainSecondary","inputColor","lighten","hsl","string","branchId","business","useRoot","useQuery","ThemeStyleQuery","variables","brandId","suspend","skip","isValid","fetchPolicy","useObserver","ThemeProvider","_tools","_reactApollo","_reactDom","_App","_Router","_Pacman","_ThemeSwitchProvider","_createClient","_sentry","_i18n","_RootModel","createApolloClient","createRootModel","Main","Suspense","fallback","RootProvider","value","ApolloProvider","I18nManager","Router","installSentry","render","document","getElementById","serviceWorker","register","onUpdate","sw","setTimeout","window","confirm","i18n","_","postMessage","navigator","addEventListener","event","location","reload","fallbackLanguage","supportedLanguages","endpoint","persistenceKey","NODE_ENV","PUBLIC_URL","REACT_APP_LOCAL_ENDPOINT","REACT_APP_STAGE","REACT_APP_LOCAL_KEY","redirectOnFail","pageTitleSuffix","_mobxReact","rootContext","createContext","undefined","useContext","observe","Observer","Provider","_react2","_ErrorContainer","_PageTitle","_ResetPersistenceButton","LandscapeMessage","div","DesktopApp","lazy","Promise","all","e","then","t","bind","MobileApp","ErrorContainer","prod","PageTitle","MobileLandscape","Trans","id","ResetPersistenceButton","ErrorBoundaryContainer","ProductionErrorBoundary","dispatchErrorReporting","reportRenderingError","DeveloperErrorBoundary","_reactDocumentTitle","WithRoot","branch","brand","_reactRouterDom","to","replace","buttonProps","Link","BrowserRouter","basename","routerBasePath","key","cache","_apolloCacheInmemory","InMemoryCache","dataIdFromObject","o","__typename","loggingLink","_apolloLinkLog","enabled","httpLink","_apolloLinkBatchHttp","BatchHttpLink","uri","credentials","retryLink","_apolloLinkRetry","RetryLink","delay","initial","max","Infinity","jitter","attempts","retryIf","_operation","offlineLink","_apolloLinkQueue","_mobx","autorun","_offline","isNetworkOnline","open","close","createOfflineLink","errorLink","_errorHandler","createErrorLink","link","_apolloLink","ApolloLink","from","_apolloClient","ApolloClient","_core","_hooks","detector","setupI18n","changeLanguage","lang","includes","catalog","load","[object Object]","loadCatalog","activate","detectLanguage","languages","LocaleResolver","UrlDetector","NavigatorDetector","LanguageOnlyTransformer","getLocales","join","find","loc","forceLanguage","isReady","setReady","useState","language","useAsyncEffect","__awaiter","I18nProvider","_apolloLinkError","errorHandler","graphQLErrors","networkError","operation","reportFailingQuery","query","operationName","map","locations","path","onError","_reactSpinkit","noMargin","style","display","alignSelf","justifyContent","data-testid","marginTop","isOnline","change","oldValue","newValue","observable","box","onLine","set","get","renderFragment","renderLoading","renderError","Query","result","loading","reportError","./cs/messages.js","./de/messages.js","./en-dev/messages.js","./en/messages.js","./pl/messages.js","./sk/messages.js","webpackAsyncContext","req","ids","resolve","code","keys","module","RootModel","create","fetch","geolocation","init","_persistModel","_AuthModel","_BaseModel","_BusinessModel","_ConfigModel","_LocationModel","_MapModel","_OrderModel","_UserModel","named","auth","optional","AuthModel","BusinessModel","ConfigModel","MapModel","order","OrderModel","LocationModel","user","UserModel","persistedModels","actions","initialSnapshot","getSnapshot","snapshot","applySnapshot","attachAuthLinkToClient","persistModel","queryBusiness","checkPaymentStatus","modelName","stateKey","writeState","_localforage","setItem","getItem","removeItem","onSnapshot","_apolloLinkContext","maybeNull","getClientHeaders","Authorization","identifyGuest","fetching","authLink","setContext","fetchToken","authenticate","String","headers","concat","preProcessSnapshot","url","Accept","response","json","_types","_BannerModel","banners","BannerModel","volatile","isBrand","isMobileApp","country","orderOrigin","Web","companyId","company","brandOrBranch","this","requestedCode","REACT_APP_BUSINESS_CODE","URL","href","searchParams","codeParam","lookup","knownBasePath","BusinessLookupQuery","updateFromLookup","setSentryContext","has","_dateFns","identifier","closedAt","maybe","Date","installedAt","shouldBeVisible","differenceInDays","Boolean","CompanyBranchFragment","orderItemsMax","_formats","_gps","number","searchValue","isOpen","isResolved","isStreetAddress","inDeliveryLocation","geolocationDisabled","geolocationPoint","isResolving","isGeolocationAvailable","hasLocation","hasAddress","isDeliveryAddress","hasFinishedSearch","geoPoint","resolutionTarget","gpsToLatLng","finalAddress","formatAddress","companyBranch","isValidAddress","setLocation","gpsCoordinates","resolver","vars","setIsResolving","ResolveLocationQuery","setResolutionResult","resolveLocation","clearAddress","userLocation","point","getCurrentPosition","coords","accuracy","useGeolocationResult","disableGeolocation","alert","enableHighAccuracy","maximumAge","LocationResolutionFragment","GPSCzechia","zoom","mapRef","clickPoint","center","ref","getZoom","getCenter","radiusMeters","panTo","ev","latLngToGps","_gopay","_PickupMap","orderId","orderMethod","Messenger","payment","Gopay","deliverAt","firstname","lastname","email","phone","phonePrefix","note","isSubmitting","isGoPayChecking","submitErrors","agreements","lastActiveRecipeId","isVamInitialized","timePickerOpen","shouldRefreshCart","hasOrder","fragmentOrderId","usingDeliveryOrderMethod","usingPickupOrderMethod","Pickup","hasErrors","defaultPhonePrefix","getSubmitVariables","formValues","customer","firstName","lastName","emails","phones","paymentGate","isoDate","prop","method","checking","Array","isArray","recipeId","shouldRefresh","status","values","shouldRememberForm","mutate","mutation","orderCreated","initVam","sideDishes","current","readFragment","fragment","fragmentName","recipe","optimisticResponse","createOrderRecipe","countWares","items","price","formattedValue","automatic","itemId","destroyOrderRecipe","item","input","useAgreements","vamStatus","vamFailed","submitOrder","rememberFormValues","submitFailed","submitResult","finishOrder","Cash","submitFinished","gopayUrl","executeGoPayPayment","goPayStatusCheck","paymentStatus","queryPaymentStatus","isSuccess","parsedUrl","when","checkDelay","clearTimeout","orderPaid","search","pathname","toString","scriptUrl","embedScriptSandbox","embedScript","_scriptjs","loadScript","options","gatewayUrl","inline","getOptions","checkout","Mutation","rememberForm","boolean","closingTimeAlertHidden","orderLimitAlertHidden"],"mappings":"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","file":"static/js/main.2d673534.chunk.js","sourcesContent":["import React from 'react'\nimport ReactResponsive from 'react-responsive'\nimport { css } from 'styled-components'\n\nexport const Desktop = props => <ReactResponsive {...props} minWidth={768} />\nexport const Mobile = props => (\n  <ReactResponsive {...props} maxAspectRatio=\"14/9\" maxWidth={767} />\n)\nexport const MobileLandscape = props => (\n  <ReactResponsive\n    {...props}\n    screen={true}\n    minAspectRatio=\"14/9\"\n    maxWidth={767}\n  />\n)\n\ninterface IResponsiveProps {\n  desktop: string\n  mobile: string\n}\n\nexport const Responsive: React.SFC<IResponsiveProps> = ({\n  children,\n  mobile,\n  desktop,\n}) => (\n  <>\n    <Desktop className={desktop} children={children} />\n    <Mobile className={mobile} children={children} />\n  </>\n)\n\nexport const mediaDesktop = (...args) => css`\n  @media (min-width: ${768 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n\nexport const mediaMobile = (...args) => css`\n  @media (max-width: ${767 / 16}em) {\n    // @ts-ignore\n    ${css(...args)};\n  }\n`\n","import * as RM from 'ramda'\n\nexport { RM }\n","export interface InputOrderIndex {\n  readonly companyBranches?: ReadonlyArray<string> | null\n\n  readonly user?: string | null\n\n  readonly orderStatesAND?: ReadonlyArray<OrderStateEnum> | null\n\n  readonly orderStatesOR?: ReadonlyArray<OrderStateEnum> | null\n\n  readonly orderStateCategoriesOR?: ReadonlyArray<OrderStateCategoryEnum> | null\n\n  readonly orderStateCategoryTarget?: OrderStateCategoryTargetEnum | null\n\n  readonly currency?: CurrencyEnum | null\n\n  readonly location?: InputLocationIndex | null\n\n  readonly stateChangeSince?: string | null\n\n  readonly includeOldFinished?: boolean | null\n}\n\nexport interface InputLocationIndex {\n  readonly tableNumber?: number | null\n}\n\nexport interface InputPaginationParams {\n  readonly fromIndex: number\n\n  readonly toIndex: number\n}\n\nexport interface InputVamStatus {\n  readonly email?: string | null\n\n  readonly phone?: string | null\n\n  readonly firstname?: string | null\n\n  readonly lastname?: string | null\n\n  readonly orderId: string\n}\n\nexport interface InputOrderRecipeCreate {\n  readonly order: string\n\n  readonly recipe: string\n\n  readonly orderRecipeState?: OrderRecipeStateEnum | null\n\n  readonly parent?: string | null\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n\n  readonly associatedRecipes?: ReadonlyArray<string> | null\n\n  readonly amount?: number | null\n}\n\nexport interface InputOrderRecipeUpdate {\n  readonly order?: string | null\n\n  readonly recipe?: string | null\n\n  readonly orderRecipeState?: OrderRecipeStateEnum | null\n\n  readonly parent?: string | null\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n}\n\nexport interface InputOrderDeliveryCreate {\n  readonly companyBranch?: string | null\n\n  readonly brand?: string | null\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly gps: InputGeoPointCreate\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n}\n\nexport interface InputGeoPointCreate {\n  readonly latitude: number\n\n  readonly longitude: number\n}\n\nexport interface InputExternalOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly deliverAt: string\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly warePriceType?: WarePriceTypeEnum | null\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly orderRecipes?: ReadonlyArray<InputOrderRecipeCreates> | null\n\n  readonly customer?: InputCustomerCreate | null\n}\n\nexport interface InputOrderRecipeCreates {\n  readonly recipe: string\n\n  readonly sideDishes?: ReadonlyArray<string> | null\n\n  readonly associatedRecipes?: ReadonlyArray<string> | null\n\n  readonly amount?: number | null\n}\n\nexport interface InputCustomerCreate {\n  readonly firstName?: string | null\n\n  readonly lastName?: string | null\n\n  readonly emails?: ReadonlyArray<InputEmailCreate> | null\n\n  readonly phones?: ReadonlyArray<InputPhoneCreate> | null\n}\n\nexport interface InputEmailCreate {\n  readonly email: string\n\n  readonly description?: string | null\n\n  readonly default?: boolean | null\n}\n\nexport interface InputPhoneCreate {\n  readonly phone: string\n\n  readonly description?: string | null\n\n  readonly default?: boolean | null\n}\n\nexport interface InputOrderCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly language?: LanguageEnum | null\n\n  readonly customer: InputCustomerCreate\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly notification?: InputNotificationCreate | null\n\n  readonly note?: string | null\n\n  readonly deliverAt?: string | null\n\n  readonly location?: InputLocationCreate | null\n\n  readonly callEventId?: string | null\n}\n\nexport interface InputNotificationCreate {\n  readonly sms?: string | null\n\n  readonly chrome?: { [key: string]: string | number } | null\n\n  readonly firebase?: { [key: string]: string | number } | null\n}\n\nexport interface InputLocationCreate {\n  readonly tableNumber?: number | null\n}\n\nexport interface InputOrderPickupCreate {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n}\n\nexport interface InputOrderPaymentMethodsCreate {\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputCurrencyCreate {\n  readonly value: number\n\n  readonly currency?: CurrencyEnum | null\n}\n\nexport interface InputOrderFinish {\n  readonly customer?: InputCustomerCreate | null\n  /** payment method used to finalize order */\n  readonly paymentMethod?: PaymentTypeEnum | null\n  /** payment gate used to finalize order */\n  readonly paymentGate?: PaymentGateEnum | null\n  /** Preferred time of order delivery. In case that argument is null, deliver_atvalue is computed based on branch opening hours and default delivery times */\n  readonly deliverAt?: string | null\n\n  readonly note?: string | null\n\n  readonly confirmedAgreements?: ReadonlyArray<string> | null\n}\n\nexport interface InputOrderUpdate {\n  readonly deliveryType?: DeliveryTypeEnum | null\n\n  readonly language?: LanguageEnum | null\n\n  readonly customer?: InputCustomerCreate | null\n\n  readonly gps?: InputGeoPointCreate | null\n\n  readonly notification?: InputNotificationCreate | null\n\n  readonly note?: string | null\n\n  readonly deliverAt?: string | null\n\n  readonly location?: InputLocationCreate | null\n\n  readonly warePriceType?: WarePriceTypeEnum | null\n}\n\nexport interface InputAvailabilityCreate {\n  readonly availabilityType?: string | null\n\n  readonly dateFrom?: string | null\n\n  readonly timeFrom?: string | null\n\n  readonly dateTo?: string | null\n\n  readonly timeTo?: string | null\n\n  readonly available?: boolean | null\n\n  readonly periodic?: boolean | null\n\n  readonly weekDay?: WeekDayEnum | null\n}\n\nexport interface InputAvailabilityUpdate {\n  readonly availabilityType?: string | null\n\n  readonly dateFrom?: string | null\n\n  readonly timeFrom?: string | null\n\n  readonly dateTo?: string | null\n\n  readonly timeTo?: string | null\n\n  readonly available?: boolean | null\n\n  readonly periodic?: boolean | null\n\n  readonly weekDay?: WeekDayEnum | null\n}\n\nexport interface InputBusinessHourCreate {\n  readonly weekDay: WeekDayEnum\n\n  readonly openAt: string\n\n  readonly closeAt: string\n\n  readonly smsLabel?: InputLabelCreate | null\n\n  readonly webLabel?: InputLabelCreate | null\n}\n\nexport interface InputLabelCreate {\n  readonly translations: ReadonlyArray<InputLabelTranslation>\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputLabelTranslation {\n  readonly language: LanguageEnum\n\n  readonly content: string\n}\n\nexport interface InputBusinessHourSpecificDateCreate {\n  readonly companyBranch: string\n\n  readonly openAt?: string | null\n\n  readonly closeAt?: string | null\n\n  readonly specificDate: string\n\n  readonly closed?: boolean | null\n\n  readonly smsLabel?: InputLabelCreate | null\n\n  readonly webLabel?: InputLabelCreate | null\n\n  readonly closedNote?: string | null\n}\n\nexport interface InputCompanyBranchCreate {\n  readonly currencies?: ReadonlyArray<CurrencyEnum> | null\n\n  readonly name: string\n\n  readonly enabled?: boolean | null\n\n  readonly brand: string\n\n  readonly internalNumber: string\n}\n\nexport interface InputCompanyCreate {\n  readonly name: string\n\n  readonly number: string\n\n  readonly vatIdent: string\n\n  readonly account: string\n\n  readonly companyType: CompanyTypeEnum\n}\n\nexport interface InputIngredientCreate {\n  readonly recipe: string\n\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputLabelUpdate {\n  readonly translations?: ReadonlyArray<InputLabelTranslation> | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputOrderPaymentMethodCreate {\n  readonly order: string\n\n  readonly paymentMethod: string\n\n  readonly price: InputCurrencyCreate\n}\n\nexport interface InputPaymentMethodIndex {\n  readonly companyBranch: string\n\n  readonly orderOrigin: OrderOriginEnum\n\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly paymentType: PaymentTypeEnum\n\n  readonly paymentGate: PaymentGateEnum\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputPromoCodeIndex {\n  readonly companyBranch?: string | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputRecipeCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: string\n\n  readonly descriptionLabel?: string | null\n\n  readonly internalNote?: string | null\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly enabled?: boolean | null\n\n  readonly ingredients?: ReadonlyArray<InputRecipeIngredient> | null\n\n  readonly wareCategories?: ReadonlyArray<string> | null\n\n  readonly sideDishCategories?: ReadonlyArray<string> | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n\n  readonly video?: string | null\n\n  readonly code?: string | null\n\n  readonly ware?: string | null\n\n  readonly prices: ReadonlyArray<InputRecipePriceCreate>\n\n  readonly associatedRecipes?: ReadonlyArray<InputRecipeRelationCreate> | null\n}\n\nexport interface InputRecipeIngredient {\n  readonly stockItem: string\n\n  readonly quantity: number\n}\n\nexport interface InputRecipePriceCreate {\n  readonly warePriceType: WarePriceTypeEnum\n\n  readonly price: InputCurrencyCreate\n\n  readonly vat: string\n}\n\nexport interface InputRecipeRelationCreate {\n  readonly associatedRecipe: string\n\n  readonly warePriceType: WarePriceTypeEnum\n}\n\nexport interface InputRecipeUpdate {\n  readonly ware?: string | null\n\n  readonly nameLabel?: string | null\n\n  readonly descriptionLabel?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly internalNote?: string | null\n\n  readonly video?: string | null\n\n  readonly code?: string | null\n\n  readonly ingredients?: ReadonlyArray<InputRecipeIngredient> | null\n\n  readonly wareCategories?: ReadonlyArray<string> | null\n\n  readonly sideDishCategories?: ReadonlyArray<string> | null\n\n  readonly prices?: ReadonlyArray<InputRecipePriceCreate> | null\n\n  readonly associatedRecipes?: ReadonlyArray<InputRecipeRelationCreate> | null\n}\n\nexport interface InputShiftCreate {\n  readonly companyBranch: string\n\n  readonly beginAt: string\n\n  readonly endAt: string\n\n  readonly capacity?: number | null\n\n  readonly placeCode: string\n}\n\nexport interface InputStockItemCreate {\n  readonly companyBranch: string\n\n  readonly wareUnit: WareUnitEnum\n\n  readonly label: string\n\n  readonly code: string\n\n  readonly allowNegative: FieldStateEnum\n\n  readonly plu?: string | null\n\n  readonly quantity?: number | null\n\n  readonly allergens?: ReadonlyArray<AllergenEnum> | null\n\n  readonly note?: string | null\n}\n\nexport interface InputStockItemUpdate {\n  readonly quantity?: number | null\n\n  readonly label?: string | null\n\n  readonly code?: string | null\n\n  readonly plu?: string | null\n\n  readonly wareUnit?: WareUnitEnum | null\n\n  readonly allergens?: ReadonlyArray<AllergenEnum> | null\n\n  readonly note?: string | null\n\n  readonly allowNegative?: FieldStateEnum | null\n}\n\nexport interface InputTransportationDeviceCreate {\n  readonly companyBranch: string\n\n  readonly deviceType: string\n\n  readonly deviceState: string\n\n  readonly idNumber: string\n}\n\nexport interface InputUserUpdate {\n  readonly language?: LanguageEnum | null\n}\n\nexport interface InputWareCategoryCreate {\n  readonly companyBranch: string\n\n  readonly wareCategoryType: WareCategoryTypeEnum\n\n  readonly pictogram?: string | null\n\n  readonly nameLabel: string\n\n  readonly internalNoteLabel?: string | null\n\n  readonly wareRequirement?: WareRequirementEnum | null\n\n  readonly enabled?: boolean | null\n\n  readonly public?: boolean | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n\n  readonly maxRecipesCount?: number | null\n\n  readonly recipes?: ReadonlyArray<string> | null\n}\n\nexport interface InputWareCategoryUpdate {\n  readonly companyBranch?: string | null\n\n  readonly pictogram?: string | null\n\n  readonly nameLabel?: string | null\n\n  readonly internalNoteLabel?: string | null\n\n  readonly wareRequirement?: WareRequirementEnum | null\n\n  readonly wareCategoryType?: WareCategoryTypeEnum | null\n\n  readonly enabled?: boolean | null\n\n  readonly public?: boolean | null\n\n  readonly maxRecipesCount?: number | null\n\n  readonly recipes?: ReadonlyArray<string> | null\n}\n\nexport interface InputWareCreate {\n  readonly companyBranch: string\n\n  readonly nameLabel: InputLabelCreate\n\n  readonly descriptionLabel: InputLabelCreate\n\n  readonly code?: string | null\n\n  readonly internalCode?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly availabilities?: ReadonlyArray<InputAvailabilityCreate> | null\n}\n\nexport interface InputWareUpdate {\n  readonly code?: string | null\n\n  readonly internalCode?: string | null\n\n  readonly companyBranch?: string | null\n\n  readonly nameLabel?: InputLabelUpdate | null\n\n  readonly descriptionLabel?: InputLabelUpdate | null\n\n  readonly enabled?: boolean | null\n}\n\nexport interface InputZoneCreate {\n  readonly companyBranch: string\n\n  readonly name?: string | null\n\n  readonly zoneType?: ZoneTypeEnum | null\n\n  readonly zoneColor?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly geoPolygon?: ReadonlyArray<InputGeoPointCreate> | null\n\n  readonly availability?: InputAvailabilityCreate | null\n\n  readonly priceRangeRules?: ReadonlyArray<PriceRangeRuleCreate> | null\n\n  readonly minimalOrderPrice?: InputCurrencyCreate | null\n}\n\nexport interface PriceRangeRuleCreate {\n  readonly price: InputCurrencyCreate\n\n  readonly toPrice: InputCurrencyCreate\n}\n\nexport interface InputZoneUpdate {\n  readonly companyBranch?: string | null\n\n  readonly name?: string | null\n\n  readonly zoneColor?: string | null\n\n  readonly enabled?: boolean | null\n\n  readonly geoPolygon?: ReadonlyArray<InputGeoPointCreate> | null\n\n  readonly availability?: InputAvailabilityUpdate | null\n\n  readonly priceRangeRules?: ReadonlyArray<PriceRangeRuleCreate> | null\n\n  readonly minimalOrderPrice?: InputCurrencyCreate | null\n}\n/** Possible company types */\nexport enum CompanyTypeEnum {\n  Client = 'CLIENT',\n  Affiliate = 'AFFILIATE',\n  Brand = 'BRAND',\n}\n/** Possible address types */\nexport enum AddressTypeEnum {\n  Business = 'BUSINESS',\n  Premises = 'PREMISES',\n  MainAddress = 'MAIN_ADDRESS',\n}\n/** Possible currency types */\nexport enum CurrencyEnum {\n  Czk = 'CZK',\n  Hop = 'HOP',\n  Eur = 'EUR',\n  Usd = 'USD',\n}\n/** Possible order state category targets */\nexport enum OrderStateCategoryTargetEnum {\n  Backend = 'BACKEND',\n  FeAdmin = 'FE_ADMIN',\n  FeKitchen = 'FE_KITCHEN',\n}\n/** Possible order state categories */\nexport enum OrderStateCategoryEnum {\n  Payment = 'PAYMENT',\n  Notification = 'NOTIFICATION',\n  Reclamation = 'RECLAMATION',\n  Delivery = 'DELIVERY',\n  Cancel = 'CANCEL',\n  Main = 'MAIN',\n  Production = 'PRODUCTION',\n  NewOrders = 'NEW_ORDERS',\n  Preparing = 'PREPARING',\n  OnWay = 'ON_WAY',\n  Finished = 'FINISHED',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  InCart = 'IN_CART',\n  Bills = 'BILLS',\n}\n/** Possible week day types */\nexport enum WeekDayEnum {\n  Monday = 'MONDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY',\n  Thursday = 'THURSDAY',\n  Friday = 'FRIDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n}\n/** Possible allergens */\nexport enum AllergenEnum {\n  CerealsWithGlutten = 'CEREALS_WITH_GLUTTEN',\n  Shellfish = 'SHELLFISH',\n  Egg = 'EGG',\n  Fish = 'FISH',\n  Peanut = 'PEANUT',\n  Soybeans = 'SOYBEANS',\n  Milk = 'MILK',\n  Nut = 'NUT',\n  Celery = 'CELERY',\n  Mustard = 'MUSTARD',\n  Sesame = 'SESAME',\n  Sulfurous = 'SULFUROUS',\n  Lupin = 'LUPIN',\n  Molluscs = 'MOLLUSCS',\n}\n/** Possible ware price types */\nexport enum WarePriceTypeEnum {\n  Delivery = 'DELIVERY',\n  Inhouse = 'INHOUSE',\n}\n/** Possible availability types */\nexport enum AvailabilityTypeEnum {\n  Main = 'MAIN',\n}\n/** Enum values of field */\nexport enum FieldStateEnum {\n  Default = 'DEFAULT',\n  Enabled = 'ENABLED',\n  Disabled = 'DISABLED',\n}\n/** Possible device states */\nexport enum DeviceStateEnum {\n  Working = 'WORKING',\n  Broken = 'BROKEN',\n  Busy = 'BUSY',\n  Free = 'FREE',\n}\n/** Possible device types */\nexport enum DeviceTypeEnum {\n  Car = 'CAR',\n  Plane = 'PLANE',\n  Dron = 'DRON',\n}\n/** Possible order billing types */\nexport enum OrderBillingTypeEnum {\n  PriceSum = 'PRICE_SUM',\n  Commission = 'COMMISSION',\n  Fee = 'FEE',\n  RewardResult = 'REWARD_RESULT',\n  Affiliate = 'AFFILIATE',\n}\n/** Possible delivery types */\nexport enum DeliveryTypeEnum {\n  Pickup = 'PICKUP',\n  Messenger = 'MESSENGER',\n  Dron = 'DRON',\n  Mail = 'MAIL',\n}\n/** Possible order recipe states */\nexport enum OrderRecipeStateEnum {\n  Fresh = 'FRESH',\n  Preparing = 'PREPARING',\n  Cooked = 'COOKED',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible language */\nexport enum LanguageEnum {\n  Cs = 'CS',\n  Sk = 'SK',\n  En = 'EN',\n}\n/** Possible order online states */\nexport enum OrderOnlineStateEnum {\n  Created = 'CREATED',\n  Pending = 'PENDING',\n  Paid = 'PAID',\n  Canceled = 'CANCELED',\n  Completed = 'COMPLETED',\n}\n/** Possible order origins */\nexport enum OrderOriginEnum {\n  Web = 'WEB',\n  DameJidlo = 'DAME_JIDLO',\n  MobilAndroid = 'MOBIL_ANDROID',\n  MobilIos = 'MOBIL_IOS',\n  Staff = 'STAFF',\n  Wifi = 'WIFI',\n  Baker = 'BAKER',\n  WebPartner = 'WEB_PARTNER',\n  Enigoo = 'ENIGOO',\n  Mpizza = 'MPIZZA',\n  Minisite = 'MINISITE',\n  AffiliatePizzaRozvoz = 'AFFILIATE_PIZZA_ROZVOZ',\n  AffiliateRozvozPizzyZdarma = 'AFFILIATE_ROZVOZ_PIZZY_ZDARMA',\n  AffiliateRozvozJidla = 'AFFILIATE_ROZVOZ_JIDLA',\n  CallCenter = 'CALL_CENTER',\n}\n/** Possible payment gates */\nexport enum PaymentGateEnum {\n  Gopay = 'GOPAY',\n  Paypal = 'PAYPAL',\n  Credit = 'CREDIT',\n  Cash = 'CASH',\n}\n/** Possible payment types */\nexport enum PaymentTypeEnum {\n  Cash = 'CASH',\n  Credit = 'CREDIT',\n  Voucher = 'VOUCHER',\n}\n/** Possible order states */\nexport enum OrderStateEnum {\n  InCart = 'IN_CART',\n  Received = 'RECEIVED',\n  InProgress = 'IN_PROGRESS',\n  Finished = 'FINISHED',\n  Reclamation = 'RECLAMATION',\n  ReclamationHandled = 'RECLAMATION_HANDLED',\n  Unpaid = 'UNPAID',\n  Paid = 'PAID',\n  ByCreditCard = 'BY_CREDIT_CARD',\n  Refund = 'REFUND',\n  ShouldBePaid = 'SHOULD_BE_PAID',\n  CustomerNotified = 'CUSTOMER_NOTIFIED',\n  New = 'NEW',\n  Online = 'ONLINE',\n  Evaluated = 'EVALUATED',\n  NotEvaluated = 'NOT_EVALUATED',\n  Shown = 'SHOWN',\n  Accepted = 'ACCEPTED',\n  ReadyToProduce = 'READY_TO_PRODUCE',\n  InProduce = 'IN_PRODUCE',\n  Made = 'MADE',\n  ReadyToDeliver = 'READY_TO_DELIVER',\n  OnWay = 'ON_WAY',\n  StuckOnRoad = 'STUCK_ON_ROAD',\n  Late = 'LATE',\n  Delivered = 'DELIVERED',\n  Cause = 'CAUSE',\n  Handover = 'HANDOVER',\n  WaitingForCustomer = 'WAITING_FOR_CUSTOMER',\n  CustomerDidNotCome = 'CUSTOMER_DID_NOT_COME',\n  DeliverRejected = 'DELIVER_REJECTED',\n  CancelOnWay = 'CANCEL_ON_WAY',\n  Canceled = 'CANCELED',\n  BranchCancel = 'BRANCH_CANCEL',\n  CustomerCancel = 'CUSTOMER_CANCEL',\n  BillPassed = 'BILL_PASSED',\n  BillPrinted = 'BILL_PRINTED',\n  KitchenTicketPrinted = 'KITCHEN_TICKET_PRINTED',\n}\n/** Possible zone types */\nexport enum ZoneTypeEnum {\n  Area = 'AREA',\n  Table = 'TABLE',\n  Sector = 'SECTOR',\n}\n/** Possible shift user states */\nexport enum ShiftUserStateEnum {\n  Accepted = 'ACCEPTED',\n  Rejected = 'REJECTED',\n  WaitingForResponse = 'WAITING_FOR_RESPONSE',\n  Unresolved = 'UNRESOLVED',\n}\n/** Possible ware unit types */\nexport enum WareUnitEnum {\n  Kilogram = 'KILOGRAM',\n  Gram = 'GRAM',\n  Litre = 'LITRE',\n  Piece = 'PIECE',\n}\n/** Possible ware category types */\nexport enum WareCategoryTypeEnum {\n  Main = 'MAIN',\n  SideDish = 'SIDE_DISH',\n  Cover = 'COVER',\n  Mixin = 'MIXIN',\n}\n/** Possible ware requirement types */\nexport enum WareRequirementEnum {\n  NoLimit = 'NO_LIMIT',\n  Optional = 'OPTIONAL',\n  MaxOne = 'MAX_ONE',\n  Mandatory = 'MANDATORY',\n}\n/** Possible mobile plantforms */\nexport enum MobilePlatformEnum {\n  Android = 'ANDROID',\n  Ios = 'IOS',\n}\n/** Possible action types of subscription */\nexport enum SubscriptionActionType {\n  Create = 'CREATE',\n  Update = 'UPDATE',\n  Destroy = 'DESTROY',\n  Remove = 'REMOVE',\n}\n/** Possible setting types */\nexport enum SettingTypeEnum {\n  Confirmation = 'CONFIRMATION',\n  AdminOrderListing = 'ADMIN_ORDER_LISTING',\n  Rules = 'RULES',\n  Url = 'URL',\n  Graphic = 'GRAPHIC',\n  Options = 'OPTIONS',\n}\n\n/** Date in format YYYY-MM-DD */\nexport type Date = string\n\n/** Time without date (HH:MM:SS) */\nexport type Time = string\n\n/** Date in format iso 8601 format */\nexport type DateTime = string\n\n/** Data in json format */\nexport type Json = { [key: string]: string | number }\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport namespace QShopStatus {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = GCompanyBranchStatus.Fragment\n}\n\nexport namespace GBusinessLookup {\n  export type Variables = {\n    readonly code?: string | null\n    readonly url?: string | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly lookup: Lookup\n  }\n\n  export type Lookup = {\n    readonly __typename?: 'CompanyBrandLookUp'\n\n    readonly branch: Branch | null\n\n    readonly isBrand: boolean\n\n    readonly isMobileApp: boolean\n\n    readonly knownBasePath: string\n\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Branch = GCompanyBranch.Fragment\n}\n\nexport namespace GResolveLocation {\n  export type Variables = {\n    readonly brandId?: string | null\n    readonly branchId?: string | null\n    readonly address?: string | null\n    readonly latitude?: number | null\n    readonly longitude?: number | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly resolveLocation: ResolveLocation\n  }\n\n  export type ResolveLocation = GLocationResolution.Fragment\n}\n\nexport namespace GOrderCartForRecipe {\n  export type Variables = {\n    readonly recipeId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = GCartRecipe.Fragment\n}\n\nexport namespace GOrderCartForItem {\n  export type Variables = {\n    readonly itemId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly item: Item\n  }\n\n  export type Item = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  }\n\n  export type Recipe = GCartRecipe.Fragment\n\n  export type SideDishes = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: _Recipe\n  }\n\n  export type _Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n  }\n}\n\nexport namespace GCreatePickupOrder {\n  export type Variables = {\n    readonly branchId: string\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly order: Order\n  }\n\n  export type Order = GCreateOrder.Fragment\n}\n\nexport namespace GCreateDeliveryOrder {\n  export type Variables = {\n    readonly brandId?: string | null\n    readonly branchId?: string | null\n    readonly gps: InputGeoPointCreate\n    readonly orderOrigin: OrderOriginEnum\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly order: Order\n  }\n\n  export type Order = GCreateOrder.Fragment\n}\n\nexport namespace GAddToOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly recipeId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createOrderRecipe: CreateOrderRecipe\n  }\n\n  export type CreateOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GAddToOrderMobile {\n  export type Variables = {\n    readonly orderId: string\n    readonly recipeId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly createOrderRecipe: CreateOrderRecipe\n  }\n\n  export type CreateOrderRecipe = GOrderMobile.Fragment\n}\n\nexport namespace GChangeOrderItem {\n  export type Variables = {\n    readonly orderId: string\n    readonly itemId: string\n    readonly sideDishes?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateOrderRecipe: UpdateOrderRecipe\n  }\n\n  export type UpdateOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GRemoveOrderItem {\n  export type Variables = {\n    readonly itemId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly destroyOrderRecipe: DestroyOrderRecipe\n  }\n\n  export type DestroyOrderRecipe = GOrder.Fragment\n}\n\nexport namespace GSubmitOrder {\n  export type Variables = {\n    readonly orderId: string\n    readonly customer?: InputCustomerCreate | null\n    readonly note?: string | null\n    readonly paymentGate: PaymentGateEnum\n    readonly deliverAt?: string | null\n    readonly agreements?: ReadonlyArray<string> | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly finishOrder: FinishOrder\n  }\n\n  export type FinishOrder = {\n    readonly __typename?: 'FinishedOrder'\n\n    readonly userErrors: ReadonlyArray<string>\n\n    readonly gopayUrl: string | null\n  }\n}\n\nexport namespace GOrderPaymentStatus {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly status: Status\n  }\n\n  export type Status = {\n    readonly __typename?: 'OrderOnlinePaymentStatus'\n\n    readonly isSuccess: boolean\n\n    readonly userErrors: ReadonlyArray<string>\n  }\n}\n\nexport namespace GVamStatus {\n  export type Variables = {\n    readonly input: InputVamStatus\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly vamStatus: ReadonlyArray<VamStatus>\n  }\n\n  export type VamStatus = {\n    readonly __typename?: 'VAMAgreement'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly description: string\n\n    readonly isConfirmed: boolean\n\n    readonly isMandatory: boolean\n  }\n}\n\nexport namespace GThemeStyle {\n  export type Variables = {\n    readonly brandId?: string | null\n    readonly branchId?: string | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly theme: Theme\n  }\n\n  export type Theme = {\n    readonly __typename?: 'ApplicationSettings'\n\n    readonly styles: Styles\n  }\n\n  export type Styles = {\n    readonly __typename?: 'GraphicStyle'\n\n    readonly active: string\n\n    readonly main: string\n\n    readonly mainSecondary: string\n\n    readonly storeLogo: string\n\n    readonly storeLogoMobile: string\n\n    readonly backgroundCart: string\n  }\n}\n\nexport namespace GCartView {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly deliveryType: DeliveryType | null\n  } & GOrder.Fragment\n\n  export type DeliveryType = {\n    readonly __typename?: 'DeliveryType'\n\n    readonly enum: DeliveryTypeEnum\n  }\n}\n\nexport namespace GFinishView {\n  export type Variables = {\n    readonly orderId: string\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n\n    readonly companyBranch: CompanyBranch\n\n    readonly androidApp: AndroidApp | null\n\n    readonly iosApp: IosApp | null\n  }\n\n  export type Order = GFinishViewOrder.Fragment\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly phone: string\n\n    readonly company: Company\n  }\n\n  export type Company = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n  }\n\n  export type AndroidApp = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly url: string\n  }\n\n  export type IosApp = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly url: string\n  }\n}\n\nexport namespace GFoodMenu {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly wareCategories: ReadonlyArray<WareCategories>\n  }\n\n  export type WareCategories = {\n    readonly __typename?: 'WareCategory'\n\n    readonly recipes: ReadonlyArray<Recipes>\n  } & GFoodMenuCategory.Fragment\n\n  export type Recipes = GFoodMenuRecipe.Fragment\n}\n\nexport namespace GFoodMenuCartPresence {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n  } & GCartPresence.Fragment\n}\n\nexport namespace GInitialLocation {\n  export type Variables = {}\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly initialLocation: InitialLocation\n  }\n\n  export type InitialLocation = {\n    readonly __typename?: 'AddressResolvedLocation'\n\n    readonly gpsCoordinates: GpsCoordinates | null\n  }\n\n  export type GpsCoordinates = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GPickupMapBrand {\n  export type Variables = {\n    readonly brandId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branches: ReadonlyArray<Branches>\n  }\n\n  export type Branches = GPickupBranch.Fragment\n}\n\nexport namespace GPickupMapBranch {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n  }\n\n  export type Branch = GPickupBranch.Fragment\n}\n\nexport namespace GMobileCart {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = GOrderMobile.Fragment\n}\n\nexport namespace GMobileShopStatus {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n  }\n\n  export type Branch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  } & GCompanyBranchStatus.Fragment\n}\n\nexport namespace GMobileShopIntro {\n  export type Variables = {\n    readonly brandId: string\n    readonly branchId?: string | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly intro: Intro\n  }\n\n  export type Intro = {\n    readonly __typename?: 'ApplicationSettings'\n\n    readonly headerText: string | null\n\n    readonly homepageUrl: string | null\n  }\n}\n\nexport namespace GSmartBanner {\n  export type Variables = {\n    readonly branchId: string\n    readonly platform: MobilePlatformEnum\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly app: App | null\n  }\n\n  export type App = {\n    readonly __typename?: 'MobileApplicationSetting'\n\n    readonly title: string\n\n    readonly url: string\n\n    readonly icon: string\n  }\n}\n\nexport namespace GOrderForm {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly countWares: number\n  }\n}\n\nexport namespace GOrderPromoCodes {\n  export type Variables = {\n    readonly orderId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace MAddOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly code: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly addOrderPromoCode: AddOrderPromoCode\n  }\n\n  export type AddOrderPromoCode = {\n    readonly __typename?: 'OrderWithErrors'\n\n    readonly userErrors: ReadonlyArray<string>\n\n    readonly order: Order\n  }\n\n  export type Order = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace MRemoveOrderPromo {\n  export type Variables = {\n    readonly orderId: string\n    readonly codeId: string\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly removeOrderPromoCode: RemoveOrderPromoCode\n  }\n\n  export type RemoveOrderPromoCode = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly promoCodes: ReadonlyArray<PromoCodes>\n  }\n\n  export type PromoCodes = GPromoCode.Fragment\n}\n\nexport namespace GOrderTimePicker {\n  export type Variables = {\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly isOpen: boolean\n\n    readonly businessHours: ReadonlyArray<BusinessHours>\n\n    readonly defaultDeliveryTime: number\n\n    readonly defaultPickupTime: number\n\n    readonly willOpenAt: string | null\n\n    readonly willCloseAt: string | null\n  }\n\n  export type BusinessHours = {\n    readonly __typename?: 'BusinessHourInterval'\n\n    readonly openAt: string\n\n    readonly closeAt: string\n\n    readonly closed: boolean\n  }\n}\n\nexport namespace MUpdateOrderDeliveryTime {\n  export type Variables = {\n    readonly orderId: string\n    readonly deliverAt?: string | null\n  }\n\n  export type Mutation = {\n    readonly __typename?: 'Mutation'\n\n    readonly updateOrder: UpdateOrder\n  }\n\n  export type UpdateOrder = GOrder.Fragment\n}\n\nexport namespace GShopHeader {\n  export type Variables = {\n    readonly brandId?: string | null\n    readonly branchId: string\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly branch: Branch\n\n    readonly intro: Intro\n  }\n\n  export type Branch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly address: Address\n  } & (GShopOpeningHours.Fragment & GCompanyBranchStatus.Fragment)\n\n  export type Address = GAddress.Fragment\n\n  export type Intro = {\n    readonly __typename?: 'ApplicationSettings'\n\n    readonly headerText: string | null\n\n    readonly homepageUrl: string | null\n  }\n}\n\nexport namespace GShopIntro {\n  export type Variables = {\n    readonly brandId: string\n    readonly branchId?: string | null\n  }\n\n  export type Query = {\n    readonly __typename?: 'Query'\n\n    readonly intro: Intro\n  }\n\n  export type Intro = {\n    readonly __typename?: 'ApplicationSettings'\n\n    readonly headerText: string | null\n\n    readonly homepageUrl: string | null\n  }\n}\n\nexport namespace GJsonAddress {\n  export type Fragment = {\n    readonly __typename?: 'JsonAddress'\n\n    readonly street: string | null\n\n    readonly houseNumber: string | null\n\n    readonly city: string | null\n\n    readonly state: string | null\n  }\n}\n\nexport namespace GAddress {\n  export type Fragment = {\n    readonly __typename?: 'Address'\n\n    readonly id: string\n\n    readonly location: Location | null\n  }\n\n  export type Location = GJsonAddress.Fragment\n}\n\nexport namespace GGeoPoint {\n  export type Fragment = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n}\n\nexport namespace GPrice {\n  export type Fragment = {\n    readonly __typename?: 'PriceConverted'\n\n    readonly value: number\n\n    readonly formattedValue: string\n  }\n}\n\nexport namespace GRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly sideDishCount: number\n  }\n}\n\nexport namespace GCartItem {\n  export type Fragment = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly automatic: boolean\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = GRecipe.Fragment\n}\n\nexport namespace GCompanyBranchStatus {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly isOpen: boolean\n\n    readonly willOpenAt: string | null\n\n    readonly willCloseAt: string | null\n\n    readonly businessHours: ReadonlyArray<BusinessHours>\n  }\n\n  export type BusinessHours = {\n    readonly __typename?: 'BusinessHourInterval'\n\n    readonly openAt: string\n\n    readonly closeAt: string\n\n    readonly closed: boolean\n\n    readonly closedNote: string | null\n  }\n}\n\nexport namespace GPromoCode {\n  export type Fragment = {\n    readonly __typename?: 'PromoCode'\n\n    readonly id: string\n\n    readonly code: string\n  }\n}\n\nexport namespace GCompanyBranch {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly code: string\n\n    readonly brand: Brand\n\n    readonly company: Company\n\n    readonly address: Address\n\n    readonly phone: string\n  }\n\n  export type Brand = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly code: string\n  }\n\n  export type Company = {\n    readonly __typename?: 'Company'\n\n    readonly id: string\n  }\n\n  export type Address = {\n    readonly __typename?: 'Address'\n\n    readonly country: Country | null\n  }\n\n  export type Country = {\n    readonly __typename?: 'Country'\n\n    readonly phonePrefix: string\n  }\n}\n\nexport namespace GLocationResolution {\n  export type Fragment = {\n    readonly __typename?: 'AddressResolvedLocation'\n\n    readonly finalAddress: FinalAddress | null\n\n    readonly isResolved: boolean\n\n    readonly isValidAddress: boolean\n\n    readonly inDeliveryLocation: boolean\n\n    readonly gpsCoordinates: GpsCoordinates | null\n\n    readonly companyBranch: CompanyBranch | null\n  }\n\n  export type FinalAddress = GJsonAddress.Fragment\n\n  export type GpsCoordinates = {\n    readonly __typename?: 'GeoPoint'\n\n    readonly latitude: number\n\n    readonly longitude: number\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly isOpen: boolean\n  }\n}\n\nexport namespace GCartRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: string | null\n\n    readonly categories: ReadonlyArray<Categories>\n  }\n\n  export type Categories = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly minCount: number\n\n    readonly maxCount: number\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  }\n\n  export type SideDishes = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly price: Price\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GCreateOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly companyBranch: CompanyBranch\n  }\n\n  export type CompanyBranch = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n  }\n}\n\nexport namespace GOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly countWares: number\n\n    readonly items: ReadonlyArray<Items>\n\n    readonly coverPrice: CoverPrice\n\n    readonly transportFee: TransportFee\n\n    readonly discounts: ReadonlyArray<Discounts>\n\n    readonly totalDiscount: TotalDiscount\n\n    readonly totalSum: TotalSum\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly price: Price\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  } & GCartItem.Fragment\n\n  export type Price = GPrice.Fragment\n\n  export type SideDishes = GCartItem.Fragment\n\n  export type CoverPrice = GPrice.Fragment\n\n  export type TransportFee = GPrice.Fragment\n\n  export type Discounts = {\n    readonly __typename?: 'PriceWithDescription'\n\n    readonly code: string\n\n    readonly description: string\n\n    readonly price: _Price\n  }\n\n  export type _Price = GPrice.Fragment\n\n  export type TotalDiscount = GPrice.Fragment\n\n  export type TotalSum = GPrice.Fragment\n}\n\nexport namespace GFinishViewOrder {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly items: ReadonlyArray<Items>\n\n    readonly totalSum: TotalSum\n\n    readonly orderPayments: ReadonlyArray<OrderPayments>\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly sideDishes: ReadonlyArray<SideDishes>\n  } & GCartItem.Fragment\n\n  export type SideDishes = GCartItem.Fragment\n\n  export type TotalSum = GPrice.Fragment\n\n  export type OrderPayments = {\n    readonly __typename?: 'OrderPaymentMethod'\n\n    readonly paymentMethod: PaymentMethod\n  }\n\n  export type PaymentMethod = {\n    readonly __typename?: 'PaymentMethod'\n\n    readonly paymentType: PaymentType\n  }\n\n  export type PaymentType = {\n    readonly __typename?: 'PaymentType'\n\n    readonly enum: PaymentTypeEnum\n  }\n}\n\nexport namespace GFoodMenuCategory {\n  export type Fragment = {\n    readonly __typename?: 'WareCategory'\n\n    readonly id: string\n\n    readonly nameLabel: string\n\n    readonly pictogram: string | null\n  }\n}\n\nexport namespace GFoodMenuRecipe {\n  export type Fragment = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n\n    readonly image: string | null\n\n    readonly nameLabel: string\n\n    readonly descriptionLabel: string | null\n\n    readonly price: Price\n\n    readonly sideDishCount: number\n  }\n\n  export type Price = GPrice.Fragment\n}\n\nexport namespace GCartPresence {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly items: ReadonlyArray<Items>\n  }\n\n  export type Items = {\n    readonly __typename?: 'OrderRecipe'\n\n    readonly id: string\n\n    readonly recipe: Recipe\n  }\n\n  export type Recipe = {\n    readonly __typename?: 'Recipe'\n\n    readonly id: string\n  }\n}\n\nexport namespace GPickupBranch {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly id: string\n\n    readonly name: string\n\n    readonly gps: Gps\n\n    readonly address: Address\n\n    readonly pickupEnabled: boolean\n\n    readonly defaultDeliveryTime: number\n\n    readonly defaultPickupTime: number\n  } & GCompanyBranchStatus.Fragment\n\n  export type Gps = GGeoPoint.Fragment\n\n  export type Address = GAddress.Fragment\n}\n\nexport namespace GOrderMobile {\n  export type Fragment = {\n    readonly __typename?: 'Order'\n\n    readonly id: string\n\n    readonly totalSum: TotalSum\n\n    readonly countWares: number\n  } & GCartPresence.Fragment\n\n  export type TotalSum = GPrice.Fragment\n}\n\nexport namespace GShopOpeningHours {\n  export type Fragment = {\n    readonly __typename?: 'CompanyBranch'\n\n    readonly defaultDeliveryTime: number\n\n    readonly defaultPickupTime: number\n  } & GCompanyBranchStatus.Fragment\n}\n","import { buildMutation } from './buildMutation'\nimport { buildQuery } from './buildQuery'\n\nexport { buildQuery, buildMutation }\n","import { GGeoPoint } from '../graph/types'\n\nexport type GeoPoint = Omit<GGeoPoint.Fragment, '__typename'>\n\nexport const gpsToLatLng = (gps: GeoPoint): google.maps.LatLngLiteral => ({\n  lat: Number(gps.latitude),\n  lng: Number(gps.longitude),\n})\n\nexport const latLngToGps = (latLng: google.maps.LatLng): GeoPoint => ({\n  latitude: Number(latLng.lat()),\n  longitude: Number(latLng.lng()),\n})\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { CartItemFragment, PriceFragment } from '../../graph/fragments.graphql'\nimport { GCartView } from '../../graph/types'\n\nexport const OrderFragment = gql`\n  fragment GOrder on Order {\n    id\n    countWares\n    items {\n      ...GCartItem\n      price: priceWithSideDishes {\n        ...GPrice\n      }\n      sideDishes {\n        ...GCartItem\n      }\n    }\n    coverPrice {\n      ...GPrice\n    }\n    transportFee {\n      ...GPrice\n    }\n    discounts {\n      code\n      description\n      price {\n        ...GPrice\n      }\n    }\n    totalDiscount {\n      ...GPrice\n    }\n    totalSum {\n      ...GPrice\n    }\n  }\n  ${CartItemFragment}\n  ${PriceFragment}\n`\n\nexport const CartViewQuery = gql`\n  query GCartView($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrder\n      deliveryType {\n        enum\n      }\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const QueryCartView = buildQuery<GCartView.Query, GCartView.Variables>(\n  CartViewQuery,\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport { PriceFragment } from '../../graph/fragments.graphql'\nimport { GFoodMenu, GFoodMenuCartPresence } from '../../graph/types'\n\nexport const FoodMenuQuery = gql`\n  query GFoodMenu($branchId: ID!) {\n    wareCategories(\n      wareCategoryType: MAIN\n      companyBranch: $branchId\n      enabled: true\n    ) {\n      ...GFoodMenuCategory\n      recipes(enabled: true, isAvailable: true) {\n        ...GFoodMenuRecipe\n      }\n    }\n  }\n\n  fragment GFoodMenuCategory on WareCategory {\n    id\n    nameLabel\n    pictogram\n  }\n\n  fragment GFoodMenuRecipe on Recipe {\n    id\n    image(width: 192, height: 192)\n    nameLabel\n    descriptionLabel\n    price {\n      ...GPrice\n    }\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n\n  ${PriceFragment}\n`\n\nexport const CartPresenceFragment = gql`\n  fragment GCartPresence on Order {\n    items {\n      id\n      recipe {\n        id\n      }\n    }\n  }\n`\n\nexport const FoodMenuCartPresenceQuery = gql`\n  query GFoodMenuCartPresence($orderId: ID!) {\n    order(id: $orderId) {\n      id\n      ...GCartPresence\n    }\n  }\n  ${CartPresenceFragment}\n`\n\nexport const QueryFoodMenuCartPresence = buildQuery<\n  GFoodMenuCartPresence.Query,\n  GFoodMenuCartPresence.Variables\n>(FoodMenuCartPresenceQuery)\n\nexport const QueryFoodMenu = buildQuery<GFoodMenu.Query, GFoodMenu.Variables>(\n  FoodMenuQuery,\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { PriceFragment } from '../../graph/fragments.graphql'\nimport { GMobileCart } from '../../graph/types'\nimport { CartPresenceFragment } from '../foodMenu/FoodMenuView.graphql'\n\nexport const OrderMobileFragment = gql`\n  fragment GOrderMobile on Order {\n    id\n    totalSum {\n      ...GPrice\n    }\n    countWares\n    ...GCartPresence\n  }\n  ${PriceFragment}\n  ${CartPresenceFragment}\n`\n\nexport const MobileCartQuery = gql`\n  query GMobileCart($orderId: ID!) {\n    order(id: $orderId) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const QueryMobileCart = buildQuery<\n  GMobileCart.Query,\n  GMobileCart.Variables\n>(MobileCartQuery)\n","import debug from 'debug'\n\nexport const logMain = debug('c2e:app')\nexport const logMap = debug('c2e:map')\nexport const logDebug = debug('c2e:debug')\nexport const logGraph = debug('c2e:graph')\nexport const logError = debug('c2e:error')\nexport const logAuth = debug('c2e:auth')\nexport const logRouting = debug('c2e:routing')\nexport const logPersist = debug('c2e:persist')\nexport const logOrder = debug('c2e:order')\nexport const logSentry = debug('c2e:sentry')\nexport const logLang = debug('c2e:lang')\n","import debug from 'debug'\nimport { getEnv, getPath, getRoot, getType, types } from 'mobx-state-tree'\n\nimport { IRootEnvironment, TRootModel } from './RootModel'\n\nexport const BaseModel = types.model().views(self => ({\n  get log() {\n    const name = getPath(self).trim() || getType(self).name\n    return debug(`c2e:model/${name}`)\n  },\n  get env() {\n    return getEnv<IRootEnvironment>(self)\n  },\n  get client() {\n    const { client } = getEnv<IRootEnvironment>(self)\n    return client\n  },\n  get root() {\n    return getRoot<TRootModel>(self)\n  },\n}))\n","import gql from 'graphql-tag'\n\nexport const JsonAddressFragment = gql`\n  fragment GJsonAddress on JsonAddress {\n    street\n    houseNumber\n    city\n    state\n  }\n`\n\nexport const AddressFragment = gql`\n  fragment GAddress on Address {\n    id\n    location {\n      ...GJsonAddress\n    }\n  }\n  ${JsonAddressFragment}\n`\n\nexport const GeoPointFragment = gql`\n  fragment GGeoPoint on GeoPoint {\n    latitude\n    longitude\n  }\n`\n\nexport const PriceFragment = gql`\n  fragment GPrice on PriceConverted {\n    value\n    formattedValue\n  }\n`\n\nexport const RecipeFragment = gql`\n  fragment GRecipe on Recipe {\n    id\n    nameLabel\n    sideDishCount: sideDishesWareCategoriesCount\n  }\n`\n\nexport const CartItemFragment = gql`\n  fragment GCartItem on OrderRecipe {\n    id\n    automatic\n    recipe {\n      ...GRecipe\n    }\n  }\n  ${RecipeFragment}\n`\n\nexport const CompanyBranchStatusFragment = gql`\n  fragment GCompanyBranchStatus on CompanyBranch {\n    id\n    isOpen\n    willOpenAt\n    willCloseAt\n    businessHours: businessHoursIntervals {\n      openAt\n      closeAt\n      closed\n      closedNote\n    }\n  }\n`\n\nexport const PromoCodeFragment = gql`\n  fragment GPromoCode on PromoCode {\n    id\n    code\n  }\n`\n","import { GraphQLError } from 'graphql'\nimport Raven from 'raven-js'\nimport { ErrorInfo } from 'react'\nimport { VError } from 'verror'\n\nimport { appConfig } from '../config'\nimport { logSentry } from './logger'\nimport { RM } from './ramda'\n\nexport const installSentry = cb => {\n  const { sentryDSN } = appConfig\n  if (sentryDSN) {\n    logSentry('enabled with DSN %s', sentryDSN)\n    Raven.config(sentryDSN, {\n      environment: process.env.REACT_APP_STAGE,\n    }).install()\n    Raven.context(cb)\n  } else {\n    cb()\n  }\n}\n\nexport const identifyGuest = (userId: string, token: string) => {\n  Raven.setUserContext({\n    isGuest: true,\n    userId,\n    token,\n  })\n}\n\nexport const setSentryContext = (context: object) => {\n  Raven.setExtraContext(context)\n}\n\nexport const reportRenderingError = (error: Error, info: ErrorInfo) => {\n  if (Raven.isSetup()) {\n    Raven.captureException(error, {\n      extra: info,\n    })\n    Raven.showReportDialog()\n  }\n}\n\nexport const reportFailingQuery = (\n  errors: ReadonlyArray<GraphQLError>,\n  data: object,\n) => {\n  Raven.captureBreadcrumb({\n    category: 'graphql',\n    level: 'debug',\n    message: 'query',\n    data: {\n      ...data,\n      errors,\n    },\n  })\n  errors.forEach(err => {\n    Raven.captureException(new Error(err.message), { extra: err })\n  })\n  const userErrors = errors.filter(RM.propEq('showToUser', true))\n  if (userErrors.length && Raven.lastEventId()) {\n    Raven.showReportDialog({\n      title: RM.head(userErrors)!.message,\n    })\n  }\n}\n\nexport const reportError = (error: Error, meta: object = {}) => {\n  let extra = {}\n  if (error instanceof VError) {\n    extra = {\n      cause: VError.cause(error),\n      ...VError.info(error),\n      ...meta,\n    }\n  }\n  Raven.captureException(error, { extra })\n  return error\n}\n","import React from 'react'\nimport { Button, ButtonProps } from 'reactstrap'\nimport styled, { css } from 'styled-components'\n\nimport { mediaDesktop, mediaMobile } from '../common/Responsive'\nimport { RouteButton } from './RouteButton'\nimport { TTheme } from './ThemeSwitchProvider'\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n  &:active {\n    background-color: #262626 !important;\n  }\n`\n\nPrimaryButton.displayName = 'PrimaryButton'\n\nexport const SecondaryButton = styled(Button)`\n  background-color: ${themeProp('tertiary')};\n  border-color: ${themeProp('tertiary')};\n  &:hover {\n    background-color: ${themeProp('tertiaryHover')};\n    border-color: ${themeProp('tertiaryHover')};\n  }\n`\n\nSecondaryButton.displayName = 'SecondaryButton'\n\nexport const PrimaryRoutedButton = styled(RouteButton)`\n  background-color: ${themeProp('secondary')};\n  border-color: ${themeProp('secondary')};\n  &:hover {\n    background-color: ${themeProp('secondaryHover')};\n    border-color: ${themeProp('secondaryHover')};\n  }\n`\n\nPrimaryRoutedButton.displayName = 'PrimaryRoutedButton'\n\ninterface IMobileHeaderButton {\n  isConfirm?: boolean\n  theme: TTheme\n}\n\nexport const MobileHeaderButton = styled(\n  ({ isConfirm, theme, ...props }: ButtonProps & IMobileHeaderButton) => (\n    <Button {...props} />\n  ),\n)`\n  background-color: ${({ isConfirm, theme }) =>\n    isConfirm ? theme.primary : 'white'};\n  color: ${({ isConfirm, theme }) => (isConfirm ? 'white' : theme.primary)};\n`\n\nMobileHeaderButton.displayName = 'MobileHeaderButton'\n\ninterface ISelectButtonThemed {\n  selected?: boolean\n  theme: TTheme\n}\n\nexport const SelectButtonThemed = styled(\n  ({ selected, theme, ...props }: ButtonProps & ISelectButtonThemed) => (\n    <Button {...props} />\n  ),\n)`\n  ${({ theme, selected }: ISelectButtonThemed) => css`\n    ${mediaDesktop`\n      background-color: ${selected ? theme.tertiary : theme.unselected}\n    `};\n    ${mediaMobile`\n    background-color: ${selected ? theme.tertiary : 'white'}`}\n    border-color: ${selected ? theme.tertiary : theme.unselected};\n    color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    height: 3.7rem;\n    &:hover {\n      background-color: ${\n        selected ? theme.tertiaryHover : theme.unselectedHover\n      };\n      border-color: ${selected ? theme.tertiaryHover : theme.unselectedHover};\n      color: ${selected ? theme.tertiaryText : theme.unselectedText};\n    }\n  `};\n`\n\nSelectButtonThemed.displayName = 'SelectButtonThemed'\n\nfunction themeProp(name: keyof TTheme) {\n  return ({ theme }: { theme?: TTheme }) => theme![name] as string\n}\n","import { format, parse } from 'date-fns/fp'\n\nimport { GJsonAddress } from '../graph/types'\n\nexport const formatTime = format('H:mm')\n\nexport const parseTime = parse('HH:mm')\n\nexport const formatAddress = (address: GJsonAddress.Fragment) => {\n  if (!address.street) {\n    if (address.city) {\n      return `${address.city} ${address.houseNumber}`\n    }\n    return `${address.state}`\n  }\n  if (!address.houseNumber) {\n    return `${address.street}, ${address.city}`\n  }\n  return `${address.street} ${address.houseNumber}, ${address.city}`\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport {\n  AddressFragment,\n  CompanyBranchStatusFragment,\n  GeoPointFragment,\n} from '../../graph/fragments.graphql'\nimport { GPickupMapBranch, GPickupMapBrand } from '../../graph/types'\n\nconst PickupBranchFragment = gql`\n  fragment GPickupBranch on CompanyBranch {\n    id\n    name\n    gps {\n      ...GGeoPoint\n    }\n    address {\n      ...GAddress\n    }\n    pickupEnabled\n    defaultDeliveryTime\n    defaultPickupTime\n    ...GCompanyBranchStatus\n  }\n  ${CompanyBranchStatusFragment}\n  ${GeoPointFragment}\n  ${AddressFragment}\n`\n\nexport const PickupMapBrandQuery = gql`\n  query GPickupMapBrand($brandId: ID!) {\n    branches: companyBranches(brand: $brandId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const PickupMapBranchQuery = gql`\n  query GPickupMapBranch($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      ...GPickupBranch\n    }\n  }\n  ${PickupBranchFragment}\n`\n\nexport const QueryPickupMapBrand = buildQuery<\n  GPickupMapBrand.Query,\n  GPickupMapBrand.Variables\n>(PickupMapBrandQuery)\n\nexport const QueryPickupMapBranch = buildQuery<\n  GPickupMapBranch.Query,\n  GPickupMapBranch.Variables\n>(PickupMapBranchQuery)\n","import gql from 'graphql-tag'\n\nimport { PriceFragment } from '../graph/fragments.graphql'\nimport { OrderFragment } from '../segments/cart/CartView.graphql'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\n\nconst CartRecipeFragment = gql`\n  fragment GCartRecipe on Recipe {\n    id\n    nameLabel\n    descriptionLabel\n    categories: sideDishesWareCategories {\n      id\n      nameLabel\n      minCount\n      maxCount\n      sideDishes {\n        id\n        nameLabel\n        price {\n          ...GPrice\n        }\n      }\n    }\n  }\n  ${PriceFragment}\n`\n\nexport const OrderCartForRecipeQuery = gql`\n  query GOrderCartForRecipe($recipeId: ID!) {\n    recipe(id: $recipeId) {\n      ...GCartRecipe\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nexport const OrderCartForItemQuery = gql`\n  query GOrderCartForItem($itemId: ID!) {\n    item: orderRecipe(id: $itemId) {\n      id\n      recipe {\n        ...GCartRecipe\n      }\n      sideDishes {\n        id\n        recipe {\n          id\n        }\n      }\n    }\n  }\n  ${CartRecipeFragment}\n`\n\nconst CreateOrderFragment = gql`\n  fragment GCreateOrder on Order {\n    id\n    companyBranch {\n      id\n    }\n  }\n`\n\nexport const CreatePickupOrderMutation = gql`\n  mutation GCreatePickupOrder($branchId: ID!, $orderOrigin: OrderOriginEnum!) {\n    order: createPickupOrder(\n      order: { companyBranch: $branchId, orderOrigin: $orderOrigin }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const CreateDeliveryOrderMutation = gql`\n  mutation GCreateDeliveryOrder(\n    $brandId: ID\n    $branchId: ID\n    $gps: InputGeoPointCreate!\n    $orderOrigin: OrderOriginEnum!\n  ) {\n    order: createDeliveryOrder(\n      order: {\n        brand: $brandId\n        companyBranch: $branchId\n        gps: $gps\n        orderOrigin: $orderOrigin\n      }\n    ) {\n      ...GCreateOrder\n    }\n  }\n  ${CreateOrderFragment}\n`\n\nexport const AddToOrderMutation = gql`\n  mutation GAddToOrder($orderId: ID!, $recipeId: ID!, $sideDishes: [ID!]) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const AddToOrderMobileMutation = gql`\n  mutation GAddToOrderMobile(\n    $orderId: ID!\n    $recipeId: ID!\n    $sideDishes: [ID!]\n  ) {\n    createOrderRecipe(\n      orderRecipe: {\n        order: $orderId\n        recipe: $recipeId\n        sideDishes: $sideDishes\n      }\n    ) {\n      ...GOrderMobile\n    }\n  }\n  ${OrderMobileFragment}\n`\n\nexport const ChangeOrderItemMutation = gql`\n  mutation GChangeOrderItem($orderId: ID!, $itemId: ID!, $sideDishes: [ID!]) {\n    updateOrderRecipe(\n      id: $itemId\n      orderRecipe: { order: $orderId, sideDishes: $sideDishes }\n    ) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const RemoveOrderItemMutation = gql`\n  mutation GRemoveOrderItem($itemId: ID!) {\n    destroyOrderRecipe(id: $itemId) {\n      ...GOrder\n    }\n  }\n  ${OrderFragment}\n`\n\nexport const SubmitOrderMutation = gql`\n  mutation GSubmitOrder(\n    $orderId: ID!\n    $customer: InputCustomerCreate\n    $note: String\n    $paymentGate: PaymentGateEnum!\n    $deliverAt: DateTime\n    $agreements: [ID!]\n  ) {\n    finishOrder(\n      id: $orderId\n      order: {\n        confirmedAgreements: $agreements\n        customer: $customer\n        paymentGate: $paymentGate\n        note: $note\n        deliverAt: $deliverAt\n      }\n    ) {\n      userErrors\n      gopayUrl\n    }\n  }\n`\n\nexport const OrderPaymentStatusQuery = gql`\n  query GOrderPaymentStatus($orderId: ID!) {\n    status: orderOnlinePaymentStatus(id: $orderId) {\n      isSuccess\n      userErrors\n    }\n  }\n`\n\nexport const VamStatusQuery = gql`\n  query GVamStatus($input: InputVamStatus!) {\n    vamStatus(input: $input) {\n      id\n      name\n      description\n      isConfirmed\n      isMandatory\n    }\n  }\n`\n","import Color from 'color'\nimport { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { useQuery } from 'react-apollo-hooks'\nimport { ThemeProvider } from 'styled-components'\n\nimport { GThemeStyle } from '../graph/types'\nimport { ThemeStyleQuery } from '../models/ThemeModel.graphql'\nimport { useRoot } from './WithRoot'\n\ninterface IProps {\n  branchId?: MaybeID\n}\n\nconst ThemeSwitchProvider: React.FC<IProps> = ({ children, branchId }) => {\n  const { business } = useRoot()\n  const { data } = useQuery<GThemeStyle.Query, GThemeStyle.Variables>(\n    ThemeStyleQuery,\n    {\n      variables: {\n        brandId: branchId ? null : business.brandId,\n        branchId: branchId || business.branchId,\n      },\n      suspend: false,\n      skip: !business.isValid,\n      fetchPolicy: 'cache-and-network',\n    },\n  )\n  const theme = getTheme(data && data.theme && data.theme.styles)\n  return useObserver(() => (\n    <ThemeProvider theme={theme}>{children as React.ReactChild}</ThemeProvider>\n  ))\n}\n\nexport function getTheme(styles?: GThemeStyle.Styles) {\n  // Fallback colors\n  const defaultPrimary = '#54984a'\n  const defaultSecondary = '#99230e'\n  const defaultTertiary = '#d9a700'\n\n  const defaultTheme = {\n    primary: defaultPrimary,\n    secondary: defaultSecondary,\n    tertiary: defaultTertiary,\n    secondaryHover: calcHoverColor(defaultPrimary),\n    tertiaryHover: calcHoverColor(defaultTertiary),\n    tertiaryText: 'white',\n    unselected: '#E5E5E5',\n    unselectedHover: '#EDEDED',\n    unselectedText: '#5A5A5A',\n    storeLogo: null,\n    storeLogoMobile: null,\n    backgroundCart: null,\n  }\n\n  if (styles) {\n    return {\n      ...defaultTheme,\n      primary: styles.active || defaultPrimary,\n      secondary: styles.main || defaultSecondary,\n      tertiary: styles.mainSecondary || defaultTertiary,\n      secondaryHover: styles.main && calcHoverColor(styles.main),\n      tertiaryHover:\n        styles.mainSecondary && calcHoverColor(styles.mainSecondary),\n      storeLogo: styles.storeLogo,\n      storeLogoMobile: styles.storeLogoMobile,\n      backgroundCart: styles.backgroundCart,\n    }\n  }\n\n  return defaultTheme\n}\n\nfunction calcHoverColor(inputColor: string) {\n  return Color(inputColor)\n    .lighten(0.2)\n    .hsl()\n    .string()\n}\n\nexport type TTheme = ReturnType<typeof getTheme>\n\nexport default ThemeSwitchProvider\n","import { serviceWorker } from '@speedlo/tools'\nimport React from 'react'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloProviderHooks } from 'react-apollo-hooks'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/App'\nimport { Router } from './app/Router'\nimport Pacman from './common/Pacman'\nimport ThemeSwitchProvider from './common/ThemeSwitchProvider'\nimport { RootProvider } from './common/WithRoot'\nimport { createApolloClient } from './createClient'\nimport { installSentry } from './helpers/sentry'\nimport { i18n, I18nManager } from './i18n'\nimport { createRootModel } from './models/RootModel'\n\nconst client = createApolloClient()\nconst root = createRootModel(client)\n\nconst Main = () => (\n  <React.Suspense fallback={<Pacman />}>\n    <RootProvider value={root}>\n      <ApolloProvider client={client}>\n        <ApolloProviderHooks client={client}>\n          <I18nManager>\n            <Router>\n              <ThemeSwitchProvider>\n                <App />\n              </ThemeSwitchProvider>\n            </Router>\n          </I18nManager>\n        </ApolloProviderHooks>\n      </ApolloProvider>\n    </RootProvider>\n  </React.Suspense>\n)\n\ninstallSentry(() => {\n  ReactDOM.render(<Main />, document.getElementById('root'))\n})\n\nserviceWorker.register({\n  onUpdate: (sw: ServiceWorker) => {\n    setTimeout(() => {\n      if (\n        window.confirm(\n          i18n.t`New version has been found. Do you want to reload application to apply it now?`,\n        )\n      ) {\n        sw.postMessage('apply-update')\n      }\n    }, 5000)\n  },\n})\n\nif (navigator.serviceWorker) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    if (event.data === 'update-applied') {\n      location.reload()\n    }\n  })\n}\n","export const appConfig = {\n  fallbackLanguage: 'en',\n  supportedLanguages: ['cs', 'sk', 'en', 'pl', 'de'],\n  endpoint: process.env.REACT_APP_LOCAL_ENDPOINT,\n  persistenceKey: process.env.REACT_APP_LOCAL_KEY || 'client@local',\n  redirectOnFail: 'https://kdo.doveze.cz',\n  sentryDSN: null,\n  pageTitleSuffix: 'LOCAL',\n}\n\nif (process.env.REACT_APP_STAGE === 'dev') {\n  Object.assign(appConfig, {\n    endpoint: 'https://be.dev.admin.c2e.deep-vision.cloud',\n    persistenceKey: 'client@dev',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'DEV',\n  })\n}\n\nif (process.env.REACT_APP_STAGE === 'prod') {\n  Object.assign(appConfig, {\n    endpoint: 'https://c2e-p1.deep-vision.cloud',\n    persistenceKey: 'client@prod',\n    sentryDSN: 'https://31756c9e430d450eaf3a44af1c1cd0f2@sentry.io/1354460',\n    pageTitleSuffix: 'Doveze.cz',\n  })\n}\n","import { Observer } from 'mobx-react'\nimport React, { useContext } from 'react'\n\nimport { TRootModel } from '../models/RootModel'\n\nexport const rootContext = React.createContext<TRootModel | undefined>(\n  undefined,\n)\n\ninterface IProps {\n  render(root: TRootModel): ReactNode\n  observe?: boolean\n}\n\nexport const useRoot = () => {\n  const root = useContext(rootContext)\n  if (!root) {\n    throw new Error('RootProvider missing in the tree')\n  }\n  return root\n}\n\nexport const WithRoot: React.FC<IProps> = ({ render, observe = false }) => {\n  const root = useRoot()\n  if (observe === true) {\n    return <Observer>{() => render(root)}</Observer>\n  }\n  return render(root)\n}\n\nexport const RootProvider = rootContext.Provider\n","import './App.css'\n\nimport { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { ErrorContainer } from '../common/ErrorContainer'\nimport { PageTitle } from '../common/PageTitle'\nimport { Desktop, Mobile, MobileLandscape } from '../common/Responsive'\nimport { ResetPersistenceButton } from './ResetPersistenceButton'\n\nconst LandscapeMessage = styled.div`\n  font-size: 1.1rem;\n  padding: 3rem;\n  vertical-align: center;\n`\n\nconst DesktopApp = React.lazy(() => import('./DesktopApp'))\nconst MobileApp = React.lazy(() => import('./MobileApp'))\n\nconst App = () => (\n  <ErrorContainer prod={process.env.NODE_ENV === 'production'}>\n    <PageTitle />\n    <Desktop>\n      <DesktopApp />\n    </Desktop>\n    <Mobile>\n      <MobileApp />\n    </Mobile>\n    <MobileLandscape>\n      <LandscapeMessage>\n        <Trans>\n          We know, you like space. Our app is optimised for desktop. Leave your\n          phone in portrait for now.\n        </Trans>\n      </LandscapeMessage>\n    </MobileLandscape>\n    <ResetPersistenceButton />\n  </ErrorContainer>\n)\n\nexport default App\n","import React from 'react'\n\nimport { reportRenderingError } from '../helpers/sentry'\n\ninterface IProps {\n  prod: boolean\n}\n\nexport const ErrorContainer: React.SFC<IProps> = ({\n  children,\n  prod = false,\n}) => {\n  let ErrorBoundaryContainer\n\n  if (prod) {\n    ErrorBoundaryContainer = require('react-error-guard')\n      .ProductionErrorBoundary\n    return (\n      <ErrorBoundaryContainer\n        dispatchErrorReporting={({ error, info }) => {\n          reportRenderingError(error, info)\n        }}\n      >\n        {children}\n      </ErrorBoundaryContainer>\n    )\n  } else {\n    ErrorBoundaryContainer = require('react-error-guard').DeveloperErrorBoundary\n    return <ErrorBoundaryContainer>{children}</ErrorBoundaryContainer>\n  }\n}\n","import React from 'react'\nimport DocumentTitle from 'react-document-title'\n\nimport { appConfig } from '../config'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {}\n\nexport const PageTitle: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={root => {\n      if (root.business.isValid) {\n        return (\n          <DocumentTitle\n            title={`${root.business.branch!.brand.name} - ${\n              appConfig.pageTitleSuffix\n            }`}\n          />\n        )\n      }\n      return <DocumentTitle title={appConfig.pageTitleSuffix} />\n    }}\n  />\n)\n","import React from 'react'\n\nimport { SecondaryButton } from '../common/Buttons'\nimport { useRoot } from '../common/WithRoot'\n\ninterface IProps {}\n\nexport const ResetPersistenceButton: React.FC<IProps> = props => {\n  const root = useRoot()\n  if (process.env.REACT_APP_STAGE === 'prod') {\n    return null\n  }\n  return (\n    <SecondaryButton\n      onClick={() => {\n        root.reset()\n        location.reload()\n      }}\n    >\n      Reset uživ. dat [DEV]\n    </SecondaryButton>\n  )\n}\n","import { LocationDescriptor } from 'history'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, ButtonProps } from 'reactstrap'\n\ninterface IProps extends ButtonProps {\n  to: LocationDescriptor\n  replace?: boolean\n}\n\nexport const RouteButton: React.SFC<IProps> = ({\n  to,\n  replace,\n  children,\n  ...buttonProps\n}) => (\n  <Link to={to} replace={replace}>\n    <Button {...buttonProps}>{children}</Button>\n  </Link>\n)\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { useRoot } from '../common/WithRoot'\n\nexport const Router: React.FC = ({ children }) => {\n  const { business } = useRoot()\n  return useObserver(() =>\n    business.isValid ? (\n      <BrowserRouter\n        basename={business.routerBasePath}\n        key={business.routerBasePath}\n      >\n        {children}\n      </BrowserRouter>\n    ) : null,\n  )\n}\n","import gql from 'graphql-tag'\n\nexport const ThemeStyleQuery = gql`\n  query GThemeStyle($brandId: ID, $branchId: ID) {\n    theme: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      styles {\n        active\n        main\n        mainSecondary\n        storeLogo\n        storeLogoMobile\n        backgroundCart\n      }\n    }\n  }\n`\n","import { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-client'\nimport { ApolloLink } from 'apollo-link'\nimport { BatchHttpLink } from 'apollo-link-batch-http'\nimport createLogLink from 'apollo-link-log'\nimport QueueLink from 'apollo-link-queue'\nimport { RetryLink } from 'apollo-link-retry'\nimport { autorun } from 'mobx'\n\nimport { appConfig } from './config'\nimport { createErrorLink } from './graph/errorHandler'\nimport { logGraph } from './helpers/logger'\nimport { isNetworkOnline } from './helpers/offline'\n\nexport type GraphClient = ApolloClient<NormalizedCacheObject>\n\nexport function createApolloClient() {\n  const cache = new InMemoryCache({\n    dataIdFromObject: (o: { __typename?: string; id?: string }) => {\n      if (o.__typename != null && o.id != null) {\n        return `${o.__typename}-${o.id}`\n      }\n      return null\n    },\n  })\n\n  const loggingLink = createLoggingLink()\n  const httpLink = createHttpLink()\n  const retryLink = createRetryLink()\n  const offlineLink = createOfflineLink()\n  const errorLink = createErrorLink()\n\n  const link = ApolloLink.from([\n    loggingLink,\n    retryLink,\n    offlineLink,\n    errorLink,\n    httpLink,\n  ])\n\n  return new ApolloClient({ link, cache })\n}\n\nfunction createHttpLink() {\n  return new BatchHttpLink({\n    uri: `${appConfig.endpoint}/graphql`,\n    credentials: 'same-origin',\n  })\n}\n\nfunction createLoggingLink() {\n  return createLogLink({\n    enabled: process.env.REACT_APP_STAGE === 'dev',\n  })\n}\n\nfunction createRetryLink() {\n  return new RetryLink({\n    delay: {\n      initial: 300,\n      max: Infinity,\n      jitter: true,\n    },\n    attempts: {\n      max: 5,\n      retryIf: (error, _operation) => !!error,\n    },\n  })\n}\n\nfunction createOfflineLink() {\n  const offlineLink = new QueueLink()\n  autorun(() => {\n    if (isNetworkOnline()) {\n      logGraph('client is online')\n      offlineLink.open()\n    } else {\n      logGraph('client is offline')\n      offlineLink.close()\n    }\n  })\n  return offlineLink\n}\n","import { Catalog, setupI18n } from '@lingui/core'\nimport { I18nProvider } from '@lingui/react'\nimport { useAsyncEffect } from '@speedlo/hooks'\nimport * as detector from 'locales-detector'\nimport React, { useState } from 'react'\n\nimport Pacman from './common/Pacman'\nimport { appConfig } from './config'\nimport { logLang } from './helpers/logger'\n\nexport const i18n = setupI18n()\n\nexport const I18nManager: React.FC<{ forceLanguage?: string }> = ({\n  children,\n  forceLanguage,\n}) => {\n  const [isReady, setReady] = useState(false)\n  const [language] = useState(() => forceLanguage || detectLanguage())\n\n  useAsyncEffect(async () => {\n    await changeLanguage(language)\n    setReady(true)\n  })\n\n  if (isReady === false) {\n    return <Pacman />\n  }\n\n  return (\n    <I18nProvider language={language} i18n={i18n}>\n      {children}\n    </I18nProvider>\n  )\n}\n\nexport async function changeLanguage(lang: string) {\n  if (!appConfig.supportedLanguages.includes(lang)) {\n    logLang('language %s is not supported')\n    return false\n  }\n  await loadCatalog(lang)\n  i18n.activate(lang)\n  logLang('changed to %s', lang)\n  return true\n}\n\nexport function detectLanguage() {\n  const resolver = new detector.LocaleResolver(\n    [new detector.UrlDetector('lang'), new detector.NavigatorDetector()],\n    [new detector.LanguageOnlyTransformer()],\n  )\n  const languages: ReadonlyArray<string> = resolver.getLocales()\n  logLang('detected languages %s', languages.join('; '))\n  const supported = languages.find(loc =>\n    appConfig.supportedLanguages.includes(loc),\n  )\n  return supported || appConfig.fallbackLanguage\n}\n\nasync function loadCatalog(lang: string) {\n  let catalog: Catalog\n  if (process.env.NODE_ENV !== 'production') {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `@lingui/loader!./locale/${lang}/messages.po`\n    )\n  } else {\n    // prettier-ignore\n    catalog = await import(\n      /* webpackMode: \"lazy\", webpackChunkName: \"i18n-[index]\" */\n      `./locale/${lang}/messages.js`\n    )\n  }\n  i18n.load({ [lang]: catalog })\n  logLang('loaded catalog %s', lang)\n}\n","import { ErrorResponse, onError } from 'apollo-link-error'\nimport debug from 'debug'\n\nimport { reportFailingQuery } from '../helpers/sentry'\n\nconst log = debug('graph:error')\n\nexport const errorHandler = ({\n  graphQLErrors,\n  networkError,\n  operation,\n}: ErrorResponse) => {\n  if (graphQLErrors) {\n    reportFailingQuery(graphQLErrors, {\n      query: operation.operationName,\n      variables: operation.variables,\n    })\n    graphQLErrors.map(({ message, locations, path }) =>\n      log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    )\n  }\n  if (networkError) {\n    log(`[Network error]: ${networkError}`)\n  }\n}\n\nexport const createErrorLink = () => onError(errorHandler)\n","import React from 'react'\nimport Spinner from 'react-spinkit'\n\nexport interface IProps {\n  noMargin?: boolean\n}\n\nconst Pacman: React.SFC<IProps> = ({ noMargin = false }) => (\n  <div\n    style={{\n      display: 'flex',\n      alignSelf: 'center',\n      justifyContent: 'center',\n    }}\n    data-testid=\"loader\"\n  >\n    <Spinner name=\"pacman\" style={noMargin ? {} : { marginTop: '45vh' }} />\n  </div>\n)\n\nexport default Pacman\n","import { observable } from 'mobx'\n\nconst isOnline = observable.box(navigator.onLine)\n\nwindow.addEventListener('offline', () => isOnline.set(false))\nwindow.addEventListener('online', () => isOnline.set(true))\n\nexport const isNetworkOnline = () => isOnline.get()\nexport const isNetworkOffline = () => !isOnline.get()\n\nexport function whenGoingOnline(cb: () => void) {\n  return isOnline.observe(change => {\n    if (change.oldValue === false && change.newValue === true) {\n      cb()\n    }\n  })\n}\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Query, QueryProps, QueryResult } from 'react-apollo'\nimport RedBox from 'redbox-react'\nimport { VError } from 'verror'\n\nimport Pacman from '../common/Pacman'\nimport { logError } from '../helpers/logger'\nimport { reportError } from '../helpers/sentry'\n\nexport function buildQuery<TData, TVariables>(query: DocumentNode) {\n  type TResult = QueryResult<TData, TVariables>\n  type TRenderProp<T> = (data: TData, result: TResult) => T\n  interface IProps\n    extends Omit<QueryProps<TData, TVariables>, 'query' | 'children'> {\n    render?: TRenderProp<ReactNode>\n    renderFragment?: TRenderProp<ReactNode[]>\n    renderLoading?: boolean | ((result: TResult) => ReactNode)\n    renderError?: boolean | ((result: TResult) => ReactNode)\n  }\n  const GQuery: React.SFC<IProps> = ({\n    render,\n    renderFragment,\n    renderLoading = true,\n    renderError = true,\n    children,\n    ...props\n  }) => (\n    <Query query={query} {...props}>\n      {result => {\n        if (result.loading || !result.data) {\n          if (typeof renderLoading === 'function') {\n            return renderLoading(result)\n          } else if (renderLoading === true) {\n            return <Pacman />\n          }\n        }\n        if (result.error) {\n          reportError(result.error)\n          logError(result.error)\n          if (typeof renderError === 'function') {\n            return renderError(result)\n          } else if (renderError === true) {\n            if (process.env.NODE_ENV === 'production') {\n              throw new VError(result.error, 'Query error')\n            }\n            return <RedBox error={result.error} />\n          } else {\n            return null\n          }\n        }\n        if (result.data) {\n          if (renderFragment) {\n            return <>{renderFragment(result.data, result)}</>\n          }\n          if (render) {\n            return render(result.data, result)\n          }\n        }\n        return children || null\n      }}\n    </Query>\n  )\n\n  return GQuery\n}\n","var map = {\n\t\"./cs/messages.js\": [\n\t\t880,\n\t\t5\n\t],\n\t\"./de/messages.js\": [\n\t\t881,\n\t\t6\n\t],\n\t\"./en-dev/messages.js\": [\n\t\t883,\n\t\t8\n\t],\n\t\"./en/messages.js\": [\n\t\t882,\n\t\t7\n\t],\n\t\"./pl/messages.js\": [\n\t\t884,\n\t\t9\n\t],\n\t\"./sk/messages.js\": [\n\t\t885,\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 850;\nmodule.exports = webpackAsyncContext;","import {\n  applySnapshot,\n  getSnapshot,\n  Instance,\n  SnapshotIn,\n  types,\n} from 'mobx-state-tree'\n\nimport { GraphClient } from '../createClient'\nimport { logDebug } from '../helpers/logger'\nimport { persistModel } from '../helpers/persistModel'\nimport { AuthModel } from './AuthModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessModel } from './BusinessModel'\nimport { ConfigModel } from './ConfigModel'\nimport { LocationModel } from './LocationModel'\nimport { MapModel } from './MapModel'\nimport { OrderModel } from './OrderModel'\nimport { UserModel } from './UserModel'\n\nexport const RootModel = BaseModel.named('Root')\n  .props({\n    auth: types.optional(AuthModel, {}),\n    business: types.optional(BusinessModel, {}),\n    config: types.optional(ConfigModel, {}),\n    map: types.optional(MapModel, {}),\n    order: types.optional(OrderModel, {}),\n    location: types.optional(LocationModel, {}),\n    user: types.optional(UserModel, {}),\n  })\n  .views(self => ({\n    get persistedModels() {\n      return [\n        self.auth,\n        self.user,\n        self.business,\n        self.location,\n        self.order,\n        self.map,\n      ]\n    },\n  }))\n  .actions(self => {\n    let initialSnapshot\n    return {\n      afterCreate() {\n        const { business, map, ...snapshot } = getSnapshot(self)\n        initialSnapshot = snapshot\n      },\n      reset() {\n        logDebug(initialSnapshot)\n        applySnapshot(self, initialSnapshot)\n      },\n      init: async () => {\n        self.auth.attachAuthLinkToClient()\n        await Promise.all(self.persistedModels.map(persistModel))\n        await Promise.all([\n          self.business.queryBusiness(),\n          self.order.checkPaymentStatus(),\n        ])\n        initialSnapshot.business = getSnapshot(self.business)\n      },\n    }\n  })\n\nexport interface IRootEnvironment {\n  client: GraphClient\n  fetch: TFetch\n  geolocation: Geolocation\n}\n\nexport function createRootModel(client: GraphClient) {\n  const root = RootModel.create({}, {\n    client,\n    fetch: window.fetch,\n    geolocation: navigator.geolocation,\n  } as IRootEnvironment)\n  root.init()\n  return root\n}\n\nexport interface TRootModel extends Instance<typeof RootModel> {}\nexport interface TRootModelProps extends SnapshotIn<typeof RootModel> {}\n","import localforage from 'localforage'\nimport {\n  applySnapshot,\n  getSnapshot,\n  getType,\n  IStateTreeNode,\n  onSnapshot,\n} from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logPersist } from './logger'\n\nconst { persistenceKey } = appConfig\n\nexport async function persistModel(model: IStateTreeNode) {\n  const modelName = getType(model).name\n  const stateKey = `${persistenceKey}_${modelName}`\n\n  const writeState = snapshot => localforage.setItem(stateKey, snapshot)\n\n  try {\n    const state = await localforage.getItem(stateKey)\n    if (state !== null) {\n      applySnapshot(model, state)\n      logPersist('restored state %s', stateKey)\n    } else {\n      await writeState(getSnapshot(model))\n      logPersist('initialized state %s', stateKey)\n    }\n  } catch (err) {\n    logPersist('persistence failed', err)\n    localforage.removeItem(stateKey)\n  }\n\n  onSnapshot(model, writeState)\n}\n","import { setContext } from 'apollo-link-context'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport { logAuth } from '../helpers/logger'\nimport { identifyGuest } from '../helpers/sentry'\nimport { BaseModel } from './BaseModel'\n\nexport const AuthModel = BaseModel.named('Auth')\n  .props({\n    token: types.maybeNull(types.string),\n    userId: types.maybeNull(types.string),\n  })\n  .views(self => ({\n    get isValid() {\n      return self.token !== null\n    },\n    getClientHeaders() {\n      return {\n        Authorization: `Bearer ${self.token}`,\n      }\n    },\n  }))\n  .actions(self => ({\n    authenticate(token: string, userId: string) {\n      self.token = token\n      self.userId = userId\n      identifyGuest(userId, token)\n    },\n  }))\n  .actions(self => {\n    let fetching\n\n    const fetch = async () => {\n      if (!fetching) {\n        fetching = fetchToken()\n        const { token, userId } = await fetching\n        self.authenticate(token, String(userId))\n        fetching = null\n      }\n      return fetching\n    }\n\n    const authLink = setContext(async () => {\n      if (!self.token) {\n        await fetch()\n      }\n      return { headers: self.getClientHeaders() }\n    })\n\n    return {\n      attachAuthLinkToClient() {\n        self.client.link = authLink.concat(self.client.link)\n      },\n    }\n  })\n  .preProcessSnapshot(snapshot => {\n    if (snapshot.userId && snapshot.token) {\n      identifyGuest(snapshot.userId, snapshot.token)\n    }\n    return snapshot\n  })\n\nfunction fetchToken() {\n  const { endpoint } = appConfig\n  if (!endpoint) {\n    throw new Error('Missing endpoint in configuration.')\n  }\n  logAuth('retrieving guest token...')\n  const url = `${endpoint}/users/token?guest=true`\n  const options = {\n    headers: {\n      Accept: 'application/json',\n    },\n  }\n  logAuth('token retrieved')\n  return fetch(url, options).then(response => response.json())\n}\n\nexport interface TAuthModel extends Instance<typeof AuthModel> {}\nexport interface TAuthModelProps extends SnapshotIn<typeof AuthModel> {}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { appConfig } from '../config'\nimport {\n  GBusinessLookup,\n  GCompanyBranch,\n  OrderOriginEnum,\n} from '../graph/types'\nimport { logMain } from '../helpers/logger'\nimport { setSentryContext } from '../helpers/sentry'\nimport { BannerModel, TBannerModel } from './BannerModel'\nimport { BaseModel } from './BaseModel'\nimport { BusinessLookupQuery } from './BusinessModel.graphql'\n\ntype TBranch = Omit<GCompanyBranch.Fragment, 'address'>\n\ninterface IVolatileProps {\n  isBrand: boolean\n  isMobileApp: boolean\n  branch: Maybe<TBranch>\n  country: Maybe<GCompanyBranch.Country>\n  orderOrigin: OrderOriginEnum\n  routerBasePath: string\n}\n\nexport const BusinessModel = BaseModel.named('Business')\n  .props({\n    code: types.maybeNull(types.string),\n    banners: types.map(BannerModel),\n  })\n  .volatile<IVolatileProps>(() => ({\n    isBrand: false,\n    isMobileApp: false,\n    branch: null,\n    country: null,\n    orderOrigin: OrderOriginEnum.Web,\n    routerBasePath: '',\n  }))\n  .views(self => ({\n    get branchId() {\n      return self.branch && self.branch.id\n    },\n    get companyId() {\n      return self.branch && self.branch.company.id\n    },\n    get brandId() {\n      return self.branch && self.branch.brand.id\n    },\n    get brandOrBranch() {\n      return {\n        brandId: this.isBrand ? this.brandId : undefined,\n        branchId: this.isBrand ? undefined : this.branchId,\n      }\n    },\n    get isValid() {\n      return self.branch !== null\n    },\n    get requestedCode() {\n      // app can be built with a specific code for a purpose of mobile apps\n      let code = process.env.REACT_APP_BUSINESS_CODE || null\n      if (!code) {\n        // mostly used in DEV because it's not possible to use subdomains for\n        // business resolution ... use either code from url or stored one as fallback\n        const urlCode = readBusinessCodeFromUrl()\n        code = urlCode || self.code\n      }\n      return code\n    },\n  }))\n  .actions(self => ({\n    updateFromLookup(lookup: GBusinessLookup.Lookup) {\n      const {\n        isBrand,\n        isMobileApp,\n        knownBasePath,\n        orderOrigin,\n        branch,\n      } = lookup\n\n      if (!branch) {\n        return\n      }\n\n      self.isBrand = isBrand\n      self.isMobileApp = isMobileApp\n      self.branch = branch\n      self.country = branch.address.country || null\n      self.routerBasePath = knownBasePath\n      self.orderOrigin = orderOrigin\n\n      if (process.env.REACT_APP_STAGE !== 'prod') {\n        // for non-prod enviroments we need to remember business code\n        // because its lost on redirects followed by a reload\n        self.code = isBrand ? self.branch.brand.code : self.branch.code\n      } else {\n        self.code = null\n      }\n    },\n    mockBranchData(branch: TBranch) {\n      self.branch = branch\n    },\n  }))\n  .actions(self => ({\n    queryBusiness: async () => {\n      const { data } = await self.client.query<GBusinessLookup.Query>({\n        query: BusinessLookupQuery,\n        variables: {\n          code: self.requestedCode,\n          url: window.location.href,\n        },\n      })\n\n      if (!(data && data.lookup && data.lookup.branch)) {\n        logMain('no business found, used code %s', self.requestedCode)\n        redirectAway()\n        return\n      }\n\n      self.updateFromLookup(data.lookup)\n\n      setSentryContext({\n        requestedCode: self.requestedCode,\n        branchId: self.branchId,\n        brandId: self.brandId,\n        companyId: self.companyId,\n        isBrand: self.isBrand,\n      })\n\n      logMain(\n        'identified branch %s, brand %s; company %s, isBrand: %s',\n        self.branchId,\n        self.brandId,\n        self.companyId,\n        self.isBrand,\n      )\n    },\n    ensureBannerForCurrentBranch(): TBannerModel {\n      const branchId = self.branchId!\n      if (!self.banners.has(branchId)) {\n        self.banners.set(branchId, { branchId: branchId })\n      }\n      return self.banners.get(branchId)!\n    },\n  }))\n\nconst codeParam = 'wac'\n\nfunction readBusinessCodeFromUrl() {\n  const parsedUrl = new window.URL(window.location.href)\n  return parsedUrl.searchParams.get(codeParam) || null\n}\n\nfunction redirectAway() {\n  if (process.env.NODE_ENV === 'production') {\n    window.location.replace(appConfig.redirectOnFail)\n  } else {\n    document.write('No business identified')\n  }\n}\n\nexport interface TBusinessModel extends Instance<typeof BusinessModel> {}\nexport interface TBusinessModelProps extends SnapshotIn<typeof BusinessModel> {}\n","import { differenceInDays } from 'date-fns'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nconst daysHidden = 15\nconst daysReminder = 90\n\nexport const BannerModel = BaseModel.named('Banner')\n  .props({\n    branchId: types.identifier,\n    closedAt: types.maybe(types.Date),\n    installedAt: types.maybe(types.Date),\n  })\n  .views(self => ({\n    get shouldBeVisible() {\n      if (self.root.business.isMobileApp) {\n        return false\n      }\n      if (\n        self.closedAt &&\n        differenceInDays(new Date(), self.closedAt) > daysHidden\n      ) {\n        return true\n      }\n      if (\n        self.installedAt &&\n        differenceInDays(new Date(), self.installedAt) > daysReminder\n      ) {\n        return true\n      }\n      // none of these has been set yet, banner should be visible\n      return !Boolean(self.closedAt || self.installedAt)\n    },\n  }))\n  .actions(self => ({\n    setInstalledNow() {\n      self.installedAt = new Date()\n    },\n    setClosedNow() {\n      self.closedAt = new Date()\n    },\n  }))\n\nexport interface TBannerModel extends Instance<typeof BannerModel> {}\nexport interface TBannerModelProps extends SnapshotIn<typeof BannerModel> {}\n","import gql from 'graphql-tag'\n\nexport const CompanyBranchFragment = gql`\n  fragment GCompanyBranch on CompanyBranch {\n    id\n    code: wac\n    brand {\n      id\n      name\n      code: wac\n    }\n    company {\n      id\n    }\n    address {\n      country {\n        phonePrefix\n      }\n    }\n    phone\n  }\n`\n\nexport const BusinessLookupQuery = gql`\n  query GBusinessLookup($code: String, $url: String) {\n    lookup: companyBranchLookUp(wac: $code, hostUrl: $url) {\n      branch: companyBranch {\n        ...GCompanyBranch\n      }\n      isBrand: isBrandWac\n      isMobileApp\n      knownBasePath\n      orderOrigin\n    }\n  }\n  ${CompanyBranchFragment}\n`\n","import { BaseModel } from './BaseModel'\n\nexport const ConfigModel = BaseModel.named('Config').props({\n  orderItemsMax: 50,\n})\n\nexport type TConfigModel = typeof ConfigModel.Type\nexport type TConfigModelProps = typeof ConfigModel.SnapshotType\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { VError } from 'verror'\n\nimport { GResolveLocation } from '../graph/types'\nimport { formatAddress } from '../helpers/formats'\nimport { GeoPoint, gpsToLatLng } from '../helpers/gps'\nimport { i18n } from '../i18n'\nimport { BaseModel } from '../models/BaseModel'\nimport { ResolveLocationQuery } from './LocationModel.graphql'\n\ninterface IVolatileProps {\n  branchId: MaybeID\n  isOpen: boolean\n  isResolved: boolean\n  isStreetAddress: boolean\n  inDeliveryLocation: boolean\n  geolocationDisabled: boolean\n  geolocationPoint: Maybe<GeoPoint>\n  isResolving: boolean\n}\n\nexport const LocationModel = BaseModel.named('Location')\n  .props({\n    latitude: types.maybe(types.number),\n    longitude: types.maybe(types.number),\n    searchValue: types.maybe(types.string),\n    address: types.maybe(types.string),\n  })\n  .volatile<IVolatileProps>(self => ({\n    branchId: null,\n    isOpen: true,\n    isResolved: false,\n    isStreetAddress: false,\n    inDeliveryLocation: false,\n    geolocationDisabled: false,\n    geolocationPoint: null,\n    isResolving: false,\n  }))\n  .views(self => ({\n    get isGeolocationAvailable() {\n      return Boolean(self.env.geolocation && !self.geolocationDisabled)\n    },\n    get hasLocation() {\n      return self.latitude !== undefined || self.longitude !== undefined\n    },\n    get hasAddress() {\n      return Boolean(self.address)\n    },\n    get isDeliveryAddress() {\n      return self.isResolved && self.isStreetAddress && self.inDeliveryLocation\n    },\n    get hasFinishedSearch() {\n      return (\n        ((self.searchValue && self.searchValue.length > 0) || self.address) &&\n        !self.isResolving\n      )\n    },\n    get geoPoint() {\n      if (this.hasLocation) {\n        return {\n          latitude: self.latitude!,\n          longitude: self.longitude!,\n        }\n      }\n      return null\n    },\n    get resolutionTarget() {\n      const { business } = self.root\n      if (business.isBrand) {\n        return {\n          brandId: business.brandId!,\n        }\n      }\n      return {\n        branchId: business.branchId!,\n      }\n    },\n    get latLng() {\n      if (this.geoPoint) {\n        return gpsToLatLng(this.geoPoint)\n      }\n      return null\n    },\n  }))\n  .actions(self => ({\n    setLocation({ latitude, longitude }: any) {\n      self.latitude = latitude\n      self.longitude = longitude\n    },\n  }))\n  .actions(self => ({\n    setResolutionResult(result: GResolveLocation.ResolveLocation) {\n      const { finalAddress: address } = result\n      if (address) {\n        self.address = formatAddress(address)\n      }\n      self.branchId = result.companyBranch ? result.companyBranch.id : null\n      self.isResolved = result.isResolved\n      self.isStreetAddress = result.isValidAddress\n      self.inDeliveryLocation = result.inDeliveryLocation\n      if (result.isResolved) {\n        self.setLocation(result.gpsCoordinates)\n        self.log('resolved as %s', self.address)\n      } else {\n        self.log('not resolved')\n      }\n    },\n    setVolatileProps(props: Partial<IVolatileProps>) {\n      Object.assign(self, props)\n    },\n    disableGeolocation() {\n      self.geolocationDisabled = false\n    },\n    clearAddress() {\n      self.address = ''\n    },\n    setIsResolving(state: boolean) {\n      self.isResolving = state\n    },\n  }))\n  .actions(self => {\n    const resolver = async (vars?: Partial<GResolveLocation.Variables>) => {\n      self.setIsResolving(true)\n\n      const variables: GResolveLocation.Variables = {\n        ...self.resolutionTarget,\n        ...vars,\n      }\n      const { data } = await self.client.query<GResolveLocation.Query>({\n        query: ResolveLocationQuery,\n        variables,\n      })\n      if (data !== null) {\n        self.setResolutionResult(data.resolveLocation)\n      }\n      self.setIsResolving(false)\n    }\n    return {\n      validateUserLocation() {\n        if (self.hasLocation) {\n          self.log(\n            'validating stored user location %s, %s',\n            self.latitude,\n            self.longitude,\n          )\n          resolver({ latitude: self.latitude, longitude: self.longitude })\n        }\n      },\n      withUserAddress(address: string) {\n        self.searchValue = address\n        if (address === '') {\n          self.clearAddress()\n        } else {\n          self.log('resolving user address: %s', address)\n          resolver({ address })\n        }\n      },\n      withUserLocation(userLocation: GeoPoint) {\n        self.log('with user location: %j', userLocation)\n        self.latitude = userLocation.latitude\n        self.longitude = userLocation.longitude\n        resolver(userLocation)\n      },\n      useGeolocationResult(point: GeoPoint) {\n        self.geolocationPoint = point\n      },\n      attemptGeolocation() {\n        self.log('geolocating...')\n        self.env.geolocation.getCurrentPosition(\n          ({ coords }) => {\n            const { latitude, longitude } = coords\n            self.log(\n              'geolocated at coords %s, %s (acc: %s)',\n              coords.latitude,\n              coords.longitude,\n              coords.accuracy,\n            )\n            this.useGeolocationResult({ latitude, longitude })\n          },\n          err => {\n            self.log(new VError('failed geolocation', err))\n            self.disableGeolocation()\n            window.alert(i18n.t`Your browser does not support geolocation.`)\n          },\n          {\n            enableHighAccuracy: true,\n            maximumAge: 60 * 1000,\n          },\n        )\n      },\n    }\n  })\n\nexport interface TLocationModel extends Instance<typeof LocationModel> {}\nexport interface TLocationModelProps extends SnapshotIn<typeof LocationModel> {}\n","import gql from 'graphql-tag'\n\nimport { JsonAddressFragment } from '../graph/fragments.graphql'\n\nconst LocationResolutionFragment = gql`\n  fragment GLocationResolution on AddressResolvedLocation {\n    finalAddress {\n      ...GJsonAddress\n    }\n    isResolved\n    isValidAddress\n    inDeliveryLocation\n    gpsCoordinates {\n      latitude\n      longitude\n    }\n    companyBranch {\n      id\n      isOpen\n    }\n  }\n  ${JsonAddressFragment}\n`\n\nexport const ResolveLocationQuery = gql`\n  query GResolveLocation(\n    $brandId: ID\n    $branchId: ID\n    $address: String\n    $latitude: Float\n    $longitude: Float\n  ) {\n    resolveLocation(\n      brand: $brandId\n      companyBranch: $branchId\n      address: $address\n      latitude: $latitude\n      longitude: $longitude\n    ) {\n      ...GLocationResolution\n    }\n  }\n  ${LocationResolutionFragment}\n`\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport GoogleMap from 'react-google-maps/lib/components/GoogleMap'\n\nimport { GeoPoint, gpsToLatLng, latLngToGps } from '../helpers/gps'\nimport { BaseModel } from '../models/BaseModel'\n\ninterface IVolatileProps {\n  mapRef: Maybe<GoogleMap>\n  clickPoint: Maybe<GeoPoint>\n}\n\nexport const GPSCzechia = {\n  latitude: 49.8037633,\n  longitude: 15.4749126,\n}\n\nexport const MapModel = BaseModel.named('Map')\n  .props({\n    zoom: types.optional(types.number, 16),\n    latitude: types.optional(types.number, GPSCzechia.latitude),\n    longitude: types.optional(types.number, GPSCzechia.longitude),\n  })\n  .volatile<IVolatileProps>(self => ({\n    mapRef: null,\n    clickPoint: null,\n  }))\n  .views(self => ({\n    get isReady() {\n      return self.mapRef !== null\n    },\n    get center() {\n      return gpsToLatLng(self)\n    },\n  }))\n  .actions(self => ({\n    setMapRef(ref: Maybe<GoogleMap>) {\n      self.mapRef = ref\n    },\n    updateZoom() {\n      if (self.mapRef) {\n        self.zoom = self.mapRef.getZoom()\n      }\n    },\n    updatePosition() {\n      if (self.mapRef) {\n        const center = self.mapRef.getCenter()\n        self.latitude = center.lat()\n        self.longitude = center.lng()\n      }\n    },\n    panToLocation(gps: GeoPoint, radiusMeters: number = 2000) {\n      if (self.mapRef) {\n        // const bounds = getBounds([\n        //   computeDestinationPoint(gps, radiusMeters, 135), // SE corner\n        //   computeDestinationPoint(gps, radiusMeters, 315), // NW corner\n        // ])\n\n        // // @ts-ignore padding missing in types\n        // self.mapRef.panToBounds(\n        //   {\n        //     west: bounds.minLng,\n        //     east: bounds.maxLng,\n        //     north: bounds.minLat,\n        //     south: bounds.maxLat,\n        //   },\n        //   20,\n        // )\n        self.mapRef.panTo(gpsToLatLng(gps))\n      }\n    },\n    onClick(ev: google.maps.MouseEvent) {\n      self.clickPoint = latLngToGps(ev.latLng)\n    },\n    clearClickPoint() {\n      self.clickPoint = null\n    },\n  }))\n\nexport interface TMapModel extends Instance<typeof MapModel> {}\nexport interface TMapModelProps extends SnapshotIn<typeof MapModel> {}\n","import { isoDate } from '@speedlo/tools'\nimport { when } from 'mobx'\nimport { Instance, SnapshotIn, types } from 'mobx-state-tree'\nimport { FetchResult } from 'react-apollo'\nimport { VError } from 'verror'\n\nimport { RecipeFragment } from '../graph/fragments.graphql'\nimport {\n  DeliveryTypeEnum,\n  GAddToOrder,\n  GChangeOrderItem,\n  GCreateDeliveryOrder,\n  GCreateOrder,\n  GCreatePickupOrder,\n  GOrder,\n  GOrderMobile,\n  GOrderPaymentStatus,\n  GRecipe,\n  GRemoveOrderItem,\n  GSubmitOrder,\n  GVamStatus,\n  PaymentGateEnum,\n} from '../graph/types'\nimport { executeGoPayPayment } from '../helpers/gopay'\nimport { logMain, logOrder } from '../helpers/logger'\nimport { RM } from '../helpers/ramda'\nimport { reportError } from '../helpers/sentry'\nimport { i18n } from '../i18n'\nimport { OrderFragment } from '../segments/cart/CartView.graphql'\nimport { FoodMenuQuery } from '../segments/foodMenu/FoodMenuView.graphql'\nimport {\n  PickupMapBranchQuery,\n  PickupMapBrandQuery,\n} from '../segments/map/PickupMap.graphql'\nimport { OrderMobileFragment } from '../segments/mobile/MobileCart.graphql'\nimport { IOrderFormState } from '../segments/orderForm/OrderFormSetup'\nimport { BaseModel } from './BaseModel'\nimport {\n  AddToOrderMobileMutation,\n  AddToOrderMutation,\n  ChangeOrderItemMutation,\n  CreateDeliveryOrderMutation,\n  CreatePickupOrderMutation,\n  OrderCartForRecipeQuery,\n  OrderPaymentStatusQuery,\n  RemoveOrderItemMutation,\n  SubmitOrderMutation,\n  VamStatusQuery,\n} from './OrderModel.graphql'\n\ninterface IVolatileProps {\n  isSubmitting: boolean\n  isGoPayChecking: boolean\n  submitErrors: Maybe<ReadonlyArray<string>>\n  agreements: TAgreement[]\n  lastActiveRecipeId: MaybeID\n  isVamInitialized: boolean\n  timePickerOpen: boolean\n  shouldRefreshCart: boolean\n}\n\nexport type TAgreement = GVamStatus.VamStatus\n\nexport const OrderModel = BaseModel.named('Order')\n  .props({\n    branchId: types.maybeNull(types.string),\n    orderId: types.maybeNull(types.string),\n    orderMethod: DeliveryTypeEnum.Messenger,\n    payment: PaymentGateEnum.Gopay,\n    deliverAt: types.maybe(types.Date),\n    firstname: '',\n    lastname: '',\n    email: '',\n    phone: '',\n    phonePrefix: '',\n    note: '',\n  })\n  .volatile<IVolatileProps>(self => ({\n    isSubmitting: false,\n    isGoPayChecking: false,\n    submitErrors: null,\n    agreements: [],\n    lastActiveRecipeId: null,\n    isVamInitialized: false,\n    timePickerOpen: false,\n    shouldRefreshCart: false,\n  }))\n  .views(self => ({\n    get hasOrder() {\n      return self.orderId !== null\n    },\n    get fragmentOrderId() {\n      return `Order-${self.orderId}`\n    },\n    get usingDeliveryOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Messenger\n    },\n    get usingPickupOrderMethod() {\n      return self.orderMethod === DeliveryTypeEnum.Pickup\n    },\n    get hasErrors() {\n      return Boolean(self.submitErrors && self.submitErrors.length > 0)\n    },\n    get defaultPhonePrefix() {\n      if (self.root.business.isValid && self.root.business.country) {\n        return self.root.business.country.phonePrefix\n      }\n      return '+'\n    },\n    getSubmitVariables(formValues: IOrderFormState): GSubmitOrder.Variables {\n      return {\n        orderId: self.orderId!,\n        customer: {\n          firstName: formValues.firstname,\n          lastName: formValues.lastname,\n          emails: [{ email: formValues.email }],\n          phones: [{ phone: `${formValues.phonePrefix}${formValues.phone}` }],\n        },\n        note: formValues.note,\n        paymentGate: formValues.payment,\n        deliverAt: self.deliverAt && isoDate(self.deliverAt),\n        agreements: formValues.agreements\n          .filter(RM.propEq('isConfirmed', true))\n          .map(RM.prop('id'))\n          .filter(Boolean),\n      }\n    },\n  }))\n  .actions(self => ({\n    useOrderMethod(method: DeliveryTypeEnum) {\n      self.orderMethod = method\n    },\n    setBranch(branchId: ID) {\n      self.branchId = branchId\n    },\n    orderCreated(result: GCreateOrder.Fragment) {\n      self.orderId = result.id\n      self.branchId = result.companyBranch.id\n      self.deliverAt = undefined\n      logMain('order %s created for branch %s', self.orderId, self.branchId)\n    },\n    orderPaid(orderId: ID) {\n      if (self.orderId !== orderId) {\n        self.orderId = orderId\n        logMain('order %s replaced by %s due to successful payment status')\n      }\n    },\n    orderCancel() {\n      if (self.branchId || self.orderId) {\n        logMain(\n          'cancel order %s, was at branch %s',\n          self.root.order.orderId,\n          self.root.order.branchId,\n        )\n      }\n      self.orderId = null\n      self.branchId = null\n    },\n    submitFinished() {\n      self.isSubmitting = false\n    },\n    submitFailed(errors?: ReadonlyArray<string>) {\n      self.isSubmitting = false\n      self.submitErrors = errors || [\n        i18n.t`Error during sending order. Please try again later.`,\n      ]\n    },\n    vamFailed() {\n      self.submitErrors = [\n        i18n.t`Internal error during sending order. Order can not be finished right now. Our team was notified and is working on fix. Thank you for your understanding.`,\n      ]\n      self.isVamInitialized = false\n    },\n    clearErrors() {\n      self.submitErrors = null\n    },\n    goPayStatusCheck(checking: boolean) {\n      self.isGoPayChecking = checking\n    },\n    useAgreements(agreements: ReadonlyArray<TAgreement>) {\n      if (Array.isArray(agreements)) {\n        self.agreements = agreements\n      }\n      self.isVamInitialized = true\n    },\n    setUsedRecipeId(recipeId: ID) {\n      self.lastActiveRecipeId = recipeId\n    },\n    openTimePicker() {\n      self.timePickerOpen = true\n    },\n    closeTimePicker() {\n      self.timePickerOpen = false\n    },\n    setCartRefresh(shouldRefresh: boolean) {\n      self.shouldRefreshCart = shouldRefresh\n    },\n    setDeliverAt(deliverAt: Date | undefined) {\n      self.deliverAt = deliverAt\n    },\n    async queryPaymentStatus(\n      orderId: ID = self.orderId!,\n    ): Promise<GOrderPaymentStatus.Status | null> {\n      const variables: GOrderPaymentStatus.Variables = {\n        orderId,\n      }\n      try {\n        const result = await self.client.query<GOrderPaymentStatus.Query>({\n          fetchPolicy: 'no-cache',\n          query: OrderPaymentStatusQuery,\n          variables,\n        })\n        return result.data.status\n      } catch (err) {\n        logOrder('failed to verify payment status for order %s: ', orderId)\n        return null\n      }\n    },\n    rememberFormValues(values: IOrderFormState) {\n      if (self.root.user.shouldRememberForm) {\n        self.firstname = values.firstname\n        self.lastname = values.lastname\n        self.email = values.email\n        self.phone = values.phone\n        self.phonePrefix = values.phonePrefix\n        self.note = values.note\n      } else {\n        self.firstname = ''\n        self.lastname = ''\n        self.email = ''\n        self.phone = ''\n        self.phonePrefix = ''\n        self.note = ''\n      }\n    },\n  }))\n  .actions(self => ({\n    async createDeliveryOrder() {\n      const { business, location } = self.root\n      if (!location.geoPoint) {\n        return null\n      }\n      const variables: GCreateDeliveryOrder.Variables = {\n        gps: location.geoPoint,\n        orderOrigin: business.orderOrigin,\n        ...business.brandOrBranch,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreateDeliveryOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreateDeliveryOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    async createPickupOrder(branchId: ID) {\n      const { business } = self.root\n      const variables: GCreatePickupOrder.Variables = {\n        branchId,\n        orderOrigin: business.orderOrigin,\n      }\n      const { data } = await self.client.mutate({\n        fetchPolicy: 'no-cache',\n        mutation: CreatePickupOrderMutation,\n        variables,\n      })\n      const { order } = data as GCreatePickupOrder.Mutation\n      self.orderCreated(order)\n      // @ts-ignore method defined lower\n      self.initVam()\n      return self.orderId\n    },\n    prefetchPickup() {\n      const { business } = self.root\n      if (business.isBrand) {\n        self.client.query({\n          query: PickupMapBrandQuery,\n          variables: { brandId: business.brandId },\n        })\n      } else {\n        self.client.query({\n          query: PickupMapBranchQuery,\n          variables: { branchId: business.branchId },\n        })\n      }\n    },\n    prefetchFoodMenu(branchId?: ID) {\n      if (branchId) {\n        self.client.query({ query: FoodMenuQuery, variables: { branchId } })\n      }\n    },\n    prefetchFood(recipeId: ID) {\n      self.client.query({\n        query: OrderCartForRecipeQuery,\n        variables: { recipeId },\n      })\n    },\n    async addFromRecipe(recipeId: ID, sideDishes: Array<ID> = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrder.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderFragment,\n        fragmentName: 'GOrder',\n      })\n      const recipe = self.client.readFragment<GRecipe.Fragment>({\n        id: `Recipe-${recipeId}`,\n        fragment: RecipeFragment,\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              price: {\n                __typename: 'PriceConverted',\n                value: 0,\n                formattedValue: '---',\n              },\n              recipe: { ...recipe, sideDishes: [] },\n              sideDishes: [],\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async addFromRecipeMobile(recipeId: ID, sideDishes: Array<ID> = []) {\n      const variables: GAddToOrder.Variables = {\n        orderId: self.orderId!,\n        recipeId,\n        sideDishes,\n      }\n      const current = self.client.readFragment<GOrderMobile.Fragment>({\n        id: self.fragmentOrderId,\n        fragment: OrderMobileFragment,\n        fragmentName: 'GOrderMobile',\n      })\n      const optimisticResponse = {\n        __typename: 'Mutation',\n        createOrderRecipe: {\n          ...current,\n          countWares: current ? current.countWares + 1 : 1,\n          items: [\n            ...(current ? current.items : []),\n            {\n              __typename: 'OrderRecipe',\n              id: '-1',\n              recipe: { __typename: 'Recipe', id: recipeId },\n              automatic: false,\n            },\n          ],\n        },\n      }\n      await self.client.mutate({\n        mutation: AddToOrderMobileMutation,\n        variables,\n        optimisticResponse,\n      })\n    },\n    async updateItem(itemId: ID, sideDishes: Array<ID> = []) {\n      const variables: GChangeOrderItem.Variables = {\n        orderId: self.orderId!,\n        itemId,\n        sideDishes,\n      }\n      await self.client.mutate({ mutation: ChangeOrderItemMutation, variables })\n    },\n    removeItemFromCart(itemId: ID) {\n      const variables: GRemoveOrderItem.Variables = {\n        itemId,\n      }\n      const current = self.client.readFragment<GOrder.Fragment>({\n        fragment: OrderFragment,\n        fragmentName: 'GOrder',\n        id: self.fragmentOrderId,\n      })\n      self.client.mutate({\n        mutation: RemoveOrderItemMutation,\n        variables,\n        optimisticResponse: {\n          __typename: 'Mutation',\n          destroyOrderRecipe: {\n            ...current,\n            countWares: current ? current.countWares - 1 : 0,\n            items: current\n              ? current.items.filter(item => item.id !== itemId)\n              : [],\n          },\n        },\n      })\n    },\n    async initVam() {\n      const variables: GVamStatus.Variables = {\n        input: {\n          orderId: self.orderId!,\n          email: self.email,\n          firstname: self.firstname,\n          lastname: self.lastname,\n          phone: self.phone,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    async updateVam(formValues: IOrderFormState) {\n      const phone = `${formValues.phonePrefix.trim()}${formValues.phone.trim()}`\n      const email = formValues.email.trim()\n      const firstname = formValues.firstname.trim()\n      const lastname = formValues.lastname.trim()\n      const variables: GVamStatus.Variables = {\n        input: {\n          email,\n          phone,\n          firstname,\n          lastname,\n          orderId: self.orderId!,\n        },\n      }\n      try {\n        const result = await self.client.query<GVamStatus.Query>({\n          query: VamStatusQuery,\n          variables,\n        })\n        if (result.data) {\n          self.useAgreements(result.data.vamStatus)\n        }\n      } catch (err) {\n        reportError(err, { variables })\n        self.vamFailed()\n      }\n    },\n    submitOrder: async (formValues: IOrderFormState) => {\n      self.isSubmitting = true\n      let result: FetchResult\n\n      self.rememberFormValues(formValues)\n\n      try {\n        result = await self.client.mutate({\n          fetchPolicy: 'no-cache',\n          mutation: SubmitOrderMutation,\n          variables: self.getSubmitVariables(formValues),\n        })\n      } catch (err) {\n        self.submitFailed()\n        throw reportError(new VError('order submit mutation error: %j', err))\n      }\n\n      if ((result.errors && result.errors.length) || !result.data) {\n        self.submitFailed()\n        throw reportError(\n          new VError('order submit graphql errors: %j', result.errors),\n        )\n      }\n\n      const submitResult: GSubmitOrder.FinishOrder = result.data.finishOrder\n      if (submitResult.userErrors && submitResult.userErrors.length) {\n        self.submitFailed(submitResult.userErrors)\n        throw new VError('Order user errors: %j', submitResult.userErrors)\n      }\n\n      if (formValues.payment === PaymentGateEnum.Cash) {\n        self.submitFinished()\n        return\n      }\n\n      if (!submitResult.gopayUrl) {\n        self.submitFailed()\n        throw reportError(new Error('GoPay url missing from response'))\n      }\n\n      await executeGoPayPayment(submitResult.gopayUrl)\n\n      self.goPayStatusCheck(true)\n      const paymentStatus = await self.queryPaymentStatus()\n      self.goPayStatusCheck(false)\n\n      if (paymentStatus) {\n        if (paymentStatus.isSuccess) {\n          self.submitFinished()\n        } else {\n          self.submitFailed(\n            paymentStatus.userErrors.length\n              ? paymentStatus.userErrors\n              : undefined,\n          )\n          throw new VError('Payment failed: %j', paymentStatus.userErrors)\n        }\n      } else {\n        self.submitFailed()\n        throw reportError(new VError('No payment status returned'))\n      }\n    },\n  }))\n  .actions(self => ({\n    checkPaymentStatus() {\n      const parsedUrl = new window.URL(window.location.href)\n      // the orderId will come in URL when GoPay payment was handled by redirect\n      const orderId = parsedUrl.searchParams.get('orderId')\n      if (!orderId) {\n        return\n      }\n      when(\n        () => self.root.auth.isValid,\n        async () => {\n          // delay displaying status checking modal\n          const checkDelay = setTimeout(() => self.goPayStatusCheck(true), 500)\n          const paymentStatus = await self.queryPaymentStatus(orderId)\n\n          clearTimeout(checkDelay)\n          self.goPayStatusCheck(false)\n\n          if (paymentStatus && paymentStatus.isSuccess) {\n            self.orderPaid(orderId)\n            parsedUrl.search = ''\n            parsedUrl.pathname = '/finish'\n            location.replace(parsedUrl.toString())\n          } else {\n            const phone = self.root.business.branch!.phone\n            self.submitFailed([\n              i18n.t`We were unable to verify status of your payment. Please contact operator using number ${phone}`,\n            ])\n            return\n          }\n        },\n      )\n    },\n  }))\n\nexport interface TOrderModel extends Instance<typeof OrderModel> {}\nexport interface TOrderModelProps extends SnapshotIn<typeof OrderModel> {}\n","import scriptjs from 'scriptjs'\n\nimport { logOrder } from './logger'\n\nconst embedScript = 'https://gate.gopay.cz/gp-gw/js/embed.js'\nconst embedScriptSandbox = 'https://gw.sandbox.gopay.com/gp-gw/js/embed.js'\n\ninterface ICheckoutResult {\n  url: string\n  id: number\n}\n\nexport async function executeGoPayPayment(url: string) {\n  logOrder('GoPay init', url)\n  await loadScript(url)\n  return checkout(getOptions(url))\n}\n\nfunction getOptions(url: string) {\n  // const isSafari = /^((?!chrome|android|mobile).)*safari/i.test(\n  //   navigator.userAgent,\n  // )\n  // logOrder('Browser is desktop Safari', isSafari)\n  return { gatewayUrl: url, inline: true }\n}\n\nfunction loadScript(url: string) {\n  const scriptUrl = url.includes('gw.sandbox.gopay.com')\n    ? embedScriptSandbox\n    : embedScript\n  logOrder('GoPay script url', scriptUrl)\n  return new Promise(resolve => {\n    scriptjs(scriptUrl, resolve)\n  })\n}\n\nfunction checkout(options: object): Promise<number> {\n  return new Promise(resolve => {\n    logOrder('GoPay checkout')\n    // @ts-ignore\n    _gopay.checkout(options, function(result: ICheckoutResult) {\n      logOrder('GoPay result', result)\n      resolve(result.id)\n    })\n  })\n}\n","import { DocumentNode } from 'graphql'\nimport React from 'react'\nimport { Mutation, MutationProps, MutationResult } from 'react-apollo'\n\nexport function buildMutation<TData, TVariables>(mutation: DocumentNode) {\n  interface IProps\n    extends Omit<MutationProps<TData, TVariables>, 'mutation' | 'children'> {\n    render(data: MutationResult<TData>): ReactNode\n  }\n  const GMutation: React.SFC<IProps> = () => {\n    const { render, ...props } = this.props\n    return (\n      <Mutation mutation={mutation} {...props}>\n        {render}\n      </Mutation>\n    )\n  }\n  return GMutation\n}\n","import { Instance, SnapshotIn, types } from 'mobx-state-tree'\n\nimport { BaseModel } from './BaseModel'\n\nexport const UserModel = BaseModel.named('User')\n  .props({\n    rememberForm: types.maybeNull(types.boolean),\n  })\n  .volatile(self => ({\n    closingTimeAlertHidden: false,\n    orderLimitAlertHidden: true,\n  }))\n  .actions(self => ({\n    showClosingTime() {\n      self.closingTimeAlertHidden = false\n    },\n    hideClosingTime() {\n      self.closingTimeAlertHidden = true\n    },\n    showOrderLimit() {\n      self.orderLimitAlertHidden = false\n    },\n    hideOrderLimit() {\n      self.orderLimitAlertHidden = true\n    },\n    setFormRememberYes() {\n      self.rememberForm = true\n    },\n    setFormRememberNo() {\n      self.rememberForm = false\n    },\n  }))\n  .views(self => ({\n    get shouldRememberForm() {\n      return self.rememberForm !== false\n    },\n  }))\n\nexport interface TUserModel extends Instance<typeof UserModel> {}\nexport interface TUserModelProps extends SnapshotIn<typeof UserModel> {}\n"],"sourceRoot":""}