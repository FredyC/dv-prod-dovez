{"version":3,"sources":["common/ScrollToTop.tsx","segments/mobile/MobileHeader.tsx","segments/mobile/MobilePaymentButton.tsx","segments/mobile/MobilePaymentMethod.tsx","segments/mobile/MobileConfirmView.tsx","segments/mobile/MobileDeliveryView.tsx","common/WithBusiness.tsx","segments/mobile/MobileShopIntro.graphql.ts","segments/mobile/MobileShopIntro.tsx","segments/mobile/MobileIntroView.tsx","segments/mobile/MobileCartSummary.tsx","segments/mobile/MobileCart.tsx","segments/mobile/MobileClosingTimeModal.graphql.ts","segments/mobile/MobileClosingTimeModal.tsx","segments/mobile/MobileOrderView.tsx","segments/mobile/MobilePickupList.tsx","segments/mobile/MobilePickupMap.tsx","segments/mobile/MobilePickupView.tsx","segments/mobile/MobileSmartBanner.graphql.ts","segments/mobile/MobileSmartBanner.tsx","segments/mobile/MobileFinishView.tsx","app/MobileApp.tsx"],"names":["ScrollToTop_ScrollToTop","react","[object Object]","window","scrollTo","mobile_MobileHeader","text","buttonText","buttonRight","onButtonClick","leftButton","react_default","a","createElement","Buttons","className","data-testid","onClick","rightButton","isConfirm","MobilePaymentButton","_a","method","disabled","children","props","__rest","WithOrder","observe","render","order","es","field","fieldApi","_extends","selected","value","isSubmitting","setValue","SubmitSpinner","MobilePaymentMethod_MobilePaymentMethod","orderModel","onConfirm","types","GOPAY","i18n","_","toLocaleUpperCase","CASH","MobileConfirmView_MobileConfirmView","history","goBack","OrderFormSetup","form","Fragment","OrderFormStorageNotice","OrderGoPayModal","OrderErrorModal","_lingui_react","id","OrderFormInputs","OrderAgreements","submitForm","LocationDiscovery","MobileDeliveryView","WithRoot","root","location","hasLocation","BaseMap","model","map","DeliveryMap","push","rootModel","WithBusiness","business","isValid","MobileShopIntroQuery","src_default","QueryMobileShopIntro","Object","buildQuery","MobileShopIntro","variables","branchId","renderLoading","companyBranch","headerText","MobileIntroView_MobileIntroView","BackgroundThemed","imageName","size","fixed","ShopHeaderIcons","react_router","OrderMethod","onChange","usingDeliveryOrderMethod","usingPickupOrderMethod","MobileCartSummaryCountThemed","styled","withConfig","displayName","theme","secondary","MobileCartSummaryPriceThemed","primary","MobileCartSummary_MobileCartSummary","count","price","isLoading","showContent","values","components","MobileCart_MobileCartController","this","state","isOpen","goConfirm","setOpen","setState","onToggle","isEmpty","prev","onSubmit","to","classnames_default","mobile__sliding__cart__open","CartView","OrderSubmitLine","canSubmit","MobileCart_MobileCart","orderId","MobileCart_graphql","loading","countWares","totalSum","formattedValue","MobileShopStatusQuery","graph","fragments_graphql","QueryMobileShopStatus","MobileClosingTimeModal","branch","ShopClosingTimeModal","status","MobileOrderView_MobileOrderView","redirect","FoodMenuView","AddToCartModal","StatusDisplayPosition","styled_components_browser_esm","div","mobile_MobilePickupList","branches","onSelect","onShowMap","onPrefetch","key","name","ShopAddress","address","ShopStatusDisplay","pickupEnabled","onMouseEnter","toLocaleLowerCase","ButtonStripeContainerStyled","mobile_MobilePickupMap","panToBranch","panToLocation","gps","latlng","latitude","Number","longitude","undefined","lib","position","ButtonStripe","MobilePickupView_MobilePickupView","renderQuery","match","params","isBrand","PickupMap_graphql","brandId","find","ramda","propEq","renderHeader","renderMap","renderList","createPickupOrder","onSelectBranch","prefetchFoodMenu","BannerQuery","QueryBanner","SmartBannerContainer","MobileSmartBanner_MobileSmartBanner","platform","os","ua_parser_default","navigator","userAgent","getOS","IOS","ANDROID","getPlatformType","banner","ensureBannerForCurrentBranch","shouldBeVisible","app","setClosedNow","style","backgroundImage","icon","title","href","url","setInstalledNow","MobileFinishView","reactstrap_es","ColStyle","FinishViewLoader","result","FinishViewOrder","FinishViewSupport","FinishViewFooter","finish","__webpack_exports__","path","component","fluid","exact"],"mappings":"maAIM,MAAOA,UAAoBC,EAAA,cAC/BC,oBACEC,OAAOC,SAAS,EAAG,GAGrBF,SACE,OAAO,yECyCI,IAAAG,EAtCyB,EACtCC,OACAC,aACAC,eAAc,EACdC,oBAEA,MAAMC,GACY,IAAhBF,EACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAU,yBACVC,cAAY,2BAEZC,QAASR,GAERF,GAED,KACAW,GACY,IAAhBV,EACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAU,yBACVC,cAAY,4BAEZC,QAASR,EACTU,WAAW,GAEVZ,GAED,KACN,OACEI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACZL,EACDC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBAAwBT,GACtCY,mhBChCA,MAAME,EAA0CC,QAAAC,OACrDA,EADqDC,SAErDA,EAFqDN,QAGrDA,EAHqDO,SAIrDA,GAAQH,EACRI,EAAAC,EAAAL,EAAA,4CACI,OACJV,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,SAAS,EACTC,OAAQC,GACNnB,EAAAC,EAAAC,cAACkB,EAAA,MAAD,CACEC,MAAM,UACNH,OAAQI,GACNtB,EAAAC,EAAAC,cAACC,EAAA,EAADoB,EAAA,CACEC,SAAUF,EAASG,QAAUd,EAC7BC,SAAUA,GAAYO,EAAMO,aAC5BpB,QAAS,KACPgB,EAASK,SAAShB,GAClBL,MAEEQ,GAEHK,EAAMO,cAAgBJ,EAASG,QAAUd,EACxCX,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,MAEAf,QCxBDgB,EAAyC,EACpDC,aACAC,eAEA/B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oCACbJ,EAAAC,EAAAC,cAACO,EAAD,CACEE,OAAQqB,EAAA,EAAgBC,MACxB3B,QAASyB,EACT1B,cAAY,4BAEZL,EAAAC,EAAAC,cAAA,QAAME,UAAU,wBACb8B,EAAA,EAAIC,EAAA,eAAgBC,sBAGzBpC,EAAAC,EAAAC,cAACO,EAAD,CACEE,OAAQqB,EAAA,EAAgBK,KACxB/B,QAASyB,EACT1B,cAAY,2BAEZL,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBACb8B,EAAA,EAAIC,EAAA,eAAgBC,uBCdhBE,EAAuC,EAAGC,aACrDvC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACbJ,EAAAC,EAAAC,cAACR,EAAD,CACEC,KAAMuC,EAAA,EAAIC,EAAA,sBACVvC,WAAYsC,EAAA,EAAIC,EAAA,UAChBrC,cAAe,IAAMyC,EAAQC,WAE/BxC,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEE,OAAQC,GACNnB,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CACEtB,MAAOA,EACPD,OAAQwB,GACN1C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACE3C,EAAAC,EAAAC,cAACb,EAAD,MACAW,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAiB1B,MAAOA,IACxBnB,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,MACA9C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+BACbJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC6C,EAAA,MAAD,CAAAC,GAAA,mCAEFhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,MACAjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,OAEFlD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iCACbJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC6C,EAAA,MAAD,CAAAC,GAAA,iBAEFhD,EAAAC,EAAAC,cAAC2B,EAAD,CACEC,WAAYX,EACZY,UAAWW,EAAKS,yDCtClC,MAAMC,EAAoB,IAAMpD,EAAAC,EAAAC,cAAA,SAAIgC,EAAA,EAAIC,EAAA,wBAM3BkB,EAAwC,EAAGd,aACtDvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACR,EAAD,CACEC,KAAMuC,EAAA,EAAIC,EAAA,qBACVvC,WAAYsC,EAAA,EAAIC,EAAA,QAChBrC,cAAe,IAAMyC,EAAQC,WAE/BxC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACEpC,OAAQqC,GACNA,EAAKC,SAASC,YACZzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CACEC,MAAOJ,EAAKK,IACZ1C,OAAQ,IACNlB,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CACE9B,UAAW,IAAMQ,EAAQuB,KAAK,UAC9BC,UAAWR,MAKjBvD,EAAAC,EAAAC,cAACkD,EAAD,gDC9BL,MAAMY,EAAkC,EAAG9C,SAAQD,aACxDjB,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACErC,QAASA,EACTC,OAAQ,EAAG+C,cAAgBA,EAASC,QAAUhD,EAAO+C,GAAY,qCCR9D,MAAME,EAAuBC,EAAAnE;;;;;;;EASvBoE,EAAuBC,OAAAC,EAAA,EAAAD,CAGlCH,GCVWK,EAAqC1D,GAChDd,EAAAC,EAAAC,cAAC8D,EAAD,CACE/C,SAAS,EACTC,OAAQ+C,GACNjE,EAAAC,EAAAC,cAACmE,EAAD,CACEI,UAAW,CAAEC,SAAUT,EAASS,UAChCC,cAAe,IAAM,KACrBzD,OAAQ,EAAG0D,eAAiBC,iBAC1B7E,EAAAC,EAAAC,cAAA,OAAKG,cAAY,mBAAmBwE,OCJjCC,EAA6B,IACxC9E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACE3E,UAAU,sBACVC,cAAY,oCACZ2E,UAAU,kBACVC,KAAK,QACLC,OAAO,GAEPlF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,OAEFnF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACbJ,EAAAC,EAAAC,cAACsE,EAAD,MACAxE,EAAAC,EAAAC,cAACkF,EAAA,EAAD,KACG,EAAG7C,aACFvC,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CACEC,SAAUnE,IACJA,EAAMoE,yBACRhD,EAAQuB,KAAK,aACJ3C,EAAMqE,wBACfjD,EAAQuB,KAAK,2HCjB7B,MAAM2B,EAA+BnB,OAAAoB,EAAA,EAAApB,CAAO,OAAMqB,WAAA,CAAAC,YAAA;sBAC5B,EAAGC,WAAYA,EAAMC;EAGrCC,EAA+BzB,OAAAoB,EAAA,EAAApB,CAAO,QAAOqB,WAAA,CAAAC,YAAA;WACxC,EAAGC,WAAYA,EAAMG;EAGnBC,EAAuC,EAClDC,QACAC,QACAC,YACA9F,cAEA,MAAM+F,EAAcH,EAAQ,IAAmB,IAAdE,EACjC,OACEpG,EAAAC,EAAAC,cAAA,OACEE,UAAU,wBACVC,cAAY,oBACZC,QAASA,GAER+F,EACCrG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iCACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,yBAEhB,KAEJJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+BACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBACfiG,EACCrG,EAAAC,EAAAC,cAACuF,EAAD,CACErF,UAAU,+BACVC,cAAY,4BAEX6F,GAAS,KAEV,KACFG,EAGArG,EAAAC,EAAAC,cAAA,OACEE,UAAU,2CACVC,cAAY,4BAEZL,EAAAC,EAAAC,cAAC6C,EAAA,MAAD,CAAAC,GAAA,+CAAAsD,OAAA,CAGKH,SAHLI,WAAA,CAEEvG,EAAAC,EAAAC,cAAC6F,EAAD,CAA8B3F,UAAU,qCAR5CJ,EAAAC,EAAAC,cAAA,QAAMG,cAAY,eAAe6B,EAAA,EAAIC,EAAA,qBC7B/C,MAAMqE,WAA6BlH,EAAA,UAAnCC,kCACEkH,KAAAC,MAAQ,CAAEC,QAAQ,EAAOC,WAAW,GAEpCH,KAAAI,QAAWF,KACTF,KAAKK,SAAS,CAAEH,aAoBlBF,KAAAM,SAAW,MACLN,KAAKO,QACPP,KAAKI,SAAQ,GAEbJ,KAAKK,SAASG,IAAI,CAAON,QAASM,EAAKN,YAI3CF,KAAAS,SAAW,MACTT,KAAKK,SAAS,CAAEF,WAAW,MA1B7BrH,iCAAgC2G,MAAEA,IAAiBS,OAAEA,IACnD,OAAc,IAAVT,IAA0B,IAAXS,EACV,CACLA,QAAQ,GAGL,KAOTK,cACE,OAA4B,IAArBP,KAAK3F,MAAMoF,MAepB3G,SACE,MAAM2G,MAAEA,EAAFC,MAASA,EAATC,UAAgBA,GAAcK,KAAK3F,OACnC6F,OAAEA,EAAFC,UAAUA,GAAcH,KAAKC,MAEnC,OAAIE,EACK5G,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAU+B,GAAG,WAAWrD,MAAM,IAIrC9D,EAAAC,EAAAC,cAAA,OACEE,UAAWgH,IAAW,wBAAyB,CAC7CC,4BAA6BV,KAG/B3G,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAC+F,EAAD,CACEC,MAAOA,EACPC,MAAOA,EACPC,UAAWA,EACX9F,QAASmG,KAAKM,WAEfJ,EACC3G,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACE3C,EAAAC,EAAAC,cAACoH,EAAA,EAAD,MACAtH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CACEC,WAAYf,KAAKO,QACjB1G,QAASmG,KAAKS,YAGhB,QAOP,MAAMO,GAAyC,EAAGC,aACvD1H,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CACElD,UAAW,CAAEiD,WACb/C,eAAe,EACfzD,OAAQ,EAAGC,UAAWyG,aACpB5H,EAAAC,EAAAC,cAACsG,GAAD,CACEN,MAAO/E,EAAQA,EAAM0G,WAAa,EAClC1B,MAAOhF,EAAQA,EAAM2G,SAASC,eAAiB,MAC/C3B,UAAWwB,IAAYzG,qCClGxB,MAAM6G,GAAwBC,GAAA;;;;;;;IAOjCC,GAAA;EAGSC,GAAwB7D,OAAA2D,GAAA,EAAA3D,CAGnC0D,ICRWI,GAA4C,EAAG1D,cAC1D1E,EAAAC,EAAAC,cAACiI,GAAD,CACE1D,UAAW,CAAEC,YACbxD,OAAQ,EAAGmH,YAAarI,EAAAC,EAAAC,cAACoI,GAAA,EAAD,CAAsBC,OAAQF,MCH7CG,GAAkB1H,GAC7Bd,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEyH,UAAU,EACVvH,OAAQC,GACNnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACbJ,EAAAC,EAAAC,cAACwI,EAAA,EAAD,MACA1I,EAAAC,EAAAC,cAACuH,GAAD,CAAYC,QAASvG,EAAMuG,UAC3B1H,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAgBxH,MAAOA,IACvBnB,EAAAC,EAAAC,cAACkI,GAAD,CAAwB1D,SAAUvD,EAAMuD,2ECChD,MAAMkE,GAAwBC,GAAA,EAAOC,IAAGnD,WAAA,CAAAC,YAAA,4BAuDzB,IAAAmD,GArD6B,EAC1CC,WACAC,WACAC,YACAC,iBA0CA,OACEnJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACZ4I,GAAYA,EAASpF,IA1CJyE,GAElBrI,EAAAC,EAAAC,cAAA,OACEE,UAAU,6BACVC,cAAY,mBACZ+I,IAAKf,EAAOrF,IAEZhD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gCAAgCiI,EAAOgB,MACtDrJ,EAAAC,EAAAC,cAACoJ,GAAA,EAAD,CAAaC,QAASlB,EAAOkB,UAC7BvJ,EAAAC,EAAAC,cAAC0I,GAAD,KACE5I,EAAAC,EAAAC,cAACsJ,GAAA,EAAD,CAAmBjB,OAAQF,KAG7BrI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iCACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBG,QAAS,IAAM4I,EAAUb,IACxCrI,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBACb8B,EAAA,EAAIC,EAAA,eAAgBC,sBAGxBiG,EAAOoB,cACNzJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEG,QAAS,IAAM2I,EAASZ,GACxBqB,aAAc,IAAMP,EAAWd,EAAOrF,KAEtChD,EAAAC,EAAAC,cAAA,QAAME,UAAU,iBACb8B,EAAA,EAAIC,EAAA,UAAWC,sBAIpBpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeS,UAAU,GACvBZ,EAAAC,EAAAC,cAAA,QAAME,UAAU,iBACb8B,EAAA,EAAIC,EAAA,iBAAkBwH,wDCxCvC,MAAMC,GAA8Bf,GAAA,EAAOC,IAAGnD,WAAA,CAAAC,YAAA;;;EA8D/B,IAAAiE,GAzDf,cAA8BvK,EAAA,cAC5BC,oBACEkH,KAAKqD,cAEPvK,qBACEkH,KAAKqD,cAEPvK,cACE,MAAMoE,MAAEA,EAAF0E,OAASA,GAAW5B,KAAK3F,MAC3BuH,GACF1E,EAAMoG,cAAc1B,EAAO2B,KAG/BzK,SACE,MAAMoE,MAAEA,EAAF0E,OAASA,EAATY,SAAiBA,GAAaxC,KAAK3F,MACnCmJ,EAAS5B,EACX/D,OAAA0F,GAAA,EAAA1F,CAAY,CACV4F,SAAUC,OAAO9B,EAAO2B,IAAIE,UAC5BE,UAAWD,OAAO9B,EAAO2B,IAAII,kBAE/BC,EACJ,OACErK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAASC,MAAOA,EAAOzC,OAAQ,IAAMlB,EAAAC,EAAAC,cAACoK,GAAA,OAAD,CAAQC,SAAUN,OAExD5B,GACCA,EAAOoB,eACLzJ,EAAAC,EAAAC,cAAC0J,GAAD,KACE5J,EAAAC,EAAAC,cAACsK,GAAA,EAAD,KACExK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEG,QAAS2I,EACT5I,cAAY,iCAEX6B,EAAA,EAAIC,EAAA,iBAAkBC,uBAKhCiG,IACEA,EAAOoB,eACNzJ,EAAAC,EAAAC,cAAC0J,GAAD,KACE5J,EAAAC,EAAAC,cAACsK,GAAA,EAAD,KACExK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACES,UAAU,EACVP,cAAY,iCAEX6B,EAAA,EAAIC,EAAA,iBAAkBwH,0BC/CnC,MAAOc,WAAyBnL,EAAA,UAAtCC,kCAkCEkH,KAAAiE,YAAenH,KACb,MAAMmB,SAAEA,GAAa+B,KAAK3F,MAAM6J,MAAMC,OACtC,OAAIrH,EAAKU,SAAS4G,QAEd7K,EAAAC,EAAAC,cAAC4K,GAAA,EAAD,CACErG,UAAW,CAAEsG,QAASxH,EAAKU,SAAS8G,SACpCpG,eAAgBD,EAChBxD,OAAQ,EAAG8H,eACT,MAAMX,EACHW,GAAYA,EAASgC,KAAKC,GAAA,EAAGC,OAAO,KAAMxG,KAAe,KAC5D,OACE1E,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACG8D,KAAK0E,aAAa9C,GAClBA,EACG5B,KAAK2E,UAAU/C,EAAQ9E,GACvBkD,KAAK4E,WAAWrC,EAAUzF,OAQxCvD,EAAAC,EAAAC,cAAC4K,GAAA,EAAD,CACErG,UAAW,CAAEC,SAAUnB,EAAKU,SAASS,UACrCC,eAAe,EACfzD,OAAQ,EAAGmH,WAAYT,aACrB5H,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACG8D,KAAK0E,aAAa9C,GAClB5B,KAAK2E,UAAU/C,EAAQ9E,QA9DlChE,eAAemF,EAAcnB,GAC3BA,EAAKpC,MAAMmK,kBAAkB5G,EAAU,IACrC+B,KAAK3F,MAAMyB,QAAQuB,KAAK,WAG5BvE,aAAa8I,GACX,OACErI,EAAAC,EAAAC,cAACR,EAAD,CACEC,KAAM0I,EAASA,EAAOgB,KAAOnH,EAAA,EAAIC,EAAA,iBACjCvC,WAAYsC,EAAA,EAAIC,EAAA,QAChBrC,cAAe,IAAM2G,KAAK3F,MAAMyB,QAAQC,WAI9CjD,UAAU8I,EAAuC9E,GAC/C,OACEvD,EAAAC,EAAAC,cAAC2J,GAAD,CACElG,MAAOJ,EAAKK,IACZyE,OAAQA,EACRY,SAAU,IAAMZ,GAAU5B,KAAK8E,eAAelD,EAAOrF,GAAIO,KAI/DhE,WAAWyJ,EAAoCzF,GAC7C,OACEvD,EAAAC,EAAAC,cAAC6I,GAAD,CACEC,SAAUA,EACVE,UAAW,EAAGlG,QAASyD,KAAK3F,MAAMyB,QAAQuB,gBAAgBd,KAC1DiG,SAAU,EAAGjG,QAASyD,KAAK8E,eAAevI,EAAIO,GAC9C4F,WAAYnG,GAAMO,EAAKpC,MAAMqK,iBAAiBxI,KAuCpDzD,SACE,OAAOS,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAUpC,OAAQuF,KAAKiE,+CCzFlC,MAAMe,GAAcxD,GAAA;;;;;;;;;;;EAaPyD,GAAcpH,OAAA2D,GAAA,EAAA3D,CAGzBmH,ICNIE,GAAuBrH,OAAAuE,GAAA,EAAAvE,CAAO,OAAMqB,WAAA,CAAAC,YAAA;;;;;;;EAS7BgG,GAAuC9K,GAClDd,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACErC,SAAS,EACTC,OAAQ,EAAG+C,eACT,MAAM4H,EA0DN,WACJ,MACMC,EADQ,IAAIC,GAAA9L,EAAST,OAAOwM,UAAUC,WAC3BC,QACjB,GAAgB,QAAZJ,EAAGzC,KACL,OAAOrH,EAAA,EAAmBmK,IACrB,GAAgB,YAAZL,EAAGzC,KACZ,OAAOrH,EAAA,EAAmBoK,QAE5B,OAAO,KAlEcC,GACjB,IAAKpI,EAASC,SAAwB,OAAb2H,EACvB,OAAO,KAET,MAAMS,EAASrI,EAASsI,+BACxB,IAAKD,EAAOE,gBACV,OAAO,KAGT,OACExM,EAAAC,EAAAC,cAACwL,GAAD,CACEjH,UAAW,CACTC,SAAU4H,EAAO5H,SACjBmH,YAEF3K,OAAQ,EAAGuL,SACFA,EACLzM,EAAAC,EAAAC,cAACyL,GAAD,KACE3L,EAAAC,EAAAC,cAAA,OAAKE,UAVU,+CAWbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACbJ,EAAAC,EAAAC,cAAA,KACEE,UAAU,oBACVE,QAASgM,EAAOI,cAFlB,QAMA1M,EAAAC,EAAAC,cAAA,QACEE,UAAU,mBACVuM,MAAO,CAAEC,uBAAwBH,EAAII,WAEvC7M,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBAAqBqM,EAAIK,OACxC9M,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BACbJ,EAAAC,EAAAC,cAAC6C,EAAA,MAAD,CAAAC,GAAA,WAGJhD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACbJ,EAAAC,EAAAC,cAAA,KACE6M,KAAMN,EAAIO,IACV1M,QAASgM,EAAOW,gBAChB7M,UAAU,sBAEVJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,2BACdJ,EAAAC,EAAAC,cAAC6C,EAAA,MAAD,CAAAC,GAAA,mBAOV,uEC/DT,MAAMkK,GAAsC,MACjDlN,EAAAC,EAAAC,cAACiN,EAAA,EAAD,CAAK/M,UAAU,6BACbJ,EAAAC,EAAAC,cAACkN,GAAA,EAAD,KACEpN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbJ,EAAAC,EAAAC,cAACmN,GAAA,EAAD,CACEnM,OAAQoM,GACNtN,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACE3C,EAAAC,EAAAC,cAACqN,GAAA,EAAD,CAAiBpM,MAAOmM,EAAOnM,QAC/BnB,EAAAC,EAAAC,cAACsN,GAAA,EAAD,CAAmBnF,OAAQiF,EAAO1I,gBAClC5E,EAAAC,EAAAC,cAACuN,GAAA,EAAD,CAAkBC,OAAQJ,UCIzBK,EAAA,QAdG,KAChB3N,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACE3C,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOwI,KAAK,IAAIC,UAAWjC,KAC3B5L,EAAAC,EAAAC,cAACiN,EAAA,EAAD,CAAWW,OAAO,GAChB9N,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAO2I,OAAO,EAAMH,KAAK,IAAIC,UAAW/I,IACxC9E,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOwI,KAAK,qBAAqBC,UAAWpD,KAC5CzK,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOwI,KAAK,YAAYC,UAAWxK,IACnCrD,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOwI,KAAK,SAASC,UAAWrF,KAChCxI,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOwI,KAAK,WAAWC,UAAWvL,IAClCtC,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAOwI,KAAK,UAAUC,UAAWX","file":"static/js/10.965ee601.chunk.js","sourcesContent":["import { PureComponent } from 'react'\n\ninterface IProps {}\n\nexport class ScrollToTop extends PureComponent<IProps> {\n  componentDidMount() {\n    window.scrollTo(0, 0)\n  }\n\n  render() {\n    return null\n  }\n}\n","import './MobileHeader.css'\n\nimport React from 'react'\n\nimport { MobileHeaderButton } from 'common/Buttons'\n\ninterface IProps {\n  text: string\n  buttonText: string\n  buttonRight?: boolean\n  onButtonClick(): void\n}\n\nconst MobileHeader: React.SFC<IProps> = ({\n  text,\n  buttonText,\n  buttonRight = false,\n  onButtonClick,\n}) => {\n  const leftButton =\n    buttonRight === false ? (\n      <MobileHeaderButton\n        className=\"mobile__header__button\"\n        data-testid=\"MobileHeaderButton__Left\"\n        // size=\"sm\"\n        onClick={onButtonClick}\n      >\n        {buttonText}\n      </MobileHeaderButton>\n    ) : null\n  const rightButton =\n    buttonRight === true ? (\n      <MobileHeaderButton\n        className=\"mobile__header__button\"\n        data-testid=\"MobileHeaderButton__Right\"\n        // size=\"sm\"\n        onClick={onButtonClick}\n        isConfirm={true}\n      >\n        {buttonText}\n      </MobileHeaderButton>\n    ) : null\n  return (\n    <div className=\"mobile__header\">\n      {leftButton}\n      <div className=\"mobile__header__text\">{text}</div>\n      {rightButton}\n    </div>\n  )\n}\n\nexport default MobileHeader\n","import React from 'react'\nimport { Field } from 'react-form'\n\nimport { SelectButtonThemed } from 'common/Buttons'\nimport SubmitSpinner from 'common/SubmitSpinner'\nimport { WithOrder } from 'common/WithOrder'\nimport { PaymentGateEnum } from 'graph/types'\n\ninterface IProps {\n  method: PaymentGateEnum\n  disabled?: boolean\n  onClick(): void\n}\n\nexport const MobilePaymentButton: React.SFC<IProps> = ({\n  method,\n  disabled,\n  onClick,\n  children,\n  ...props\n}) => (\n  <WithOrder\n    observe={true}\n    render={order => (\n      <Field\n        field=\"payment\"\n        render={fieldApi => (\n          <SelectButtonThemed\n            selected={fieldApi.value === method}\n            disabled={disabled || order.isSubmitting}\n            onClick={() => {\n              fieldApi.setValue(method)\n              onClick()\n            }}\n            {...props}\n          >\n            {order.isSubmitting && fieldApi.value === method ? (\n              <SubmitSpinner />\n            ) : (\n              children\n            )}\n          </SelectButtonThemed>\n        )}\n      />\n    )}\n  />\n)\n","import './MobilePaymentMethod.css'\n\nimport { i18n } from 'i18n'\nimport React from 'react'\n\nimport { PaymentGateEnum } from 'graph/types'\nimport { TOrderModel } from 'models/OrderModel'\n\nimport { MobilePaymentButton } from './MobilePaymentButton'\n\ninterface IProps {\n  orderModel: TOrderModel\n  onConfirm(): void\n}\n\nexport const MobilePaymentMethod: React.SFC<IProps> = ({\n  orderModel,\n  onConfirm,\n}) => (\n  <div className=\"mobile__confirm__payment__method\">\n    <MobilePaymentButton\n      method={PaymentGateEnum.GOPAY}\n      onClick={onConfirm}\n      data-testid=\"mobilePaymentMethodGoPay\"\n    >\n      <span className=\"flaticon-credit-card\">\n        {i18n.t`Pay by card`.toLocaleUpperCase()}\n      </span>\n    </MobilePaymentButton>\n    <MobilePaymentButton\n      method={PaymentGateEnum.CASH}\n      onClick={onConfirm}\n      data-testid=\"mobilePaymentMethodCash\"\n    >\n      <span className=\"flaticon-money\">\n        {i18n.t`Pay by cash`.toLocaleUpperCase()}\n      </span>\n    </MobilePaymentButton>\n  </div>\n)\n","import './MobileConfirmView.css'\n\nimport { Trans } from '@lingui/react'\nimport { i18n } from 'i18n'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { OrderErrorModal } from 'segments/orderForm/OrderErrorModal'\nimport { OrderGoPayModal } from 'segments/orderForm/OrderGoPayModal'\n\nimport { ScrollToTop } from '../../common/ScrollToTop'\nimport { WithOrder } from '../../common/WithOrder'\nimport { OrderAgreements } from '../orderForm/OrderAgreements'\nimport { OrderFormInputs } from '../orderForm/OrderFormInputs'\nimport { OrderFormSetup } from '../orderForm/OrderFormSetup'\nimport { OrderFormStorageNotice } from '../orderForm/OrderFormStorageNotice'\nimport MobileHeader from './MobileHeader'\nimport { MobilePaymentMethod } from './MobilePaymentMethod'\n\ninterface IProps extends RouteComponentProps<{}> {}\n\nexport const MobileConfirmView: React.SFC<IProps> = ({ history }) => (\n  <div className=\"mobile__confirm__view\">\n    <MobileHeader\n      text={i18n.t`Order confirmation`}\n      buttonText={i18n.t`Cancel`}\n      onButtonClick={() => history.goBack()}\n    />\n    <WithOrder\n      render={order => (\n        <OrderFormSetup\n          order={order}\n          render={form => (\n            <>\n              <ScrollToTop />\n              <OrderFormStorageNotice />\n              <OrderGoPayModal order={order} />\n              <OrderErrorModal />\n              <div className=\"mobile__confirm__view__form\">\n                <h3>\n                  <Trans>Where and to whom we deliver?</Trans>\n                </h3>\n                <OrderFormInputs />\n                <OrderAgreements />\n              </div>\n              <div className=\"mobile__confirm__view__submit\">\n                <h4>\n                  <Trans>Place order</Trans>\n                </h4>\n                <MobilePaymentMethod\n                  orderModel={order}\n                  onConfirm={form.submitForm}\n                />\n              </div>\n            </>\n          )}\n        />\n      )}\n    />\n  </div>\n)\n","import './MobileMap.css'\n\nimport { History } from 'history'\nimport { i18n } from 'i18n'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { BaseMap } from 'common/BaseMap'\nimport { WithRoot } from 'common/WithRoot'\nimport { DeliveryMap } from 'segments/map/DeliveryMap'\n\nimport MobileHeader from './MobileHeader'\n\nconst LocationDiscovery = () => <i>{i18n.t`Finding location...`}</i>\n\ninterface IProps extends RouteComponentProps<{}> {\n  history: History\n}\n\nexport const MobileDeliveryView: React.SFC<IProps> = ({ history }) => (\n  <div>\n    <MobileHeader\n      text={i18n.t`Enter the address`}\n      buttonText={i18n.t`Back`}\n      onButtonClick={() => history.goBack()}\n    />\n    <div className=\"mobile__map__view\">\n      <WithRoot\n        render={root =>\n          root.location.hasLocation ? (\n            <BaseMap\n              model={root.map}\n              render={() => (\n                <DeliveryMap\n                  onConfirm={() => history.push('/order')}\n                  rootModel={root}\n                />\n              )}\n            />\n          ) : (\n            <LocationDiscovery />\n          )\n        }\n      />\n    </div>\n  </div>\n)\n","import React from 'react'\n\nimport { TBusinessModel } from '../models/BusinessModel'\nimport { WithRoot } from './WithRoot'\n\ninterface IProps {\n  render(model: TBusinessModel): ReactNode | ReactNode[]\n  observe?: boolean\n}\n\nexport const WithBusiness: React.SFC<IProps> = ({ render, observe }) => (\n  <WithRoot\n    observe={observe}\n    render={({ business }) => (business.isValid ? render(business) : null)}\n  />\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from 'graph/buildQuery'\nimport { GMobileShopIntro } from 'graph/types'\n\nexport const MobileShopIntroQuery = gql`\n  query GMobileShopIntro($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      headerText\n    }\n  }\n`\n\nexport const QueryMobileShopIntro = buildQuery<\n  GMobileShopIntro.Query,\n  GMobileShopIntro.Variables\n>(MobileShopIntroQuery)\n","import React from 'react'\n\nimport { WithBusiness } from '../../common/WithBusiness'\nimport { QueryMobileShopIntro } from './MobileShopIntro.graphql'\n\ninterface IProps {}\n\nexport const MobileShopIntro: React.SFC<IProps> = props => (\n  <WithBusiness\n    observe={true}\n    render={business => (\n      <QueryMobileShopIntro\n        variables={{ branchId: business.branchId! }}\n        renderLoading={() => null}\n        render={({ companyBranch: { headerText } }) => (\n          <div data-testid=\"MobileShopIntro\">{headerText}</div>\n        )}\n      />\n    )}\n  />\n)\n","import './MobileIntroView.css'\n\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport BackgroundThemed from 'common/BackgroundThemed'\nimport { OrderMethod } from 'segments/destination/OrderMethod'\nimport { ShopHeaderIcons } from 'segments/shop/ShopHeaderIcons'\n\nimport { MobileShopIntro } from './MobileShopIntro'\n\nexport const MobileIntroView: React.SFC = () => (\n  <div className=\"mobile__intro\">\n    <BackgroundThemed\n      className=\"mobile__intro__logo\"\n      data-testid=\"MobileIntroView__BackgroundThemed\"\n      imageName=\"storeLogoMobile\"\n      size=\"cover\"\n      fixed={false}\n    >\n      <ShopHeaderIcons />\n    </BackgroundThemed>\n    <div className=\"mobile__intro__info\">\n      <MobileShopIntro />\n      <Route>\n        {({ history }) => (\n          <OrderMethod\n            onChange={order => {\n              if (order.usingDeliveryOrderMethod) {\n                history.push('/delivery')\n              } else if (order.usingPickupOrderMethod) {\n                history.push('/pickup')\n              }\n            }}\n          />\n        )}\n      </Route>\n    </div>\n  </div>\n)\n","import './MobileCartSummary.css'\n\nimport { Trans } from '@lingui/react'\nimport { i18n } from 'i18n'\nimport React from 'react'\nimport { styled } from 'styled'\n\ninterface IProps {\n  count: number\n  price: string\n  isLoading: boolean\n  onClick(): void\n}\n\nconst MobileCartSummaryCountThemed = styled('div')`\n  background-color: ${({ theme }) => theme.secondary};\n`\n\nconst MobileCartSummaryPriceThemed = styled('span')`\n  color: ${({ theme }) => theme.primary};\n`\n\nexport const MobileCartSummary: React.SFC<IProps> = ({\n  count,\n  price,\n  isLoading,\n  onClick,\n}) => {\n  const showContent = count > 0 || isLoading === true\n  return (\n    <div\n      className=\"mobile__cart__summary\"\n      data-testid=\"mobileCartSummary\"\n      onClick={onClick}\n    >\n      {showContent ? (\n        <div className=\"mobile__cart__summary__toggle\">\n          <span className=\"flaticon-chevron-up\" />\n        </div>\n      ) : null}\n\n      <div className=\"mobile__cart__summary__info\">\n        <span className=\"flaticon-cart\" />\n        {showContent ? (\n          <MobileCartSummaryCountThemed\n            className=\"mobile__cart__summary__count\"\n            data-testid=\"mobileCartSummary__Count\"\n          >\n            {count || '?'}\n          </MobileCartSummaryCountThemed>\n        ) : null}\n        {!showContent ? (\n          <span data-testid=\"cartIsEmpty\">{i18n.t`Cart is empty`}</span>\n        ) : (\n          <div\n            className=\"mobile__cart__summary__cart__with__price\"\n            data-testid=\"mobileCartSummary__Price\"\n          >\n            <Trans>\n              In the cart you have goods for\n              <MobileCartSummaryPriceThemed className=\"mobile__cart__summary__price\">\n                {price}\n              </MobileCartSummaryPriceThemed>\n            </Trans>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import './MobileCart.css'\nimport './MobileSlidingCart.css'\n\nimport classNames from 'classnames'\nimport React, { Component } from 'react'\nimport { Redirect } from 'react-router'\n\nimport { CartView } from '../cart/CartView'\nimport { OrderSubmitLine } from '../orderForm/OrderSubmitLine'\nimport { QueryMobileCart } from './MobileCart.graphql'\nimport { MobileCartSummary } from './MobileCartSummary'\n\ninterface IProps {\n  count: number\n  price: string\n  isLoading: boolean\n}\n\ninterface IState {\n  isOpen: boolean\n  goConfirm: boolean\n}\n\nclass MobileCartController extends Component<IProps, IState> {\n  state = { isOpen: false, goConfirm: false }\n\n  setOpen = (isOpen: boolean) => {\n    this.setState({ isOpen })\n  }\n\n  static getDerivedStateFromProps({ count }: IProps, { isOpen }: IState) {\n    if (count === 0 && isOpen === true) {\n      return {\n        isOpen: false,\n      }\n    }\n    return null\n  }\n\n  // shouldComponentUpdate({ isLoading }: IProps) {\n  //   return !isLoading\n  // }\n\n  get isEmpty() {\n    return this.props.count === 0\n  }\n\n  onToggle = () => {\n    if (this.isEmpty) {\n      this.setOpen(false)\n    } else {\n      this.setState(prev => ({ isOpen: !prev.isOpen }))\n    }\n  }\n\n  onSubmit = () => {\n    this.setState({ goConfirm: true })\n  }\n\n  render() {\n    const { count, price, isLoading } = this.props\n    const { isOpen, goConfirm } = this.state\n\n    if (goConfirm) {\n      return <Redirect to=\"/confirm\" push={true} />\n    }\n\n    return (\n      <div\n        className={classNames('mobile__sliding__cart', {\n          mobile__sliding__cart__open: isOpen,\n        })}\n      >\n        <div className=\"mobile__cart__view\">\n          <MobileCartSummary\n            count={count}\n            price={price}\n            isLoading={isLoading}\n            onClick={this.onToggle}\n          />\n          {isOpen ? (\n            <>\n              <CartView />\n              <OrderSubmitLine\n                canSubmit={!this.isEmpty}\n                onClick={this.onSubmit}\n              />\n            </>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport const MobileCart: React.SFC<{ orderId: ID }> = ({ orderId }) => (\n  <QueryMobileCart\n    variables={{ orderId }}\n    renderLoading={false}\n    render={({ order }, { loading }) => (\n      <MobileCartController\n        count={order ? order.countWares : 0}\n        price={order ? order.totalSum.formattedValue : '???'}\n        isLoading={loading || !order}\n      />\n    )}\n  />\n)\n","import { buildQuery, gql } from 'graph'\n\nimport { CompanyBranchStatusFragment } from 'graph/fragments.graphql'\nimport { GMobileShopStatus } from 'graph/types'\n\nexport const MobileShopStatusQuery = gql`\n  query GMobileShopStatus($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      ...GCompanyBranchStatus\n    }\n  }\n  ${CompanyBranchStatusFragment}\n`\n\nexport const QueryMobileShopStatus = buildQuery<\n  GMobileShopStatus.Query,\n  GMobileShopStatus.Variables\n>(MobileShopStatusQuery)\n","import React from 'react'\n\nimport { ShopClosingTimeModal } from 'segments/shop/ShopClosingTimeModal'\n\nimport { QueryMobileShopStatus } from './MobileClosingTimeModal.graphql'\n\ninterface IProps {\n  branchId: ID\n}\n\nexport const MobileClosingTimeModal: React.SFC<IProps> = ({ branchId }) => (\n  <QueryMobileShopStatus\n    variables={{ branchId }}\n    render={({ branch }) => <ShopClosingTimeModal status={branch} />}\n  />\n)\n","import './MobileOrderView.css'\n\nimport React from 'react'\n\nimport { WithOrder } from '../../common/WithOrder'\nimport { AddToCartModal } from '../cart/AddToCartModal'\nimport { FoodMenuView } from '../foodMenu/FoodMenuView'\nimport { MobileCart } from './MobileCart'\nimport { MobileClosingTimeModal } from './MobileClosingTimeModal'\n\nexport const MobileOrderView = props => (\n  <WithOrder\n    redirect={true}\n    render={order => (\n      <div className=\"mobile__order__view\">\n        <FoodMenuView />\n        <MobileCart orderId={order.orderId!} />\n        <AddToCartModal order={order} />\n        <MobileClosingTimeModal branchId={order.branchId!} />\n      </div>\n    )}\n  />\n)\n","import './MobilePickupList.css'\n\nimport { i18n } from 'i18n'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { PrimaryButton, SecondaryButton } from 'common/Buttons'\nimport { ShopAddress } from 'common/ShopAddress'\nimport { GPickupBranch } from 'graph/types'\n\nimport { ShopStatusDisplay } from '../shop/ShopStatusDisplay'\n\ninterface IProps {\n  branches: GPickupBranch.Fragment[]\n  onSelect(site: GPickupBranch.Fragment): void\n  onShowMap(site: GPickupBranch.Fragment): void\n  onPrefetch(branchId: ID): void\n}\n\nconst StatusDisplayPosition = styled.div``\n\nconst MobilePickupList: React.SFC<IProps> = ({\n  branches,\n  onSelect,\n  onShowMap,\n  onPrefetch,\n}) => {\n  const renderBranch = (branch: GPickupBranch.Fragment) => {\n    return (\n      <div\n        className=\"mobile__pickup__list__item\"\n        data-testid=\"MobilePickupList\"\n        key={branch.id}\n      >\n        <div className=\"mobile__pickup__list__header\">{branch.name}</div>\n        <ShopAddress address={branch.address} />\n        <StatusDisplayPosition>\n          <ShopStatusDisplay status={branch} />\n        </StatusDisplayPosition>\n\n        <div className=\"mobile__pickup__list__buttons\">\n          <SecondaryButton onClick={() => onShowMap(branch)}>\n            <span className=\"flaticon-signs\">\n              {i18n.t`Show on map`.toLocaleUpperCase()}\n            </span>\n          </SecondaryButton>\n          {branch.pickupEnabled ? (\n            <PrimaryButton\n              onClick={() => onSelect(branch)}\n              onMouseEnter={() => onPrefetch(branch.id)}\n            >\n              <span className=\"flaticon-mark\">\n                {i18n.t`Choose`.toLocaleUpperCase()}\n              </span>\n            </PrimaryButton>\n          ) : (\n            <PrimaryButton disabled={true}>\n              <span className=\"flaticon-mark\">\n                {i18n.t`Delivery only`.toLocaleLowerCase()}\n              </span>\n            </PrimaryButton>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"mobile__pickup__list\">\n      {branches && branches.map(renderBranch)}\n    </div>\n  )\n}\n\nexport default MobilePickupList\n","import { i18n } from 'i18n'\nimport React, { PureComponent } from 'react'\nimport { Marker } from 'react-google-maps'\nimport styled from 'styled-components'\n\nimport { BaseMap } from 'common/BaseMap'\nimport { PrimaryButton } from 'common/Buttons'\nimport ButtonStripe from 'common/ButtonStripe'\nimport { GPickupBranch } from 'graph/types'\nimport { gpsToLatLng } from 'helpers/gps'\nimport { TMapModel } from 'models/MapModel'\n\ninterface IProps {\n  model: TMapModel\n  branch: Maybe<GPickupBranch.Fragment>\n  onSelect(): void\n}\n\nconst ButtonStripeContainerStyled = styled.div`\n  margin-top: 2rem;\n  z-index: 10;\n`\n\nclass MobilePickupMap extends PureComponent<IProps> {\n  componentDidMount() {\n    this.panToBranch()\n  }\n  componentDidUpdate() {\n    this.panToBranch()\n  }\n  panToBranch() {\n    const { model, branch } = this.props\n    if (branch) {\n      model.panToLocation(branch.gps)\n    }\n  }\n  render() {\n    const { model, branch, onSelect } = this.props\n    const latlng = branch\n      ? gpsToLatLng({\n          latitude: Number(branch.gps.latitude),\n          longitude: Number(branch.gps.longitude),\n        })\n      : undefined\n    return (\n      <div>\n        <div className=\"mobile__map__view\">\n          <BaseMap model={model} render={() => <Marker position={latlng} />} />\n        </div>\n        {branch &&\n          branch.pickupEnabled && (\n            <ButtonStripeContainerStyled>\n              <ButtonStripe>\n                <PrimaryButton\n                  onClick={onSelect}\n                  data-testid=\"mobilePickupMap__SubmitButton\"\n                >\n                  {i18n.t`Choose branch`.toLocaleUpperCase()}\n                </PrimaryButton>\n              </ButtonStripe>\n            </ButtonStripeContainerStyled>\n          )}\n        {branch &&\n          !branch.pickupEnabled && (\n            <ButtonStripeContainerStyled>\n              <ButtonStripe>\n                <PrimaryButton\n                  disabled={true}\n                  data-testid=\"mobilePickupMap__SubmitButton\"\n                >\n                  {i18n.t`Delivery only`.toLocaleLowerCase()}\n                </PrimaryButton>\n              </ButtonStripe>\n            </ButtonStripeContainerStyled>\n          )}\n      </div>\n    )\n  }\n}\n\nexport default MobilePickupMap\n","import { i18n } from 'i18n'\nimport React, { Component } from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { WithRoot } from 'common/WithRoot'\nimport { RM } from 'helpers/ramda'\nimport { TRootModel } from 'models/RootModel'\n\nimport { GPickupBranch } from '../../graph/types'\nimport {\n  QueryPickupMapBranch,\n  QueryPickupMapBrand,\n} from '../map/PickupMap.graphql'\nimport MobileHeader from './MobileHeader'\nimport MobilePickupList from './MobilePickupList'\nimport MobilePickupMap from './MobilePickupMap'\n\ninterface IRouteParams {\n  branchId?: string\n}\n\ninterface IProps extends RouteComponentProps<IRouteParams> {}\n\nexport class MobilePickupView extends Component<IProps> {\n  onSelectBranch(branchId: ID, root: TRootModel) {\n    root.order.createPickupOrder(branchId, () =>\n      this.props.history.push('/order'),\n    )\n  }\n  renderHeader(branch: Maybe<GPickupBranch.Fragment>) {\n    return (\n      <MobileHeader\n        text={branch ? branch.name : i18n.t`Choose branch`}\n        buttonText={i18n.t`Back`}\n        onButtonClick={() => this.props.history.goBack()}\n      />\n    )\n  }\n  renderMap(branch: Maybe<GPickupBranch.Fragment>, root: TRootModel) {\n    return (\n      <MobilePickupMap\n        model={root.map}\n        branch={branch}\n        onSelect={() => branch && this.onSelectBranch(branch.id, root)}\n      />\n    )\n  }\n  renderList(branches: GPickupBranch.Fragment[], root: TRootModel) {\n    return (\n      <MobilePickupList\n        branches={branches}\n        onShowMap={({ id }) => this.props.history.push(`/pickup/${id}`)}\n        onSelect={({ id }) => this.onSelectBranch(id, root)}\n        onPrefetch={id => root.order.prefetchFoodMenu(id)}\n      />\n    )\n  }\n  renderQuery = (root: TRootModel) => {\n    const { branchId } = this.props.match.params\n    if (root.business.isBrand) {\n      return (\n        <QueryPickupMapBrand\n          variables={{ brandId: root.business.brandId! }}\n          renderLoading={!branchId}\n          render={({ branches }) => {\n            const branch =\n              (branches && branches.find(RM.propEq('id', branchId))) || null\n            return (\n              <>\n                {this.renderHeader(branch)}\n                {branch\n                  ? this.renderMap(branch, root)\n                  : this.renderList(branches, root)}\n              </>\n            )\n          }}\n        />\n      )\n    }\n    return (\n      <QueryPickupMapBranch\n        variables={{ branchId: root.business.branchId! }}\n        renderLoading={false}\n        render={({ branch }, { loading }) => (\n          <>\n            {this.renderHeader(branch)}\n            {this.renderMap(branch, root)}\n          </>\n        )}\n      />\n    )\n  }\n  render() {\n    return <WithRoot render={this.renderQuery} />\n  }\n}\n","import { buildQuery, gql } from 'graph'\n\nimport { GSmartBanner } from 'graph/types'\n\nconst BannerQuery = gql`\n  query GSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport const QueryBanner = buildQuery<\n  GSmartBanner.Query,\n  GSmartBanner.Variables\n>(BannerQuery)\n","import './MobileSmartBanner.css'\n\nimport { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\nimport UAParser from 'ua-parser-js'\n\nimport { WithRoot } from 'common/WithRoot'\nimport { MobilePlatformEnum } from 'graph/types'\n\nimport { QueryBanner } from './MobileSmartBanner.graphql'\n\ninterface IProps {}\n\nconst SmartBannerContainer = styled('div')`\n  border-bottom: 1px solid #8f8f8f;\n  height: 81px;\n  position: absolute;\n  z-index: 1;\n  top: 3rem;\n  width: 100%;\n`\n\nexport const MobileSmartBanner: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={({ business }) => {\n      const platform = getPlatformType()\n      if (!business.isValid || platform === null) {\n        return null\n      }\n      const banner = business.ensureBannerForCurrentBranch()\n      if (!banner.shouldBeVisible) {\n        return null\n      }\n      const wrapperClassName = `smartbanner smartbanner-ios smartbanner-top`\n      return (\n        <QueryBanner\n          variables={{\n            branchId: banner.branchId,\n            platform,\n          }}\n          render={({ app }) => {\n            return app ? (\n              <SmartBannerContainer>\n                <div className={wrapperClassName}>\n                  <div className=\"smartbanner-container\">\n                    <a\n                      className=\"smartbanner-close\"\n                      onClick={banner.setClosedNow}\n                    >\n                      &times;\n                    </a>\n                    <span\n                      className=\"smartbanner-icon\"\n                      style={{ backgroundImage: `url(${app.icon})` }}\n                    />\n                    <div className=\"smartbanner-info\">\n                      <div className=\"smartbanner-title\">{app.title}</div>\n                      <div className=\"smartbanner-description\">\n                        <Trans>Free</Trans>\n                      </div>\n                    </div>\n                    <div className=\"smartbanner-wrapper\">\n                      <a\n                        href={app.url}\n                        onClick={banner.setInstalledNow}\n                        className=\"smartbanner-button\"\n                      >\n                        <span className=\"smartbanner-button-text\">\n                          <Trans>Show app</Trans>\n                        </span>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </SmartBannerContainer>\n            ) : null\n          }}\n        />\n      )\n    }}\n  />\n)\n\nexport function getPlatformType(): Maybe<MobilePlatformEnum> {\n  const agent = new UAParser(window.navigator.userAgent)\n  const os = agent.getOS()\n  if (os.name === 'iOS') {\n    return MobilePlatformEnum.IOS\n  } else if (os.name === 'Android') {\n    return MobilePlatformEnum.ANDROID\n  }\n  return null\n}\n","import '../finish/FinishView.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from 'common/ColStyle'\n\nimport { FinishViewFooter } from '../finish/FinishViewFooter'\nimport { FinishViewLoader } from '../finish/FinishViewLoader'\nimport { FinishViewOrder } from '../finish/FinishViewOrder'\nimport { FinishViewSupport } from '../finish/FinishViewSupport'\n\ninterface IProps {}\n\nexport const MobileFinishView: React.SFC<IProps> = ({}) => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyle>\n      <div className=\"finish__view__mobile\">\n        <FinishViewLoader\n          render={result => (\n            <>\n              <FinishViewOrder order={result.order} />\n              <FinishViewSupport branch={result.companyBranch} />\n              <FinishViewFooter finish={result} />\n            </>\n          )}\n        />\n      </div>\n    </ColStyle>\n  </Row>\n)\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { Container } from 'reactstrap'\n\nimport { MobileConfirmView } from 'segments/mobile/MobileConfirmView'\nimport { MobileDeliveryView } from 'segments/mobile/MobileDeliveryView'\nimport { MobileIntroView } from 'segments/mobile/MobileIntroView'\nimport { MobileOrderView } from 'segments/mobile/MobileOrderView'\nimport { MobilePickupView } from 'segments/mobile/MobilePickupView'\nimport { MobileSmartBanner } from 'segments/mobile/MobileSmartBanner'\n\nimport { MobileFinishView } from '../segments/mobile/MobileFinishView'\n\nconst MobileApp = () => (\n  <>\n    <Route path=\"/\" component={MobileSmartBanner} />\n    <Container fluid={true}>\n      <Route exact={true} path=\"/\" component={MobileIntroView} />\n      <Route path=\"/pickup/:branchId?\" component={MobilePickupView} />\n      <Route path=\"/delivery\" component={MobileDeliveryView} />\n      <Route path=\"/order\" component={MobileOrderView} />\n      <Route path=\"/confirm\" component={MobileConfirmView} />\n      <Route path=\"/finish\" component={MobileFinishView} />\n    </Container>\n  </>\n)\n\nexport default MobileApp\n"],"sourceRoot":""}