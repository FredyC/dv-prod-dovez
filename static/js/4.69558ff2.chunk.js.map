{"version":3,"sources":["app/MobileApp.tsx","segments/mobile/MobileHeader.tsx","segments/mobile/MobileConfirmView.tsx","common/ScrollToTop.tsx","segments/mobile/MobilePaymentMethod.tsx","segments/mobile/MobilePaymentButton.tsx","segments/mobile/MobileDeliveryView.tsx","segments/mobile/MobileFinishView.tsx","segments/mobile/MobileIntroView.tsx","segments/mobile/MobileShopIntro.tsx","segments/mobile/MobileShopIntro.graphql.ts","segments/mobile/MobileOrderView.tsx","segments/mobile/MobileCart.tsx","segments/mobile/MobileCartSummary.tsx","segments/mobile/MobileClosingTimeModal.tsx","segments/mobile/MobileClosingTimeModal.graphql.ts","segments/mobile/MobilePickupView.tsx","segments/mobile/MobilePickupList.tsx","segments/mobile/MobilePickupMap.tsx","segments/mobile/MobileSmartBanner.tsx","segments/mobile/MobileSmartBanner.graphql.ts"],"names":["_react","__webpack_require__","_reactRouterDom","_reactstrap","_MobileConfirmView","_MobileDeliveryView","_MobileFinishView","_MobileIntroView","_MobileOrderView","_MobilePickupView","_MobileSmartBanner","default","createElement","Fragment","Route","path","component","MobileSmartBanner","Container","fluid","exact","MobileIntroView","MobilePickupView","MobileDeliveryView","MobileOrderView","MobileConfirmView","MobileFinishView","_Buttons","text","buttonText","buttonRight","onButtonClick","leftButton","MobileHeaderButton","className","data-testid","onClick","rightButton","isConfirm","_react2","_interopRequireDefault","_ScrollToTop","_WithOrder","_i18n","_OrderAgreements","_OrderErrorModal","_OrderFormInputs","_OrderFormSetup","_OrderFormStorageNotice","_OrderGoPayModal","_MobileHeader","_MobilePaymentMethod","history","i18n","_","goBack","WithOrder","render","order","OrderFormSetup","form","ScrollToTop","OrderFormStorageNotice","OrderGoPayModal","OrderErrorModal","Trans","id","OrderFormInputs","OrderAgreements","MobilePaymentMethod","orderModel","onConfirm","submitForm","PureComponent","[object Object]","window","scrollTo","_types","_MobilePaymentButton","MobilePaymentButton","method","PaymentGateEnum","Gopay","toLocaleUpperCase","Cash","_reactForm","_SubmitSpinner","_a","disabled","children","props","__rest","observe","Field","field","fieldApi","SelectButtonThemed","_extends","selected","value","isSubmitting","setValue","_BaseMap","_WithRoot","_DeliveryMap","LocationDiscovery","WithRoot","root","location","hasLocation","BaseMap","model","map","DeliveryMap","push","_ColStyle","_FinishViewFooter","_FinishViewLoader","_FinishViewOrder","_FinishViewSupport","Row","ColStyle","FinishViewLoader","result","FinishViewOrder","FinishViewSupport","branch","companyBranch","FinishViewFooter","finish","_BackgroundThemed","_OrderMethod","_ShopHeaderIcons","_MobileShopIntro","imageName","size","fixed","ShopHeaderIcons","MobileShopIntro","OrderMethod","onChange","usingDeliveryOrderMethod","usingPickupOrderMethod","_mobxReactLite","business","useRoot","useObserver","QueryMobileShopIntro","variables","branchId","renderLoading","headerText","_graphqlTag","_buildQuery","MobileShopIntroQuery","buildQuery","_AddToCartModal","_FoodMenuView","_MobileCart","_MobileClosingTimeModal","redirect","FoodMenuView","MobileCart","orderId","AddToCartModal","MobileClosingTimeModal","_classnames","_interopRequireWildcard","_reactRouter","_CartView","_OrderSubmitLine","_MobileCart2","_MobileCartSummary","MobileCartController","Component","this","state","isOpen","goConfirm","setOpen","setState","onToggle","isEmpty","prev","onSubmit","count","price","isLoading","Redirect","to","mobile__sliding__cart__open","MobileCartSummary","CartView","OrderSubmitLine","canSubmit","QueryMobileCart","loading","countWares","totalSum","formattedValue","_styledComponents","MobileCartSummaryCountThemed","div","withConfig","displayName","theme","secondary","MobileCartSummaryPriceThemed","span","primary","showContent","values","components","_ShopClosingTimeModal","QueryMobileShopStatus","ShopClosingTimeModal","status","_graph","_fragments","MobileShopStatusQuery","CompanyBranchStatusFragment","_ramda","_PickupMap","_MobilePickupList","_MobilePickupMap","renderQuery","match","params","isBrand","QueryPickupMapBrand","brandId","branches","find","RM","propEq","renderHeader","renderMap","renderList","QueryPickupMapBranch","createPickupOrder","name","onSelect","onSelectBranch","onShowMap","onPrefetch","prefetchFoodMenu","_ShopAddress","_ShopStatusDisplay","StatusDisplayPosition","key","ShopAddress","address","ShopStatusDisplay","SecondaryButton","pickupEnabled","PrimaryButton","onMouseEnter","toLocaleLowerCase","_reactGoogleMaps","_ButtonStripe","_gps","ButtonStripeContainerStyled","panToBranch","panToLocation","gps","latlng","gpsToLatLng","latitude","Number","longitude","undefined","Marker","position","_uaParserJs","_MobileSmartBanner2","SmartBannerContainer","getPlatformType","os","navigator","userAgent","getOS","MobilePlatformEnum","Ios","Android","platform","isValid","banner","ensureBannerForCurrentBranch","shouldBeVisible","QueryBanner","app","setClosedNow","style","backgroundImage","icon","title","href","url","setInstalledNow","BannerQuery"],"mappings":"4JAAA,MAAAA,KAAAC,EAAA,gCACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IAEAG,EAAAH,EAAA,KACAI,EAAAJ,EAAA,KACAK,EAAAL,EAAA,KACAM,EAAAN,EAAA,KACAO,EAAAP,EAAA,KACAQ,EAAAR,EAAA,KACAS,EAAAT,EAAA,WAEkB,IAChBD,EAAAW,QAAAC,cAAAZ,EAAAW,QAAAE,SAAA,KACEb,EAAAW,QAAAC,cAACV,EAAAY,MAAD,CAAOC,KAAK,IAAIC,UAAWN,EAAAO,oBAC3BjB,EAAAW,QAAAC,cAACT,EAAAe,UAAD,CAAWC,OAAO,GAChBnB,EAAAW,QAAAC,cAACV,EAAAY,MAAD,CAAOM,OAAO,EAAML,KAAK,IAAIC,UAAWT,EAAAc,kBACxCrB,EAAAW,QAAAC,cAACV,EAAAY,MAAD,CAAOC,KAAK,qBAAqBC,UAAWP,EAAAa,mBAC5CtB,EAAAW,QAAAC,cAACV,EAAAY,MAAD,CAAOC,KAAK,YAAYC,UAAWX,EAAAkB,qBACnCvB,EAAAW,QAAAC,cAACV,EAAAY,MAAD,CAAOC,KAAK,SAASC,UAAWR,EAAAgB,kBAChCxB,EAAAW,QAAAC,cAACV,EAAAY,MAAD,CAAOC,KAAK,WAAWC,UAAWZ,EAAAqB,oBAClCzB,EAAAW,QAAAC,cAACV,EAAAY,MAAD,CAAOC,KAAK,UAAUC,UAAWV,EAAAoB,qICrBvCzB,EAAA,KAEA,MAAAD,KAAAC,EAAA,gCAEA0B,EAAA1B,EAAA,WASwC,EACtC2B,OACAC,aACAC,eAAc,EACdC,oBAEA,MAAMC,GACY,IAAhBF,EACE9B,EAAAW,QAAAC,cAACe,EAAAM,mBAAD,CACEC,UAAU,yBACVC,cAAY,2BAEZC,QAASL,GAERF,GAED,KACAQ,GACY,IAAhBP,EACE9B,EAAAW,QAAAC,cAACe,EAAAM,mBAAD,CACEC,UAAU,yBACVC,cAAY,4BAEZC,QAASL,EACTO,WAAW,GAEVT,GAED,KACN,OACE7B,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,kBACZF,EACDhC,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,wBAAwBN,GACtCS,8HC9CPpC,EAAA,KAEA,IAAAD,EAAAC,EAAA,IACAsC,EAAAC,EAAAvC,EAAA,IAGAwC,EAAAxC,EAAA,KACAyC,EAAAzC,EAAA,KACA0C,EAAA1C,EAAA,IACA2C,EAAA3C,EAAA,KACA4C,EAAA5C,EAAA,KACA6C,EAAA7C,EAAA,KACA8C,EAAA9C,EAAA,KACA+C,EAAA/C,EAAA,KACAgD,EAAAhD,EAAA,KACAiD,EAAAV,EAAAvC,EAAA,MACAkD,EAAAlD,EAAA,4EAIoD,GAAGmD,aACrDb,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,yBACbK,EAAA5B,QAAAC,cAACsC,EAAAvC,QAAD,CACEiB,KAAMe,EAAAU,KAAAC,EAAA,sBACNzB,WAAYc,EAAAU,KAAAC,EAAA,UACZvB,cAAe,IAAMqB,EAAQG,WAE/BhB,EAAA5B,QAAAC,cAAC8B,EAAAc,UAAD,CACEC,OAAQC,GACNnB,EAAA5B,QAAAC,cAACmC,EAAAY,eAAD,CACED,MAAOA,EACPD,OAAQG,GACNrB,EAAA5B,QAAAC,cAAA2B,EAAA5B,QAAAE,SAAA,KACE0B,EAAA5B,QAAAC,cAAC6B,EAAAoB,YAAD,MACAtB,EAAA5B,QAAAC,cAACoC,EAAAc,uBAAD,MACAvB,EAAA5B,QAAAC,cAACqC,EAAAc,gBAAD,CAAiBL,MAAOA,IACxBnB,EAAA5B,QAAAC,cAACiC,EAAAmB,gBAAD,MACAzB,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,+BACbK,EAAA5B,QAAAC,cAAA,UACE2B,EAAA5B,QAAAC,cAACZ,EAAAiE,MAAD,CAAAC,GAAA,mCAEF3B,EAAA5B,QAAAC,cAACkC,EAAAqB,gBAAD,MACA5B,EAAA5B,QAAAC,cAACgC,EAAAwB,gBAAD,OAEF7B,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,iCACbK,EAAA5B,QAAAC,cAAA,UACE2B,EAAA5B,QAAAC,cAACZ,EAAAiE,MAAD,CAAAC,GAAA,iBAEF3B,EAAA5B,QAAAC,cAACuC,EAAAkB,oBAAD,CACEC,WAAYZ,EACZa,UAAWX,EAAKY,mJClDlC,IAAAxE,EAAAC,EAAA,iBAIM,cAA2BD,EAAAyE,cAC/BC,oBACEC,OAAOC,SAAS,EAAG,GAGrBF,SACE,OAAO,6ICVXzE,EAAA,KAEA,MAAAD,KAAAC,EAAA,gCAEA4E,EAAA5E,EAAA,KACA0C,EAAA1C,EAAA,IAEA6E,EAAA7E,EAAA,2BAOsD,GACpDqE,aACAC,eAEAvE,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,oCACblC,EAAAW,QAAAC,cAACkE,EAAAC,oBAAD,CACEC,OAAQH,EAAAI,gBAAgBC,MACxB9C,QAASmC,EACTpC,cAAY,4BAEZnC,EAAAW,QAAAC,cAAA,QAAMsB,UAAU,wBACbS,EAAAU,KAAAC,EAAA,eAAoB6B,sBAGzBnF,EAAAW,QAAAC,cAACkE,EAAAC,oBAAD,CACEC,OAAQH,EAAAI,gBAAgBG,KACxBhD,QAASmC,EACTpC,cAAY,2BAEZnC,EAAAW,QAAAC,cAAA,QAAMsB,UAAU,kBACbS,EAAAU,KAAAC,EAAA,eAAoB6B,8JClC7B,IAAAnF,EAAAwC,EAAAvC,EAAA,IACAoF,EAAApF,EAAA,KAEA0B,EAAA1B,EAAA,KACAqF,EAAA9C,EAAAvC,EAAA,MACAyC,EAAAzC,EAAA,0jBASuDsF,SAAAP,OACrDA,EADqDQ,SAErDA,EAFqDpD,QAGrDA,EAHqDqD,SAIrDA,GAAQF,EACRG,EAAAC,EAAAJ,EAAA,4CACI,OACJvF,EAAAW,QAAAC,cAAC8B,EAAAc,UAAD,CACEoC,SAAS,EACTnC,OAAQC,GACN1D,EAAAW,QAAAC,cAACyE,EAAAQ,MAAD,CACEC,MAAM,UACNrC,OAAQsC,GACN/F,EAAAW,QAAAC,cAACe,EAAAqE,mBAADC,EAAA,CACEC,SAAUH,EAASI,QAAUnB,EAC7BQ,SAAUA,GAAY9B,EAAM0C,aAC5BhE,QAAS,KACP2D,EAASM,SAASrB,GAClB5C,MAEEsD,GAEHhC,EAAM0C,cAAgBL,EAASI,QAAUnB,EACxChF,EAAAW,QAAAC,cAAC0E,EAAA3E,QAAD,MAEA8E,wHCvCdxF,EAAA,KAGA,IAAAD,EAAAwC,EAAAvC,EAAA,IAGAqG,EAAArG,EAAA,KACAsG,EAAAtG,EAAA,IACA0C,EAAA1C,EAAA,IACAuG,EAAAvG,EAAA,KACAiD,EAAAV,EAAAvC,EAAA,yDAEA,MAAMwG,EAAoB,IAAMzG,EAAAW,QAAAC,cAAA,SAAI+B,EAAAU,KAAAC,EAAA,6CAMiB,GAAGF,aACtDpD,EAAAW,QAAAC,cAAA,WACEZ,EAAAW,QAAAC,cAACsC,EAAAvC,QAAD,CACEiB,KAAMe,EAAAU,KAAAC,EAAA,qBACNzB,WAAYc,EAAAU,KAAAC,EAAA,QACZvB,cAAe,IAAMqB,EAAQG,WAE/BvD,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,qBACblC,EAAAW,QAAAC,cAAC2F,EAAAG,SAAD,CACEjD,OAAQkD,GACNA,EAAKC,SAASC,YACZ7G,EAAAW,QAAAC,cAAC0F,EAAAQ,QAAD,CAASC,MAAOJ,EAAKK,KACnBhH,EAAAW,QAAAC,cAAC4F,EAAAS,YAAD,CAAa1C,UAAW,IAAMnB,EAAQ8D,KAAK,aAG7ClH,EAAAW,QAAAC,cAAC6F,EAAD,8ICjCZxG,EAAA,KAEA,MAAAD,KAAAC,EAAA,gCACAE,EAAAF,EAAA,IAEAkH,EAAAlH,EAAA,KAEAmH,EAAAnH,EAAA,KACAoH,EAAApH,EAAA,KACAqH,EAAArH,EAAA,KACAsH,EAAAtH,EAAA,wBAImD,OACjDD,EAAAW,QAAAC,cAACT,EAAAqH,IAAD,CAAKtF,UAAU,6BACblC,EAAAW,QAAAC,cAACuG,EAAAM,SAAD,KACEzH,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,wBACblC,EAAAW,QAAAC,cAACyG,EAAAK,iBAAD,CACEjE,OAAQkE,GACN3H,EAAAW,QAAAC,cAAAZ,EAAAW,QAAAE,SAAA,KACEb,EAAAW,QAAAC,cAAC0G,EAAAM,gBAAD,CAAiBlE,MAAOiE,EAAOjE,QAC/B1D,EAAAW,QAAAC,cAAC2G,EAAAM,kBAAD,CAAmBC,OAAQH,EAAOI,gBAClC/H,EAAAW,QAAAC,cAACwG,EAAAY,iBAAD,CAAkBC,OAAQN,uHCvBxC1H,EAAA,KAEA,IAAAD,EAAAwC,EAAAvC,EAAA,IACAC,EAAAD,EAAA,KAEAiI,EAAA1F,EAAAvC,EAAA,MACAkI,EAAAlI,EAAA,KACAmI,EAAAnI,EAAA,KACAoI,EAAApI,EAAA,0EAE0C,KACxCD,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,iBACblC,EAAAW,QAAAC,cAACsH,EAAAvH,QAAD,CACEuB,UAAU,sBACVC,cAAY,oCACZmG,UAAU,kBACVC,KAAK,QACLC,OAAO,GAEPxI,EAAAW,QAAAC,cAACwH,EAAAK,gBAAD,OAEFzI,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,uBACblC,EAAAW,QAAAC,cAACyH,EAAAK,gBAAD,MACA1I,EAAAW,QAAAC,cAACV,EAAAY,MAAD,KACG,EAAGsC,aACFpD,EAAAW,QAAAC,cAACuH,EAAAQ,YAAD,CACEC,SAAUlF,IACJA,EAAMmF,yBACRzF,EAAQ8D,KAAK,aACJxD,EAAMoF,wBACf1F,EAAQ8D,KAAK,oJC9B7B,MAAA6B,EAAA9I,EAAA,KACAD,KAAAC,EAAA,gCAEAsG,EAAAtG,EAAA,IACAoI,EAAApI,EAAA,uBAEyC,MACvC,MAAM+I,SAAEA,IAAa,EAAAzC,EAAA0C,WACrB,OAAO,EAAAF,EAAAG,aAAY,IACjBlJ,EAAAW,QAAAC,cAACyH,EAAAc,qBAAD,CACEC,UAAW,CAAEC,SAAUL,EAASK,UAChCC,cAAe,IAAM,KACrB7F,OAAQ,EAAGsE,eAAiBwB,iBAC1BvJ,EAAAW,QAAAC,cAAA,OAAKuB,cAAY,mBAAmBoH,gJCb5C,MAAAC,KAAAvJ,EAAA,iCAEAwJ,EAAAxJ,EAAA,IAGO,MAAMyJ,EAAuBF,EAAA7I;;;;;;;2BAS7B,MAAMwI,GAAuB,EAAAM,EAAAE,YAGlCD,wICjBFzJ,EAAA,KAEA,MAAAD,KAAAC,EAAA,gCAEAyC,EAAAzC,EAAA,KACA2J,EAAA3J,EAAA,KACA4J,EAAA5J,EAAA,KACA6J,EAAA7J,EAAA,KACA8J,EAAA9J,EAAA,uBAE+ByF,IAC7B1F,EAAAW,QAAAC,cAAC8B,EAAAc,UAAD,CACEwG,UAAU,EACVvG,OAAQC,GACN1D,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,uBACblC,EAAAW,QAAAC,cAACiJ,EAAAI,aAAD,MACAjK,EAAAW,QAAAC,cAACkJ,EAAAI,WAAD,CAAYC,QAASzG,EAAMyG,UAC3BnK,EAAAW,QAAAC,cAACgJ,EAAAQ,eAAD,CAAgB1G,MAAOA,IACvB1D,EAAAW,QAAAC,cAACmJ,EAAAM,uBAAD,CAAwBhB,SAAU3F,EAAM2F,4IClBhDpJ,EAAA,KACAA,EAAA,KAEA,MAAAqK,KAAArK,EAAA,gCACAD,ySAAAuK,CAAAtK,EAAA,IACAuK,EAAAvK,EAAA,IAEAwK,EAAAxK,EAAA,KACAyK,EAAAzK,EAAA,KACA0K,EAAA1K,EAAA,KACA2K,EAAA3K,EAAA,KAaA,MAAM4K,UAA6B7K,EAAA8K,UAAnCpG,kCACEqG,KAAAC,MAAQ,CAAEC,QAAQ,EAAOC,WAAW,GAEpCH,KAAAI,QAAWF,KACTF,KAAKK,SAAS,CAAEH,aAoBlBF,KAAAM,SAAW,MACLN,KAAKO,QACPP,KAAKI,SAAQ,GAEbJ,KAAKK,SAASG,IAAI,CAAON,QAASM,EAAKN,YAI3CF,KAAAS,SAAW,MACTT,KAAKK,SAAS,CAAEF,WAAW,MA1B7BxG,iCAAgC+G,MAAEA,IAAiBR,OAAEA,IACnD,OAAc,IAAVQ,IAA0B,IAAXR,EACV,CACLA,QAAQ,GAGL,KAOTK,cACE,OAA4B,IAArBP,KAAKrF,MAAM+F,MAepB/G,SACE,MAAM+G,MAAEA,EAAFC,MAASA,EAATC,UAAgBA,GAAcZ,KAAKrF,OACnCuF,OAAEA,EAAFC,UAAUA,GAAcH,KAAKC,MAEnC,OAAIE,EACKlL,EAAAW,QAAAC,cAAC4J,EAAAoB,SAAD,CAAUC,GAAG,WAAW3E,MAAM,IAIrClH,EAAAW,QAAAC,cAAA,OACEsB,WAAW,EAAAoI,EAAA3J,SAAW,wBAAyB,CAC7CmL,4BAA6Bb,KAG/BjL,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,sBACblC,EAAAW,QAAAC,cAACgK,EAAAmB,kBAAD,CACEN,MAAOA,EACPC,MAAOA,EACPC,UAAWA,EACXvJ,QAAS2I,KAAKM,WAEfJ,EACCjL,EAAAW,QAAAC,cAAAZ,EAAAW,QAAAE,SAAA,KACEb,EAAAW,QAAAC,cAAC6J,EAAAuB,SAAD,MACAhM,EAAAW,QAAAC,cAAC8J,EAAAuB,gBAAD,CACEC,WAAYnB,KAAKO,QACjBlJ,QAAS2I,KAAKS,YAGhB,qBAOwC,GAAGrB,aACvDnK,EAAAW,QAAAC,cAAC+J,EAAAwB,gBAAD,CACE/C,UAAW,CAAEe,WACbb,eAAe,EACf7F,OAAQ,EAAGC,UAAW0I,aACpBpM,EAAAW,QAAAC,cAACiK,EAAD,CACEY,MAAO/H,EAAQA,EAAM2I,WAAa,EAClCX,MAAOhI,EAAQA,EAAM4I,SAASC,eAAiB,MAC/CZ,UAAWS,IAAY1I,iKCvG/BzD,EAAA,KAEA,IAAAD,EAAAC,EAAA,IACAsC,EAAAC,EAAAvC,EAAA,IACAuM,EAAAhK,EAAAvC,EAAA,KAEA0C,EAAA1C,EAAA,uDASA,MAAMwM,EAA+BD,EAAA7L,QAAO+L,IAAGC,WAAA,CAAAC,YAAA;sBACzB,EAAGC,WAAYA,EAAMC;EAGrCC,EAA+BP,EAAA7L,QAAOqM,KAAIL,WAAA,CAAAC,YAAA;WACrC,EAAGC,WAAYA,EAAMI;sBAGoB,GAClDxB,QACAC,QACAC,YACAvJ,cAEA,MAAM8K,EAAczB,EAAQ,IAAmB,IAAdE,EACjC,OACEpJ,EAAA5B,QAAAC,cAAA,OACEsB,UAAU,wBACVC,cAAY,oBACZC,QAASA,GAER8K,EACC3K,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,iCACbK,EAAA5B,QAAAC,cAAA,QAAMsB,UAAU,yBAEhB,KAEJK,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,+BACbK,EAAA5B,QAAAC,cAAA,QAAMsB,UAAU,kBACfgL,EACC3K,EAAA5B,QAAAC,cAAC6L,EAAD,CACEvK,UAAU,+BACVC,cAAY,4BAEXsJ,GAAS,KAEV,KACFyB,EAGA3K,EAAA5B,QAAAC,cAAA,OACEsB,UAAU,2CACVC,cAAY,4BAEZI,EAAA5B,QAAAC,cAACZ,EAAAiE,MAAD,CAAAC,GAAA,+CAAAiJ,OAAA,CAGKzB,SAHL0B,WAAA,CAEE7K,EAAA5B,QAAAC,cAACmM,EAAD,CAA8B7K,UAAU,qCAR5CK,EAAA5B,QAAAC,cAAA,QAAMuB,cAAY,eAAeQ,EAAAU,KAAAC,EAAA,+JCrD3C,MAAAtD,KAAAC,EAAA,gCAEAoN,EAAApN,EAAA,KACA8J,EAAA9J,EAAA,8BAMyD,GAAGoJ,cAC1DrJ,EAAAW,QAAAC,cAACmJ,EAAAuD,sBAAD,CACElE,UAAW,CAAEC,YACb5F,OAAQ,EAAGqE,YAAa9H,EAAAW,QAAAC,cAACyM,EAAAE,qBAAD,CAAsBC,OAAQ1F,iJCZ1D,MAAA0B,KAAAvJ,EAAA,iCAEAwN,EAAAxN,EAAA,KACAyN,EAAAzN,EAAA,IAGO,MAAM0N,EAAwBnE,EAAA7I;;;;;;;IAOjC+M,EAAAE;4BAGG,MAAMN,GAAwB,EAAAG,EAAA9D,YAGnCgE,0ICnBF,IAAA3N,ySAAAuK,CAAAtK,EAAA,IAGAsG,EAAAtG,EAAA,IAEA4N,EAAA5N,EAAA,KACA0C,EAAA1C,EAAA,IAEA6N,EAAA7N,EAAA,KAIAiD,EAAAV,EAAAvC,EAAA,MACA8N,EAAAvL,EAAAvC,EAAA,MACA+N,EAAAxL,EAAAvC,EAAA,qVAQM,cAAgCD,EAAA8K,UAAtCpG,kCAoCEqG,KAAAkD,YAAetH,KACb,MAAM0C,SAAEA,GAAa0B,KAAKrF,MAAMwI,MAAMC,OACtC,OAAIxH,EAAKqC,SAASoF,QAEdpO,EAAAW,QAAAC,cAACkN,EAAAO,oBAAD,CACEjF,UAAW,CAAEkF,QAAS3H,EAAKqC,SAASsF,SACpChF,eAAgBD,EAChB5F,OAAQ,EAAG8K,eACT,MAAMzG,EACHyG,GAAYA,EAASC,KAAKX,EAAAY,GAAGC,OAAO,KAAMrF,KAAe,KAC5D,OACErJ,EAAAW,QAAAC,cAAAZ,EAAAW,QAAAE,SAAA,KACGkK,KAAK4D,aAAa7G,GAClBA,EACGiD,KAAK6D,UAAU9G,EAAQnB,GACvBoE,KAAK8D,WAAWN,EAAU5H,OAQxC3G,EAAAW,QAAAC,cAACkN,EAAAgB,qBAAD,CACE1F,UAAW,CAAEC,SAAU1C,EAAKqC,SAASK,UACrCC,eAAe,EACf7F,OAAQ,EAAGqE,WAAYsE,aACrBpM,EAAAW,QAAAC,cAAAZ,EAAAW,QAAAE,SAAA,KACGkK,KAAK4D,aAAa7G,GAClBiD,KAAK6D,UAAU9G,EAAQnB,QAhE5BjC,eAAe2E,EAAc1C,iDAC3BA,EAAKjD,MAAMqL,kBAAkB1F,GACnC0B,KAAKrF,MAAMtC,QAAQ8D,KAAK,YAE1BxC,aAAaoD,GACX,OACE9H,EAAAW,QAAAC,cAACsC,EAAAvC,QAAD,CACEiB,KAAMkG,EAASA,EAAOkH,KAAOrM,EAAAU,KAAAC,EAAA,iBAC7BzB,WAAYc,EAAAU,KAAAC,EAAA,QACZvB,cAAe,IAAMgJ,KAAKrF,MAAMtC,QAAQG,WAI9CmB,UAAUoD,EAAuCnB,GAC/C,OACE3G,EAAAW,QAAAC,cAACoN,EAAArN,QAAD,CACEoG,MAAOJ,EAAKK,IACZc,OAAQA,EACRmH,SAAU,IAAMnH,GAAUiD,KAAKmE,eAAepH,EAAO5D,GAAIyC,KAI/DjC,WACE6J,EACA5H,GAEA,OACE3G,EAAAW,QAAAC,cAACmN,EAAApN,QAAD,CACE4N,SAAUA,EACVY,UAAW,EAAGjL,QAAS6G,KAAKrF,MAAMtC,QAAQ8D,gBAAgBhD,KAC1D+K,SAAU,EAAG/K,QAAS6G,KAAKmE,eAAehL,EAAIyC,GAC9CyI,WAAYlL,GAAMyC,EAAKjD,MAAM2L,iBAAiBnL,KAuCpDQ,SACE,OAAO1E,EAAAW,QAAAC,cAAC2F,EAAAG,SAAD,CAAUjD,OAAQsH,KAAKkD,oHC9FlChO,EAAA,KAEA,IAAAD,EAAAwC,EAAAvC,EAAA,IACAuM,EAAAhK,EAAAvC,EAAA,KAEA0B,EAAA1B,EAAA,KACAqP,EAAArP,EAAA,KAEA0C,EAAA1C,EAAA,IACAsP,EAAAtP,EAAA,wDASA,MAAMuP,EAAwBhD,EAAA7L,QAAO+L,IAAGC,WAAA,CAAAC,YAAA,kCAEI,EAC1C2B,WACAU,WACAE,YACAC,iBA0CA,OACEpP,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,wBACZqM,GAAYA,EAASvH,IA1CJc,GAElB9H,EAAAW,QAAAC,cAAA,OACEsB,UAAU,6BACVC,cAAY,mBACZsN,IAAK3H,EAAO5D,IAEZlE,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,gCAAgC4F,EAAOkH,MACtDhP,EAAAW,QAAAC,cAAC0O,EAAAI,YAAD,CAAaC,QAAS7H,EAAO6H,UAC7B3P,EAAAW,QAAAC,cAAC4O,EAAD,KACExP,EAAAW,QAAAC,cAAC2O,EAAAK,kBAAD,CAAmBpC,OAAQ1F,KAG7B9H,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,iCACblC,EAAAW,QAAAC,cAACe,EAAAkO,gBAAD,CAAiBzN,QAAS,IAAM+M,EAAUrH,IACxC9H,EAAAW,QAAAC,cAAA,QAAMsB,UAAU,kBACbS,EAAAU,KAAAC,EAAA,eAAoB6B,sBAGxB2C,EAAOgI,cACN9P,EAAAW,QAAAC,cAACe,EAAAoO,cAAD,CACE3N,QAAS,IAAM6M,EAASnH,GACxBkI,aAAc,IAAMZ,EAAWtH,EAAO5D,KAEtClE,EAAAW,QAAAC,cAAA,QAAMsB,UAAU,iBACbS,EAAAU,KAAAC,EAAA,UAAe6B,sBAIpBnF,EAAAW,QAAAC,cAACe,EAAAoO,cAAD,CAAevK,UAAU,GACvBxF,EAAAW,QAAAC,cAAA,QAAMsB,UAAU,iBACbS,EAAAU,KAAAC,EAAA,iBAAsB2M,iKCzDvC,IAAAjQ,ySAAAuK,CAAAtK,EAAA,IACAiQ,EAAAjQ,EAAA,KACAuM,EAAAhK,EAAAvC,EAAA,KAEAqG,EAAArG,EAAA,KACA0B,EAAA1B,EAAA,KACAkQ,EAAA3N,EAAAvC,EAAA,MAEAmQ,EAAAnQ,EAAA,KACA0C,EAAA1C,EAAA,uDASA,MAAMoQ,EAA8B7D,EAAA7L,QAAO+L,IAAGC,WAAA,CAAAC,YAAA;;;QAK9C,cAA8B5M,EAAAyE,cAC5BC,oBACEqG,KAAKuF,cAEP5L,qBACEqG,KAAKuF,cAEP5L,cACE,MAAMqC,MAAEA,EAAFe,OAASA,GAAWiD,KAAKrF,MAC3BoC,GACFf,EAAMwJ,cAAczI,EAAO0I,KAG/B9L,SACE,MAAMqC,MAAEA,EAAFe,OAASA,EAATmH,SAAiBA,GAAalE,KAAKrF,MACnC+K,EAAS3I,GACX,EAAAsI,EAAAM,aAAY,CACVC,SAAUC,OAAO9I,EAAO0I,IAAIG,UAC5BE,UAAWD,OAAO9I,EAAO0I,IAAIK,kBAE/BC,EACJ,OACE9Q,EAAAW,QAAAC,cAAA,WACEZ,EAAAW,QAAAC,cAAA,OAAKsB,UAAU,qBACblC,EAAAW,QAAAC,cAAC0F,EAAAQ,QAAD,CAASC,MAAOA,GACd/G,EAAAW,QAAAC,cAACsP,EAAAa,OAAD,CAAQC,SAAUP,MAGrB3I,GAAUA,EAAOgI,eAChB9P,EAAAW,QAAAC,cAACyP,EAAD,KACErQ,EAAAW,QAAAC,cAACuP,EAAAxP,QAAD,KACEX,EAAAW,QAAAC,cAACe,EAAAoO,cAAD,CACE3N,QAAS6M,EACT9M,cAAY,iCAEXQ,EAAAU,KAAAC,EAAA,iBAAsB6B,uBAK9B2C,IAAWA,EAAOgI,eACjB9P,EAAAW,QAAAC,cAACyP,EAAD,KACErQ,EAAAW,QAAAC,cAACuP,EAAAxP,QAAD,KACEX,EAAAW,QAAAC,cAACe,EAAAoO,cAAD,CACEvK,UAAU,EACVrD,cAAY,iCAEXQ,EAAAU,KAAAC,EAAA,iBAAsB2M,wKCtEvChQ,EAAA,KAEA,IAAAD,EAAAC,EAAA,IACAsC,EAAAC,EAAAvC,EAAA,IACAuM,EAAAhK,EAAAvC,EAAA,KACAgR,EAAAzO,EAAAvC,EAAA,MAEAsG,EAAAtG,EAAA,IACA4E,EAAA5E,EAAA,KACAiR,EAAAjR,EAAA,wDAIA,MAAMkR,EAAuB3E,EAAA7L,QAAO+L,IAAGC,WAAA,CAAAC,YAAA;;;;;;;EAuEjC,SAAUwE,IACd,MACMC,EADQ,IAAIJ,EAAAtQ,QAASgE,OAAO2M,UAAUC,WAC3BC,QACjB,MAAgB,QAAZH,EAAGrC,KACEnK,EAAA4M,mBAAmBC,IACL,YAAZL,EAAGrC,KACLnK,EAAA4M,mBAAmBE,QAErB,yBAtE2CjM,IAClDnD,EAAA5B,QAAAC,cAAC2F,EAAAG,SAAD,CACEd,SAAS,EACTnC,OAAQ,EAAGuF,eACT,MAAM4I,EAAWR,IACjB,IAAKpI,EAAS6I,SAAwB,OAAbD,EACvB,OAAO,KAET,MAAME,EAAS9I,EAAS+I,+BACxB,OAAKD,EAAOE,gBAKVzP,EAAA5B,QAAAC,cAACsQ,EAAAe,YAAD,CACE7I,UAAW,CACTC,SAAUyI,EAAOzI,SACjBuI,YAEFnO,OAAQ,EAAGyO,SACFA,EACL3P,EAAA5B,QAAAC,cAACuQ,EAAD,KACE5O,EAAA5B,QAAAC,cAAA,OAAKsB,UAVU,+CAWbK,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,yBACbK,EAAA5B,QAAAC,cAAA,KACEsB,UAAU,oBACVE,QAAS0P,EAAOK,cAFlB,QAMA5P,EAAA5B,QAAAC,cAAA,QACEsB,UAAU,mBACVkQ,MAAO,CAAEC,uBAAwBH,EAAII,WAEvC/P,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,oBACbK,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,qBAAqBgQ,EAAIK,OACxChQ,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,2BACbK,EAAA5B,QAAAC,cAACZ,EAAAiE,MAAD,CAAAC,GAAA,WAGJ3B,EAAA5B,QAAAC,cAAA,OAAKsB,UAAU,uBACbK,EAAA5B,QAAAC,cAAA,KACE4R,KAAMN,EAAIO,IACVrQ,QAAS0P,EAAOY,gBAChBxQ,UAAU,sBAEVK,EAAA5B,QAAAC,cAAA,QAAMsB,UAAU,2BACdK,EAAA5B,QAAAC,cAACZ,EAAAiE,MAAD,CAAAC,GAAA,mBAOV,OA5CD,uIChCf,MAAAsF,KAAAvJ,EAAA,iCAEAwN,EAAAxN,EAAA,KAGA,MAAM0S,EAAcnJ,EAAA7I;;;;;;;;;;;EAaPsR,GAAc,EAAAxE,EAAA9D,YAGzBgJ","file":"static/js/4.69558ff2.chunk.js","sourcesContent":["import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { Container } from 'reactstrap'\n\nimport { MobileConfirmView } from '../segments/mobile/MobileConfirmView'\nimport { MobileDeliveryView } from '../segments/mobile/MobileDeliveryView'\nimport { MobileFinishView } from '../segments/mobile/MobileFinishView'\nimport { MobileIntroView } from '../segments/mobile/MobileIntroView'\nimport { MobileOrderView } from '../segments/mobile/MobileOrderView'\nimport { MobilePickupView } from '../segments/mobile/MobilePickupView'\nimport { MobileSmartBanner } from '../segments/mobile/MobileSmartBanner'\n\nconst MobileApp = () => (\n  <>\n    <Route path=\"/\" component={MobileSmartBanner} />\n    <Container fluid={true}>\n      <Route exact={true} path=\"/\" component={MobileIntroView} />\n      <Route path=\"/pickup/:branchId?\" component={MobilePickupView} />\n      <Route path=\"/delivery\" component={MobileDeliveryView} />\n      <Route path=\"/order\" component={MobileOrderView} />\n      <Route path=\"/confirm\" component={MobileConfirmView} />\n      <Route path=\"/finish\" component={MobileFinishView} />\n    </Container>\n  </>\n)\n\nexport default MobileApp\n","import './MobileHeader.css'\n\nimport React from 'react'\n\nimport { MobileHeaderButton } from '../../common/Buttons'\n\ninterface IProps {\n  text: string\n  buttonText: string\n  buttonRight?: boolean\n  onButtonClick(): void\n}\n\nconst MobileHeader: React.SFC<IProps> = ({\n  text,\n  buttonText,\n  buttonRight = false,\n  onButtonClick,\n}) => {\n  const leftButton =\n    buttonRight === false ? (\n      <MobileHeaderButton\n        className=\"mobile__header__button\"\n        data-testid=\"MobileHeaderButton__Left\"\n        // size=\"sm\"\n        onClick={onButtonClick}\n      >\n        {buttonText}\n      </MobileHeaderButton>\n    ) : null\n  const rightButton =\n    buttonRight === true ? (\n      <MobileHeaderButton\n        className=\"mobile__header__button\"\n        data-testid=\"MobileHeaderButton__Right\"\n        // size=\"sm\"\n        onClick={onButtonClick}\n        isConfirm={true}\n      >\n        {buttonText}\n      </MobileHeaderButton>\n    ) : null\n  return (\n    <div className=\"mobile__header\">\n      {leftButton}\n      <div className=\"mobile__header__text\">{text}</div>\n      {rightButton}\n    </div>\n  )\n}\n\nexport default MobileHeader\n","import './MobileConfirmView.css'\n\nimport { Trans } from '@lingui/react'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { ScrollToTop } from '../../common/ScrollToTop'\nimport { WithOrder } from '../../common/WithOrder'\nimport { i18n } from '../../i18n'\nimport { OrderAgreements } from '../orderForm/OrderAgreements'\nimport { OrderErrorModal } from '../orderForm/OrderErrorModal'\nimport { OrderFormInputs } from '../orderForm/OrderFormInputs'\nimport { OrderFormSetup } from '../orderForm/OrderFormSetup'\nimport { OrderFormStorageNotice } from '../orderForm/OrderFormStorageNotice'\nimport { OrderGoPayModal } from '../orderForm/OrderGoPayModal'\nimport MobileHeader from './MobileHeader'\nimport { MobilePaymentMethod } from './MobilePaymentMethod'\n\ninterface IProps extends RouteComponentProps<{}> {}\n\nexport const MobileConfirmView: React.SFC<IProps> = ({ history }) => (\n  <div className=\"mobile__confirm__view\">\n    <MobileHeader\n      text={i18n.t`Order confirmation`}\n      buttonText={i18n.t`Cancel`}\n      onButtonClick={() => history.goBack()}\n    />\n    <WithOrder\n      render={order => (\n        <OrderFormSetup\n          order={order}\n          render={form => (\n            <>\n              <ScrollToTop />\n              <OrderFormStorageNotice />\n              <OrderGoPayModal order={order} />\n              <OrderErrorModal />\n              <div className=\"mobile__confirm__view__form\">\n                <h3>\n                  <Trans>Where and to whom we deliver?</Trans>\n                </h3>\n                <OrderFormInputs />\n                <OrderAgreements />\n              </div>\n              <div className=\"mobile__confirm__view__submit\">\n                <h4>\n                  <Trans>Place order</Trans>\n                </h4>\n                <MobilePaymentMethod\n                  orderModel={order}\n                  onConfirm={form.submitForm}\n                />\n              </div>\n            </>\n          )}\n        />\n      )}\n    />\n  </div>\n)\n","import { PureComponent } from 'react'\n\ninterface IProps {}\n\nexport class ScrollToTop extends PureComponent<IProps> {\n  componentDidMount() {\n    window.scrollTo(0, 0)\n  }\n\n  render() {\n    return null\n  }\n}\n","import './MobilePaymentMethod.css'\n\nimport React from 'react'\n\nimport { PaymentGateEnum } from '../../graph/types'\nimport { i18n } from '../../i18n'\nimport { TOrderModel } from '../../models/OrderModel'\nimport { MobilePaymentButton } from './MobilePaymentButton'\n\ninterface IProps {\n  orderModel: TOrderModel\n  onConfirm(): void\n}\n\nexport const MobilePaymentMethod: React.SFC<IProps> = ({\n  orderModel,\n  onConfirm,\n}) => (\n  <div className=\"mobile__confirm__payment__method\">\n    <MobilePaymentButton\n      method={PaymentGateEnum.Gopay}\n      onClick={onConfirm}\n      data-testid=\"mobilePaymentMethodGoPay\"\n    >\n      <span className=\"flaticon-credit-card\">\n        {i18n.t`Pay by card`.toLocaleUpperCase()}\n      </span>\n    </MobilePaymentButton>\n    <MobilePaymentButton\n      method={PaymentGateEnum.Cash}\n      onClick={onConfirm}\n      data-testid=\"mobilePaymentMethodCash\"\n    >\n      <span className=\"flaticon-money\">\n        {i18n.t`Pay by cash`.toLocaleUpperCase()}\n      </span>\n    </MobilePaymentButton>\n  </div>\n)\n","import React from 'react'\nimport { Field } from 'react-form'\n\nimport { SelectButtonThemed } from '../../common/Buttons'\nimport SubmitSpinner from '../../common/SubmitSpinner'\nimport { WithOrder } from '../../common/WithOrder'\nimport { PaymentGateEnum } from '../../graph/types'\n\ninterface IProps {\n  method: PaymentGateEnum\n  disabled?: boolean\n  onClick(): void\n}\n\nexport const MobilePaymentButton: React.SFC<IProps> = ({\n  method,\n  disabled,\n  onClick,\n  children,\n  ...props\n}) => (\n  <WithOrder\n    observe={true}\n    render={order => (\n      <Field\n        field=\"payment\"\n        render={fieldApi => (\n          <SelectButtonThemed\n            selected={fieldApi.value === method}\n            disabled={disabled || order.isSubmitting}\n            onClick={() => {\n              fieldApi.setValue(method)\n              onClick()\n            }}\n            {...props}\n          >\n            {order.isSubmitting && fieldApi.value === method ? (\n              <SubmitSpinner />\n            ) : (\n              children\n            )}\n          </SelectButtonThemed>\n        )}\n      />\n    )}\n  />\n)\n","import './MobileMap.css'\n\nimport { History } from 'history'\nimport React from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { BaseMap } from '../../common/BaseMap'\nimport { WithRoot } from '../../common/WithRoot'\nimport { i18n } from '../../i18n'\nimport { DeliveryMap } from '../map/DeliveryMap'\nimport MobileHeader from './MobileHeader'\n\nconst LocationDiscovery = () => <i>{i18n.t`Finding location...`}</i>\n\ninterface IProps extends RouteComponentProps<{}> {\n  history: History\n}\n\nexport const MobileDeliveryView: React.SFC<IProps> = ({ history }) => (\n  <div>\n    <MobileHeader\n      text={i18n.t`Enter the address`}\n      buttonText={i18n.t`Back`}\n      onButtonClick={() => history.goBack()}\n    />\n    <div className=\"mobile__map__view\">\n      <WithRoot\n        render={root =>\n          root.location.hasLocation ? (\n            <BaseMap model={root.map}>\n              <DeliveryMap onConfirm={() => history.push('/order')} />\n            </BaseMap>\n          ) : (\n            <LocationDiscovery />\n          )\n        }\n      />\n    </div>\n  </div>\n)\n","import '../finish/FinishView.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../common/ColStyle'\n\nimport { FinishViewFooter } from '../finish/FinishViewFooter'\nimport { FinishViewLoader } from '../finish/FinishViewLoader'\nimport { FinishViewOrder } from '../finish/FinishViewOrder'\nimport { FinishViewSupport } from '../finish/FinishViewSupport'\n\ninterface IProps {}\n\nexport const MobileFinishView: React.SFC<IProps> = ({}) => (\n  <Row className=\"justify-content-md-center\">\n    <ColStyle>\n      <div className=\"finish__view__mobile\">\n        <FinishViewLoader\n          render={result => (\n            <>\n              <FinishViewOrder order={result.order} />\n              <FinishViewSupport branch={result.companyBranch} />\n              <FinishViewFooter finish={result} />\n            </>\n          )}\n        />\n      </div>\n    </ColStyle>\n  </Row>\n)\n","import './MobileIntroView.css'\n\nimport React from 'react'\nimport { Route } from 'react-router-dom'\n\nimport BackgroundThemed from '../../common/BackgroundThemed'\nimport { OrderMethod } from '../destination/OrderMethod'\nimport { ShopHeaderIcons } from '../shop/ShopHeaderIcons'\nimport { MobileShopIntro } from './MobileShopIntro'\n\nexport const MobileIntroView: React.SFC = () => (\n  <div className=\"mobile__intro\">\n    <BackgroundThemed\n      className=\"mobile__intro__logo\"\n      data-testid=\"MobileIntroView__BackgroundThemed\"\n      imageName=\"storeLogoMobile\"\n      size=\"cover\"\n      fixed={false}\n    >\n      <ShopHeaderIcons />\n    </BackgroundThemed>\n    <div className=\"mobile__intro__info\">\n      <MobileShopIntro />\n      <Route>\n        {({ history }) => (\n          <OrderMethod\n            onChange={order => {\n              if (order.usingDeliveryOrderMethod) {\n                history.push('/delivery')\n              } else if (order.usingPickupOrderMethod) {\n                history.push('/pickup')\n              }\n            }}\n          />\n        )}\n      </Route>\n    </div>\n  </div>\n)\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../common/WithRoot'\nimport { QueryMobileShopIntro } from './MobileShopIntro.graphql'\n\nexport const MobileShopIntro: React.FC = () => {\n  const { business } = useRoot()\n  return useObserver(() => (\n    <QueryMobileShopIntro\n      variables={{ branchId: business.branchId! }}\n      renderLoading={() => null}\n      render={({ companyBranch: { headerText } }) => (\n        <div data-testid=\"MobileShopIntro\">{headerText}</div>\n      )}\n    />\n  ))\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph/buildQuery'\nimport { GMobileShopIntro } from '../../graph/types'\n\nexport const MobileShopIntroQuery = gql`\n  query GMobileShopIntro($branchId: ID!) {\n    companyBranch(id: $branchId) {\n      id\n      headerText\n    }\n  }\n`\n\nexport const QueryMobileShopIntro = buildQuery<\n  GMobileShopIntro.Query,\n  GMobileShopIntro.Variables\n>(MobileShopIntroQuery)\n","import './MobileOrderView.css'\n\nimport React from 'react'\n\nimport { WithOrder } from '../../common/WithOrder'\nimport { AddToCartModal } from '../cart/AddToCartModal'\nimport { FoodMenuView } from '../foodMenu/FoodMenuView'\nimport { MobileCart } from './MobileCart'\nimport { MobileClosingTimeModal } from './MobileClosingTimeModal'\n\nexport const MobileOrderView = props => (\n  <WithOrder\n    redirect={true}\n    render={order => (\n      <div className=\"mobile__order__view\">\n        <FoodMenuView />\n        <MobileCart orderId={order.orderId!} />\n        <AddToCartModal order={order} />\n        <MobileClosingTimeModal branchId={order.branchId!} />\n      </div>\n    )}\n  />\n)\n","import './MobileCart.css'\nimport './MobileSlidingCart.css'\n\nimport classNames from 'classnames'\nimport React, { Component } from 'react'\nimport { Redirect } from 'react-router'\n\nimport { CartView } from '../cart/CartView'\nimport { OrderSubmitLine } from '../orderForm/OrderSubmitLine'\nimport { QueryMobileCart } from './MobileCart.graphql'\nimport { MobileCartSummary } from './MobileCartSummary'\n\ninterface IProps {\n  count: number\n  price: string\n  isLoading: boolean\n}\n\ninterface IState {\n  isOpen: boolean\n  goConfirm: boolean\n}\n\nclass MobileCartController extends Component<IProps, IState> {\n  state = { isOpen: false, goConfirm: false }\n\n  setOpen = (isOpen: boolean) => {\n    this.setState({ isOpen })\n  }\n\n  static getDerivedStateFromProps({ count }: IProps, { isOpen }: IState) {\n    if (count === 0 && isOpen === true) {\n      return {\n        isOpen: false,\n      }\n    }\n    return null\n  }\n\n  // shouldComponentUpdate({ isLoading }: IProps) {\n  //   return !isLoading\n  // }\n\n  get isEmpty() {\n    return this.props.count === 0\n  }\n\n  onToggle = () => {\n    if (this.isEmpty) {\n      this.setOpen(false)\n    } else {\n      this.setState(prev => ({ isOpen: !prev.isOpen }))\n    }\n  }\n\n  onSubmit = () => {\n    this.setState({ goConfirm: true })\n  }\n\n  render() {\n    const { count, price, isLoading } = this.props\n    const { isOpen, goConfirm } = this.state\n\n    if (goConfirm) {\n      return <Redirect to=\"/confirm\" push={true} />\n    }\n\n    return (\n      <div\n        className={classNames('mobile__sliding__cart', {\n          mobile__sliding__cart__open: isOpen,\n        })}\n      >\n        <div className=\"mobile__cart__view\">\n          <MobileCartSummary\n            count={count}\n            price={price}\n            isLoading={isLoading}\n            onClick={this.onToggle}\n          />\n          {isOpen ? (\n            <>\n              <CartView />\n              <OrderSubmitLine\n                canSubmit={!this.isEmpty}\n                onClick={this.onSubmit}\n              />\n            </>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport const MobileCart: React.SFC<{ orderId: ID }> = ({ orderId }) => (\n  <QueryMobileCart\n    variables={{ orderId }}\n    renderLoading={false}\n    render={({ order }, { loading }) => (\n      <MobileCartController\n        count={order ? order.countWares : 0}\n        price={order ? order.totalSum.formattedValue : '???'}\n        isLoading={loading || !order}\n      />\n    )}\n  />\n)\n","import './MobileCartSummary.css'\n\nimport { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  count: number\n  price: string\n  isLoading: boolean\n  onClick(): void\n}\n\nconst MobileCartSummaryCountThemed = styled.div`\n  background-color: ${({ theme }) => theme.secondary};\n`\n\nconst MobileCartSummaryPriceThemed = styled.span`\n  color: ${({ theme }) => theme.primary};\n`\n\nexport const MobileCartSummary: React.SFC<IProps> = ({\n  count,\n  price,\n  isLoading,\n  onClick,\n}) => {\n  const showContent = count > 0 || isLoading === true\n  return (\n    <div\n      className=\"mobile__cart__summary\"\n      data-testid=\"mobileCartSummary\"\n      onClick={onClick}\n    >\n      {showContent ? (\n        <div className=\"mobile__cart__summary__toggle\">\n          <span className=\"flaticon-chevron-up\" />\n        </div>\n      ) : null}\n\n      <div className=\"mobile__cart__summary__info\">\n        <span className=\"flaticon-cart\" />\n        {showContent ? (\n          <MobileCartSummaryCountThemed\n            className=\"mobile__cart__summary__count\"\n            data-testid=\"mobileCartSummary__Count\"\n          >\n            {count || '?'}\n          </MobileCartSummaryCountThemed>\n        ) : null}\n        {!showContent ? (\n          <span data-testid=\"cartIsEmpty\">{i18n.t`Cart is empty`}</span>\n        ) : (\n          <div\n            className=\"mobile__cart__summary__cart__with__price\"\n            data-testid=\"mobileCartSummary__Price\"\n          >\n            <Trans>\n              In the cart you have goods for\n              <MobileCartSummaryPriceThemed className=\"mobile__cart__summary__price\">\n                {price}\n              </MobileCartSummaryPriceThemed>\n            </Trans>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { ShopClosingTimeModal } from '../shop/ShopClosingTimeModal'\nimport { QueryMobileShopStatus } from './MobileClosingTimeModal.graphql'\n\ninterface IProps {\n  branchId: ID\n}\n\nexport const MobileClosingTimeModal: React.SFC<IProps> = ({ branchId }) => (\n  <QueryMobileShopStatus\n    variables={{ branchId }}\n    render={({ branch }) => <ShopClosingTimeModal status={branch} />}\n  />\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { CompanyBranchStatusFragment } from '../../graph/fragments.graphql'\nimport { GMobileShopStatus } from '../../graph/types'\n\nexport const MobileShopStatusQuery = gql`\n  query GMobileShopStatus($branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      ...GCompanyBranchStatus\n    }\n  }\n  ${CompanyBranchStatusFragment}\n`\n\nexport const QueryMobileShopStatus = buildQuery<\n  GMobileShopStatus.Query,\n  GMobileShopStatus.Variables\n>(MobileShopStatusQuery)\n","import React, { Component } from 'react'\nimport { RouteComponentProps } from 'react-router'\n\nimport { WithRoot } from '../../common/WithRoot'\nimport { GPickupBranch } from '../../graph/types'\nimport { RM } from '../../helpers/ramda'\nimport { i18n } from '../../i18n'\nimport { TRootModel } from '../../models/RootModel'\nimport {\n  QueryPickupMapBranch,\n  QueryPickupMapBrand,\n} from '../map/PickupMap.graphql'\nimport MobileHeader from './MobileHeader'\nimport MobilePickupList from './MobilePickupList'\nimport MobilePickupMap from './MobilePickupMap'\n\ninterface IRouteParams {\n  branchId?: string\n}\n\ninterface IProps extends RouteComponentProps<IRouteParams> {}\n\nexport class MobilePickupView extends Component<IProps> {\n  async onSelectBranch(branchId: ID, root: TRootModel) {\n    await root.order.createPickupOrder(branchId)\n    this.props.history.push('/order')\n  }\n  renderHeader(branch: Maybe<GPickupBranch.Fragment>) {\n    return (\n      <MobileHeader\n        text={branch ? branch.name : i18n.t`Choose branch`}\n        buttonText={i18n.t`Back`}\n        onButtonClick={() => this.props.history.goBack()}\n      />\n    )\n  }\n  renderMap(branch: Maybe<GPickupBranch.Fragment>, root: TRootModel) {\n    return (\n      <MobilePickupMap\n        model={root.map}\n        branch={branch}\n        onSelect={() => branch && this.onSelectBranch(branch.id, root)}\n      />\n    )\n  }\n  renderList(\n    branches: ReadonlyArray<GPickupBranch.Fragment>,\n    root: TRootModel,\n  ) {\n    return (\n      <MobilePickupList\n        branches={branches}\n        onShowMap={({ id }) => this.props.history.push(`/pickup/${id}`)}\n        onSelect={({ id }) => this.onSelectBranch(id, root)}\n        onPrefetch={id => root.order.prefetchFoodMenu(id)}\n      />\n    )\n  }\n  renderQuery = (root: TRootModel) => {\n    const { branchId } = this.props.match.params\n    if (root.business.isBrand) {\n      return (\n        <QueryPickupMapBrand\n          variables={{ brandId: root.business.brandId! }}\n          renderLoading={!branchId}\n          render={({ branches }) => {\n            const branch =\n              (branches && branches.find(RM.propEq('id', branchId))) || null\n            return (\n              <>\n                {this.renderHeader(branch)}\n                {branch\n                  ? this.renderMap(branch, root)\n                  : this.renderList(branches, root)}\n              </>\n            )\n          }}\n        />\n      )\n    }\n    return (\n      <QueryPickupMapBranch\n        variables={{ branchId: root.business.branchId! }}\n        renderLoading={false}\n        render={({ branch }, { loading }) => (\n          <>\n            {this.renderHeader(branch)}\n            {this.renderMap(branch, root)}\n          </>\n        )}\n      />\n    )\n  }\n  render() {\n    return <WithRoot render={this.renderQuery} />\n  }\n}\n","import './MobilePickupList.css'\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { PrimaryButton, SecondaryButton } from '../../common/Buttons'\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { GPickupBranch } from '../../graph/types'\nimport { i18n } from '../../i18n'\nimport { ShopStatusDisplay } from '../shop/ShopStatusDisplay'\n\ninterface IProps {\n  branches: ReadonlyArray<GPickupBranch.Fragment>\n  onSelect(site: GPickupBranch.Fragment): void\n  onShowMap(site: GPickupBranch.Fragment): void\n  onPrefetch(branchId: ID): void\n}\n\nconst StatusDisplayPosition = styled.div``\n\nconst MobilePickupList: React.SFC<IProps> = ({\n  branches,\n  onSelect,\n  onShowMap,\n  onPrefetch,\n}) => {\n  const renderBranch = (branch: GPickupBranch.Fragment) => {\n    return (\n      <div\n        className=\"mobile__pickup__list__item\"\n        data-testid=\"MobilePickupList\"\n        key={branch.id}\n      >\n        <div className=\"mobile__pickup__list__header\">{branch.name}</div>\n        <ShopAddress address={branch.address} />\n        <StatusDisplayPosition>\n          <ShopStatusDisplay status={branch} />\n        </StatusDisplayPosition>\n\n        <div className=\"mobile__pickup__list__buttons\">\n          <SecondaryButton onClick={() => onShowMap(branch)}>\n            <span className=\"flaticon-signs\">\n              {i18n.t`Show on map`.toLocaleUpperCase()}\n            </span>\n          </SecondaryButton>\n          {branch.pickupEnabled ? (\n            <PrimaryButton\n              onClick={() => onSelect(branch)}\n              onMouseEnter={() => onPrefetch(branch.id)}\n            >\n              <span className=\"flaticon-mark\">\n                {i18n.t`Choose`.toLocaleUpperCase()}\n              </span>\n            </PrimaryButton>\n          ) : (\n            <PrimaryButton disabled={true}>\n              <span className=\"flaticon-mark\">\n                {i18n.t`Delivery only`.toLocaleLowerCase()}\n              </span>\n            </PrimaryButton>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"mobile__pickup__list\">\n      {branches && branches.map(renderBranch)}\n    </div>\n  )\n}\n\nexport default MobilePickupList\n","import React, { PureComponent } from 'react'\nimport { Marker } from 'react-google-maps'\nimport styled from 'styled-components'\n\nimport { BaseMap } from '../../common/BaseMap'\nimport { PrimaryButton } from '../../common/Buttons'\nimport ButtonStripe from '../../common/ButtonStripe'\nimport { GPickupBranch } from '../../graph/types'\nimport { gpsToLatLng } from '../../helpers/gps'\nimport { i18n } from '../../i18n'\nimport { TMapModel } from '../../models/MapModel'\n\ninterface IProps {\n  model: TMapModel\n  branch: Maybe<GPickupBranch.Fragment>\n  onSelect(): void\n}\n\nconst ButtonStripeContainerStyled = styled.div`\n  margin-top: 2rem;\n  z-index: 10;\n`\n\nclass MobilePickupMap extends PureComponent<IProps> {\n  componentDidMount() {\n    this.panToBranch()\n  }\n  componentDidUpdate() {\n    this.panToBranch()\n  }\n  panToBranch() {\n    const { model, branch } = this.props\n    if (branch) {\n      model.panToLocation(branch.gps)\n    }\n  }\n  render() {\n    const { model, branch, onSelect } = this.props\n    const latlng = branch\n      ? gpsToLatLng({\n          latitude: Number(branch.gps.latitude),\n          longitude: Number(branch.gps.longitude),\n        })\n      : undefined\n    return (\n      <div>\n        <div className=\"mobile__map__view\">\n          <BaseMap model={model}>\n            <Marker position={latlng} />\n          </BaseMap>\n        </div>\n        {branch && branch.pickupEnabled && (\n          <ButtonStripeContainerStyled>\n            <ButtonStripe>\n              <PrimaryButton\n                onClick={onSelect}\n                data-testid=\"mobilePickupMap__SubmitButton\"\n              >\n                {i18n.t`Choose branch`.toLocaleUpperCase()}\n              </PrimaryButton>\n            </ButtonStripe>\n          </ButtonStripeContainerStyled>\n        )}\n        {branch && !branch.pickupEnabled && (\n          <ButtonStripeContainerStyled>\n            <ButtonStripe>\n              <PrimaryButton\n                disabled={true}\n                data-testid=\"mobilePickupMap__SubmitButton\"\n              >\n                {i18n.t`Delivery only`.toLocaleLowerCase()}\n              </PrimaryButton>\n            </ButtonStripe>\n          </ButtonStripeContainerStyled>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default MobilePickupMap\n","import './MobileSmartBanner.css'\n\nimport { Trans } from '@lingui/react'\nimport React from 'react'\nimport styled from 'styled-components'\nimport UAParser from 'ua-parser-js'\n\nimport { WithRoot } from '../../common/WithRoot'\nimport { MobilePlatformEnum } from '../../graph/types'\nimport { QueryBanner } from './MobileSmartBanner.graphql'\n\ninterface IProps {}\n\nconst SmartBannerContainer = styled.div`\n  border-bottom: 1px solid #8f8f8f;\n  height: 81px;\n  position: absolute;\n  z-index: 1;\n  top: 3rem;\n  width: 100%;\n`\n\nexport const MobileSmartBanner: React.SFC<IProps> = props => (\n  <WithRoot\n    observe={true}\n    render={({ business }) => {\n      const platform = getPlatformType()\n      if (!business.isValid || platform === null) {\n        return null\n      }\n      const banner = business.ensureBannerForCurrentBranch()\n      if (!banner.shouldBeVisible) {\n        return null\n      }\n      const wrapperClassName = `smartbanner smartbanner-ios smartbanner-top`\n      return (\n        <QueryBanner\n          variables={{\n            branchId: banner.branchId,\n            platform,\n          }}\n          render={({ app }) => {\n            return app ? (\n              <SmartBannerContainer>\n                <div className={wrapperClassName}>\n                  <div className=\"smartbanner-container\">\n                    <a\n                      className=\"smartbanner-close\"\n                      onClick={banner.setClosedNow}\n                    >\n                      &times;\n                    </a>\n                    <span\n                      className=\"smartbanner-icon\"\n                      style={{ backgroundImage: `url(${app.icon})` }}\n                    />\n                    <div className=\"smartbanner-info\">\n                      <div className=\"smartbanner-title\">{app.title}</div>\n                      <div className=\"smartbanner-description\">\n                        <Trans>Free</Trans>\n                      </div>\n                    </div>\n                    <div className=\"smartbanner-wrapper\">\n                      <a\n                        href={app.url}\n                        onClick={banner.setInstalledNow}\n                        className=\"smartbanner-button\"\n                      >\n                        <span className=\"smartbanner-button-text\">\n                          <Trans>Show app</Trans>\n                        </span>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </SmartBannerContainer>\n            ) : null\n          }}\n        />\n      )\n    }}\n  />\n)\n\nexport function getPlatformType(): Maybe<MobilePlatformEnum> {\n  const agent = new UAParser(window.navigator.userAgent)\n  const os = agent.getOS()\n  if (os.name === 'iOS') {\n    return MobilePlatformEnum.Ios\n  } else if (os.name === 'Android') {\n    return MobilePlatformEnum.Android\n  }\n  return null\n}\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport { GSmartBanner } from '../../graph/types'\n\nconst BannerQuery = gql`\n  query GSmartBanner($branchId: ID!, $platform: MobilePlatformEnum!) {\n    app: mobileApplicationSettings(\n      companyBranch: $branchId\n      platform: $platform\n    ) {\n      title\n      url\n      icon\n    }\n  }\n`\n\nexport const QueryBanner = buildQuery<\n  GSmartBanner.Query,\n  GSmartBanner.Variables\n>(BannerQuery)\n"],"sourceRoot":""}