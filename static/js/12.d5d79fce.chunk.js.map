{"version":3,"sources":["segments/shop/OrderAddress.tsx","segments/shop/ShopCloseAlert.tsx","segments/shop/ShopIntro.tsx","segments/shop/ShopLogo.tsx","segments/shop/ShopOpeningHours.tsx","segments/shop/Sticker.tsx","segments/shop/ShopHeader.tsx","segments/shop/ShopHeader.graphql.ts","segments/shop/ShopHeaderView.tsx","segments/finish/FinishView.tsx","segments/map/PickupMapBranch.tsx","segments/map/PickupMap.tsx","segments/map/OrderMap.tsx","segments/map/views/MapView.tsx","segments/orderForm/OrderPaymentButton.tsx","segments/orderForm/OrderPaymentMethod.tsx","segments/orderForm/OrderForm.tsx","segments/orderForm/OrderFormView.tsx","segments/shop/ShopOverview.tsx","app/DesktopApp.tsx"],"names":["OrderAddress","_ref","address","_useRoot","useRoot","order","location","useObserver","orderMethod","DeliveryTypeEnum","Messenger","react_default","a","createElement","i18n","_","Pickup","ShopAddress","ShopCloseAlert","status","_useShopStatus","useShopStatus","decision","closingIn","reactstrap_es","className","_lingui_react","id","ShopIntroStyled","styled","div","withConfig","displayName","componentId","ShopIntro","intro","data-testid","headerText","LogoLink","url","children","href","react_router_dom","to","LogoContainerStyled","ShopLogo","props","ShopLogo_LogoLink","BackgroundThemed","imageName","size","ShopOpeningHoursContainer","Container","ShopOpeningHoursTimes","ShopOpeningHoursStatus","ShopOpeningHoursIcon","ShopOpeningHours","branch","openingHours","businessHours","filter","RM","propEq","fluid","length","map","businessHour","idx","key","concat","formatTime","openAt","closeAt","ShopStatusDisplay","deliveryTime","defaultDeliveryTime","pickupTime","defaultPickupTime","StickerThemed","theme","primary","IconStyled","span","Sticker","_ref2","_ref2$success","success","classNames","order-method-unselected","order-method-selected","ShopHeaderStyled","ShopHeaderInfoStyled","ShopHeader","isLoading","ShopHeaderIcons","ColStyle","Fragment","ShopLogo_ShopLogo","homepageUrl","react_router","exact","path","render","Sticker_Sticker","ShopIntro_ShopIntro","ShopClosingTimeModal","OrderAddress_OrderAddress","ShopOpeningHours_ShopOpeningHours","ShopCloseAlert_ShopCloseAlert","ShopHeaderQuery","gql","_templateObject","FAddressFragmentDoc","FCompanyBranchStatusFragmentDoc","FShopOpeningHoursFragmentDoc","QueryShopHeader","buildQuery","ShopHeaderView","business","variables","Object","objectSpread","brandOrBranch","branchId","skip","isValid","renderLoading","loading","ShopHeader_ShopHeader","FinishView","objectDestructuringEmpty","shop_ShopHeaderView","FinishViewLoader","result","FinishViewOrder","FinishViewSupport","companyBranch","FinishViewFooter","finish","PickupMapHeaderStyled","tertiaryText","PickupMapBranch","_ref3","onConfirm","shopStatus","name","Buttons","color","disabled","pickupEnabled","onClick","_ref4","openingIn","values","toLocaleUpperCase","getButtonText","mapByOrderMethod","_mapByOrderMethod","defineProperty","createFactory","DeliveryMap","_useState","useState","_useState2","slicedToArray","activeBranch","setActiveBranch","useDisposable","when","useEffect","prefetchFoodMenu","onConfirmPickup","useCallback","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","setBranch","createPickupOrder","stop","this","_x","apply","arguments","renderSite","lib","position","gpsToLatLng","gps","onCloseClick","defaultOptions","maxWidth","PickupMapBranch_PickupMapBranch","isBrand","PickupMap_graphql","brandId","branches","find","MapPanning","OrderMap","BaseMap","model","MapView","history","useRouterContext","OrderMethod","OrderMap_OrderMap","push","OrderPaymentButton","method","objectWithoutProperties","es","field","fieldApi","assign","selected","value","setValue","Checkmark","show","OrderPaymentMethod","OrderPaymentButton_OrderPaymentButton","PaymentGateEnum","Gopay","Cash","OrderForm","orderModel","OrderFormSetup","form","OrderFormAutoFill","onFill","setAllValues","OrderFormInputs","OrderPaymentMethod_OrderPaymentMethod","OrderAgreements","OrderSubmitLine","submitForm","canSubmit","isVamInitialized","OrderFormView","orderId","data","useQuery","OrderFormQuery","suspend","countWares","OrderForm_OrderForm","OrderGoPayModal","OrderErrorModal","OrderTimePicker","ShopOverview","hasOrder","ThemeSwitchProvider","FoodMenuView","CartView","OrderFormView_OrderFormView","OrderFormStorageNotice","DesktopApp","useReleaseCabinet","version","date","alert","formatDateTime","component"],"mappings":"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","file":"static/js/12.d5d79fce.chunk.js","sourcesContent":["import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { useRoot } from '../../common/WithRoot'\nimport { DeliveryTypeEnum } from '../../graph/generated'\nimport { GShopHeader } from '../../graph/types'\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  address: GShopHeader.Address\n}\n\nexport const OrderAddress: React.FC<IProps> = ({ address }) => {\n  const { order, location } = useRoot()\n  return useObserver(() => {\n    switch (order.orderMethod) {\n      case DeliveryTypeEnum.Messenger:\n        return (\n          <span>\n            {i18n.t`Order to address`}: <b>{location.address}</b>\n          </span>\n        )\n      case DeliveryTypeEnum.Pickup:\n        return (\n          <span>\n            {i18n.t`Pickup at address`}:{' '}\n            <b>\n              <ShopAddress address={address} />\n            </b>\n          </span>\n        )\n      default:\n        return null\n    }\n  })\n}\n","import './ShopCloseAlert.css'\n\nimport { Plural, Trans } from '@lingui/macro'\nimport React from 'react'\nimport { Alert } from 'reactstrap'\n\nimport { FCompanyBranchStatus } from '../../graph/types'\nimport { useShopStatus } from '../../hooks/useShopStatus'\n\ninterface IProps {\n  status: FCompanyBranchStatus.Fragment\n}\n\nexport const ShopCloseAlert: React.FC<IProps> = ({ status }) => {\n  const { decision, closingIn } = useShopStatus({\n    status,\n  })\n  if (decision === 'ClosingSoon') {\n    return (\n      <Alert className=\"shop__header__alert\">\n        <Trans>\n          Beware! We are\n          <Plural\n            value={closingIn}\n            one=\"closing in 1 minute\"\n            other=\"closing in # minutes\"\n          />\n          . Finish your order quickly.\n        </Trans>\n      </Alert>\n    )\n  }\n  return null\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { GShopHeader } from '../../graph/types'\n\ninterface IProps {\n  intro?: Maybe<GShopHeader.Intro>\n}\n\nconst ShopIntroStyled = styled.div`\n  margin: 0.8rem 1rem 1rem 1.3rem;\n`\n\nexport const ShopIntro: React.FC<IProps> = ({ intro }) => (\n  <ShopIntroStyled data-testid=\"headerText\">\n    {intro ? intro.headerText : ''}\n  </ShopIntroStyled>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { BackgroundThemed } from '../../common/BackgroundThemed'\n\ninterface IProps {\n  url: Maybe<string>\n}\n\nconst LogoLink: React.FC<IProps> = ({ url, children }) =>\n  url ? <a href={url}>{children}</a> : <Link to=\"/\">{children}</Link>\n\nconst LogoContainerStyled = styled.div`\n  height: 200px;\n  width: 400px;\n  flex: 0 0 400px;\n  & .shop__header__logo {\n    height: 100%;\n  }\n`\n\nexport const ShopLogo: React.FC<IProps> = props => (\n  <LogoContainerStyled>\n    <LogoLink {...props}>\n      <BackgroundThemed\n        className=\"shop__header__logo\"\n        imageName=\"storeLogo\"\n        size=\"cover\"\n      />\n    </LogoLink>\n  </LogoContainerStyled>\n)\n","import React from 'react'\nimport { Container } from 'reactstrap'\nimport styled from 'styled-components'\n\nimport { FShopOpeningHours } from '../../graph/types'\nimport { formatTime } from '../../helpers/formats'\nimport { RM } from '../../helpers/ramda'\nimport { ShopStatusDisplay } from './ShopStatusDisplay'\n\ninterface IProps {\n  branch: FShopOpeningHours.Fragment\n}\n\nconst ShopOpeningHoursContainer = styled(Container)`\n  margin: 0.4rem 0 0 0.1rem;\n  display: flex;\n`\n\nconst ShopOpeningHoursTimes = styled.div`\n  padding-left: 2rem;\n`\n\nconst ShopOpeningHoursStatus = styled.div`\n  padding-left: 2rem;\n`\n\nconst ShopOpeningHoursIcon = styled.div`\n  margin: -0.2rem 0 0 -1rem;\n  position: absolute;\n`\n\nexport const ShopOpeningHours: React.FC<IProps> = ({ branch }) => {\n  const openingHours = branch.businessHours.filter(RM.propEq('closed', false))\n  return (\n    <ShopOpeningHoursContainer fluid={true}>\n      <ShopOpeningHoursIcon className=\"flaticon-clock\" />\n      {openingHours.length > 0 && (\n        <ShopOpeningHoursTimes>\n          {openingHours.map((businessHour, idx) => (\n            <div data-testid=\"openingHours\" key={idx}>\n              {`${formatTime(businessHour.openAt)} - ${formatTime(\n                businessHour.closeAt,\n              )}`}\n            </div>\n          ))}\n        </ShopOpeningHoursTimes>\n      )}\n      <ShopOpeningHoursStatus>\n        <ShopStatusDisplay\n          status={branch}\n          deliveryTime={branch.defaultDeliveryTime}\n          pickupTime={branch.defaultPickupTime}\n        />\n      </ShopOpeningHoursStatus>\n    </ShopOpeningHoursContainer>\n  )\n}\n","import classNames from 'classnames'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst StickerThemed = styled.div`\n  background: ${({ theme }) => theme.primary};\n  color: white;\n  margin-top: 1rem;\n  padding: 0;\n  border-radius: 0 0.7rem 0.7rem 0;\n  white-space: nowrap;\n  flex: none;\n\n  & p {\n    display: inline-block;\n    margin: 0.6rem 1rem 0 0;\n    vertical-align: top;\n    white-space: nowrap;\n  }\n`\n\nconst IconStyled = styled.span`\n  margin: 0.5rem 1rem 0 0.1rem;\n  &:before,\n  :after {\n    font-size: 1.8rem;\n    margin: 0 0 0 1rem;\n  }\n`\n\ninterface IProps {\n  success?: boolean\n}\n\nexport const Sticker: React.FC<IProps> = ({ success = false, children }) => (\n  <StickerThemed\n    className={classNames('right__sticker', {\n      'order-method-unselected': !success,\n      'order-method-selected': success,\n    })}\n  >\n    <IconStyled className=\"flaticon-transport\" />\n    <p>{children}</p>\n  </StickerThemed>\n)\n","import { Trans } from '@lingui/macro'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\nimport { Row } from 'reactstrap'\nimport styled from 'styled-components'\n\nimport { ColStyle } from '../../common/ColStyle'\nimport { GShopHeader } from '../../graph/types'\nimport { OrderAddress } from './OrderAddress'\nimport { ShopCloseAlert } from './ShopCloseAlert'\nimport { ShopClosingTimeModal } from './ShopClosingTimeModal'\nimport { ShopHeaderIcons } from './ShopHeaderIcons'\nimport { ShopIntro } from './ShopIntro'\nimport { ShopLogo } from './ShopLogo'\nimport { ShopOpeningHours } from './ShopOpeningHours'\nimport { Sticker } from './Sticker'\n\ninterface IProps {\n  branch?: GShopHeader.Branch\n  intro?: GShopHeader.Intro\n  isLoading: boolean\n}\n\nconst ShopHeaderStyled = styled.div`\n  display: flex;\n  min-height: 200px;\n`\n\nconst ShopHeaderInfoStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`\n\nexport const ShopHeader: React.FC<IProps> = ({ branch, intro, isLoading }) => (\n  <div>\n    <Row className=\"justify-content-md-center\">\n      <ShopHeaderIcons />\n    </Row>\n\n    <Row className=\"row-white justify-content-md-center\">\n      <ColStyle>\n        <ShopHeaderStyled data-testid=\"shopHeader\">\n          {isLoading || !branch ? null : (\n            <>\n              <ShopLogo url={intro ? intro.homepageUrl : null} />\n\n              <ShopHeaderInfoStyled>\n                <Route\n                  exact={true}\n                  path=\"/\"\n                  render={() => (\n                    <>\n                      <Sticker>\n                        <Trans>Choose your delivery option below</Trans>\n                      </Sticker>\n                      <ShopIntro intro={intro} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/order\"\n                  render={() => (\n                    <>\n                      <ShopClosingTimeModal status={branch} />\n                      <Sticker success={true}>\n                        <OrderAddress address={branch.address} />\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro intro={intro} />\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/finish\"\n                  render={() => (\n                    <>\n                      <Sticker success={true}>\n                        <Trans>Order was send</Trans>\n                      </Sticker>\n                      <ShopOpeningHours branch={branch} />\n                      <ShopIntro intro={intro} />\n                    </>\n                  )}\n                />\n              </ShopHeaderInfoStyled>\n              <ShopCloseAlert status={branch} />\n            </>\n          )}\n        </ShopHeaderStyled>\n      </ColStyle>\n    </Row>\n  </div>\n)\n","import gql from 'graphql-tag'\n\nimport { buildQuery } from '../../graph'\nimport {\n  FAddressFragmentDoc,\n  FCompanyBranchStatusFragmentDoc,\n  FShopOpeningHoursFragmentDoc,\n} from '../../graph/generated'\nimport { GShopHeader } from '../../graph/types'\n\nexport const ShopHeaderQuery = gql`\n  query GShopHeader($brandId: ID, $branchId: ID!) {\n    branch: companyBranch(id: $branchId) {\n      id\n      address {\n        ...FAddress\n      }\n      ...FShopOpeningHours\n      ...FCompanyBranchStatus\n    }\n    intro: applicationSettings(brand: $brandId, companyBranch: $branchId) {\n      headerText\n      homepageUrl\n    }\n  }\n  ${FAddressFragmentDoc}\n  ${FCompanyBranchStatusFragmentDoc}\n  ${FShopOpeningHoursFragmentDoc}\n`\n\nexport const QueryShopHeader = buildQuery<\n  GShopHeader.Query,\n  GShopHeader.Variables\n>(ShopHeaderQuery)\n","import { useObserver } from 'mobx-react-lite'\nimport React from 'react'\n\nimport { useRoot } from '../../common/WithRoot'\nimport { ShopHeader } from './ShopHeader'\nimport { QueryShopHeader } from './ShopHeader.graphql'\n\nexport const ShopHeaderView: React.FC = () => {\n  const { order, business } = useRoot()\n  return useObserver(() => (\n    <QueryShopHeader\n      // need to use branchId from order first as it reflects branch for which\n      // order is being made and it might have different eg. business hours\n      // then the one obtained through business code\n      variables={{\n        ...business.brandOrBranch,\n        branchId: order.branchId || business.branchId!,\n      }}\n      skip={!business.isValid}\n      renderLoading={false}\n      render={({ branch, intro }, { loading }) => (\n        <ShopHeader branch={branch} intro={intro} isLoading={loading} />\n      )}\n    />\n  ))\n}\n\nexport default ShopHeaderView\n","import './FinishView.css'\n\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../common/ColStyle'\nimport ShopHeaderView from '../shop/ShopHeaderView'\nimport { FinishViewFooter } from './FinishViewFooter'\nimport { FinishViewLoader } from './FinishViewLoader'\nimport { FinishViewOrder } from './FinishViewOrder'\nimport { FinishViewSupport } from './FinishViewSupport'\n\ninterface IProps {}\n\nexport const FinishView: React.FC<IProps> = ({}) => (\n  <>\n    <ShopHeaderView />\n    <Row className=\"justify-content-md-center\">\n      <ColStyle>\n        <div className=\"finish__view\">\n          <FinishViewLoader\n            render={result => (\n              <>\n                <FinishViewOrder order={result.order} />\n                <FinishViewSupport branch={result.companyBranch} />\n                <FinishViewFooter finish={result} />\n              </>\n            )}\n          />\n        </div>\n      </ColStyle>\n    </Row>\n  </>\n)\n","import { Plural, Trans } from '@lingui/macro'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { PrimaryButton } from '../../common/Buttons'\nimport { ShopAddress } from '../../common/ShopAddress'\nimport { GPickupBranch } from '../../graph/types'\nimport { IShopStatus, useShopStatus } from '../../hooks/useShopStatus'\nimport { i18n } from '../../i18n'\n\ninterface IProps {\n  branch: GPickupBranch.Fragment\n  onConfirm(): void\n}\n\nconst PickupMapHeaderStyled = styled.div`\n  background-color: ${({ theme }) => theme.primary};\n  color: ${({ theme }) => theme.tertiaryText};\n  text-align: center;\n  padding: 0.4rem 0.2rem 0.2rem 0.2rem;\n  height: 2rem;\n  vertical-align: middle;\n`\n\nexport const PickupMapBranch: React.FC<IProps> = ({ branch, onConfirm }) => {\n  const shopStatus = useShopStatus({\n    status: branch,\n  })\n  return (\n    <div className=\"pickup__map\">\n      <PickupMapHeaderStyled className=\"pickup__map__header\">\n        {branch.name}\n      </PickupMapHeaderStyled>\n      <div className=\"pickup__map__info\">\n        <ShopAddress address={branch.address} />\n      </div>\n      <PrimaryButton\n        color=\"primary\"\n        data-testid=\"submitPickupBranch\"\n        disabled={!branch.pickupEnabled}\n        onClick={onConfirm}\n      >\n        {branch.pickupEnabled ? (\n          getButtonText(shopStatus)\n        ) : (\n          <Trans>Delivery only</Trans>\n        )}\n      </PrimaryButton>\n    </div>\n  )\n}\n\nfunction getButtonText({ decision, openingIn, closingIn }: IShopStatus) {\n  switch (decision) {\n    case 'Closed':\n      return <Trans>Closed</Trans>\n    case 'ClosingSoon':\n      return (\n        <Plural\n          value={closingIn}\n          one=\"Closing in 1 minute\"\n          other=\"Closing in # minutes\"\n        />\n      )\n    case 'OpeningSoon':\n      return (\n        <Plural\n          value={openingIn}\n          one=\"Opening in 1 minute\"\n          other=\"Opening in # minutes\"\n        />\n      )\n    default:\n      return i18n.t`Pickup here`.toLocaleUpperCase()\n  }\n}\n","import './PickupMap.css'\n\nimport { when } from 'mobx'\nimport { useDisposable, useObserver } from 'mobx-react-lite'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { InfoWindow, Marker } from 'react-google-maps'\n\nimport { useRoot } from '../../common/WithRoot'\nimport { GPickupBranch } from '../../graph/types'\nimport { gpsToLatLng } from '../../helpers/gps'\nimport { RM } from '../../helpers/ramda'\nimport { MapPanning } from './atoms/MapPanning'\nimport { QueryPickupMapBranch, QueryPickupMapBrand } from './PickupMap.graphql'\nimport { PickupMapBranch } from './PickupMapBranch'\n\ninterface IProps {\n  onConfirm(): void\n}\n\nexport const PickupMap: React.FC<IProps> = ({ onConfirm }) => {\n  const { order, business, map } = useRoot()\n  const [activeBranch, setActiveBranch] = useState<MaybeID>(null)\n\n  useDisposable(() =>\n    when(\n      () => business.branchId !== null && activeBranch === null,\n      () => {\n        setActiveBranch(business.branchId)\n      },\n    ),\n  )\n\n  useEffect(\n    () => {\n      if (activeBranch) {\n        order.prefetchFoodMenu(activeBranch)\n      }\n    },\n    [activeBranch],\n  )\n\n  const onConfirmPickup = useCallback(\n    async (branchId: ID) => {\n      // it's necessary to set asap so correct data are displayed further\n      order.setBranch(branchId)\n      await order.createPickupOrder(branchId)\n      onConfirm()\n    },\n    [onConfirm],\n  )\n\n  const renderSite = (branch: GPickupBranch.Fragment) => (\n    <Marker\n      key={branch.id}\n      position={gpsToLatLng(branch.gps)}\n      onClick={() => setActiveBranch(branch.id)}\n    >\n      {activeBranch === branch.id ? (\n        <InfoWindow\n          onCloseClick={() => setActiveBranch(null)}\n          defaultOptions={{ maxWidth: 200 }}\n        >\n          <PickupMapBranch\n            branch={branch}\n            onConfirm={() => {\n              onConfirmPickup(branch.id)\n            }}\n          />\n        </InfoWindow>\n      ) : null}\n    </Marker>\n  )\n\n  return useObserver(() => {\n    if (business.isBrand) {\n      return (\n        <QueryPickupMapBrand\n          variables={{ brandId: business.brandId! }}\n          renderLoading={false}\n          render={({ branches }) => {\n            const branch =\n              branches && branches.find(RM.propEq('id', business.branchId))\n            return (\n              <>\n                <MapPanning map={map} gps={branch && branch.gps} />\n                {branches && branches.map(renderSite)}\n              </>\n            )\n          }}\n        />\n      )\n    }\n    return (\n      <QueryPickupMapBranch\n        variables={{ branchId: business.branchId! }}\n        renderLoading={false}\n        render={({ branch }) => (\n          <>\n            <MapPanning map={map} gps={branch && branch.gps} />\n            {branch && renderSite(branch)}\n          </>\n        )}\n      />\n    )\n  })\n}\n","import { useObserver } from 'mobx-react-lite'\nimport React, { createFactory } from 'react'\n\nimport { BaseMap } from '../../common/BaseMap'\nimport { useRoot } from '../../common/WithRoot'\nimport { DeliveryTypeEnum } from '../../graph/generated'\nimport { DeliveryMap } from './DeliveryMap'\nimport { PickupMap } from './PickupMap'\n\ninterface IProps {\n  onConfirm(): void\n}\n\nconst mapByOrderMethod = {\n  [DeliveryTypeEnum.Messenger]: createFactory<IProps>(DeliveryMap),\n  [DeliveryTypeEnum.Pickup]: createFactory<IProps>(PickupMap),\n}\n\nexport const OrderMap: React.FC<IProps> = ({ onConfirm }) => {\n  const { order, map } = useRoot()\n  return useObserver(() => (\n    <BaseMap model={map}>\n      {mapByOrderMethod[order.orderMethod]({ onConfirm })}\n    </BaseMap>\n  ))\n}\n","import './MapView.css'\n\nimport { useRouterContext } from '@speedlo/hooks'\nimport React from 'react'\nimport { Row } from 'reactstrap'\n\nimport { ColStyle } from '../../../common/ColStyle'\nimport { OrderMethod } from '../../destination/OrderMethod'\nimport ShopHeaderView from '../../shop/ShopHeaderView'\nimport { OrderMap } from '../OrderMap'\n\nexport const MapView = () => {\n  const { history } = useRouterContext()\n  return (\n    <>\n      <ShopHeaderView />\n      <Row className=\"justify-content-md-center\">\n        <ColStyle>\n          <div className=\"map__view\">\n            <div className=\"map__view__header\">\n              <OrderMethod />\n            </div>\n            <OrderMap onConfirm={() => history.push(`/order`)} />\n          </div>\n        </ColStyle>\n      </Row>\n    </>\n  )\n}\n","import React from 'react'\nimport { Field } from 'react-form'\n\nimport { SelectButtonThemed } from '../../common/Buttons'\nimport { PaymentGateEnum } from '../../graph/types'\n\nexport interface IPaymentButtonProps {\n  method: PaymentGateEnum\n  disabled?: boolean\n}\n\nexport const OrderPaymentButton: React.FC<IPaymentButtonProps> = ({\n  children,\n  disabled,\n  method,\n  ...props\n}) => (\n  <Field\n    field=\"payment\"\n    render={fieldApi => (\n      <SelectButtonThemed\n        disabled={disabled}\n        selected={fieldApi.value === method}\n        onClick={() => {\n          fieldApi.setValue(method)\n        }}\n        {...props}\n      >\n        <Checkmark show={fieldApi.value === method} />\n        {children}\n      </SelectButtonThemed>\n    )}\n  />\n)\n\nfunction Checkmark({ show }: { show: boolean }) {\n  return show ? (\n    <span className=\"flaticon-mark order__payment__method__button__checked\" />\n  ) : (\n    <div className=\"order__payment__method__button__unchecked\" />\n  )\n}\n","import './OrderPaymentMethod.css'\n\nimport React from 'react'\n\nimport { PaymentGateEnum } from '../../graph/generated'\nimport { i18n } from '../../i18n'\nimport { OrderPaymentButton } from './OrderPaymentButton'\n\nexport const OrderPaymentMethod: React.FC = () => (\n  <div className=\"order__payment__method\">\n    <OrderPaymentButton\n      method={PaymentGateEnum.Gopay}\n      data-testid=\"orderPaymentMethod__GoPay\"\n    >\n      {i18n.t`Pay by card`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n    <OrderPaymentButton\n      method={PaymentGateEnum.Cash}\n      data-testid=\"orderPaymentMethod__Cash\"\n    >\n      {i18n.t`Pay by cash`.toLocaleUpperCase()}\n    </OrderPaymentButton>\n  </div>\n)\n","import React from 'react'\n\nimport { useRoot } from '../../common/WithRoot'\nimport { OrderAgreements } from './OrderAgreements'\nimport { OrderFormAutoFill } from './OrderFormAutoFill'\nimport { OrderFormInputs } from './OrderFormInputs'\nimport { OrderFormSetup } from './OrderFormSetup'\nimport { OrderPaymentMethod } from './OrderPaymentMethod'\nimport { OrderSubmitLine } from './OrderSubmitLine'\n\nexport const OrderForm: React.FC = () => {\n  const { order: orderModel } = useRoot()\n  return (\n    <OrderFormSetup\n      render={form => (\n        <div className=\"order__form\">\n          <div className=\"order__form__inner\">\n            <OrderFormAutoFill onFill={values => form.setAllValues(values)} />\n            <OrderFormInputs />\n            <OrderPaymentMethod />\n            <OrderAgreements />\n          </div>\n          <OrderSubmitLine\n            onClick={form.submitForm}\n            canSubmit={orderModel.isVamInitialized}\n          />\n        </div>\n      )}\n    />\n  )\n}\n","import './OrderFormView.css'\n\nimport React from 'react'\nimport { useQuery } from 'react-apollo-hooks'\n\nimport { GOrderForm } from '../../graph/types'\nimport { OrderErrorModal } from './OrderErrorModal'\nimport { OrderForm } from './OrderForm'\nimport { OrderFormQuery } from './OrderFormView.graphql'\nimport { OrderGoPayModal } from './OrderGoPayModal'\nimport { OrderTimePicker } from './OrderTimePicker'\n\ninterface IProps {\n  orderId: MaybeID\n}\n\nexport const OrderFormView: React.FC<IProps> = ({ orderId }) => {\n  const { data } = useQuery<GOrderForm.Query, GOrderForm.Variables>(\n    OrderFormQuery,\n    { suspend: false, skip: !orderId, variables: { orderId: orderId! } },\n  )\n\n  if (!data || !data.order || data.order.countWares === 0) {\n    return null\n  }\n\n  return (\n    <>\n      <OrderForm />\n      <OrderGoPayModal />\n      <OrderErrorModal />\n      <OrderTimePicker />\n    </>\n  )\n}\n","import './ShopOverview.css'\n\nimport React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Row } from 'reactstrap'\n\nimport BackgroundThemed from '../../common/BackgroundThemed'\nimport { ColStyleLeft, ColStyleRight } from '../../common/ColStyle'\nimport ThemeSwitchProvider from '../../common/ThemeSwitchProvider'\nimport { useRoot } from '../../common/WithRoot'\nimport { i18n } from '../../i18n'\nimport { CartView } from '../cart/CartView'\nimport { FoodMenuView } from '../foodMenu/FoodMenuView'\nimport { OrderFormStorageNotice } from '../orderForm/OrderFormStorageNotice'\nimport { OrderFormView } from '../orderForm/OrderFormView'\nimport ShopHeaderView from './ShopHeaderView'\n\nexport const ShopOverview: React.FC = () => {\n  const { order: orderModel } = useRoot()\n  if (!orderModel.hasOrder) {\n    return <Redirect to=\"/\" />\n  }\n  return (\n    <ThemeSwitchProvider branchId={orderModel.branchId}>\n      <>\n        <ShopHeaderView />\n        <Row className=\"justify-content-md-center\">\n          <ColStyleLeft>\n            <div className=\"shop__overview__column\">\n              <FoodMenuView />\n            </div>\n          </ColStyleLeft>\n\n          <ColStyleRight>\n            <div className=\"shop__overview__column cart__column\">\n              <div className=\"cart__column__header\">\n                <span className=\"flaticon-cart cart__column__header__icon\" />\n                <h4>{i18n.t`Your order`}</h4>\n              </div>\n\n              <BackgroundThemed\n                className=\"cart__column__cart\"\n                imageName=\"backgroundCart\"\n              >\n                <CartView orderId={orderModel.orderId} />\n              </BackgroundThemed>\n\n              <OrderFormView orderId={orderModel.orderId} />\n            </div>\n          </ColStyleRight>\n          <OrderFormStorageNotice />\n        </Row>\n      </>\n    </ThemeSwitchProvider>\n  )\n}\n","import { useReleaseCabinet } from '@speedlo/tools'\nimport React from 'react'\nimport { Route } from 'react-router-dom'\nimport { Container } from 'reactstrap'\n\nimport { formatDateTime } from '../helpers/formats'\nimport { FinishView } from '../segments/finish/FinishView'\nimport { MapView } from '../segments/map/views/MapView'\nimport { ShopOverview } from '../segments/shop/ShopOverview'\n\nconst DesktopApp = () => {\n  useReleaseCabinet(({ version, date }) => {\n    alert(`verze: ${version}, datum: ${formatDateTime(date)}`)\n  })\n  return (\n    <Container fluid={true}>\n      <Route exact={true} path=\"/\" component={MapView} />\n      <Route path=\"/order\" component={ShopOverview} />\n      <Route path=\"/finish\" component={FinishView} />\n    </Container>\n  )\n}\n\nexport default DesktopApp\n"],"sourceRoot":""}